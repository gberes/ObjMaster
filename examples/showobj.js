// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');

    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
      return func;
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;




// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 21792;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_showobj_cpp() } }, { func: function() { __GLOBAL__sub_I_MtlLib_cpp() } });
  

/* memory initializer */ allocate([0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,196,34,0,0,133,40,0,0,236,34,0,0,164,43,0,0,24,0,0,0,0,0,0,0,236,34,0,0,195,43,0,0,112,0,0,0,0,0,0,0,236,34,0,0,243,43,0,0,104,0,0,0,0,0,0,0,236,34,0,0,0,55,0,0,96,0,0,0,0,0,0,0,196,34,0,0,42,55,0,0,196,34,0,0,60,55,0,0,164,35,0,0,109,55,0,0,0,0,0,0,1,0,0,0,80,0,0,0,3,244,255,255,236,34,0,0,156,55,0,0,24,5,0,0,0,0,0,0,236,34,0,0,182,55,0,0,40,5,0,0,0,0,0,0,236,34,0,0,17,56,0,0,184,0,0,0,0,0,0,0,236,34,0,0,37,56,0,0,8,5,0,0,0,0,0,0,236,34,0,0,59,56,0,0,184,0,0,0,0,0,0,0,164,35,0,0,79,56,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,248,0,0,0,0,0,0,0,164,35,0,0,147,56,0,0,0,0,0,0,1,0,0,0,16,1,0,0,0,0,0,0,196,34,0,0,169,56,0,0,164,35,0,0,232,56,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,56,1,0,0,0,0,0,0,164,35,0,0,44,57,0,0,0,0,0,0,1,0,0,0,16,1,0,0,0,0,0,0,164,35,0,0,66,57,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,112,1,0,0,0,0,0,0,164,35,0,0,134,57,0,0,0,0,0,0,1,0,0,0,136,1,0,0,0,0,0,0,196,34,0,0,156,57,0,0,164,35,0,0,200,57,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,176,1,0,0,0,0,0,0,164,35,0,0,12,58,0,0,0,0,0,0,1,0,0,0,136,1,0,0,0,0,0,0,164,35,0,0,34,58,0,0,0,0,0,0,3,0,0,0,184,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,248,1,0,0,0,8,0,0,196,34,0,0,103,58,0,0,196,34,0,0,122,58,0,0,164,35,0,0,220,59,0,0,0,0,0,0,3,0,0,0,184,0,0,0,2,0,0,0,240,1,0,0,2,0,0,0,40,2,0,0,0,8,0,0,196,34,0,0,33,60,0,0,164,35,0,0,67,60,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,80,2,0,0,0,8,0,0,196,34,0,0,136,60,0,0,164,35,0,0,157,60,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,80,2,0,0,0,8,0,0,164,35,0,0,247,60,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,152,2,0,0,2,0,0,0,196,34,0,0,19,61,0,0,164,35,0,0,40,61,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,152,2,0,0,2,0,0,0,164,35,0,0,68,61,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,152,2,0,0,2,0,0,0,164,35,0,0,96,61,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,152,2,0,0,2,0,0,0,164,35,0,0,124,61,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,32,3,0,0,0,0,0,0,196,34,0,0,194,61,0,0,164,35,0,0,250,61,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,72,3,0,0,0,0,0,0,196,34,0,0,64,62,0,0,164,35,0,0,100,62,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,112,3,0,0,0,0,0,0,196,34,0,0,170,62,0,0,164,35,0,0,201,62,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,152,3,0,0,0,0,0,0,196,34,0,0,15,63,0,0,164,35,0,0,40,63,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,192,3,0,0,2,0,0,0,196,34,0,0,61,63,0,0,164,35,0,0,85,63,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,192,3,0,0,2,0,0,0,236,34,0,0,106,63,0,0,248,3,0,0,0,0,0,0,164,35,0,0,140,63,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,24,4,0,0,2,0,0,0,196,34,0,0,175,63,0,0,236,34,0,0,198,63,0,0,248,3,0,0,0,0,0,0,164,35,0,0,233,63,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,24,4,0,0,2,0,0,0,164,35,0,0,11,64,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,24,4,0,0,2,0,0,0,164,35,0,0,45,64,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,24,4,0,0,2,0,0,0,236,34,0,0,80,64,0,0,184,0,0,0,0,0,0,0,164,35,0,0,102,64,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,192,4,0,0,2,0,0,0,196,34,0,0,120,64,0,0,164,35,0,0,141,64,0,0,0,0,0,0,2,0,0,0,184,0,0,0,2,0,0,0,192,4,0,0,2,0,0,0,236,34,0,0,159,64,0,0,184,0,0,0,0,0,0,0,236,34,0,0,191,64,0,0,184,0,0,0,0,0,0,0,196,34,0,0,219,64,0,0,196,34,0,0,244,64,0,0,236,34,0,0,13,65,0,0,152,5,0,0,0,0,0,0,236,34,0,0,36,65,0,0,16,5,0,0,0,0,0,0,196,34,0,0,75,66,0,0,236,34,0,0,41,66,0,0,96,5,0,0,0,0,0,0,236,34,0,0,214,65,0,0,64,5,0,0,0,0,0,0,236,34,0,0,251,65,0,0,112,5,0,0,0,0,0,0,196,34,0,0,28,66,0,0,236,34,0,0,67,67,0,0,56,5,0,0,0,0,0,0,236,34,0,0,95,67,0,0,56,5,0,0,0,0,0,0,236,34,0,0,111,67,0,0,56,5,0,0,0,0,0,0,236,34,0,0,129,67,0,0,136,5,0,0,0,0,0,0,236,34,0,0,146,67,0,0,136,5,0,0,0,0,0,0,236,34,0,0,163,67,0,0,152,5,0,0,0,0,0,0,236,34,0,0,182,67,0,0,56,5,0,0,0,0,0,0,236,34,0,0,244,67,0,0,96,5,0,0,0,0,0,0,236,34,0,0,208,67,0,0,232,5,0,0,0,0,0,0,236,34,0,0,22,68,0,0,64,5,0,0,0,0,0,0,0,0,160,65,0,0,240,65,0,0,0,0,115,39,0,0,22,40,0,0,0,0,0,0,24,0,0,0,1,0,0,0,0,0,128,191,0,0,128,191,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,191,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,36,43,0,0,36,43,0,0,36,43,0,0,36,43,0,0,36,43,0,0,242,41,0,0,36,43,0,0,36,43,0,0,0,0,0,0,32,0,0,0,2,0,0,0,108,0,0,0,0,0,0,0,48,0,0,0,3,0,0,0,4,0,0,0,148,255,255,255,148,255,255,255,48,0,0,0,5,0,0,0,6,0,0,0,216,6,0,0,16,7,0,0,36,7,0,0,236,6,0,0,108,0,0,0,0,0,0,0,112,0,0,0,7,0,0,0,8,0,0,0,148,255,255,255,148,255,255,255,112,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,64,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,112,7,0,0,5,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,27,0,0,0,20,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,7,0,0,5,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,27,0,0,0,28,81,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,7,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,184,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,36,0,0,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0,0,0,0,0,80,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,96,0,0,0,32,0,0,0,33,0,0,0,0,0,0,0,104,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,18,0,0,0,19,0,0,0,41,0,0,0,21,0,0,0,42,0,0,0,23,0,0,0,43,0,0,0,0,0,0,0,136,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,0,0,0,0,152,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,0,0,0,0,168,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,0,0,0,0,200,0,0,0,60,0,0,0,61,0,0,0,56,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,0,0,0,0,216,0,0,0,65,0,0,0,66,0,0,0,56,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,0,0,0,0,24,1,0,0,78,0,0,0,79,0,0,0,56,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,0,0,0,0,80,1,0,0,91,0,0,0,92,0,0,0,56,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,0,0,0,0,144,1,0,0,101,0,0,0,102,0,0,0,56,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,0,0,0,0,200,1,0,0,111,0,0,0,112,0,0,0,56,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,248,255,255,255,200,1,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,0,0,0,0,0,2,0,0,127,0,0,0,128,0,0,0,56,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,248,255,255,255,0,2,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,48,2,0,0,143,0,0,0,144,0,0,0,56,0,0,0,145,0,0,0,0,0,0,0,88,2,0,0,146,0,0,0,147,0,0,0,56,0,0,0,148,0,0,0,0,0,0,0,120,2,0,0,149,0,0,0,150,0,0,0,56,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,0,0,0,0,160,2,0,0,160,0,0,0,161,0,0,0,56,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,0,0,0,0,192,2,0,0,171,0,0,0,172,0,0,0,56,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,0,0,0,0,224,2,0,0,182,0,0,0,183,0,0,0,56,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,0,0,0,0,0,3,0,0,193,0,0,0,194,0,0,0,56,0,0,0,195,0,0,0,196,0,0,0,0,0,0,0,40,3,0,0,197,0,0,0,198,0,0,0,56,0,0,0,199,0,0,0,200,0,0,0,0,0,0,0,80,3,0,0,201,0,0,0,202,0,0,0,56,0,0,0,203,0,0,0,204,0,0,0,0,0,0,0,120,3,0,0,205,0,0,0,206,0,0,0,56,0,0,0,207,0,0,0,208,0,0,0,0,0,0,0,160,3,0,0,209,0,0,0,210,0,0,0,56,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,0,0,0,0,200,3,0,0,214,0,0,0,215,0,0,0,56,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,0,0,0,0,232,3,0,0,219,0,0,0,220,0,0,0,56,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,0,0,0,0,32,4,0,0,219,0,0,0,228,0,0,0,56,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,0,0,0,0,80,4,0,0,229,0,0,0,230,0,0,0,56,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,0,0,0,0,144,4,0,0,238,0,0,0,239,0,0,0,56,0,0,0,0,0,0,0,160,4,0,0,240,0,0,0,241,0,0,0,56,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,0,0,0,0,232,4,0,0,250,0,0,0,251,0,0,0,56,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,0,0,0,0,248,4,0,0,1,1,0,0,2,1,0,0,56,0,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,184,0,0,0,219,0,0,0,8,1,0,0,56,0,0,0,0,0,0,0,200,4,0,0,219,0,0,0,9,1,0,0,56,0,0,0,10,1,0,0,11,1,0,0,12,1,0,0,13,1,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,0,0,0,0,48,4,0,0,219,0,0,0,22,1,0,0,56,0,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,0,0,0,0,112,4,0,0,219,0,0,0,30,1,0,0,56,0,0,0,31,1,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,0,0,0,0,248,3,0,0,219,0,0,0,38,1,0,0,56,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,0,0,0,0,24,5,0,0,39,1,0,0,40,1,0,0,46,0,0,0,41,1,0,0,0,0,0,0,64,5,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,0,0,0,0,80,5,0,0,42,1,0,0,50,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,51,1,0,0,52,1,0,0,53,1,0,0,88,66,0,0,0,0,0,0,120,5,0,0,54,1,0,0,55,1,0,0,56,1,0,0,0,0,0,0,136,5,0,0,57,1,0,0,58,1,0,0,59,1,0,0,0,0,0,0,152,5,0,0,60,1,0,0,61,1,0,0,46,0,0,0,0,0,0,0,168,5,0,0,57,1,0,0,62,1,0,0,59,1,0,0,0,0,0,0,184,5,0,0,57,1,0,0,63,1,0,0,59,1,0,0,0,0,0,0,200,5,0,0,60,1,0,0,64,1,0,0,46,0,0,0,0,0,0,0,216,5,0,0,65,1,0,0,66,1,0,0,67,1,0,0,0,0,0,0,8,6,0,0,42,1,0,0,68,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,69,1,0,0,70,1,0,0,71,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,104,111,119,111,98,106,0,37,100,32,102,114,97,109,101,115,32,105,110,32,37,51,46,49,102,32,115,101,99,111,110,100,115,32,61,32,37,54,46,51,102,32,70,80,83,10,0,118,101,114,116,101,120,32,115,104,97,100,101,114,32,105,110,102,111,58,32,37,115,10,0,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,32,105,110,102,111,58,32,37,115,10,0,112,111,115,0,99,111,108,111,114,0,105,110,102,111,58,32,37,115,10,0,77,111,100,101,108,86,105,101,119,80,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,0,46,47,109,111,100,101,108,115,47,0,114,101,100,95,99,108,111,116,104,101,115,95,108,97,100,121,46,111,98,106,0,117,110,105,102,111,114,109,32,109,97,116,52,32,77,111,100,101,108,86,105,101,119,80,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,112,111,115,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,99,111,108,111,114,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,118,95,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,112,111,115,59,10,32,32,32,118,95,99,111,108,111], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([114,32,61,32,99,111,108,111,114,59,10,125,10,0,35,105,102,100,101,102,32,71,76,95,69,83,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,10,35,101,110,100,105,102,10,118,97,114,121,105,110,103,32,118,101,99,52,32,118,95,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,95,99,111,108,111,114,59,10,125,10,0,49,50,65,115,115,101,116,76,105,98,114,97,114,121,0,79,112,101,110,105,110,103,32,105,110,112,117,116,32,115,116,114,101,97,109,32,102,111,114,32,37,115,37,115,0,73,110,105,116,105,97,108,105,122,105,110,103,32,100,97,116,97,32,118,101,99,116,111,114,115,32,40,101,120,112,101,99,116,101,100,86,101,114,116,101,120,68,97,116,97,78,117,109,58,37,100,44,32,101,120,112,101,99,116,101,100,70,97,99,101,78,117,109,58,37,100,41,0,82,101,97,100,105,110,103,32,111,98,106,32,100,97,116,97,32,102,105,108,101,32,108,105,110,101,45,98,121,45,108,105,110,101,0,117,115,101,109,116,108,0,58,0,67,97,110,110,111,116,32,112,97,114,115,101,32,108,105,110,101,58,32,37,115,0,70,105,110,105,115,104,101,100,32,108,111,97,100,105,110,103,32,111,102,32,79,98,106,32,100,97,116,97,46,0,32,45,32,82,101,97,100,32,118,101,114,116,105,99,101,115,58,32,37,100,0,32,45,32,82,101,97,100,32,118,101,114,116,101,120,45,116,101,120,116,117,114,101,115,58,32,37,100,0,32,45,32,82,101,97,100,32,118,101,114,116,101,120,45,110,111,114,109,97,108,115,58,32,37,100,0,32,45,32,82,101,97,100,32,102,97,99,101,115,58,32,37,100,0,32,45,32,82,101,97,100,32,109,97,116,101,114,105,97,108,115,58,32,37,100,0,32,45,32,82,101,97,100,32,111,98,106,101,99,116,47,109,97,116,101,114,105,97,108,32,103,114,111,117,112,115,58,32,37,100,0,47,0,32,45,32,70,111,117,110,100,32,97,32,102,97,99,101,32,116,104,97,116,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,51,32,118,101,114,116,105,99,101,115,32,45,32,115,107,105,112,112,105,110,103,32,102,97,99,101,33,0,32,45,32,78,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,97,102,116,101,114,32,99,111,110,118,101,114,115,105,111,110,58,32,37,100,0,32,45,32,78,117,109,98,101,114,32,111,102,32,105,110,100,105,99,101,115,32,97,102,116,101,114,32,99,111,110,118,101,114,115,105,111,110,58,32,37,100,0,32,45,32,77,97,120,105,109,117,109,32,105,110,100,101,120,78,111,58,32,37,100,0,80,97,114,115,105,110,103,32,108,105,110,101,58,32,37,115,0,67,111,108,111,114,32,100,101,115,99,114,105,112,116,111,114,32,99,97,110,100,105,100,97,116,101,32,108,105,110,101,58,32,37,115,0,84,101,120,116,117,114,101,32,100,101,115,99,114,105,112,116,111,114,32,99,97,110,100,105,100,97,116,101,32,108,105,110,101,58,32,37,115,0,109,97,112,95,75,97,0,109,97,112,95,75,100,0,109,97,112,95,75,115,0,109,97,112,95,98,117,109,112,0,98,117,109,112,0,109,116,108,108,105,98,0,32,0,79,112,101,110,105,110,103,32,105,110,112,117,116,32,115,116,114,101,97,109,32,102,111,114,32,37,115,47,37,115,0,10,0,82,101,97,100,105,110,103,32,109,116,108,32,100,97,116,97,32,102,105,108,101,32,108,105,110,101,45,98,121,45,108,105,110,101,0,110,101,119,109,116,108,0,65,100,100,101,100,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,109,97,116,101,114,105,97,108,32,116,111,32,116,104,101,32,37,115,32,108,105,98,114,97,114,121,58,32,37,115,0,78,57,79,98,106,77,97,115,116,101,114,49,54,70,105,108,101,65,115,115,101,116,76,105,98,114,97,114,121,69,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,119,0,97,0,114,0,114,43,0,119,43,0,97,43,0,119,98,0,97,98,0,114,98,0,114,43,98,0,119,43,98,0,97,43,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,114,119,97,0,105,110,102,105,110,105,116,121,0,110,97,110,0,80,79,83,73,88,0,95,95,110,101,120,116,95,112,114,105,109,101,32,111,118,101,114,102,108,111,119,0,98,97,115,105,99,95,115,116,114,105,110,103,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,105,111,115,116,114,101,97,109,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,67,0,37,112,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,37,0,0,0,0,0,108,0,108,108,0,76,0,37,112,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,65,77,0,80,77,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,37,73,58,37,77,58,37,83,32,37,112,0,37,109,47,37,100,47,37,121,0,37,72,58,37,77,58,37,83,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,48,49,50,51,52,53,54,55,56,57,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,37,46,48,76,102,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,116,114,117,101,0,102,97,108,115,101,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,118,101,99,116,111,114,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,58,32,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,101,120,99,101,112,116,105,111,110,0,117,110,99,97,117,103,104,116,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,0,83,116,56,98,97,100,95,99,97,115,116,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLUT={initTime:null,idleFunc:null,displayFunc:null,keyboardFunc:null,keyboardUpFunc:null,specialFunc:null,specialUpFunc:null,reshapeFunc:null,motionFunc:null,passiveMotionFunc:null,mouseFunc:null,buttons:0,modifiers:0,initWindowWidth:256,initWindowHeight:256,initDisplayMode:18,windowX:0,windowY:0,windowWidth:0,windowHeight:0,requestedAnimationFrame:false,saveModifiers:function (event) {
        GLUT.modifiers = 0;
        if (event['shiftKey'])
          GLUT.modifiers += 1; /* GLUT_ACTIVE_SHIFT */
        if (event['ctrlKey'])
          GLUT.modifiers += 2; /* GLUT_ACTIVE_CTRL */
        if (event['altKey'])
          GLUT.modifiers += 4; /* GLUT_ACTIVE_ALT */
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
  
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.passiveMotionFunc, [lastX, lastY]);
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.motionFunc, [lastX, lastY]);
        }
      },getSpecialKey:function (keycode) {
          var key = null;
          switch (keycode) {
            case 8:  key = 120 /* backspace */; break;
            case 46: key = 111 /* delete */; break;
  
            case 0x70 /*DOM_VK_F1*/: key = 1 /* GLUT_KEY_F1 */; break;
            case 0x71 /*DOM_VK_F2*/: key = 2 /* GLUT_KEY_F2 */; break;
            case 0x72 /*DOM_VK_F3*/: key = 3 /* GLUT_KEY_F3 */; break;
            case 0x73 /*DOM_VK_F4*/: key = 4 /* GLUT_KEY_F4 */; break;
            case 0x74 /*DOM_VK_F5*/: key = 5 /* GLUT_KEY_F5 */; break;
            case 0x75 /*DOM_VK_F6*/: key = 6 /* GLUT_KEY_F6 */; break;
            case 0x76 /*DOM_VK_F7*/: key = 7 /* GLUT_KEY_F7 */; break;
            case 0x77 /*DOM_VK_F8*/: key = 8 /* GLUT_KEY_F8 */; break;
            case 0x78 /*DOM_VK_F9*/: key = 9 /* GLUT_KEY_F9 */; break;
            case 0x79 /*DOM_VK_F10*/: key = 10 /* GLUT_KEY_F10 */; break;
            case 0x7a /*DOM_VK_F11*/: key = 11 /* GLUT_KEY_F11 */; break;
            case 0x7b /*DOM_VK_F12*/: key = 12 /* GLUT_KEY_F12 */; break;
            case 0x25 /*DOM_VK_LEFT*/: key = 100 /* GLUT_KEY_LEFT */; break;
            case 0x26 /*DOM_VK_UP*/: key = 101 /* GLUT_KEY_UP */; break;
            case 0x27 /*DOM_VK_RIGHT*/: key = 102 /* GLUT_KEY_RIGHT */; break;
            case 0x28 /*DOM_VK_DOWN*/: key = 103 /* GLUT_KEY_DOWN */; break;
            case 0x21 /*DOM_VK_PAGE_UP*/: key = 104 /* GLUT_KEY_PAGE_UP */; break;
            case 0x22 /*DOM_VK_PAGE_DOWN*/: key = 105 /* GLUT_KEY_PAGE_DOWN */; break;
            case 0x24 /*DOM_VK_HOME*/: key = 106 /* GLUT_KEY_HOME */; break;
            case 0x23 /*DOM_VK_END*/: key = 107 /* GLUT_KEY_END */; break;
            case 0x2d /*DOM_VK_INSERT*/: key = 108 /* GLUT_KEY_INSERT */; break;
  
            case 16   /*DOM_VK_SHIFT*/:
            case 0x05 /*DOM_VK_LEFT_SHIFT*/:
              key = 112 /* GLUT_KEY_SHIFT_L */;
              break;
            case 0x06 /*DOM_VK_RIGHT_SHIFT*/:
              key = 113 /* GLUT_KEY_SHIFT_R */;
              break;
  
            case 17   /*DOM_VK_CONTROL*/:
            case 0x03 /*DOM_VK_LEFT_CONTROL*/:
              key = 114 /* GLUT_KEY_CONTROL_L */;
              break;
            case 0x04 /*DOM_VK_RIGHT_CONTROL*/:
              key = 115 /* GLUT_KEY_CONTROL_R */;
              break;
  
            case 18   /*DOM_VK_ALT*/:
            case 0x02 /*DOM_VK_LEFT_ALT*/:
              key = 116 /* GLUT_KEY_ALT_L */;
              break;
            case 0x01 /*DOM_VK_RIGHT_ALT*/:
              key = 117 /* GLUT_KEY_ALT_R */;
              break;
          };
          return key;
      },getASCIIKey:function (event) {
        if (event['ctrlKey'] || event['altKey'] || event['metaKey']) return null;
  
        var keycode = event['keyCode'];
  
        /* The exact list is soooo hard to find in a canonical place! */
  
        if (48 <= keycode && keycode <= 57)
          return keycode; // numeric  TODO handle shift?
        if (65 <= keycode && keycode <= 90)
          return event['shiftKey'] ? keycode : keycode + 32;
        if (96 <= keycode && keycode <= 105)
          return keycode - 48; // numpad numbers    
        if (106 <= keycode && keycode <= 111)
          return keycode - 106 + 42; // *,+-./  TODO handle shift?
  
        switch (keycode) {
          case 9:  // tab key
          case 13: // return key
          case 27: // escape
          case 32: // space
          case 61: // equal
            return keycode;
        }
  
        var s = event['shiftKey'];
        switch (keycode) {
          case 186: return s ? 58 : 59; // colon / semi-colon
          case 187: return s ? 43 : 61; // add / equal (these two may be wrong)
          case 188: return s ? 60 : 44; // less-than / comma
          case 189: return s ? 95 : 45; // dash
          case 190: return s ? 62 : 46; // greater-than / period
          case 191: return s ? 63 : 47; // forward slash
          case 219: return s ? 123 : 91; // open bracket
          case 220: return s ? 124 : 47; // back slash
          case 221: return s ? 125 : 93; // close braket
          case 222: return s ? 34 : 39; // single quote
        }
  
        return null;
      },onKeydown:function (event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if( GLUT.specialFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onKeyup:function (event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if(GLUT.specialUpFunc) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardUpFunc ) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onMouseButtonDown:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons |= (1 << event['button']);
  
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
          try {
            event.target.setCapture();
          } catch (e) {}
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseButtonUp:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons &= ~(1 << event['button']);
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 1/*GLUT_UP*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseWheel:function (event) {
        Browser.calculateMouseEvent(event);
  
        // cross-browser wheel delta
        var e = window.event || event; // old IE support
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
        var button = 3; // wheel up
        if (delta < 0) {
          button = 4; // wheel down
        }
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [button, 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLUT.windowWidth;
          height = GLUT.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLUT.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
        /* Can't call _glutReshapeWindow as that requests cancelling fullscreen. */
        if (GLUT.reshapeFunc) {
          // console.log("GLUT.reshapeFunc (from FS): " + width + ", " + height);
          Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
        }
        _glutPostRedisplay();
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
                  (function() {});
        CFS.apply(document, []);
      }};function _glutSwapBuffers() {}

  function _pthread_mutex_lock() {}

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glutInitWindowSize(width, height) {
      Browser.setCanvasSize( GLUT.initWindowWidth = width,
                             GLUT.initWindowHeight = height );
    }

  function _glutSpecialFunc(func) {
      GLUT.specialFunc = func;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glutCreateWindow(name) {
      var contextAttributes = {
        antialias: ((GLUT.initDisplayMode & 0x0080 /*GLUT_MULTISAMPLE*/) != 0),
        depth: ((GLUT.initDisplayMode & 0x0010 /*GLUT_DEPTH*/) != 0),
        stencil: ((GLUT.initDisplayMode & 0x0020 /*GLUT_STENCIL*/) != 0)
      };
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return Module.ctx ? 1 /* a new GLUT window ID for the created context */ : 0 /* failure */;
    }

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _glutInit(argcp, argv) {
      // Ignore arguments
      GLUT.initTime = Date.now();
  
      var isTouchDevice = 'ontouchstart' in document.documentElement;
  
      window.addEventListener("keydown", GLUT.onKeydown, true);
      window.addEventListener("keyup", GLUT.onKeyup, true);
      if (isTouchDevice) {
        window.addEventListener("touchmove", GLUT.onMousemove, true);
        window.addEventListener("touchstart", GLUT.onMouseButtonDown, true);
        window.addEventListener("touchend", GLUT.onMouseButtonUp, true);
      } else {
        window.addEventListener("mousemove", GLUT.onMousemove, true);
        window.addEventListener("mousedown", GLUT.onMouseButtonDown, true);
        window.addEventListener("mouseup", GLUT.onMouseButtonUp, true);
        // IE9, Chrome, Safari, Opera
        window.addEventListener("mousewheel", GLUT.onMouseWheel, true);
        // Firefox
        window.addEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
      }
  
      Browser.resizeListeners.push(function(width, height) {
        if (GLUT.reshapeFunc) {
        	Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
        }
      });
  
      __ATEXIT__.push(function() {
        window.removeEventListener("keydown", GLUT.onKeydown, true);
        window.removeEventListener("keyup", GLUT.onKeyup, true);
        if (isTouchDevice) {
          window.removeEventListener("touchmove", GLUT.onMousemove, true);
          window.removeEventListener("touchstart", GLUT.onMouseButtonDown, true);
          window.removeEventListener("touchend", GLUT.onMouseButtonUp, true);
        } else {
          window.removeEventListener("mousemove", GLUT.onMousemove, true);
          window.removeEventListener("mousedown", GLUT.onMouseButtonDown, true);
          window.removeEventListener("mouseup", GLUT.onMouseButtonUp, true);
          // IE9, Chrome, Safari, Opera
          window.removeEventListener("mousewheel", GLUT.onMouseWheel, true);
          // Firefox
          window.removeEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
        }
        Module["canvas"].width = Module["canvas"].height = 1;
      });
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___cxa_guard_abort() {}

  function ___gxx_personality_v0() {
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }


  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }


  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function ___lock() {}

  function ___unlock() {}

  function _glutIdleFunc(func) {
      function callback() {
        if (GLUT.idleFunc) {
          Runtime.dynCall('v', GLUT.idleFunc);
          Browser.safeSetTimeout(callback, 4); // HTML spec specifies a 4ms minimum delay on the main thread; workers might get more, but we standardize here
        }
      }
      if (!GLUT.idleFunc) {
        Browser.safeSetTimeout(callback, 0);
      }
      GLUT.idleFunc = func;
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  
  function _glutPostRedisplay() {
      if (GLUT.displayFunc && !GLUT.requestedAnimationFrame) {
        GLUT.requestedAnimationFrame = true;
        Browser.requestAnimationFrame(function() {
          GLUT.requestedAnimationFrame = false;
          Browser.mainLoop.runIter(function() {
            Runtime.dynCall('v', GLUT.displayFunc);
          });
        });
      }
    }function _glutFullScreen() {
      GLUT.windowX = 0; // TODO
      GLUT.windowY = 0; // TODO
      GLUT.windowWidth  = Module['canvas'].width;
      GLUT.windowHeight = Module['canvas'].height;
      document.addEventListener('fullscreenchange', GLUT.onFullScreenEventChange, true);
      document.addEventListener('mozfullscreenchange', GLUT.onFullScreenEventChange, true);
      document.addEventListener('webkitfullscreenchange', GLUT.onFullScreenEventChange, true);
      GLUT.requestFullScreen();
    }

  function _glutDisplayFunc(func) {
      GLUT.displayFunc = func;
    }


  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glutInitDisplayMode(mode) {
      GLUT.initDisplayMode = mode;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  var _llvm_ctlz_i32=true;

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function ___cxa_guard_release() {}

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glutGet(type) {
      switch (type) {
        case 100: /* GLUT_WINDOW_X */
          return 0; /* TODO */
        case 101: /* GLUT_WINDOW_Y */
          return 0; /* TODO */
        case 102: /* GLUT_WINDOW_WIDTH */
          return Module['canvas'].width;
        case 103: /* GLUT_WINDOW_HEIGHT */
          return Module['canvas'].height;
        case 200: /* GLUT_SCREEN_WIDTH */
          return Module['canvas'].width;
        case 201: /* GLUT_SCREEN_HEIGHT */
          return Module['canvas'].height;
        case 500: /* GLUT_INIT_WINDOW_X */
          return 0; /* TODO */
        case 501: /* GLUT_INIT_WINDOW_Y */
          return 0; /* TODO */
        case 502: /* GLUT_INIT_WINDOW_WIDTH */
          return GLUT.initWindowWidth;
        case 503: /* GLUT_INIT_WINDOW_HEIGHT */
          return GLUT.initWindowHeight;
        case 700: /* GLUT_ELAPSED_TIME */
          var now = Date.now();
          return now - GLUT.initTime;
  
        default:
          throw "glutGet(" + type + ") not implemented yet";
      }
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  var _llvm_fabs_f64=Math_abs;

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function _glutReshapeFunc(func) {
      GLUT.reshapeFunc = func;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  function _glutReshapeWindow(width, height) {
      GLUT.cancelFullScreen();
      Browser.setCanvasSize(width, height);
      if (GLUT.reshapeFunc) {
        Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
      }
      _glutPostRedisplay();
    }function _glutMainLoop() {
      _glutReshapeWindow(Module['canvas'].width, Module['canvas'].height);
      _glutPostRedisplay();
      throw 'SimulateInfiniteLoop';
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
var GLctx; GL.init();
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "___syscall221": ___syscall221, "_glUniformMatrix4fv": _glUniformMatrix4fv, "___cxa_guard_acquire": ___cxa_guard_acquire, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "__addDays": __addDays, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_glutReshapeWindow": _glutReshapeWindow, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_glutSwapBuffers": _glutSwapBuffers, "_sysconf": _sysconf, "_glClear": _glClear, "_glGenBuffers": _glGenBuffers, "_pthread_getspecific": _pthread_getspecific, "__isLeapYear": __isLeapYear, "_glutSpecialFunc": _glutSpecialFunc, "_glShaderSource": _glShaderSource, "___cxa_atexit": ___cxa_atexit, "___cxa_rethrow": ___cxa_rethrow, "_llvm_fabs_f64": _llvm_fabs_f64, "_pthread_cleanup_push": _pthread_cleanup_push, "_glutCreateWindow": _glutCreateWindow, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_glVertexAttribPointer": _glVertexAttribPointer, "_glutDisplayFunc": _glutDisplayFunc, "_glutGet": _glutGet, "_glGetProgramInfoLog": _glGetProgramInfoLog, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_glDrawElements": _glDrawElements, "___cxa_guard_release": ___cxa_guard_release, "_glutInitDisplayMode": _glutInitDisplayMode, "_glViewport": _glViewport, "___setErrNo": ___setErrNo, "___resumeException": ___resumeException, "_glutReshapeFunc": _glutReshapeFunc, "_glEnable": _glEnable, "_pthread_once": _pthread_once, "_glAttachShader": _glAttachShader, "_glCreateProgram": _glCreateProgram, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "___cxa_guard_abort": ___cxa_guard_abort, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_end_catch": ___cxa_end_catch, "_glutIdleFunc": _glutIdleFunc, "_glCreateShader": _glCreateShader, "_glutPostRedisplay": _glutPostRedisplay, "_glutInit": _glutInit, "_pthread_key_create": _pthread_key_create, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_glBufferData": _glBufferData, "_glutMainLoop": _glutMainLoop, "___cxa_pure_virtual": ___cxa_pure_virtual, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "___gxx_personality_v0": ___gxx_personality_v0, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "_glLinkProgram": _glLinkProgram, "_strftime_l": _strftime_l, "_glGetUniformLocation": _glGetUniformLocation, "_glutInitWindowSize": _glutInitWindowSize, "_glutFullScreen": _glutFullScreen, "_glBindAttribLocation": _glBindAttribLocation, "__arraySum": __arraySum, "_pthread_self": _pthread_self, "_pthread_mutex_unlock": _pthread_mutex_unlock, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_pthread_setspecific": _pthread_setspecific, "___cxa_throw": ___cxa_throw, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var ___syscall221=env.___syscall221;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var __addDays=env.__addDays;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _glutReshapeWindow=env._glutReshapeWindow;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _glutSwapBuffers=env._glutSwapBuffers;
  var _sysconf=env._sysconf;
  var _glClear=env._glClear;
  var _glGenBuffers=env._glGenBuffers;
  var _pthread_getspecific=env._pthread_getspecific;
  var __isLeapYear=env.__isLeapYear;
  var _glutSpecialFunc=env._glutSpecialFunc;
  var _glShaderSource=env._glShaderSource;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _glutCreateWindow=env._glutCreateWindow;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glutDisplayFunc=env._glutDisplayFunc;
  var _glutGet=env._glutGet;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _glDrawElements=env._glDrawElements;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _glutInitDisplayMode=env._glutInitDisplayMode;
  var _glViewport=env._glViewport;
  var ___setErrNo=env.___setErrNo;
  var ___resumeException=env.___resumeException;
  var _glutReshapeFunc=env._glutReshapeFunc;
  var _glEnable=env._glEnable;
  var _pthread_once=env._pthread_once;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _glutIdleFunc=env._glutIdleFunc;
  var _glCreateShader=env._glCreateShader;
  var _glutPostRedisplay=env._glutPostRedisplay;
  var _glutInit=env._glutInit;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _glBufferData=env._glBufferData;
  var _glutMainLoop=env._glutMainLoop;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var _glLinkProgram=env._glLinkProgram;
  var _strftime_l=env._strftime_l;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glutInitWindowSize=env._glutInitWindowSize;
  var _glutFullScreen=env._glutFullScreen;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var __arraySum=env.__arraySum;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_throw=env.___cxa_throw;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9ObjMaster13ObjMeshObjectC2Ev(18136);
 (___cxa_atexit((328|0),(18136|0),(___dso_handle|0))|0);
 return;
}
function __ZN9ObjMaster13ObjMeshObjectC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 68|0;
 $6 = sp + 56|0;
 $13 = sp + 28|0;
 $16 = sp + 16|0;
 $20 = $this;
 $21 = $20;
 HEAP8[$21>>0] = 0;
 $22 = ((($21)) + 4|0);
 $19 = $22;
 $23 = $19;
 $18 = $23;
 $24 = $18;
 $17 = $24;
 HEAP32[$24>>2] = 0;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($24)) + 8|0);
 $15 = $26;
 HEAP32[$16>>2] = 0;
 $27 = $15;
 $14 = $16;
 $28 = $14;
 $29 = HEAP32[$28>>2]|0;
 $12 = $27;
 HEAP32[$13>>2] = $29;
 $30 = $12;
 $11 = $30;
 $10 = $13;
 $31 = $10;
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($21)) + 16|0);
 $9 = $33;
 $34 = $9;
 $8 = $34;
 $35 = $8;
 $7 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 $5 = $37;
 HEAP32[$6>>2] = 0;
 $38 = $5;
 $4 = $6;
 $39 = $4;
 $40 = HEAP32[$39>>2]|0;
 $2 = $38;
 HEAP32[$3>>2] = $40;
 $41 = $2;
 $1 = $41;
 $0 = $3;
 $42 = $0;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster13ObjMeshObjectD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($2);
 $3 = ((($1)) + 4|0);
 __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEED2Ev($3);
 STACKTOP = sp;return;
}
function __Z11perspectivePfffff($m,$fovy,$aspect,$zNear,$zFar) {
 $m = $m|0;
 $fovy = +$fovy;
 $aspect = +$aspect;
 $zNear = +$zNear;
 $zFar = +$zFar;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $cosine = 0, $cotangent = 0.0, $deltaZ = 0.0, $or$cond = 0, $or$cond3 = 0;
 var $radians = 0.0, $sine = 0, $tmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 40|0;
 $sine = sp + 24|0;
 $cosine = sp + 16|0;
 $0 = $m;
 $1 = $fovy;
 $2 = $aspect;
 $3 = $zNear;
 $4 = $zFar;
 __ZL8identityPf($tmp);
 $5 = $1;
 $6 = $5 / 2.0;
 $7 = $6;
 $8 = $7 * 3.1415926535897931;
 $9 = $8 / 180.0;
 $10 = $9;
 $radians = $10;
 $11 = $4;
 $12 = $3;
 $13 = $11 - $12;
 $14 = $13;
 $deltaZ = $14;
 $15 = $radians;
 $16 = $15;
 __ZL7_sincosdPdS_($16,$sine,$cosine);
 $17 = $deltaZ;
 $18 = $17 == 0.0;
 $19 = +HEAPF64[$sine>>3];
 $20 = $19 == 0.0;
 $or$cond = $18 | $20;
 $21 = $2;
 $22 = $21 == 0.0;
 $or$cond3 = $or$cond | $22;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $23 = +HEAPF64[$cosine>>3];
 $24 = +HEAPF64[$sine>>3];
 $25 = $23 / $24;
 $cotangent = $25;
 $26 = $cotangent;
 $27 = $2;
 $28 = $27;
 $29 = $26 / $28;
 $30 = $29;
 HEAPF32[$tmp>>2] = $30;
 $31 = $cotangent;
 $32 = $31;
 $33 = ((($tmp)) + 20|0);
 HEAPF32[$33>>2] = $32;
 $34 = $4;
 $35 = $3;
 $36 = $34 + $35;
 $37 = -$36;
 $38 = $37;
 $39 = $deltaZ;
 $40 = $38 / $39;
 $41 = $40;
 $42 = ((($tmp)) + 40|0);
 HEAPF32[$42>>2] = $41;
 $43 = ((($tmp)) + 44|0);
 HEAPF32[$43>>2] = -1.0;
 $44 = $3;
 $45 = -2.0 * $44;
 $46 = $4;
 $47 = $45 * $46;
 $48 = $47;
 $49 = $deltaZ;
 $50 = $48 / $49;
 $51 = $50;
 $52 = ((($tmp)) + 56|0);
 HEAPF32[$52>>2] = $51;
 $53 = ((($tmp)) + 60|0);
 HEAPF32[$53>>2] = 0.0;
 $54 = $0;
 dest=$54; src=$tmp; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZL8identityPf($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $t = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = $m;
 dest=$t; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAPF32[$t>>2] = 1.0;
 $1 = ((($t)) + 20|0);
 HEAPF32[$1>>2] = 1.0;
 $2 = ((($t)) + 40|0);
 HEAPF32[$2>>2] = 1.0;
 $3 = ((($t)) + 60|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = $0;
 dest=$4; src=$t; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZL7_sincosdPdS_($a,$s,$c) {
 $a = +$a;
 $s = $s|0;
 $c = $c|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $s;
 $2 = $c;
 $3 = $0;
 $4 = (+Math_sin((+$3)));
 $5 = $1;
 HEAPF64[$5>>3] = $4;
 $6 = $0;
 $7 = (+Math_cos((+$6)));
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $0 = 0;
 HEAP32[$1>>2] = $argc;
 $2 = $argv;
 $3 = $2;
 _glutInit(($1|0),($3|0));
 _glutInitWindowSize(300,300);
 _glutInitDisplayMode(18);
 (_glutCreateWindow((9924|0))|0);
 _glutIdleFunc((329|0));
 _glutReshapeFunc((330|0));
 _glutDisplayFunc((331|0));
 _glutSpecialFunc((332|0));
 __ZL4initv();
 _glutMainLoop();
 STACKTOP = sp;return 0;
}
function __ZL4idlev() {
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $dt = 0.0, $fps = 0.0, $seconds = 0.0, $t = 0.0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $0 = (_glutGet(700)|0);
 $1 = (+($0|0));
 $2 = $1 / 1000.0;
 $t = $2;
 $3 = +HEAPF64[1];
 $4 = $3 < 0.0;
 if ($4) {
  $5 = $t;
  HEAPF64[1] = $5;
 }
 $6 = $t;
 $7 = +HEAPF64[1];
 $8 = $6 - $7;
 $dt = $8;
 $9 = $t;
 HEAPF64[1] = $9;
 _glutPostRedisplay();
 $10 = HEAP32[4541]|0;
 $11 = (($10) + 1)|0;
 HEAP32[4541] = $11;
 $12 = +HEAPF64[2];
 $13 = $12 < 0.0;
 if ($13) {
  $14 = $t;
  HEAPF64[2] = $14;
 }
 $15 = $t;
 $16 = +HEAPF64[2];
 $17 = $15 - $16;
 $18 = $17 >= 5.0;
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $t;
 $20 = +HEAPF64[2];
 $21 = $19 - $20;
 $22 = $21;
 $seconds = $22;
 $23 = HEAP32[4541]|0;
 $24 = (+($23|0));
 $25 = $seconds;
 $26 = $24 / $25;
 $fps = $26;
 $27 = HEAP32[4541]|0;
 $28 = $seconds;
 $29 = $28;
 $30 = $fps;
 $31 = $30;
 HEAP32[$vararg_buffer>>2] = $27;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $29;
 $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
 HEAPF64[$vararg_ptr2>>3] = $31;
 (_printf(9932,$vararg_buffer)|0);
 $32 = $t;
 HEAPF64[2] = $32;
 HEAP32[4541] = 0;
 STACKTOP = sp;return;
}
function __ZL21handleViewportReshapeii($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $width;
 $1 = $height;
 $2 = $0;
 $3 = (+($2|0));
 $4 = $1;
 $5 = (+($4|0));
 $6 = $3 / $5;
 __Z11perspectivePfffff(18168,60.0,$6,1.0,64.0);
 $7 = $0;
 $8 = $1;
 _glViewport(0,0,($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZL8draw_triv() {
 var $0 = 0, $model_view_projection = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $model_view_projection = sp;
 __ZL8identityPf($model_view_projection);
 $0 = HEAP32[4558]|0;
 _glUniformMatrix4fv(($0|0),1,0,($model_view_projection|0));
 _glClear(16640);
 _glEnableVertexAttribArray(0);
 _glEnableVertexAttribArray(1);
 _glDrawElements(4,6,5125,(0|0));
 _glDisableVertexAttribArray(0);
 _glDisableVertexAttribArray(1);
 _glutSwapBuffers();
 STACKTOP = sp;return;
}
function __ZL23handleSpecialGlutEventsiii($special,$crap,$morecrap) {
 $special = $special|0;
 $crap = $crap|0;
 $morecrap = $morecrap|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $special;
 $1 = $crap;
 $2 = $morecrap;
 $3 = $0;
 switch ($3|0) {
 case 100:  {
  $4 = +HEAPF32[(1564)>>2];
  $5 = $4;
  $6 = $5 + 5.0;
  $7 = $6;
  HEAPF32[(1564)>>2] = $7;
  break;
 }
 case 102:  {
  $8 = +HEAPF32[(1564)>>2];
  $9 = $8;
  $10 = $9 - 5.0;
  $11 = $10;
  HEAPF32[(1564)>>2] = $11;
  break;
 }
 case 101:  {
  $12 = +HEAPF32[390];
  $13 = $12;
  $14 = $13 + 5.0;
  $15 = $14;
  HEAPF32[390] = $15;
  break;
 }
 case 103:  {
  $16 = +HEAPF32[390];
  $17 = $16;
  $18 = $17 - 5.0;
  $19 = $18;
  HEAPF32[390] = $19;
  break;
 }
 case 11:  {
  _glutFullScreen();
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __ZL4initv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, $msg = 0, $obj = 0, $p = 0;
 var $program = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $p = sp + 160|0;
 $msg = sp + 176|0;
 $obj = sp + 60|0;
 $0 = sp + 56|0;
 $1 = sp + 28|0;
 _glEnable(2929);
 $4 = HEAP32[393]|0;
 HEAP32[$p>>2] = $4;
 $5 = (_glCreateShader(35633)|0);
 $v = $5;
 $6 = $v;
 _glShaderSource(($6|0),1,($p|0),(0|0));
 $7 = $v;
 _glCompileShader(($7|0));
 $8 = $v;
 _glGetShaderInfoLog(($8|0),512,(0|0),($msg|0));
 HEAP32[$vararg_buffer>>2] = $msg;
 (_printf(9972,$vararg_buffer)|0);
 $9 = HEAP32[394]|0;
 HEAP32[$p>>2] = $9;
 $10 = (_glCreateShader(35632)|0);
 $f = $10;
 $11 = $f;
 _glShaderSource(($11|0),1,($p|0),(0|0));
 $12 = $f;
 _glCompileShader(($12|0));
 $13 = $f;
 _glGetShaderInfoLog(($13|0),512,(0|0),($msg|0));
 HEAP32[$vararg_buffer1>>2] = $msg;
 (_printf(9996,$vararg_buffer1)|0);
 $14 = (_glCreateProgram()|0);
 $program = $14;
 $15 = $program;
 $16 = $v;
 _glAttachShader(($15|0),($16|0));
 $17 = $program;
 $18 = $f;
 _glAttachShader(($17|0),($18|0));
 $19 = $program;
 _glBindAttribLocation(($19|0),0,(10022|0));
 $20 = $program;
 _glBindAttribLocation(($20|0),1,(10026|0));
 $21 = $program;
 _glLinkProgram(($21|0));
 $22 = $program;
 _glGetProgramInfoLog(($22|0),512,(0|0),($msg|0));
 HEAP32[$vararg_buffer4>>2] = $msg;
 (_printf(10032,$vararg_buffer4)|0);
 $23 = $program;
 _glUseProgram(($23|0));
 $24 = $program;
 $25 = (_glGetUniformLocation(($24|0),(10042|0))|0);
 HEAP32[4558] = $25;
 $26 = HEAP8[18136]|0;
 $27 = $26&1;
 if ($27) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$0>>2]=0|0;
 __ZN9ObjMaster16FileAssetLibraryC2Ev($0);
 __ZN9ObjMaster3ObjC2ERK12AssetLibraryPKcS5_($obj,$0,10068,10078);
 __THREW__ = 0;
 invoke_vii(333,($1|0),($obj|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  $2 = $32;
  $3 = $33;
  __ZN9ObjMaster3ObjD2Ev($obj);
  $34 = $2;
  $35 = $3;
  ___resumeException($34|0);
  // unreachable;
 }
 (__ZN9ObjMaster13ObjMeshObjectaSEOS0_(18136,$1)|0);
 __ZN9ObjMaster13ObjMeshObjectD2Ev($1);
 __THREW__ = 0;
 invoke_v(334);
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  $2 = $32;
  $3 = $33;
  __ZN9ObjMaster3ObjD2Ev($obj);
  $34 = $2;
  $35 = $3;
  ___resumeException($34|0);
  // unreachable;
 }
 __ZN9ObjMaster3ObjD2Ev($obj);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI15VertexStructureNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI15VertexStructureNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -32|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 32)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster16FileAssetLibraryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN12AssetLibraryC2Ev($1);
 $2 = 1736;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster13ObjMeshObjectaSEOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 27|0;
 $$byval_copy = sp + 26|0;
 $3 = sp + 25|0;
 $6 = sp + 24|0;
 $7 = $this;
 $8 = $0;
 $9 = $7;
 $10 = $8;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&1;
 $13 = $12&1;
 HEAP8[$9>>0] = $13;
 $14 = ((($9)) + 4|0);
 $15 = $8;
 $16 = ((($15)) + 4|0);
 $4 = $14;
 $5 = $16;
 $17 = $4;
 $18 = $5;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$6>>0]|0;
 __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($17,$18,$$byval_copy);
 $19 = ((($9)) + 16|0);
 $20 = $8;
 $21 = ((($20)) + 16|0);
 $1 = $19;
 $2 = $21;
 $22 = $1;
 $23 = $2;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$3>>0]|0;
 __ZNSt3__16vectorIjNS_9allocatorIjEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($22,$23,$$byval_copy1);
 STACKTOP = sp;return ($9|0);
}
function __ZL9setup_triv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $s_indexObject = 0, $s_vertexPosObject = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s_vertexPosObject = sp + 4|0;
 $s_indexObject = sp;
 _glGenBuffers(1,($s_vertexPosObject|0));
 $0 = HEAP32[$s_vertexPosObject>>2]|0;
 _glBindBuffer(34962,($0|0));
 _glBufferData(34962,80,(1592|0),35044);
 _glGenBuffers(1,($s_indexObject|0));
 $1 = HEAP32[$s_indexObject>>2]|0;
 _glBindBuffer(34963,($1|0));
 _glBufferData(34963,24,(1672|0),35044);
 $2 = HEAP32[$s_vertexPosObject>>2]|0;
 _glBindBuffer(34962,($2|0));
 _glVertexAttribPointer(0,2,5126,0,20,(0|0));
 _glVertexAttribPointer(1,3,5126,0,20,((8)|0));
 _glEnableVertexAttribArray(0);
 _glEnableVertexAttribArray(1);
 $3 = HEAP32[$s_indexObject>>2]|0;
 _glBindBuffer(34963,($3|0));
 STACKTOP = sp;return;
}
function __ZN9ObjMaster3ObjD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 80|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($2);
 $3 = ((($1)) + 48|0);
 __ZN9ObjMaster6MtlLibD2Ev($3);
 $4 = ((($1)) + 36|0);
 __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEED2Ev($4);
 $5 = ((($1)) + 24|0);
 __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEED2Ev($5);
 $6 = ((($1)) + 12|0);
 __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEED2Ev($6);
 __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN12AssetLibraryC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 1588;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 32)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -32|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(335,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch_3(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 32)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 32)&-1;
 $35 = (($22) + ($34<<5)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<5)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 32)&-1;
 $52 = (($43) + ($51<<5)|0);
 __ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorIjNS_9allocatorIjEEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 4)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -4|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(336,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch_3(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 4)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster6MtlLibD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($2);
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN9ObjMaster11FaceElementENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN9ObjMaster13VertexElementENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = $this;
 $26 = $25;
 $27 = ((($26)) + 8|0);
 $24 = $27;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE12__deallocateEPNS_11__hash_nodeISA_PvEE($26,$30);
 $22 = $26;
 $31 = $22;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $35 = HEAP32[$34>>2]|0;
 $__tmp$i$i = $35;
 $3 = $32;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 HEAP32[$37>>2] = 0;
 $38 = $__tmp$i$i;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $1 = $32;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = $__tmp$i$i;
 $17 = $42;
 $18 = $43;
 $44 = $17;
 $16 = $44;
 $45 = $16;
 $15 = $45;
 $46 = $15;
 $14 = $46;
 $47 = $14;
 $48 = $18;
 $6 = $44;
 $49 = $6;
 $5 = $49;
 $50 = $5;
 $4 = $50;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $11 = $47;
 $12 = $48;
 $13 = $52;
 $53 = $11;
 $54 = $12;
 $55 = $13;
 $8 = $53;
 $9 = $54;
 $10 = $55;
 $56 = $9;
 $7 = $56;
 $57 = $7;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE12__deallocateEPNS_11__hash_nodeISA_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__np;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 8|0);
 $16 = $22;
 $23 = $16;
 $15 = $23;
 $24 = $15;
 $__na = $24;
 while(1) {
  $25 = $19;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $19;
  $28 = HEAP32[$27>>2]|0;
  $__next = $28;
  $29 = $__na;
  $30 = $19;
  $31 = ((($30)) + 8|0);
  $14 = $31;
  $32 = $14;
  $4 = $29;
  $5 = $32;
  $33 = $4;
  $34 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $33;
  $2 = $34;
  $35 = $2;
  $0 = $35;
  $36 = $0;
  __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEED2Ev($36);
  $37 = $__na;
  $38 = $19;
  $11 = $37;
  $12 = $38;
  $13 = 1;
  $39 = $11;
  $40 = $12;
  $41 = $13;
  $8 = $39;
  $9 = $40;
  $10 = $41;
  $42 = $9;
  $7 = $42;
  $43 = $7;
  __ZdlPv($43);
  $44 = $__next;
  $19 = $44;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 __ZN9ObjMaster23ObjectMaterialFaceGroupD2Ev($2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster23ObjectMaterialFaceGroupD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 144|0);
 __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($2);
 $3 = ((($1)) + 132|0);
 __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($3);
 $4 = ((($1)) + 120|0);
 __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($4);
 $5 = ((($1)) + 108|0);
 __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($5);
 __ZN9ObjMaster8MaterialD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster8MaterialD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 88|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 $3 = ((($1)) + 76|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 $4 = ((($1)) + 64|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 $5 = ((($1)) + 52|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $6 = ((($1)) + 40|0);
 __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($6);
 $7 = ((($1)) + 28|0);
 __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($7);
 $8 = ((($1)) + 16|0);
 __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($8);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -1|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $11 = $55;
 $12 = $56;
 $13 = $66;
 $67 = $11;
 $68 = $12;
 $69 = $13;
 $8 = $67;
 $9 = $68;
 $10 = $69;
 $70 = $9;
 $7 = $70;
 $71 = $7;
 __ZdlPv($71);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIfNS_9allocatorIfEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIfNS_9allocatorIfEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = $this;
 $26 = $25;
 $27 = ((($26)) + 8|0);
 $24 = $27;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE12__deallocateEPNS_11__hash_nodeISA_PvEE($26,$30);
 $22 = $26;
 $31 = $22;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $35 = HEAP32[$34>>2]|0;
 $__tmp$i$i = $35;
 $3 = $32;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 HEAP32[$37>>2] = 0;
 $38 = $__tmp$i$i;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $1 = $32;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = $__tmp$i$i;
 $17 = $42;
 $18 = $43;
 $44 = $17;
 $16 = $44;
 $45 = $16;
 $15 = $45;
 $46 = $15;
 $14 = $46;
 $47 = $14;
 $48 = $18;
 $6 = $44;
 $49 = $6;
 $5 = $49;
 $50 = $5;
 $4 = $50;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $11 = $47;
 $12 = $48;
 $13 = $52;
 $53 = $11;
 $54 = $12;
 $55 = $13;
 $8 = $53;
 $9 = $54;
 $10 = $55;
 $56 = $9;
 $7 = $56;
 $57 = $7;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE12__deallocateEPNS_11__hash_nodeISA_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__np;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 8|0);
 $16 = $22;
 $23 = $16;
 $15 = $23;
 $24 = $15;
 $__na = $24;
 while(1) {
  $25 = $19;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $19;
  $28 = HEAP32[$27>>2]|0;
  $__next = $28;
  $29 = $__na;
  $30 = $19;
  $31 = ((($30)) + 8|0);
  $14 = $31;
  $32 = $14;
  $4 = $29;
  $5 = $32;
  $33 = $4;
  $34 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $33;
  $2 = $34;
  $35 = $2;
  $0 = $35;
  $36 = $0;
  __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEED2Ev($36);
  $37 = $__na;
  $38 = $19;
  $11 = $37;
  $12 = $38;
  $13 = 1;
  $39 = $11;
  $40 = $12;
  $41 = $13;
  $8 = $39;
  $9 = $40;
  $10 = $41;
  $42 = $9;
  $7 = $42;
  $43 = $7;
  __ZdlPv($43);
  $44 = $__next;
  $19 = $44;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 12)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN9ObjMaster11FaceElementENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -40|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 40)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 12)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -8|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 8)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN9ObjMaster13VertexElementENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 12)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_showobj_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function __ZN9ObjMaster3ObjC2ERK12AssetLibraryPKcS5_($this,$assetLibrary,$path,$fileName) {
 $this = $this|0;
 $assetLibrary = $assetLibrary|0;
 $path = $path|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 308|0;
 $6 = sp + 296|0;
 $10 = sp + 280|0;
 $13 = sp + 268|0;
 $21 = sp + 236|0;
 $24 = sp + 224|0;
 $28 = sp + 208|0;
 $31 = sp + 196|0;
 $38 = sp + 168|0;
 $41 = sp + 156|0;
 $48 = sp + 128|0;
 $51 = sp + 116|0;
 $58 = sp + 88|0;
 $61 = sp + 76|0;
 $68 = sp + 48|0;
 $71 = sp + 36|0;
 $75 = $this;
 $76 = $assetLibrary;
 $77 = $path;
 $78 = $fileName;
 $81 = $75;
 $74 = $81;
 $82 = $74;
 $73 = $82;
 $83 = $73;
 $72 = $83;
 HEAP32[$83>>2] = 0;
 $84 = ((($83)) + 4|0);
 HEAP32[$84>>2] = 0;
 $85 = ((($83)) + 8|0);
 $70 = $85;
 HEAP32[$71>>2] = 0;
 $86 = $70;
 $69 = $71;
 $87 = $69;
 $88 = HEAP32[$87>>2]|0;
 $67 = $86;
 HEAP32[$68>>2] = $88;
 $89 = $67;
 $66 = $89;
 $65 = $68;
 $90 = $65;
 $91 = HEAP32[$90>>2]|0;
 HEAP32[$89>>2] = $91;
 $92 = ((($81)) + 12|0);
 $64 = $92;
 $93 = $64;
 $63 = $93;
 $94 = $63;
 $62 = $94;
 HEAP32[$94>>2] = 0;
 $95 = ((($94)) + 4|0);
 HEAP32[$95>>2] = 0;
 $96 = ((($94)) + 8|0);
 $60 = $96;
 HEAP32[$61>>2] = 0;
 $97 = $60;
 $59 = $61;
 $98 = $59;
 $99 = HEAP32[$98>>2]|0;
 $57 = $97;
 HEAP32[$58>>2] = $99;
 $100 = $57;
 $56 = $100;
 $55 = $58;
 $101 = $55;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$100>>2] = $102;
 $103 = ((($81)) + 24|0);
 $54 = $103;
 $104 = $54;
 $53 = $104;
 $105 = $53;
 $52 = $105;
 HEAP32[$105>>2] = 0;
 $106 = ((($105)) + 4|0);
 HEAP32[$106>>2] = 0;
 $107 = ((($105)) + 8|0);
 $50 = $107;
 HEAP32[$51>>2] = 0;
 $108 = $50;
 $49 = $51;
 $109 = $49;
 $110 = HEAP32[$109>>2]|0;
 $47 = $108;
 HEAP32[$48>>2] = $110;
 $111 = $47;
 $46 = $111;
 $45 = $48;
 $112 = $45;
 $113 = HEAP32[$112>>2]|0;
 HEAP32[$111>>2] = $113;
 $114 = ((($81)) + 36|0);
 $44 = $114;
 $115 = $44;
 $43 = $115;
 $116 = $43;
 $42 = $116;
 HEAP32[$116>>2] = 0;
 $117 = ((($116)) + 4|0);
 HEAP32[$117>>2] = 0;
 $118 = ((($116)) + 8|0);
 $40 = $118;
 HEAP32[$41>>2] = 0;
 $119 = $40;
 $39 = $41;
 $120 = $39;
 $121 = HEAP32[$120>>2]|0;
 $37 = $119;
 HEAP32[$38>>2] = $121;
 $122 = $37;
 $36 = $122;
 $35 = $38;
 $123 = $35;
 $124 = HEAP32[$123>>2]|0;
 HEAP32[$122>>2] = $124;
 $125 = ((($81)) + 48|0);
 __THREW__ = 0;
 invoke_vi(337,($125|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if ($127) {
  $169 = ___cxa_find_matching_catch_2()|0;
  $170 = tempRet0;
  $79 = $169;
  $80 = $170;
  __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEED2Ev($114);
  __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEED2Ev($103);
  __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEED2Ev($92);
  __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEED2Ev($81);
  $173 = $79;
  $174 = $80;
  ___resumeException($173|0);
  // unreachable;
 }
 $128 = ((($81)) + 80|0);
 $34 = $128;
 $129 = $34;
 $33 = $129;
 $130 = $33;
 $32 = $130;
 $131 = $32;
 $30 = $131;
 HEAP32[$31>>2] = 0;
 $132 = $30;
 $29 = $31;
 $133 = $29;
 $134 = HEAP32[$133>>2]|0;
 $27 = $132;
 HEAP32[$28>>2] = $134;
 $135 = $27;
 $26 = $28;
 $136 = $26;
 $137 = HEAP32[$136>>2]|0;
 HEAP32[$135>>2] = $137;
 $138 = ((($135)) + 4|0);
 $25 = $138;
 $139 = $25;
 $23 = $139;
 HEAP32[$24>>2] = 0;
 $140 = $23;
 $22 = $24;
 $141 = $22;
 $142 = HEAP32[$141>>2]|0;
 $20 = $140;
 HEAP32[$21>>2] = $142;
 $143 = $20;
 $19 = $143;
 $18 = $21;
 $144 = $18;
 $145 = HEAP32[$144>>2]|0;
 HEAP32[$143>>2] = $145;
 $146 = ((($130)) + 8|0);
 $17 = $146;
 $147 = $17;
 $16 = $147;
 $148 = $16;
 $15 = $148;
 $14 = $148;
 $149 = $14;
 HEAP32[$149>>2] = 0;
 $150 = ((($130)) + 12|0);
 $12 = $150;
 HEAP32[$13>>2] = 0;
 $151 = $12;
 $11 = $13;
 $152 = $11;
 $153 = HEAP32[$152>>2]|0;
 $9 = $151;
 HEAP32[$10>>2] = $153;
 $154 = $9;
 $8 = $154;
 $7 = $10;
 $155 = $7;
 $156 = HEAP32[$155>>2]|0;
 HEAP32[$154>>2] = $156;
 $157 = ((($130)) + 16|0);
 $5 = $157;
 HEAPF32[$6>>2] = 1.0;
 $158 = $5;
 $4 = $6;
 $159 = $4;
 $160 = +HEAPF32[$159>>2];
 $2 = $158;
 HEAPF32[$3>>2] = $160;
 $161 = $2;
 $1 = $161;
 $0 = $3;
 $162 = $0;
 $163 = +HEAPF32[$162>>2];
 HEAPF32[$161>>2] = $163;
 $164 = $76;
 $165 = $77;
 $166 = $78;
 __THREW__ = 0;
 invoke_viiiiii(338,($81|0),($164|0),($165|0),($166|0),256,128);
 $167 = __THREW__; __THREW__ = 0;
 $168 = $167&1;
 if (!($168)) {
  STACKTOP = sp;return;
 }
 $171 = ___cxa_find_matching_catch_2()|0;
 $172 = tempRet0;
 $79 = $171;
 $80 = $172;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($128);
 __ZN9ObjMaster6MtlLibD2Ev($125);
 __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEED2Ev($114);
 __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEED2Ev($103);
 __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEED2Ev($92);
 __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEED2Ev($81);
 $173 = $79;
 $174 = $80;
 ___resumeException($173|0);
 // unreachable;
}
function __ZN9ObjMaster6MtlLibC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 168|0;
 $6 = sp + 156|0;
 $10 = sp + 140|0;
 $13 = sp + 128|0;
 $21 = sp + 96|0;
 $24 = sp + 84|0;
 $28 = sp + 68|0;
 $31 = sp + 56|0;
 $38 = sp + 28|0;
 $41 = sp + 16|0;
 $45 = $this;
 $46 = $45;
 $44 = $46;
 $47 = $44;
 $43 = $47;
 $48 = $43;
 $42 = $48;
 HEAP32[$48>>2] = 0;
 $49 = ((($48)) + 4|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($48)) + 8|0);
 $40 = $50;
 HEAP32[$41>>2] = 0;
 $51 = $40;
 $39 = $41;
 $52 = $39;
 $53 = HEAP32[$52>>2]|0;
 $37 = $51;
 HEAP32[$38>>2] = $53;
 $54 = $37;
 $36 = $54;
 $35 = $38;
 $55 = $35;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = ((($46)) + 12|0);
 $34 = $57;
 $58 = $34;
 $33 = $58;
 $59 = $33;
 $32 = $59;
 $60 = $32;
 $30 = $60;
 HEAP32[$31>>2] = 0;
 $61 = $30;
 $29 = $31;
 $62 = $29;
 $63 = HEAP32[$62>>2]|0;
 $27 = $61;
 HEAP32[$28>>2] = $63;
 $64 = $27;
 $26 = $28;
 $65 = $26;
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$64>>2] = $66;
 $67 = ((($64)) + 4|0);
 $25 = $67;
 $68 = $25;
 $23 = $68;
 HEAP32[$24>>2] = 0;
 $69 = $23;
 $22 = $24;
 $70 = $22;
 $71 = HEAP32[$70>>2]|0;
 $20 = $69;
 HEAP32[$21>>2] = $71;
 $72 = $20;
 $19 = $72;
 $18 = $21;
 $73 = $18;
 $74 = HEAP32[$73>>2]|0;
 HEAP32[$72>>2] = $74;
 $75 = ((($59)) + 8|0);
 $17 = $75;
 $76 = $17;
 $16 = $76;
 $77 = $16;
 $15 = $77;
 $14 = $77;
 $78 = $14;
 HEAP32[$78>>2] = 0;
 $79 = ((($59)) + 12|0);
 $12 = $79;
 HEAP32[$13>>2] = 0;
 $80 = $12;
 $11 = $13;
 $81 = $11;
 $82 = HEAP32[$81>>2]|0;
 $9 = $80;
 HEAP32[$10>>2] = $82;
 $83 = $9;
 $8 = $83;
 $7 = $10;
 $84 = $7;
 $85 = HEAP32[$84>>2]|0;
 HEAP32[$83>>2] = $85;
 $86 = ((($59)) + 16|0);
 $5 = $86;
 HEAPF32[$6>>2] = 1.0;
 $87 = $5;
 $4 = $6;
 $88 = $4;
 $89 = +HEAPF32[$88>>2];
 $2 = $87;
 HEAPF32[$3>>2] = $89;
 $90 = $2;
 $1 = $90;
 $0 = $3;
 $91 = $0;
 $92 = +HEAPF32[$91>>2];
 HEAPF32[$90>>2] = $92;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster3Obj18constructionHelperERK12AssetLibraryPKcS5_ii($this,$assetLibrary,$path,$fileName,$expectedVertexDataNum,$expectedFaceNum) {
 $this = $this|0;
 $assetLibrary = $assetLibrary|0;
 $path = $path|0;
 $fileName = $fileName|0;
 $expectedVertexDataNum = $expectedVertexDataNum|0;
 $expectedFaceNum = $expectedFaceNum|0;
 var $$byval_copy = 0, $$byval_copy58 = 0, $$byval_copy59 = 0, $$byval_copy60 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__a$i$i$i = 0, $__annotator$i = 0, $__annotator$i10 = 0, $__annotator$i6 = 0, $__annotator$i8 = 0, $__i$i$i = 0, $__i$i$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $currentLastFacesPointer = 0, $currentMaterial = 0, $currentObjectGroupName = 0, $currentObjectMaterialFacesPointer = 0, $eh$lpad$body$index54Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $input = 0, $line = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy60 = sp + 2101|0;
 $$byval_copy59 = sp + 2100|0;
 $$byval_copy58 = sp + 2099|0;
 $$byval_copy = sp + 2098|0;
 $vararg_buffer51 = sp + 216|0;
 $vararg_buffer48 = sp + 208|0;
 $vararg_buffer46 = sp + 200|0;
 $vararg_buffer43 = sp + 192|0;
 $vararg_buffer41 = sp + 184|0;
 $vararg_buffer38 = sp + 176|0;
 $vararg_buffer36 = sp + 168|0;
 $vararg_buffer33 = sp + 160|0;
 $vararg_buffer31 = sp + 152|0;
 $vararg_buffer28 = sp + 144|0;
 $vararg_buffer26 = sp + 136|0;
 $vararg_buffer23 = sp + 128|0;
 $vararg_buffer21 = sp + 120|0;
 $vararg_buffer19 = sp + 112|0;
 $vararg_buffer17 = sp + 104|0;
 $vararg_buffer14 = sp + 96|0;
 $vararg_buffer12 = sp + 88|0;
 $vararg_buffer10 = sp + 80|0;
 $vararg_buffer8 = sp + 72|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer2 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $12 = sp + 40|0;
 $17 = sp + 2097|0;
 $__annotator$i10 = sp + 2096|0;
 $37 = sp + 32|0;
 $42 = sp + 2095|0;
 $__annotator$i8 = sp + 2094|0;
 $62 = sp + 24|0;
 $67 = sp + 2093|0;
 $__annotator$i6 = sp + 2092|0;
 $86 = sp + 16|0;
 $91 = sp + 2091|0;
 $__annotator$i = sp + 2090|0;
 $112 = sp + 1412|0;
 $135 = sp + 8|0;
 $138 = sp + 2087|0;
 $165 = sp + 2086|0;
 $166 = sp + 2085|0;
 $169 = sp;
 $172 = sp + 2084|0;
 $198 = sp + 2083|0;
 $202 = sp + 1064|0;
 $205 = sp + 1052|0;
 $211 = sp + 2082|0;
 $226 = sp + 968|0;
 $229 = sp + 956|0;
 $235 = sp + 2081|0;
 $239 = sp + 920|0;
 $242 = sp + 908|0;
 $248 = sp + 2080|0;
 $263 = sp + 824|0;
 $266 = sp + 812|0;
 $input = sp + 772|0;
 $278 = sp + 752|0;
 $279 = sp + 740|0;
 $280 = sp + 728|0;
 $281 = sp + 716|0;
 $currentMaterial = sp + 544|0;
 $currentObjectGroupName = sp + 532|0;
 $line = sp + 1824|0;
 $v = sp + 512|0;
 $282 = sp + 504|0;
 $283 = sp + 488|0;
 $284 = sp + 448|0;
 $285 = sp + 416|0;
 $286 = sp + 244|0;
 $287 = sp + 232|0;
 $288 = sp + 220|0;
 $270 = $this;
 $271 = $assetLibrary;
 $272 = $path;
 $273 = $fileName;
 $274 = $expectedVertexDataNum;
 $275 = $expectedFaceNum;
 $289 = $270;
 $290 = HEAP32[504]|0;
 $291 = $272;
 $292 = $273;
 HEAP32[$vararg_buffer>>2] = $291;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $292;
 (_fprintf($290,10388,$vararg_buffer)|0);
 $293 = HEAP32[504]|0;
 (_fprintf($293,11077,$vararg_buffer2)|0);
 $294 = $271;
 $295 = HEAP32[$294>>2]|0;
 $296 = HEAP32[$295>>2]|0;
 $297 = $272;
 $298 = $273;
 $299 = (FUNCTION_TABLE_iiii[$296 & 1023]($294,$297,$298)|0);
 HEAP32[$input>>2] = $299;
 $300 = HEAP32[504]|0;
 $301 = $274;
 $302 = $275;
 __THREW__ = 0;
 HEAP32[$vararg_buffer4>>2] = $301;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $302;
 (invoke_iiii(339,($300|0),(10418|0),($vararg_buffer4|0))|0);
 $303 = __THREW__; __THREW__ = 0;
 $304 = $303&1;
 if ($304) {
  label = 25;
 } else {
  $305 = HEAP32[504]|0;
  __THREW__ = 0;
  (invoke_iiii(339,($305|0),(11077|0),($vararg_buffer8|0))|0);
  $306 = __THREW__; __THREW__ = 0;
  $307 = $306&1;
  if ($307) {
   label = 25;
  } else {
   $269 = $278;
   $308 = $269;
   $268 = $308;
   $309 = $268;
   $267 = $309;
   HEAP32[$309>>2] = 0;
   $310 = ((($309)) + 4|0);
   HEAP32[$310>>2] = 0;
   $311 = ((($309)) + 8|0);
   $265 = $311;
   HEAP32[$266>>2] = 0;
   $312 = $265;
   $264 = $266;
   $313 = $264;
   $314 = HEAP32[$313>>2]|0;
   $262 = $312;
   HEAP32[$263>>2] = $314;
   $315 = $262;
   $261 = $315;
   $260 = $263;
   $316 = $260;
   $317 = HEAP32[$316>>2]|0;
   HEAP32[$315>>2] = $317;
   $246 = $289;
   $247 = $278;
   $318 = $246;
   $319 = $247;
   ;HEAP8[$$byval_copy>>0]=HEAP8[$248>>0]|0;
   __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($318,$319,$$byval_copy);
   __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEED2Ev($278);
   $320 = $274;
   __THREW__ = 0;
   invoke_vii(340,($289|0),($320|0));
   $321 = __THREW__; __THREW__ = 0;
   $322 = $321&1;
   if ($322) {
    label = 25;
   } else {
    $323 = ((($289)) + 12|0);
    $245 = $279;
    $324 = $245;
    $244 = $324;
    $325 = $244;
    $243 = $325;
    HEAP32[$325>>2] = 0;
    $326 = ((($325)) + 4|0);
    HEAP32[$326>>2] = 0;
    $327 = ((($325)) + 8|0);
    $241 = $327;
    HEAP32[$242>>2] = 0;
    $328 = $241;
    $240 = $242;
    $329 = $240;
    $330 = HEAP32[$329>>2]|0;
    $238 = $328;
    HEAP32[$239>>2] = $330;
    $331 = $238;
    $237 = $331;
    $236 = $239;
    $332 = $236;
    $333 = HEAP32[$332>>2]|0;
    HEAP32[$331>>2] = $333;
    $233 = $323;
    $234 = $279;
    $334 = $233;
    $335 = $234;
    ;HEAP8[$$byval_copy58>>0]=HEAP8[$235>>0]|0;
    __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($334,$335,$$byval_copy58);
    __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEED2Ev($279);
    $336 = ((($289)) + 12|0);
    $337 = $274;
    __THREW__ = 0;
    invoke_vii(341,($336|0),($337|0));
    $338 = __THREW__; __THREW__ = 0;
    $339 = $338&1;
    if ($339) {
     label = 25;
    } else {
     $340 = ((($289)) + 24|0);
     $232 = $280;
     $341 = $232;
     $231 = $341;
     $342 = $231;
     $230 = $342;
     HEAP32[$342>>2] = 0;
     $343 = ((($342)) + 4|0);
     HEAP32[$343>>2] = 0;
     $344 = ((($342)) + 8|0);
     $228 = $344;
     HEAP32[$229>>2] = 0;
     $345 = $228;
     $227 = $229;
     $346 = $227;
     $347 = HEAP32[$346>>2]|0;
     $225 = $345;
     HEAP32[$226>>2] = $347;
     $348 = $225;
     $224 = $348;
     $223 = $226;
     $349 = $223;
     $350 = HEAP32[$349>>2]|0;
     HEAP32[$348>>2] = $350;
     $209 = $340;
     $210 = $280;
     $351 = $209;
     $352 = $210;
     ;HEAP8[$$byval_copy59>>0]=HEAP8[$211>>0]|0;
     __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($351,$352,$$byval_copy59);
     __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEED2Ev($280);
     $353 = ((($289)) + 24|0);
     $354 = $274;
     __THREW__ = 0;
     invoke_vii(342,($353|0),($354|0));
     $355 = __THREW__; __THREW__ = 0;
     $356 = $355&1;
     if ($356) {
      label = 25;
     } else {
      $357 = ((($289)) + 36|0);
      $208 = $281;
      $358 = $208;
      $207 = $358;
      $359 = $207;
      $206 = $359;
      HEAP32[$359>>2] = 0;
      $360 = ((($359)) + 4|0);
      HEAP32[$360>>2] = 0;
      $361 = ((($359)) + 8|0);
      $204 = $361;
      HEAP32[$205>>2] = 0;
      $362 = $204;
      $203 = $205;
      $363 = $203;
      $364 = HEAP32[$363>>2]|0;
      $201 = $362;
      HEAP32[$202>>2] = $364;
      $365 = $201;
      $200 = $365;
      $199 = $202;
      $366 = $199;
      $367 = HEAP32[$366>>2]|0;
      HEAP32[$365>>2] = $367;
      $196 = $357;
      $197 = $281;
      $368 = $196;
      $369 = $197;
      ;HEAP8[$$byval_copy60>>0]=HEAP8[$198>>0]|0;
      __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($368,$369,$$byval_copy60);
      __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEED2Ev($281);
      $370 = ((($289)) + 36|0);
      $371 = $275;
      __THREW__ = 0;
      invoke_vii(343,($370|0),($371|0));
      $372 = __THREW__; __THREW__ = 0;
      $373 = $372&1;
      if ($373) {
       label = 25;
      } else {
       __THREW__ = 0;
       invoke_vi(344,($currentMaterial|0));
       $374 = __THREW__; __THREW__ = 0;
       $375 = $374&1;
       if ($375) {
        label = 25;
       } else {
        $195 = $currentObjectGroupName;
        $376 = $195;
        $194 = $376;
        $377 = $194;
        $193 = $377;
        $378 = $193;
        $192 = $378;
        $191 = $376;
        $379 = $191;
        $190 = $379;
        $380 = $190;
        $189 = $380;
        $381 = $189;
        $__a$i$i = $381;
        $__i$i$i = 0;
        while(1) {
         $382 = $__i$i$i;
         $383 = ($382>>>0)<(3);
         if (!($383)) {
          break;
         }
         $384 = $__i$i$i;
         $385 = $__a$i$i;
         $386 = (($385) + ($384<<2)|0);
         HEAP32[$386>>2] = 0;
         $387 = $__i$i$i;
         $388 = (($387) + 1)|0;
         $__i$i$i = $388;
        }
        $389 = ((($289)) + 36|0);
        $179 = $389;
        $180 = 0;
        $390 = $179;
        $391 = $180;
        $392 = HEAP32[$390>>2]|0;
        $393 = (($392) + (($391*40)|0)|0);
        $currentObjectMaterialFacesPointer = $393;
        $394 = ((($289)) + 36|0);
        $121 = $394;
        $122 = 0;
        $395 = $121;
        $396 = $122;
        $397 = HEAP32[$395>>2]|0;
        $398 = (($397) + (($396*40)|0)|0);
        $currentLastFacesPointer = $398;
        $399 = HEAP32[504]|0;
        __THREW__ = 0;
        (invoke_iiii(339,($399|0),(10491|0),($vararg_buffer10|0))|0);
        $400 = __THREW__; __THREW__ = 0;
        $401 = $400&1;
        L13: do {
         if ($401) {
          label = 26;
         } else {
          $402 = HEAP32[504]|0;
          __THREW__ = 0;
          (invoke_iiii(339,($402|0),(11077|0),($vararg_buffer12|0))|0);
          $403 = __THREW__; __THREW__ = 0;
          $404 = $403&1;
          if ($404) {
           label = 26;
          } else {
           while(1) {
            $120 = $input;
            $405 = $120;
            $119 = $405;
            $406 = $119;
            $118 = $406;
            $407 = $118;
            $408 = HEAP32[$407>>2]|0;
            $115 = $408;
            $116 = $line;
            $117 = 256;
            $409 = $115;
            $410 = $116;
            $411 = $117;
            $412 = HEAP32[$409>>2]|0;
            $413 = ((($412)) + -12|0);
            $414 = HEAP32[$413>>2]|0;
            $415 = (($409) + ($414)|0);
            $110 = $415;
            $111 = 10;
            $416 = $110;
            __THREW__ = 0;
            $417 = (invoke_ii(345,($416|0))|0);
            $418 = __THREW__; __THREW__ = 0;
            $419 = $418&1;
            if ($419) {
             label = 26;
             break L13;
            }
            HEAP32[$112>>2] = $417;
            $109 = $112;
            $420 = $109;
            __THREW__ = 0;
            $421 = (invoke_iii(346,($420|0),(18820|0))|0);
            $422 = __THREW__; __THREW__ = 0;
            $423 = $422&1;
            if ($423) {
             label = 16;
             break;
            }
            $424 = $111;
            $107 = $421;
            $108 = $424;
            $425 = $107;
            $426 = HEAP32[$425>>2]|0;
            $427 = ((($426)) + 28|0);
            $428 = HEAP32[$427>>2]|0;
            $429 = $108;
            __THREW__ = 0;
            $430 = (invoke_iii($428|0,($425|0),($429|0))|0);
            $431 = __THREW__; __THREW__ = 0;
            $432 = $431&1;
            if ($432) {
             label = 16;
             break;
            }
            __ZNSt3__16localeD2Ev($112);
            __THREW__ = 0;
            $437 = (invoke_iiiii(347,($409|0),($410|0),($411|0),($430|0))|0);
            $438 = __THREW__; __THREW__ = 0;
            $439 = $438&1;
            if ($439) {
             label = 26;
             break L13;
            }
            $440 = HEAP32[$437>>2]|0;
            $441 = ((($440)) + -12|0);
            $442 = HEAP32[$441>>2]|0;
            $443 = (($437) + ($442)|0);
            $106 = $443;
            $444 = $106;
            $105 = $444;
            $445 = $105;
            $104 = $445;
            $446 = $104;
            $447 = ((($446)) + 16|0);
            $448 = HEAP32[$447>>2]|0;
            $449 = $448 & 5;
            $450 = ($449|0)!=(0);
            $451 = $450 ^ 1;
            $452 = ((($289)) + 36|0);
            $453 = ((($289)) + 36|0);
            if (!($451)) {
             label = 72;
             break;
            }
            $103 = $453;
            $454 = $103;
            $455 = ((($454)) + 4|0);
            $456 = HEAP32[$455>>2]|0;
            $457 = HEAP32[$454>>2]|0;
            $458 = $456;
            $459 = $457;
            $460 = (($458) - ($459))|0;
            $461 = (($460|0) / 40)&-1;
            $101 = $452;
            $102 = $461;
            $462 = $101;
            $463 = $102;
            $464 = HEAP32[$462>>2]|0;
            $465 = (($464) + (($463*40)|0)|0);
            $currentLastFacesPointer = $465;
            __THREW__ = 0;
            $466 = (invoke_ii(348,($line|0))|0);
            $467 = __THREW__; __THREW__ = 0;
            $468 = $467&1;
            if ($468) {
             label = 26;
             break L13;
            }
            if ($466) {
             __THREW__ = 0;
             invoke_vii(349,($v|0),($line|0));
             $469 = __THREW__; __THREW__ = 0;
             $470 = $469&1;
             if ($470) {
              label = 26;
              break L13;
             }
             $99 = $289;
             $100 = $v;
             $471 = $99;
             $472 = ((($471)) + 4|0);
             $473 = HEAP32[$472>>2]|0;
             $98 = $471;
             $474 = $98;
             $475 = ((($474)) + 8|0);
             $97 = $475;
             $476 = $97;
             $96 = $476;
             $477 = $96;
             $478 = HEAP32[$477>>2]|0;
             $479 = ($473|0)!=($478|0);
             if ($479) {
              __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$471,1);
              $95 = $471;
              $480 = $95;
              $481 = ((($480)) + 8|0);
              $94 = $481;
              $482 = $94;
              $93 = $482;
              $483 = $93;
              $484 = ((($471)) + 4|0);
              $485 = HEAP32[$484>>2]|0;
              $92 = $485;
              $486 = $92;
              $487 = $100;
              $88 = $483;
              $89 = $486;
              $90 = $487;
              $488 = $88;
              $489 = $89;
              $490 = $90;
              $87 = $490;
              $491 = $87;
              ;HEAP8[$86>>0]=HEAP8[$91>>0]|0;
              $83 = $488;
              $84 = $489;
              $85 = $491;
              $492 = $83;
              $493 = $84;
              $494 = $85;
              $82 = $494;
              $495 = $82;
              $79 = $492;
              $80 = $493;
              $81 = $495;
              $496 = $80;
              $497 = $81;
              $78 = $497;
              $498 = $78;
              ;HEAP32[$496>>2]=HEAP32[$498>>2]|0;HEAP32[$496+4>>2]=HEAP32[$498+4>>2]|0;HEAP32[$496+8>>2]=HEAP32[$498+8>>2]|0;
              __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
              $499 = ((($471)) + 4|0);
              $500 = HEAP32[$499>>2]|0;
              $501 = ((($500)) + 12|0);
              HEAP32[$499>>2] = $501;
              continue;
             } else {
              $502 = $100;
              __THREW__ = 0;
              invoke_vii(350,($471|0),($502|0));
              $503 = __THREW__; __THREW__ = 0;
              $504 = $503&1;
              if ($504) {
               label = 26;
               break L13;
              } else {
               continue;
              }
             }
            }
            __THREW__ = 0;
            $509 = (invoke_ii(351,($line|0))|0);
            $510 = __THREW__; __THREW__ = 0;
            $511 = $510&1;
            if ($511) {
             label = 26;
             break L13;
            }
            if ($509) {
             $512 = ((($289)) + 12|0);
             __THREW__ = 0;
             invoke_vii(352,($282|0),($line|0));
             $513 = __THREW__; __THREW__ = 0;
             $514 = $513&1;
             if ($514) {
              label = 26;
              break L13;
             }
             $76 = $512;
             $77 = $282;
             $515 = $76;
             $516 = ((($515)) + 4|0);
             $517 = HEAP32[$516>>2]|0;
             $75 = $515;
             $518 = $75;
             $519 = ((($518)) + 8|0);
             $74 = $519;
             $520 = $74;
             $73 = $520;
             $521 = $73;
             $522 = HEAP32[$521>>2]|0;
             $523 = ($517>>>0)<($522>>>0);
             if ($523) {
              __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i6,$515,1);
              $72 = $515;
              $524 = $72;
              $525 = ((($524)) + 8|0);
              $71 = $525;
              $526 = $71;
              $70 = $526;
              $527 = $70;
              $528 = ((($515)) + 4|0);
              $529 = HEAP32[$528>>2]|0;
              $68 = $529;
              $530 = $68;
              $531 = $77;
              $53 = $531;
              $532 = $53;
              $64 = $527;
              $65 = $530;
              $66 = $532;
              $533 = $64;
              $534 = $65;
              $535 = $66;
              $63 = $535;
              $536 = $63;
              ;HEAP8[$62>>0]=HEAP8[$67>>0]|0;
              $59 = $533;
              $60 = $534;
              $61 = $536;
              $537 = $59;
              $538 = $60;
              $539 = $61;
              $58 = $539;
              $540 = $58;
              $55 = $537;
              $56 = $538;
              $57 = $540;
              $541 = $56;
              $542 = $57;
              $54 = $542;
              $543 = $54;
              ;HEAP32[$541>>2]=HEAP32[$543>>2]|0;HEAP32[$541+4>>2]=HEAP32[$543+4>>2]|0;
              __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i6);
              $544 = ((($515)) + 4|0);
              $545 = HEAP32[$544>>2]|0;
              $546 = ((($545)) + 8|0);
              HEAP32[$544>>2] = $546;
              continue;
             } else {
              $547 = $77;
              $69 = $547;
              $548 = $69;
              __THREW__ = 0;
              invoke_vii(353,($515|0),($548|0));
              $549 = __THREW__; __THREW__ = 0;
              $550 = $549&1;
              if ($550) {
               label = 26;
               break L13;
              } else {
               continue;
              }
             }
            }
            __THREW__ = 0;
            $551 = (invoke_ii(354,($line|0))|0);
            $552 = __THREW__; __THREW__ = 0;
            $553 = $552&1;
            if ($553) {
             label = 26;
             break L13;
            }
            if ($551) {
             $554 = ((($289)) + 24|0);
             __THREW__ = 0;
             invoke_vii(355,($283|0),($line|0));
             $555 = __THREW__; __THREW__ = 0;
             $556 = $555&1;
             if ($556) {
              label = 26;
              break L13;
             }
             $51 = $554;
             $52 = $283;
             $557 = $51;
             $558 = ((($557)) + 4|0);
             $559 = HEAP32[$558>>2]|0;
             $50 = $557;
             $560 = $50;
             $561 = ((($560)) + 8|0);
             $49 = $561;
             $562 = $49;
             $48 = $562;
             $563 = $48;
             $564 = HEAP32[$563>>2]|0;
             $565 = ($559>>>0)<($564>>>0);
             if ($565) {
              __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i8,$557,1);
              $47 = $557;
              $566 = $47;
              $567 = ((($566)) + 8|0);
              $46 = $567;
              $568 = $46;
              $45 = $568;
              $569 = $45;
              $570 = ((($557)) + 4|0);
              $571 = HEAP32[$570>>2]|0;
              $43 = $571;
              $572 = $43;
              $573 = $52;
              $28 = $573;
              $574 = $28;
              $39 = $569;
              $40 = $572;
              $41 = $574;
              $575 = $39;
              $576 = $40;
              $577 = $41;
              $38 = $577;
              $578 = $38;
              ;HEAP8[$37>>0]=HEAP8[$42>>0]|0;
              $34 = $575;
              $35 = $576;
              $36 = $578;
              $579 = $34;
              $580 = $35;
              $581 = $36;
              $33 = $581;
              $582 = $33;
              $30 = $579;
              $31 = $580;
              $32 = $582;
              $583 = $31;
              $584 = $32;
              $29 = $584;
              $585 = $29;
              ;HEAP32[$583>>2]=HEAP32[$585>>2]|0;HEAP32[$583+4>>2]=HEAP32[$585+4>>2]|0;HEAP32[$583+8>>2]=HEAP32[$585+8>>2]|0;
              __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i8);
              $586 = ((($557)) + 4|0);
              $587 = HEAP32[$586>>2]|0;
              $588 = ((($587)) + 12|0);
              HEAP32[$586>>2] = $588;
              continue;
             } else {
              $589 = $52;
              $44 = $589;
              $590 = $44;
              __THREW__ = 0;
              invoke_vii(356,($557|0),($590|0));
              $591 = __THREW__; __THREW__ = 0;
              $592 = $591&1;
              if ($592) {
               label = 26;
               break L13;
              } else {
               continue;
              }
             }
            }
            __THREW__ = 0;
            $593 = (invoke_ii(357,($line|0))|0);
            $594 = __THREW__; __THREW__ = 0;
            $595 = $594&1;
            if ($595) {
             label = 26;
             break L13;
            }
            if ($593) {
             $596 = ((($289)) + 36|0);
             __THREW__ = 0;
             invoke_vii(358,($284|0),($line|0));
             $597 = __THREW__; __THREW__ = 0;
             $598 = $597&1;
             if ($598) {
              label = 26;
              break L13;
             }
             $26 = $596;
             $27 = $284;
             $599 = $26;
             $600 = ((($599)) + 4|0);
             $601 = HEAP32[$600>>2]|0;
             $25 = $599;
             $602 = $25;
             $603 = ((($602)) + 8|0);
             $24 = $603;
             $604 = $24;
             $23 = $604;
             $605 = $23;
             $606 = HEAP32[$605>>2]|0;
             $607 = ($601>>>0)<($606>>>0);
             if ($607) {
              __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i10,$599,1);
              $22 = $599;
              $608 = $22;
              $609 = ((($608)) + 8|0);
              $21 = $609;
              $610 = $21;
              $20 = $610;
              $611 = $20;
              $612 = ((($599)) + 4|0);
              $613 = HEAP32[$612>>2]|0;
              $18 = $613;
              $614 = $18;
              $615 = $27;
              $3 = $615;
              $616 = $3;
              $14 = $611;
              $15 = $614;
              $16 = $616;
              $617 = $14;
              $618 = $15;
              $619 = $16;
              $13 = $619;
              $620 = $13;
              ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
              $9 = $617;
              $10 = $618;
              $11 = $620;
              $621 = $9;
              $622 = $10;
              $623 = $11;
              $8 = $623;
              $624 = $8;
              $5 = $621;
              $6 = $622;
              $7 = $624;
              $625 = $6;
              $626 = $7;
              $4 = $626;
              $627 = $4;
              dest=$625; src=$627; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
              __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i10);
              $628 = ((($599)) + 4|0);
              $629 = HEAP32[$628>>2]|0;
              $630 = ((($629)) + 40|0);
              HEAP32[$628>>2] = $630;
              continue;
             } else {
              $631 = $27;
              $19 = $631;
              $632 = $19;
              __THREW__ = 0;
              invoke_vii(359,($599|0),($632|0));
              $633 = __THREW__; __THREW__ = 0;
              $634 = $633&1;
              if ($634) {
               label = 26;
               break L13;
              } else {
               continue;
              }
             }
            }
            __THREW__ = 0;
            $635 = (invoke_ii(360,($line|0))|0);
            $636 = __THREW__; __THREW__ = 0;
            $637 = $636&1;
            if ($637) {
             label = 26;
             break L13;
            }
            if ($635) {
             $638 = ((($289)) + 48|0);
             $639 = $272;
             $640 = $271;
             __THREW__ = 0;
             invoke_viiii(361,($285|0),($line|0),($639|0),($640|0));
             $641 = __THREW__; __THREW__ = 0;
             $642 = $641&1;
             if ($642) {
              label = 26;
              break L13;
             }
             (__ZN9ObjMaster6MtlLibaSEOS0_($638,$285)|0);
             __ZN9ObjMaster6MtlLibD2Ev($285);
             continue;
            }
            __THREW__ = 0;
            $643 = (invoke_ii(362,($line|0))|0);
            $644 = __THREW__; __THREW__ = 0;
            $645 = $644&1;
            if ($645) {
             label = 26;
             break L13;
            }
            if ($643) {
             $646 = $currentObjectMaterialFacesPointer;
             $647 = $currentLastFacesPointer;
             $648 = $currentObjectMaterialFacesPointer;
             $649 = $647;
             $650 = $648;
             $651 = (($649) - ($650))|0;
             $652 = (($651|0) / 40)&-1;
             __THREW__ = 0;
             invoke_viiiii(363,($289|0),($currentObjectGroupName|0),($currentMaterial|0),($646|0),($652|0));
             $653 = __THREW__; __THREW__ = 0;
             $654 = $653&1;
             if ($654) {
              label = 26;
              break L13;
             }
             $655 = ((($289)) + 48|0);
             __THREW__ = 0;
             invoke_vii(364,($287|0),($line|0));
             $656 = __THREW__; __THREW__ = 0;
             $657 = $656&1;
             if ($657) {
              label = 26;
              break L13;
             }
             __THREW__ = 0;
             invoke_viii(365,($286|0),($655|0),($287|0));
             $658 = __THREW__; __THREW__ = 0;
             $659 = $658&1;
             if ($659) {
              label = 56;
              break;
             }
             (__ZN9ObjMaster26TextureDataHoldingMaterialaSEOS0_($currentMaterial,$286)|0);
             __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($286);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($287);
             $660 = ((($289)) + 36|0);
             $661 = ((($289)) + 36|0);
             $2 = $661;
             $662 = $2;
             $663 = ((($662)) + 4|0);
             $664 = HEAP32[$663>>2]|0;
             $665 = HEAP32[$662>>2]|0;
             $666 = $664;
             $667 = $665;
             $668 = (($666) - ($667))|0;
             $669 = (($668|0) / 40)&-1;
             $0 = $660;
             $1 = $669;
             $670 = $0;
             $671 = $1;
             $672 = HEAP32[$670>>2]|0;
             $673 = (($672) + (($671*40)|0)|0);
             $currentObjectMaterialFacesPointer = $673;
             continue;
            }
            __THREW__ = 0;
            $676 = (invoke_ii(366,($line|0))|0);
            $677 = __THREW__; __THREW__ = 0;
            $678 = $677&1;
            if ($678) {
             label = 26;
             break L13;
            }
            if (!($676)) {
             $768 = HEAP32[475]|0;
             __THREW__ = 0;
             HEAP32[$vararg_buffer14>>2] = $line;
             (invoke_iiii(339,($768|0),(10535|0),($vararg_buffer14|0))|0);
             $769 = __THREW__; __THREW__ = 0;
             $770 = $769&1;
             if ($770) {
              label = 26;
              break L13;
             }
             $771 = HEAP32[475]|0;
             __THREW__ = 0;
             (invoke_iiii(339,($771|0),(11077|0),($vararg_buffer17|0))|0);
             $772 = __THREW__; __THREW__ = 0;
             $773 = $772&1;
             if ($773) {
              label = 26;
              break L13;
             } else {
              continue;
             }
            }
            $679 = $currentObjectMaterialFacesPointer;
            $680 = $currentLastFacesPointer;
            $681 = $currentObjectMaterialFacesPointer;
            $682 = $680;
            $683 = $681;
            $684 = (($682) - ($683))|0;
            $685 = (($684|0) / 40)&-1;
            __THREW__ = 0;
            invoke_viiiii(363,($289|0),($currentObjectGroupName|0),($currentMaterial|0),($679|0),($685|0));
            $686 = __THREW__; __THREW__ = 0;
            $687 = $686&1;
            if ($687) {
             label = 26;
             break L13;
            }
            __THREW__ = 0;
            invoke_vii(367,($288|0),($line|0));
            $688 = __THREW__; __THREW__ = 0;
            $689 = $688&1;
            if ($689) {
             label = 26;
             break L13;
            }
            $170 = $currentObjectGroupName;
            $171 = $288;
            $690 = $170;
            $691 = $171;
            ;HEAP8[$169>>0]=HEAP8[$172>>0]|0;
            $167 = $690;
            $168 = $691;
            $692 = $167;
            $164 = $692;
            $693 = $164;
            $163 = $693;
            $162 = $693;
            $694 = $162;
            $161 = $694;
            $695 = $161;
            $160 = $695;
            $696 = $160;
            $697 = HEAP8[$696>>0]|0;
            $698 = $697&255;
            $699 = $698 & 1;
            $700 = ($699|0)!=(0);
            if ($700) {
             $155 = $693;
             $701 = $155;
             $154 = $701;
             $702 = $154;
             $153 = $702;
             $703 = $153;
             $704 = ((($703)) + 8|0);
             $705 = HEAP32[$704>>2]|0;
             HEAP8[$165>>0] = 0;
             __ZNSt3__111char_traitsIcE6assignERcRKc($705,$165);
             $146 = $693;
             $147 = 0;
             $706 = $146;
             $707 = $147;
             $145 = $706;
             $708 = $145;
             $144 = $708;
             $709 = $144;
             $710 = ((($709)) + 4|0);
             HEAP32[$710>>2] = $707;
            } else {
             $152 = $693;
             $711 = $152;
             $151 = $711;
             $712 = $151;
             $150 = $712;
             $713 = $150;
             $714 = ((($713)) + 1|0);
             $149 = $714;
             $715 = $149;
             $148 = $715;
             $716 = $148;
             HEAP8[$166>>0] = 0;
             __ZNSt3__111char_traitsIcE6assignERcRKc($716,$166);
             $158 = $693;
             $159 = 0;
             $717 = $158;
             $718 = $159;
             $719 = $718 << 1;
             $720 = $719&255;
             $157 = $717;
             $721 = $157;
             $156 = $721;
             $722 = $156;
             HEAP8[$722>>0] = $720;
            }
            $143 = $692;
            $723 = $143;
            __THREW__ = 0;
            invoke_vii(368,($723|0),0);
            $724 = __THREW__; __THREW__ = 0;
            $725 = $724&1;
            if ($725) {
             label = 65;
             break;
            }
            $142 = $692;
            $728 = $142;
            $141 = $728;
            $729 = $141;
            $730 = $168;
            $140 = $730;
            $731 = $140;
            $139 = $731;
            $732 = $139;
            ;HEAP32[$729>>2]=HEAP32[$732>>2]|0;HEAP32[$729+4>>2]=HEAP32[$732+4>>2]|0;HEAP32[$729+8>>2]=HEAP32[$732+8>>2]|0;
            $733 = $168;
            $136 = $692;
            $137 = $733;
            $734 = $136;
            $735 = $137;
            ;HEAP8[$135>>0]=HEAP8[$138>>0]|0;
            $133 = $734;
            $134 = $735;
            $736 = $133;
            $132 = $736;
            $737 = $132;
            $131 = $737;
            $738 = $131;
            $130 = $738;
            $739 = $134;
            $128 = $739;
            $740 = $128;
            $127 = $740;
            $741 = $127;
            $126 = $741;
            $742 = $126;
            $129 = $742;
            $743 = $168;
            $125 = $743;
            $744 = $125;
            $124 = $744;
            $745 = $124;
            $123 = $745;
            $746 = $123;
            $__a$i$i$i = $746;
            $__i$i$i$i = 0;
            while(1) {
             $747 = $__i$i$i$i;
             $748 = ($747>>>0)<(3);
             if (!($748)) {
              break;
             }
             $749 = $__i$i$i$i;
             $750 = $__a$i$i$i;
             $751 = (($750) + ($749<<2)|0);
             HEAP32[$751>>2] = 0;
             $752 = $__i$i$i$i;
             $753 = (($752) + 1)|0;
             $__i$i$i$i = $753;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($288);
            $754 = ((($289)) + 36|0);
            $755 = ((($289)) + 36|0);
            $173 = $755;
            $756 = $173;
            $757 = ((($756)) + 4|0);
            $758 = HEAP32[$757>>2]|0;
            $759 = HEAP32[$756>>2]|0;
            $760 = $758;
            $761 = $759;
            $762 = (($760) - ($761))|0;
            $763 = (($762|0) / 40)&-1;
            $174 = $754;
            $175 = $763;
            $764 = $174;
            $765 = $175;
            $766 = HEAP32[$764>>2]|0;
            $767 = (($766) + (($765*40)|0)|0);
            $currentObjectMaterialFacesPointer = $767;
           }
           if ((label|0) == 16) {
            $433 = ___cxa_find_matching_catch_2()|0;
            $434 = tempRet0;
            $113 = $433;
            $114 = $434;
            __ZNSt3__16localeD2Ev($112);
            $435 = $113;
            $436 = $114;
            $eh$lpad$body$index54Z2D = $436;$eh$lpad$body$indexZ2D = $435;
            label = 27;
            break;
           }
           else if ((label|0) == 56) {
            $674 = ___cxa_find_matching_catch_2()|0;
            $675 = tempRet0;
            $276 = $674;
            $277 = $675;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($287);
            break;
           }
           else if ((label|0) == 65) {
            $726 = ___cxa_find_matching_catch_3(0|0)|0;
            $727 = tempRet0;
            ___clang_call_terminate($726);
            // unreachable;
           }
           else if ((label|0) == 72) {
            $176 = $453;
            $774 = $176;
            $775 = ((($774)) + 4|0);
            $776 = HEAP32[$775>>2]|0;
            $777 = HEAP32[$774>>2]|0;
            $778 = $776;
            $779 = $777;
            $780 = (($778) - ($779))|0;
            $781 = (($780|0) / 40)&-1;
            $177 = $452;
            $178 = $781;
            $782 = $177;
            $783 = $178;
            $784 = HEAP32[$782>>2]|0;
            $785 = (($784) + (($783*40)|0)|0);
            $currentLastFacesPointer = $785;
            $786 = $currentObjectMaterialFacesPointer;
            $787 = $currentLastFacesPointer;
            $788 = $currentObjectMaterialFacesPointer;
            $789 = $787;
            $790 = $788;
            $791 = (($789) - ($790))|0;
            $792 = (($791|0) / 40)&-1;
            __THREW__ = 0;
            invoke_viiiii(363,($289|0),($currentObjectGroupName|0),($currentMaterial|0),($786|0),($792|0));
            $793 = __THREW__; __THREW__ = 0;
            $794 = $793&1;
            if ($794) {
             label = 26;
             break;
            }
            $795 = HEAP32[504]|0;
            __THREW__ = 0;
            (invoke_iiii(339,($795|0),(10557|0),($vararg_buffer19|0))|0);
            $796 = __THREW__; __THREW__ = 0;
            $797 = $796&1;
            if ($797) {
             label = 26;
             break;
            }
            $798 = HEAP32[504]|0;
            __THREW__ = 0;
            (invoke_iiii(339,($798|0),(11077|0),($vararg_buffer21|0))|0);
            $799 = __THREW__; __THREW__ = 0;
            $800 = $799&1;
            if ($800) {
             label = 26;
             break;
            }
            $801 = HEAP32[504]|0;
            $181 = $289;
            $802 = $181;
            $803 = ((($802)) + 4|0);
            $804 = HEAP32[$803>>2]|0;
            $805 = HEAP32[$802>>2]|0;
            $806 = $804;
            $807 = $805;
            $808 = (($806) - ($807))|0;
            $809 = (($808|0) / 12)&-1;
            __THREW__ = 0;
            HEAP32[$vararg_buffer23>>2] = $809;
            (invoke_iiii(339,($801|0),(10587|0),($vararg_buffer23|0))|0);
            $810 = __THREW__; __THREW__ = 0;
            $811 = $810&1;
            if ($811) {
             label = 26;
             break;
            }
            $812 = HEAP32[504]|0;
            __THREW__ = 0;
            (invoke_iiii(339,($812|0),(11077|0),($vararg_buffer26|0))|0);
            $813 = __THREW__; __THREW__ = 0;
            $814 = $813&1;
            if ($814) {
             label = 26;
             break;
            }
            $815 = HEAP32[504]|0;
            $816 = ((($289)) + 12|0);
            $182 = $816;
            $817 = $182;
            $818 = ((($817)) + 4|0);
            $819 = HEAP32[$818>>2]|0;
            $820 = HEAP32[$817>>2]|0;
            $821 = $819;
            $822 = $820;
            $823 = (($821) - ($822))|0;
            $824 = (($823|0) / 8)&-1;
            __THREW__ = 0;
            HEAP32[$vararg_buffer28>>2] = $824;
            (invoke_iiii(339,($815|0),(10608|0),($vararg_buffer28|0))|0);
            $825 = __THREW__; __THREW__ = 0;
            $826 = $825&1;
            if ($826) {
             label = 26;
             break;
            }
            $827 = HEAP32[504]|0;
            __THREW__ = 0;
            (invoke_iiii(339,($827|0),(11077|0),($vararg_buffer31|0))|0);
            $828 = __THREW__; __THREW__ = 0;
            $829 = $828&1;
            if ($829) {
             label = 26;
             break;
            }
            $830 = HEAP32[504]|0;
            $831 = ((($289)) + 24|0);
            $183 = $831;
            $832 = $183;
            $833 = ((($832)) + 4|0);
            $834 = HEAP32[$833>>2]|0;
            $835 = HEAP32[$832>>2]|0;
            $836 = $834;
            $837 = $835;
            $838 = (($836) - ($837))|0;
            $839 = (($838|0) / 12)&-1;
            __THREW__ = 0;
            HEAP32[$vararg_buffer33>>2] = $839;
            (invoke_iiii(339,($830|0),(10636|0),($vararg_buffer33|0))|0);
            $840 = __THREW__; __THREW__ = 0;
            $841 = $840&1;
            if ($841) {
             label = 26;
             break;
            }
            $842 = HEAP32[504]|0;
            __THREW__ = 0;
            (invoke_iiii(339,($842|0),(11077|0),($vararg_buffer36|0))|0);
            $843 = __THREW__; __THREW__ = 0;
            $844 = $843&1;
            if ($844) {
             label = 26;
             break;
            }
            $845 = HEAP32[504]|0;
            $846 = ((($289)) + 36|0);
            $184 = $846;
            $847 = $184;
            $848 = ((($847)) + 4|0);
            $849 = HEAP32[$848>>2]|0;
            $850 = HEAP32[$847>>2]|0;
            $851 = $849;
            $852 = $850;
            $853 = (($851) - ($852))|0;
            $854 = (($853|0) / 40)&-1;
            __THREW__ = 0;
            HEAP32[$vararg_buffer38>>2] = $854;
            (invoke_iiii(339,($845|0),(10663|0),($vararg_buffer38|0))|0);
            $855 = __THREW__; __THREW__ = 0;
            $856 = $855&1;
            if ($856) {
             label = 26;
             break;
            }
            $857 = HEAP32[504]|0;
            __THREW__ = 0;
            (invoke_iiii(339,($857|0),(11077|0),($vararg_buffer41|0))|0);
            $858 = __THREW__; __THREW__ = 0;
            $859 = $858&1;
            if ($859) {
             label = 26;
             break;
            }
            $860 = HEAP32[504]|0;
            $861 = ((($289)) + 48|0);
            __THREW__ = 0;
            $862 = (invoke_ii(369,($861|0))|0);
            $863 = __THREW__; __THREW__ = 0;
            $864 = $863&1;
            if ($864) {
             label = 26;
             break;
            }
            __THREW__ = 0;
            HEAP32[$vararg_buffer43>>2] = $862;
            (invoke_iiii(339,($860|0),(10681|0),($vararg_buffer43|0))|0);
            $865 = __THREW__; __THREW__ = 0;
            $866 = $865&1;
            if ($866) {
             label = 26;
             break;
            }
            $867 = HEAP32[504]|0;
            __THREW__ = 0;
            (invoke_iiii(339,($867|0),(11077|0),($vararg_buffer46|0))|0);
            $868 = __THREW__; __THREW__ = 0;
            $869 = $868&1;
            if ($869) {
             label = 26;
             break;
            }
            $870 = HEAP32[504]|0;
            $871 = ((($289)) + 80|0);
            $188 = $871;
            $872 = $188;
            $187 = $872;
            $873 = $187;
            $874 = ((($873)) + 12|0);
            $186 = $874;
            $875 = $186;
            $185 = $875;
            $876 = $185;
            $877 = HEAP32[$876>>2]|0;
            __THREW__ = 0;
            HEAP32[$vararg_buffer48>>2] = $877;
            (invoke_iiii(339,($870|0),(10703|0),($vararg_buffer48|0))|0);
            $878 = __THREW__; __THREW__ = 0;
            $879 = $878&1;
            if ($879) {
             label = 26;
             break;
            }
            $880 = HEAP32[504]|0;
            __THREW__ = 0;
            (invoke_iiii(339,($880|0),(11077|0),($vararg_buffer51|0))|0);
            $881 = __THREW__; __THREW__ = 0;
            $882 = $881&1;
            if ($882) {
             label = 26;
             break;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($currentObjectGroupName);
            __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($currentMaterial);
            $222 = $input;
            $883 = $222;
            $220 = $883;
            $221 = 0;
            $884 = $220;
            $219 = $884;
            $885 = $219;
            $218 = $885;
            $886 = $218;
            $887 = HEAP32[$886>>2]|0;
            $__tmp$i$i1 = $887;
            $888 = $221;
            $215 = $884;
            $889 = $215;
            $214 = $889;
            $890 = $214;
            HEAP32[$890>>2] = $888;
            $891 = $__tmp$i$i1;
            $892 = ($891|0)!=(0|0);
            if (!($892)) {
             STACKTOP = sp;return;
            }
            $213 = $884;
            $893 = $213;
            $212 = $893;
            $894 = $212;
            $895 = $__tmp$i$i1;
            $216 = $894;
            $217 = $895;
            $896 = $217;
            $897 = ($896|0)==(0|0);
            if ($897) {
             STACKTOP = sp;return;
            }
            $898 = HEAP32[$896>>2]|0;
            $899 = ((($898)) + 4|0);
            $900 = HEAP32[$899>>2]|0;
            FUNCTION_TABLE_vi[$900 & 1023]($896);
            STACKTOP = sp;return;
           }
          }
         }
        } while(0);
        if ((label|0) == 26) {
         $507 = ___cxa_find_matching_catch_2()|0;
         $508 = tempRet0;
         $eh$lpad$body$index54Z2D = $508;$eh$lpad$body$indexZ2D = $507;
         label = 27;
        }
        if ((label|0) == 27) {
         $276 = $eh$lpad$body$indexZ2D;
         $277 = $eh$lpad$body$index54Z2D;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($currentObjectGroupName);
        __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($currentMaterial);
       }
      }
     }
    }
   }
  }
 }
 if ((label|0) == 25) {
  $505 = ___cxa_find_matching_catch_2()|0;
  $506 = tempRet0;
  $276 = $505;
  $277 = $506;
 }
 $259 = $input;
 $901 = $259;
 $257 = $901;
 $258 = 0;
 $902 = $257;
 $256 = $902;
 $903 = $256;
 $255 = $903;
 $904 = $255;
 $905 = HEAP32[$904>>2]|0;
 $__tmp$i$i = $905;
 $906 = $258;
 $252 = $902;
 $907 = $252;
 $251 = $907;
 $908 = $251;
 HEAP32[$908>>2] = $906;
 $909 = $__tmp$i$i;
 $910 = ($909|0)!=(0|0);
 if (!($910)) {
  $919 = $276;
  $920 = $277;
  ___resumeException($919|0);
  // unreachable;
 }
 $250 = $902;
 $911 = $250;
 $249 = $911;
 $912 = $249;
 $913 = $__tmp$i$i;
 $253 = $912;
 $254 = $913;
 $914 = $254;
 $915 = ($914|0)==(0|0);
 if ($915) {
  $919 = $276;
  $920 = $277;
  ___resumeException($919|0);
  // unreachable;
 }
 $916 = HEAP32[$914>>2]|0;
 $917 = ((($916)) + 4|0);
 $918 = HEAP32[$917>>2]|0;
 FUNCTION_TABLE_vi[$918 & 1023]($914);
 $919 = $276;
 $920 = $277;
 ___resumeException($919|0);
 // unreachable;
}
function __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 12)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -12|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(370,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch_3(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 12)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 12)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 12)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN9ObjMaster13VertexElementERNS_9allocatorIS2_EEEC2EjjS5_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(371,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferIN9ObjMaster13VertexElementERNS_9allocatorIS2_EEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN9ObjMaster13VertexElementERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN9ObjMaster13VertexElementERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*12)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*12)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*12)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 12)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + (($51*12)|0)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = ($56*12)|0;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 12)&-1;
 __ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN9ObjMaster13VertexElementERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -12|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 12)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 8)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -8|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(372,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch_3(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 8)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 8)&-1;
 $35 = (($22) + ($34<<3)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<3)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $52 = (($43) + ($51<<3)|0);
 __ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 8)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 8)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN9ObjMaster20VertexTextureElementERNS_9allocatorIS2_EEEC2EjjS5_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(373,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferIN9ObjMaster20VertexTextureElementERNS_9allocatorIS2_EEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN9ObjMaster20VertexTextureElementERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN9ObjMaster20VertexTextureElementERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<3;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<3)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<3)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 8)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<3)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<3;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 8)&-1;
 __ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 8)&-1;
 $51 = (($42) + ($50<<3)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 8)&-1;
 $67 = (($54) + ($66<<3)|0);
 __ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN9ObjMaster20VertexTextureElementERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -8|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 8)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 12)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -12|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(374,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch_3(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 12)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 12)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 12)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN9ObjMaster19VertexNormalElementERNS_9allocatorIS2_EEEC2EjjS5_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(375,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferIN9ObjMaster19VertexNormalElementERNS_9allocatorIS2_EEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN9ObjMaster19VertexNormalElementERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN9ObjMaster19VertexNormalElementERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*12)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*12)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*12)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 12)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + (($51*12)|0)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = ($56*12)|0;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 12)&-1;
 __ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN9ObjMaster19VertexNormalElementERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -12|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 12)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 40)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -40|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(376,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch_3(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 40)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 40)&-1;
 $35 = (($22) + (($34*40)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*40)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 40)&-1;
 $52 = (($43) + (($51*40)|0)|0);
 __ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 40)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 40)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN9ObjMaster11FaceElementERNS_9allocatorIS2_EEEC2EjjS5_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(377,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferIN9ObjMaster11FaceElementERNS_9allocatorIS2_EEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIN9ObjMaster11FaceElementERNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN9ObjMaster11FaceElementERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*40)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*40)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*40)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 40)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + (($51*40)|0)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = ($56*40)|0;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 40)&-1;
 __ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 40)&-1;
 $39 = (($26) + (($38*40)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 40)&-1;
 $51 = (($42) + (($50*40)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 40)&-1;
 $67 = (($54) + (($66*40)|0)|0);
 __ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 40)&-1;
 $39 = (($26) + (($38*40)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 40)&-1;
 $55 = (($42) + (($54*40)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*40)|0)|0);
 __ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN9ObjMaster11FaceElementERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -40|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 40)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster26TextureDataHoldingMaterialC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 148|0;
 $6 = sp + 136|0;
 $13 = sp + 108|0;
 $16 = sp + 96|0;
 $23 = sp + 68|0;
 $26 = sp + 56|0;
 $33 = sp + 28|0;
 $36 = sp + 16|0;
 $40 = $this;
 $41 = $40;
 __ZN9ObjMaster8MaterialC2Ev($41);
 $42 = ((($41)) + 108|0);
 $39 = $42;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $37 = $44;
 HEAP32[$44>>2] = 0;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($44)) + 8|0);
 $35 = $46;
 HEAP32[$36>>2] = 0;
 $47 = $35;
 $34 = $36;
 $48 = $34;
 $49 = HEAP32[$48>>2]|0;
 $32 = $47;
 HEAP32[$33>>2] = $49;
 $50 = $32;
 $31 = $50;
 $30 = $33;
 $51 = $30;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$50>>2] = $52;
 $53 = ((($41)) + 120|0);
 $9 = $53;
 $54 = $9;
 $8 = $54;
 $55 = $8;
 $7 = $55;
 HEAP32[$55>>2] = 0;
 $56 = ((($55)) + 4|0);
 HEAP32[$56>>2] = 0;
 $57 = ((($55)) + 8|0);
 $5 = $57;
 HEAP32[$6>>2] = 0;
 $58 = $5;
 $4 = $6;
 $59 = $4;
 $60 = HEAP32[$59>>2]|0;
 $2 = $58;
 HEAP32[$3>>2] = $60;
 $61 = $2;
 $1 = $61;
 $0 = $3;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 HEAP32[$61>>2] = $63;
 $64 = ((($41)) + 132|0);
 $19 = $64;
 $65 = $19;
 $18 = $65;
 $66 = $18;
 $17 = $66;
 HEAP32[$66>>2] = 0;
 $67 = ((($66)) + 4|0);
 HEAP32[$67>>2] = 0;
 $68 = ((($66)) + 8|0);
 $15 = $68;
 HEAP32[$16>>2] = 0;
 $69 = $15;
 $14 = $16;
 $70 = $14;
 $71 = HEAP32[$70>>2]|0;
 $12 = $69;
 HEAP32[$13>>2] = $71;
 $72 = $12;
 $11 = $72;
 $10 = $13;
 $73 = $10;
 $74 = HEAP32[$73>>2]|0;
 HEAP32[$72>>2] = $74;
 $75 = ((($41)) + 144|0);
 $29 = $75;
 $76 = $29;
 $28 = $76;
 $77 = $28;
 $27 = $77;
 HEAP32[$77>>2] = 0;
 $78 = ((($77)) + 4|0);
 HEAP32[$78>>2] = 0;
 $79 = ((($77)) + 8|0);
 $25 = $79;
 HEAP32[$26>>2] = 0;
 $80 = $25;
 $24 = $26;
 $81 = $24;
 $82 = HEAP32[$81>>2]|0;
 $22 = $80;
 HEAP32[$23>>2] = $82;
 $83 = $22;
 $21 = $83;
 $20 = $23;
 $84 = $20;
 $85 = HEAP32[$84>>2]|0;
 HEAP32[$83>>2] = $85;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster8MaterialC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__a$i$i1 = 0, $__a$i$i10 = 0, $__a$i$i4 = 0, $__a$i$i7 = 0, $__i$i$i = 0;
 var $__i$i$i11 = 0, $__i$i$i2 = 0, $__i$i$i5 = 0, $__i$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 288|0;
 $8 = sp + 276|0;
 $15 = sp + 248|0;
 $18 = sp + 236|0;
 $25 = sp + 208|0;
 $28 = sp + 196|0;
 $67 = $this;
 $68 = $67;
 $66 = $68;
 $69 = $66;
 $65 = $69;
 $70 = $65;
 $64 = $70;
 $71 = $64;
 $63 = $71;
 $62 = $69;
 $72 = $62;
 $61 = $72;
 $73 = $61;
 $60 = $73;
 $74 = $60;
 $__a$i$i = $74;
 $__i$i$i = 0;
 while(1) {
  $75 = $__i$i$i;
  $76 = ($75>>>0)<(3);
  if (!($76)) {
   break;
  }
  $77 = $__i$i$i;
  $78 = $__a$i$i;
  $79 = (($78) + ($77<<2)|0);
  HEAP32[$79>>2] = 0;
  $80 = $__i$i$i;
  $81 = (($80) + 1)|0;
  $__i$i$i = $81;
 }
 $82 = ((($68)) + 12|0);
 $1 = $82;
 $83 = $1;
 $0 = $83;
 $84 = $0;
 HEAP32[$84>>2] = 0;
 $85 = ((($68)) + 16|0);
 $11 = $85;
 $86 = $11;
 $10 = $86;
 $87 = $10;
 $9 = $87;
 HEAP32[$87>>2] = 0;
 $88 = ((($87)) + 4|0);
 HEAP32[$88>>2] = 0;
 $89 = ((($87)) + 8|0);
 $7 = $89;
 HEAP32[$8>>2] = 0;
 $90 = $7;
 $6 = $8;
 $91 = $6;
 $92 = HEAP32[$91>>2]|0;
 $4 = $90;
 HEAP32[$5>>2] = $92;
 $93 = $4;
 $3 = $93;
 $2 = $5;
 $94 = $2;
 $95 = HEAP32[$94>>2]|0;
 HEAP32[$93>>2] = $95;
 $96 = ((($68)) + 28|0);
 $21 = $96;
 $97 = $21;
 $20 = $97;
 $98 = $20;
 $19 = $98;
 HEAP32[$98>>2] = 0;
 $99 = ((($98)) + 4|0);
 HEAP32[$99>>2] = 0;
 $100 = ((($98)) + 8|0);
 $17 = $100;
 HEAP32[$18>>2] = 0;
 $101 = $17;
 $16 = $18;
 $102 = $16;
 $103 = HEAP32[$102>>2]|0;
 $14 = $101;
 HEAP32[$15>>2] = $103;
 $104 = $14;
 $13 = $104;
 $12 = $15;
 $105 = $12;
 $106 = HEAP32[$105>>2]|0;
 HEAP32[$104>>2] = $106;
 $107 = ((($68)) + 40|0);
 $31 = $107;
 $108 = $31;
 $30 = $108;
 $109 = $30;
 $29 = $109;
 HEAP32[$109>>2] = 0;
 $110 = ((($109)) + 4|0);
 HEAP32[$110>>2] = 0;
 $111 = ((($109)) + 8|0);
 $27 = $111;
 HEAP32[$28>>2] = 0;
 $112 = $27;
 $26 = $28;
 $113 = $26;
 $114 = HEAP32[$113>>2]|0;
 $24 = $112;
 HEAP32[$25>>2] = $114;
 $115 = $24;
 $23 = $115;
 $22 = $25;
 $116 = $22;
 $117 = HEAP32[$116>>2]|0;
 HEAP32[$115>>2] = $117;
 $118 = ((($68)) + 52|0);
 $38 = $118;
 $119 = $38;
 $37 = $119;
 $120 = $37;
 $36 = $120;
 $121 = $36;
 $35 = $121;
 $34 = $119;
 $122 = $34;
 $33 = $122;
 $123 = $33;
 $32 = $123;
 $124 = $32;
 $__a$i$i10 = $124;
 $__i$i$i11 = 0;
 while(1) {
  $125 = $__i$i$i11;
  $126 = ($125>>>0)<(3);
  if (!($126)) {
   break;
  }
  $127 = $__i$i$i11;
  $128 = $__a$i$i10;
  $129 = (($128) + ($127<<2)|0);
  HEAP32[$129>>2] = 0;
  $130 = $__i$i$i11;
  $131 = (($130) + 1)|0;
  $__i$i$i11 = $131;
 }
 $132 = ((($68)) + 64|0);
 $45 = $132;
 $133 = $45;
 $44 = $133;
 $134 = $44;
 $43 = $134;
 $135 = $43;
 $42 = $135;
 $41 = $133;
 $136 = $41;
 $40 = $136;
 $137 = $40;
 $39 = $137;
 $138 = $39;
 $__a$i$i7 = $138;
 $__i$i$i8 = 0;
 while(1) {
  $139 = $__i$i$i8;
  $140 = ($139>>>0)<(3);
  if (!($140)) {
   break;
  }
  $141 = $__i$i$i8;
  $142 = $__a$i$i7;
  $143 = (($142) + ($141<<2)|0);
  HEAP32[$143>>2] = 0;
  $144 = $__i$i$i8;
  $145 = (($144) + 1)|0;
  $__i$i$i8 = $145;
 }
 $146 = ((($68)) + 76|0);
 $52 = $146;
 $147 = $52;
 $51 = $147;
 $148 = $51;
 $50 = $148;
 $149 = $50;
 $49 = $149;
 $48 = $147;
 $150 = $48;
 $47 = $150;
 $151 = $47;
 $46 = $151;
 $152 = $46;
 $__a$i$i4 = $152;
 $__i$i$i5 = 0;
 while(1) {
  $153 = $__i$i$i5;
  $154 = ($153>>>0)<(3);
  if (!($154)) {
   break;
  }
  $155 = $__i$i$i5;
  $156 = $__a$i$i4;
  $157 = (($156) + ($155<<2)|0);
  HEAP32[$157>>2] = 0;
  $158 = $__i$i$i5;
  $159 = (($158) + 1)|0;
  $__i$i$i5 = $159;
 }
 $160 = ((($68)) + 88|0);
 $59 = $160;
 $161 = $59;
 $58 = $161;
 $162 = $58;
 $57 = $162;
 $163 = $57;
 $56 = $163;
 $55 = $161;
 $164 = $55;
 $54 = $164;
 $165 = $54;
 $53 = $165;
 $166 = $53;
 $__a$i$i1 = $166;
 $__i$i$i2 = 0;
 while(1) {
  $167 = $__i$i$i2;
  $168 = ($167>>>0)<(3);
  if (!($168)) {
   break;
  }
  $169 = $__i$i$i2;
  $170 = $__a$i$i1;
  $171 = (($170) + ($169<<2)|0);
  HEAP32[$171>>2] = 0;
  $172 = $__i$i$i2;
  $173 = (($172) + 1)|0;
  $__i$i$i2 = $173;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 12)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 12)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 12)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN9ObjMaster13VertexElementERNS_9allocatorIS2_EEEC2EjjS5_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 ;HEAP32[$118>>2]=HEAP32[$120>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$120+8>>2]|0;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 12|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(371,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch_2()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN9ObjMaster13VertexElementERNS_9allocatorIS2_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN9ObjMaster13VertexElementERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 8)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 8)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 8)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN9ObjMaster20VertexTextureElementERNS_9allocatorIS2_EEEC2EjjS5_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 ;HEAP32[$118>>2]=HEAP32[$120>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 8|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(373,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch_2()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN9ObjMaster20VertexTextureElementERNS_9allocatorIS2_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN9ObjMaster20VertexTextureElementERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 12)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 12)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 12)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN9ObjMaster19VertexNormalElementERNS_9allocatorIS2_EEEC2EjjS5_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 ;HEAP32[$118>>2]=HEAP32[$120>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$120+8>>2]|0;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 12|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(375,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch_2()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN9ObjMaster19VertexNormalElementERNS_9allocatorIS2_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN9ObjMaster19VertexNormalElementERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 40)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 40)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 40)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN9ObjMaster11FaceElementERNS_9allocatorIS2_EEEC2EjjS5_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 dest=$118; src=$120; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 40|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(377,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch_2()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferIN9ObjMaster11FaceElementERNS_9allocatorIS2_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN9ObjMaster11FaceElementERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 107374182;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZN9ObjMaster6MtlLibaSEOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 39|0;
 $$byval_copy = sp + 38|0;
 $3 = sp + 37|0;
 $9 = sp + 36|0;
 $10 = $this;
 $11 = $0;
 $12 = $10;
 $13 = $11;
 $7 = $12;
 $8 = $13;
 $14 = $7;
 $15 = $8;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$9>>0]|0;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE13__move_assignERS8_NS_17integral_constantIbLb1EEE($14,$15,$$byval_copy);
 $16 = ((($12)) + 12|0);
 $17 = $11;
 $18 = ((($17)) + 12|0);
 $5 = $16;
 $6 = $18;
 $19 = $5;
 $20 = $6;
 $4 = $20;
 $21 = $4;
 $1 = $19;
 $2 = $21;
 $22 = $1;
 $23 = $2;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$3>>0]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE13__move_assignERSK_NS_17integral_constantIbLb1EEE($22,$23,$$byval_copy1);
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE13__move_assignERS8_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 12)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -12|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
  $68 = $20;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($68);
 }
 $69 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(378,($40|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $72 = ___cxa_find_matching_catch_3(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $74 = $17;
 $75 = ((($74)) + 8|0);
 $16 = $75;
 $76 = $16;
 $15 = $76;
 $77 = $15;
 $78 = HEAP32[$37>>2]|0;
 $14 = $37;
 $79 = $14;
 $13 = $79;
 $80 = $13;
 $12 = $80;
 $81 = $12;
 $82 = ((($81)) + 8|0);
 $11 = $82;
 $83 = $11;
 $10 = $83;
 $84 = $10;
 $85 = HEAP32[$84>>2]|0;
 $86 = HEAP32[$80>>2]|0;
 $87 = $85;
 $88 = $86;
 $89 = (($87) - ($88))|0;
 $90 = (($89|0) / 12)&-1;
 $7 = $77;
 $8 = $78;
 $9 = $90;
 $91 = $7;
 $92 = $8;
 $93 = $9;
 $4 = $91;
 $5 = $92;
 $6 = $93;
 $94 = $5;
 $3 = $94;
 $95 = $3;
 __ZdlPv($95);
 $2 = $37;
 $96 = $2;
 $97 = ((($96)) + 8|0);
 $1 = $97;
 $98 = $1;
 $0 = $98;
 $99 = $0;
 HEAP32[$99>>2] = 0;
 $100 = ((($37)) + 4|0);
 HEAP32[$100>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE13__move_assignERSK_NS_17integral_constantIbLb1EEE($this,$__u,$0) {
 $this = $this|0;
 $__u = $__u|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__t$i = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $38 = sp;
 $41 = sp + 528|0;
 $130 = $this;
 $131 = $__u;
 $132 = $130;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE5clearEv($132);
 $133 = $131;
 $129 = $133;
 $134 = $129;
 $128 = $134;
 $135 = $128;
 $127 = $135;
 $136 = $127;
 $137 = HEAP32[$136>>2]|0;
 $__t$i = $137;
 $126 = $134;
 $138 = $126;
 $125 = $138;
 $139 = $125;
 HEAP32[$139>>2] = 0;
 $140 = $__t$i;
 $123 = $132;
 $124 = $140;
 $141 = $123;
 $122 = $141;
 $142 = $122;
 $121 = $142;
 $143 = $121;
 $144 = HEAP32[$143>>2]|0;
 $__tmp$i = $144;
 $145 = $124;
 $105 = $141;
 $146 = $105;
 $104 = $146;
 $147 = $104;
 HEAP32[$147>>2] = $145;
 $148 = $__tmp$i;
 $149 = ($148|0)!=(0|0);
 if ($149) {
  $103 = $141;
  $150 = $103;
  $102 = $150;
  $151 = $102;
  $152 = ((($151)) + 4|0);
  $153 = $__tmp$i;
  $119 = $152;
  $120 = $153;
  $154 = $119;
  $118 = $154;
  $155 = $118;
  $117 = $155;
  $156 = $117;
  $116 = $156;
  $157 = $116;
  $158 = $120;
  $108 = $154;
  $159 = $108;
  $107 = $159;
  $160 = $107;
  $106 = $160;
  $161 = $106;
  $162 = HEAP32[$161>>2]|0;
  $113 = $157;
  $114 = $158;
  $115 = $162;
  $163 = $113;
  $164 = $114;
  $165 = $115;
  $110 = $163;
  $111 = $164;
  $112 = $165;
  $166 = $111;
  $109 = $166;
  $167 = $109;
  __ZdlPv($167);
 }
 $168 = $131;
 $101 = $168;
 $169 = $101;
 $100 = $169;
 $170 = $100;
 $99 = $170;
 $171 = $99;
 $172 = ((($171)) + 4|0);
 $3 = $172;
 $173 = $3;
 $2 = $173;
 $174 = $2;
 $1 = $174;
 $175 = $1;
 $176 = HEAP32[$175>>2]|0;
 $6 = $132;
 $177 = $6;
 $5 = $177;
 $178 = $5;
 $4 = $178;
 $179 = $4;
 $180 = ((($179)) + 4|0);
 $9 = $180;
 $181 = $9;
 $8 = $181;
 $182 = $8;
 $7 = $182;
 $183 = $7;
 HEAP32[$183>>2] = $176;
 $184 = $131;
 $12 = $184;
 $185 = $12;
 $11 = $185;
 $186 = $11;
 $10 = $186;
 $187 = $10;
 $188 = ((($187)) + 4|0);
 $15 = $188;
 $189 = $15;
 $14 = $189;
 $190 = $14;
 $13 = $190;
 $191 = $13;
 HEAP32[$191>>2] = 0;
 $192 = $131;
 $39 = $132;
 $40 = $192;
 $193 = $39;
 $194 = $40;
 ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
 $36 = $193;
 $37 = $194;
 $195 = $36;
 $35 = $195;
 $196 = $35;
 $34 = $196;
 $197 = $34;
 $33 = $197;
 $198 = $33;
 $199 = ((($198)) + 4|0);
 $18 = $199;
 $200 = $18;
 $17 = $200;
 $201 = $17;
 $16 = $201;
 $202 = $37;
 $21 = $202;
 $203 = $21;
 $20 = $203;
 $204 = $20;
 $19 = $204;
 $205 = $19;
 $206 = ((($205)) + 4|0);
 $24 = $206;
 $207 = $24;
 $23 = $207;
 $208 = $23;
 $22 = $208;
 $209 = $22;
 $25 = $209;
 $28 = $195;
 $210 = $28;
 $211 = ((($210)) + 8|0);
 $27 = $211;
 $212 = $27;
 $26 = $212;
 $213 = $37;
 $31 = $213;
 $214 = $31;
 $215 = ((($214)) + 8|0);
 $30 = $215;
 $216 = $30;
 $29 = $216;
 $217 = $29;
 $32 = $217;
 $218 = $131;
 $44 = $218;
 $219 = $44;
 $220 = ((($219)) + 12|0);
 $43 = $220;
 $221 = $43;
 $42 = $221;
 $222 = $42;
 $223 = HEAP32[$222>>2]|0;
 $47 = $132;
 $224 = $47;
 $225 = ((($224)) + 12|0);
 $46 = $225;
 $226 = $46;
 $45 = $226;
 $227 = $45;
 HEAP32[$227>>2] = $223;
 $50 = $132;
 $228 = $50;
 $229 = ((($228)) + 12|0);
 $49 = $229;
 $230 = $49;
 $48 = $230;
 $231 = $131;
 $53 = $231;
 $232 = $53;
 $233 = ((($232)) + 12|0);
 $52 = $233;
 $234 = $52;
 $51 = $234;
 $235 = $51;
 $54 = $235;
 $236 = $131;
 $57 = $236;
 $237 = $57;
 $238 = ((($237)) + 16|0);
 $56 = $238;
 $239 = $56;
 $55 = $239;
 $240 = $55;
 $241 = +HEAPF32[$240>>2];
 $60 = $132;
 $242 = $60;
 $243 = ((($242)) + 16|0);
 $59 = $243;
 $244 = $59;
 $58 = $244;
 $245 = $58;
 HEAPF32[$245>>2] = $241;
 $63 = $132;
 $246 = $63;
 $247 = ((($246)) + 16|0);
 $62 = $247;
 $248 = $62;
 $61 = $248;
 $249 = $131;
 $66 = $249;
 $250 = $66;
 $251 = ((($250)) + 16|0);
 $65 = $251;
 $252 = $65;
 $64 = $252;
 $253 = $64;
 $67 = $253;
 $254 = $131;
 $255 = ((($254)) + 8|0);
 $69 = $255;
 $256 = $69;
 $68 = $256;
 $257 = $68;
 $258 = HEAP32[$257>>2]|0;
 $259 = ((($132)) + 8|0);
 $71 = $259;
 $260 = $71;
 $70 = $260;
 $261 = $70;
 HEAP32[$261>>2] = $258;
 $74 = $132;
 $262 = $74;
 $263 = ((($262)) + 12|0);
 $73 = $263;
 $264 = $73;
 $72 = $264;
 $265 = $72;
 $266 = HEAP32[$265>>2]|0;
 $267 = ($266>>>0)>(0);
 if (!($267)) {
  STACKTOP = sp;return;
 }
 $268 = ((($132)) + 8|0);
 $76 = $268;
 $269 = $76;
 $75 = $269;
 $270 = $75;
 $78 = $270;
 $271 = $78;
 $77 = $271;
 $272 = $77;
 $273 = ((($132)) + 8|0);
 $80 = $273;
 $274 = $80;
 $79 = $274;
 $275 = $79;
 $276 = HEAP32[$275>>2]|0;
 $277 = ((($276)) + 4|0);
 $278 = HEAP32[$277>>2]|0;
 $87 = $132;
 $279 = $87;
 $86 = $279;
 $280 = $86;
 $85 = $280;
 $281 = $85;
 $84 = $281;
 $282 = $84;
 $283 = ((($282)) + 4|0);
 $83 = $283;
 $284 = $83;
 $82 = $284;
 $285 = $82;
 $81 = $285;
 $286 = $81;
 $287 = HEAP32[$286>>2]|0;
 $88 = $278;
 $89 = $287;
 $288 = $89;
 $289 = $89;
 $290 = (($289) - 1)|0;
 $291 = $288 & $290;
 $292 = ($291|0)!=(0);
 $293 = $88;
 $294 = $89;
 if ($292) {
  $297 = (($293>>>0) % ($294>>>0))&-1;
  $298 = $297;
 } else {
  $295 = (($294) - 1)|0;
  $296 = $293 & $295;
  $298 = $296;
 }
 $92 = $132;
 $93 = $298;
 $299 = $92;
 $300 = $93;
 $91 = $299;
 $301 = $91;
 $90 = $301;
 $302 = $90;
 $303 = HEAP32[$302>>2]|0;
 $304 = (($303) + ($300<<2)|0);
 HEAP32[$304>>2] = $272;
 $305 = $131;
 $306 = ((($305)) + 8|0);
 $95 = $306;
 $307 = $95;
 $94 = $307;
 $308 = $94;
 HEAP32[$308>>2] = 0;
 $309 = $131;
 $98 = $309;
 $310 = $98;
 $311 = ((($310)) + 12|0);
 $97 = $311;
 $312 = $97;
 $96 = $312;
 $313 = $96;
 HEAP32[$313>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__bc = 0, $__i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = $this;
 $22 = $21;
 $20 = $22;
 $23 = $20;
 $24 = ((($23)) + 12|0);
 $19 = $24;
 $25 = $19;
 $18 = $25;
 $26 = $18;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>(0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = ((($22)) + 8|0);
 $17 = $29;
 $30 = $17;
 $16 = $30;
 $31 = $16;
 $32 = HEAP32[$31>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE12__deallocateEPNS_11__hash_nodeISA_PvEE($22,$32);
 $33 = ((($22)) + 8|0);
 $1 = $33;
 $34 = $1;
 $0 = $34;
 $35 = $0;
 HEAP32[$35>>2] = 0;
 $8 = $22;
 $36 = $8;
 $7 = $36;
 $37 = $7;
 $6 = $37;
 $38 = $6;
 $5 = $38;
 $39 = $5;
 $40 = ((($39)) + 4|0);
 $4 = $40;
 $41 = $4;
 $3 = $41;
 $42 = $3;
 $2 = $42;
 $43 = $2;
 $44 = HEAP32[$43>>2]|0;
 $__bc = $44;
 $__i = 0;
 while(1) {
  $45 = $__i;
  $46 = $__bc;
  $47 = ($45>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = $__i;
  $11 = $22;
  $12 = $48;
  $49 = $11;
  $50 = $12;
  $10 = $49;
  $51 = $10;
  $9 = $51;
  $52 = $9;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($50<<2)|0);
  HEAP32[$54>>2] = 0;
  $55 = $__i;
  $56 = (($55) + 1)|0;
  $__i = $56;
 }
 $15 = $22;
 $57 = $15;
 $58 = ((($57)) + 12|0);
 $14 = $58;
 $59 = $14;
 $13 = $59;
 $60 = $13;
 HEAP32[$60>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster6UseMtl10isParsableEPKc($fields) {
 $fields = $fields|0;
 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val17 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $$pre_trunc13 = 0, $$pre_trunc15 = 0, $$pre_trunc19 = 0, $$pre_trunc9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 78|0;
 $12 = sp + 20|0;
 $13 = sp + 77|0;
 $14 = sp + 8|0;
 $17 = sp + 76|0;
 $11 = $fields;
 $18 = $11;
 $19 = ($18|0)!=(0|0);
 $$expand_i1_val = 0;
 HEAP8[$13>>0] = $$expand_i1_val;
 $$expand_i1_val2 = 0;
 HEAP8[$17>>0] = $$expand_i1_val2;
 do {
  if ($19) {
   $20 = $11;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(117);
   if ($23) {
    $24 = $11;
    $8 = $12;
    $9 = $24;
    $25 = $8;
    $7 = $25;
    $26 = $7;
    $6 = $26;
    $27 = $6;
    $5 = $27;
    $28 = $9;
    $29 = $9;
    $30 = (__ZNSt3__111char_traitsIcE6lengthEPKc($29)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($25,$28,$30);
    $$expand_i1_val4 = 1;
    HEAP8[$13>>0] = $$expand_i1_val4;
    $3 = $14;
    $4 = 10526;
    $31 = $3;
    $2 = $31;
    $32 = $2;
    $1 = $32;
    $33 = $1;
    $0 = $33;
    $34 = $4;
    $35 = $4;
    __THREW__ = 0;
    $36 = (invoke_ii(379,($35|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     label = 12;
    } else {
     __THREW__ = 0;
     invoke_viii(380,($31|0),($34|0),($36|0));
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      label = 12;
     } else {
      $$expand_i1_val6 = 1;
      HEAP8[$17>>0] = $$expand_i1_val6;
      __THREW__ = 0;
      $41 = (invoke_iii(381,($12|0),($14|0))|0);
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if (!($43)) {
       $55 = $41;
       break;
      }
      $48 = ___cxa_find_matching_catch_2()|0;
      $49 = tempRet0;
      $15 = $48;
      $16 = $49;
      $$pre_trunc13 = HEAP8[$17>>0]|0;
      $50 = $$pre_trunc13&1;
      if ($50) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
      }
     }
    }
    if ((label|0) == 12) {
     $46 = ___cxa_find_matching_catch_2()|0;
     $47 = tempRet0;
     $15 = $46;
     $16 = $47;
    }
    $$pre_trunc15 = HEAP8[$13>>0]|0;
    $51 = $$pre_trunc15&1;
    if (!($51)) {
     $53 = $15;
     $54 = $16;
     ___resumeException($53|0);
     // unreachable;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
    $53 = $15;
    $54 = $16;
    ___resumeException($53|0);
    // unreachable;
   } else {
    $55 = 0;
   }
  } else {
   $55 = 0;
  }
 } while(0);
 $$pre_trunc = HEAP8[$17>>0]|0;
 $44 = $$pre_trunc&1;
 if ($44) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 }
 $$pre_trunc9 = HEAP8[$13>>0]|0;
 $45 = $$pre_trunc9&1;
 if ($45) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
 }
 if ($55) {
  $$expand_i1_val11 = 1;
  HEAP8[$10>>0] = $$expand_i1_val11;
  $$pre_trunc19 = HEAP8[$10>>0]|0;
  $52 = $$pre_trunc19&1;
  STACKTOP = sp;return ($52|0);
 } else {
  $$expand_i1_val17 = 0;
  HEAP8[$10>>0] = $$expand_i1_val17;
  $$pre_trunc19 = HEAP8[$10>>0]|0;
  $52 = $$pre_trunc19&1;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZL12isStartsWithRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_($targetString,$keyword) {
 $targetString = $targetString|0;
 $keyword = $keyword|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $mismatch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $24 = sp + 648|0;
 $50 = sp + 544|0;
 $66 = sp + 480|0;
 $92 = sp + 376|0;
 $118 = sp + 64|0;
 $119 = sp + 56|0;
 $120 = sp + 48|0;
 $121 = sp + 40|0;
 $122 = sp + 32|0;
 $123 = sp + 272|0;
 $124 = sp + 268|0;
 $125 = sp + 264|0;
 $126 = sp + 260|0;
 $127 = sp + 749|0;
 $128 = sp + 24|0;
 $129 = sp + 16|0;
 $130 = sp + 8|0;
 $131 = sp;
 $156 = sp + 160|0;
 $172 = sp + 748|0;
 $mismatch = sp + 88|0;
 $174 = sp + 84|0;
 $175 = sp + 80|0;
 $176 = sp + 76|0;
 $177 = sp + 72|0;
 $178 = sp + 68|0;
 $173 = $targetString;
 $171 = $keyword;
 $179 = $171;
 $170 = $179;
 $180 = $170;
 $169 = $180;
 $181 = $169;
 $168 = $181;
 $182 = $168;
 $183 = HEAP8[$182>>0]|0;
 $184 = $183&255;
 $185 = $184 & 1;
 $186 = ($185|0)!=(0);
 if ($186) {
  $164 = $179;
  $187 = $164;
  $163 = $187;
  $188 = $163;
  $162 = $188;
  $189 = $162;
  $190 = ((($189)) + 4|0);
  $191 = HEAP32[$190>>2]|0;
  $218 = $191;
 } else {
  $167 = $179;
  $192 = $167;
  $166 = $192;
  $193 = $166;
  $165 = $193;
  $194 = $165;
  $195 = HEAP8[$194>>0]|0;
  $196 = $195&255;
  $197 = $196 >> 1;
  $218 = $197;
 }
 $198 = $173;
 $9 = $198;
 $199 = $9;
 $8 = $199;
 $200 = $8;
 $7 = $200;
 $201 = $7;
 $6 = $201;
 $202 = $6;
 $203 = HEAP8[$202>>0]|0;
 $204 = $203&255;
 $205 = $204 & 1;
 $206 = ($205|0)!=(0);
 if ($206) {
  $2 = $199;
  $207 = $2;
  $1 = $207;
  $208 = $1;
  $0 = $208;
  $209 = $0;
  $210 = ((($209)) + 4|0);
  $211 = HEAP32[$210>>2]|0;
  $220 = $211;
 } else {
  $5 = $199;
  $212 = $5;
  $4 = $212;
  $213 = $4;
  $3 = $213;
  $214 = $3;
  $215 = HEAP8[$214>>0]|0;
  $216 = $215&255;
  $217 = $216 >> 1;
  $220 = $217;
 }
 $219 = ($218>>>0)>($220>>>0);
 if ($219) {
  $$expand_i1_val = 0;
  HEAP8[$172>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$172>>0]|0;
  $456 = $$pre_trunc&1;
  STACKTOP = sp;return ($456|0);
 }
 $25 = $keyword;
 $221 = $25;
 $23 = $221;
 $222 = $23;
 $22 = $222;
 $223 = $22;
 $21 = $223;
 $224 = $21;
 $20 = $224;
 $225 = $20;
 $226 = HEAP8[$225>>0]|0;
 $227 = $226&255;
 $228 = $227 & 1;
 $229 = ($228|0)!=(0);
 if ($229) {
  $14 = $222;
  $230 = $14;
  $13 = $230;
  $231 = $13;
  $12 = $231;
  $232 = $12;
  $233 = ((($232)) + 8|0);
  $234 = HEAP32[$233>>2]|0;
  $241 = $234;
 } else {
  $19 = $222;
  $235 = $19;
  $18 = $235;
  $236 = $18;
  $17 = $236;
  $237 = $17;
  $238 = ((($237)) + 1|0);
  $16 = $238;
  $239 = $16;
  $15 = $239;
  $240 = $15;
  $241 = $240;
 }
 $10 = $24;
 $11 = $241;
 $242 = $10;
 $243 = $11;
 HEAP32[$242>>2] = $243;
 $244 = HEAP32[$24>>2]|0;
 HEAP32[$174>>2] = $244;
 $51 = $keyword;
 $245 = $51;
 $49 = $245;
 $246 = $49;
 $48 = $246;
 $247 = $48;
 $47 = $247;
 $248 = $47;
 $46 = $248;
 $249 = $46;
 $250 = HEAP8[$249>>0]|0;
 $251 = $250&255;
 $252 = $251 & 1;
 $253 = ($252|0)!=(0);
 if ($253) {
  $40 = $246;
  $254 = $40;
  $39 = $254;
  $255 = $39;
  $38 = $255;
  $256 = $38;
  $257 = ((($256)) + 8|0);
  $258 = HEAP32[$257>>2]|0;
  $285 = $258;
 } else {
  $45 = $246;
  $259 = $45;
  $44 = $259;
  $260 = $44;
  $43 = $260;
  $261 = $43;
  $262 = ((($261)) + 1|0);
  $42 = $262;
  $263 = $42;
  $41 = $263;
  $264 = $41;
  $285 = $264;
 }
 $35 = $245;
 $265 = $35;
 $34 = $265;
 $266 = $34;
 $33 = $266;
 $267 = $33;
 $32 = $267;
 $268 = $32;
 $269 = HEAP8[$268>>0]|0;
 $270 = $269&255;
 $271 = $270 & 1;
 $272 = ($271|0)!=(0);
 if ($272) {
  $28 = $265;
  $273 = $28;
  $27 = $273;
  $274 = $27;
  $26 = $274;
  $275 = $26;
  $276 = ((($275)) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  $286 = $277;
 } else {
  $31 = $265;
  $278 = $31;
  $30 = $278;
  $279 = $30;
  $29 = $279;
  $280 = $29;
  $281 = HEAP8[$280>>0]|0;
  $282 = $281&255;
  $283 = $282 >> 1;
  $286 = $283;
 }
 $284 = (($285) + ($286)|0);
 $36 = $50;
 $37 = $284;
 $287 = $36;
 $288 = $37;
 HEAP32[$287>>2] = $288;
 $289 = HEAP32[$50>>2]|0;
 HEAP32[$175>>2] = $289;
 $290 = $173;
 $67 = $290;
 $291 = $67;
 $65 = $291;
 $292 = $65;
 $64 = $292;
 $293 = $64;
 $63 = $293;
 $294 = $63;
 $62 = $294;
 $295 = $62;
 $296 = HEAP8[$295>>0]|0;
 $297 = $296&255;
 $298 = $297 & 1;
 $299 = ($298|0)!=(0);
 if ($299) {
  $56 = $292;
  $300 = $56;
  $55 = $300;
  $301 = $55;
  $54 = $301;
  $302 = $54;
  $303 = ((($302)) + 8|0);
  $304 = HEAP32[$303>>2]|0;
  $311 = $304;
 } else {
  $61 = $292;
  $305 = $61;
  $60 = $305;
  $306 = $60;
  $59 = $306;
  $307 = $59;
  $308 = ((($307)) + 1|0);
  $58 = $308;
  $309 = $58;
  $57 = $309;
  $310 = $57;
  $311 = $310;
 }
 $52 = $66;
 $53 = $311;
 $312 = $52;
 $313 = $53;
 HEAP32[$312>>2] = $313;
 $314 = HEAP32[$66>>2]|0;
 HEAP32[$176>>2] = $314;
 $315 = $173;
 $93 = $315;
 $316 = $93;
 $91 = $316;
 $317 = $91;
 $90 = $317;
 $318 = $90;
 $89 = $318;
 $319 = $89;
 $88 = $319;
 $320 = $88;
 $321 = HEAP8[$320>>0]|0;
 $322 = $321&255;
 $323 = $322 & 1;
 $324 = ($323|0)!=(0);
 if ($324) {
  $82 = $317;
  $325 = $82;
  $81 = $325;
  $326 = $81;
  $80 = $326;
  $327 = $80;
  $328 = ((($327)) + 8|0);
  $329 = HEAP32[$328>>2]|0;
  $356 = $329;
 } else {
  $87 = $317;
  $330 = $87;
  $86 = $330;
  $331 = $86;
  $85 = $331;
  $332 = $85;
  $333 = ((($332)) + 1|0);
  $84 = $333;
  $334 = $84;
  $83 = $334;
  $335 = $83;
  $356 = $335;
 }
 $77 = $316;
 $336 = $77;
 $76 = $336;
 $337 = $76;
 $75 = $337;
 $338 = $75;
 $74 = $338;
 $339 = $74;
 $340 = HEAP8[$339>>0]|0;
 $341 = $340&255;
 $342 = $341 & 1;
 $343 = ($342|0)!=(0);
 if ($343) {
  $70 = $336;
  $344 = $70;
  $69 = $344;
  $345 = $69;
  $68 = $345;
  $346 = $68;
  $347 = ((($346)) + 4|0);
  $348 = HEAP32[$347>>2]|0;
  $357 = $348;
 } else {
  $73 = $336;
  $349 = $73;
  $72 = $349;
  $350 = $72;
  $71 = $350;
  $351 = $71;
  $352 = HEAP8[$351>>0]|0;
  $353 = $352&255;
  $354 = $353 >> 1;
  $357 = $354;
 }
 $355 = (($356) + ($357)|0);
 $78 = $92;
 $79 = $355;
 $358 = $78;
 $359 = $79;
 HEAP32[$358>>2] = $359;
 $360 = HEAP32[$92>>2]|0;
 HEAP32[$177>>2] = $360;
 ;HEAP8[$128>>0]=HEAP8[$177>>0]|0;HEAP8[$128+1>>0]=HEAP8[$177+1>>0]|0;HEAP8[$128+2>>0]=HEAP8[$177+2>>0]|0;HEAP8[$128+3>>0]=HEAP8[$177+3>>0]|0;
 ;HEAP8[$129>>0]=HEAP8[$176>>0]|0;HEAP8[$129+1>>0]=HEAP8[$176+1>>0]|0;HEAP8[$129+2>>0]=HEAP8[$176+2>>0]|0;HEAP8[$129+3>>0]=HEAP8[$176+3>>0]|0;
 ;HEAP8[$130>>0]=HEAP8[$175>>0]|0;HEAP8[$130+1>>0]=HEAP8[$175+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$175+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$175+3>>0]|0;
 ;HEAP8[$131>>0]=HEAP8[$174>>0]|0;HEAP8[$131+1>>0]=HEAP8[$174+1>>0]|0;HEAP8[$131+2>>0]=HEAP8[$174+2>>0]|0;HEAP8[$131+3>>0]=HEAP8[$174+3>>0]|0;
 ;HEAP32[$123>>2]=HEAP32[$131>>2]|0;
 ;HEAP32[$124>>2]=HEAP32[$130>>2]|0;
 ;HEAP32[$125>>2]=HEAP32[$129>>2]|0;
 ;HEAP32[$126>>2]=HEAP32[$128>>2]|0;
 ;HEAP8[$118>>0]=HEAP8[$127>>0]|0;
 ;HEAP8[$119>>0]=HEAP8[$126>>0]|0;HEAP8[$119+1>>0]=HEAP8[$126+1>>0]|0;HEAP8[$119+2>>0]=HEAP8[$126+2>>0]|0;HEAP8[$119+3>>0]=HEAP8[$126+3>>0]|0;
 ;HEAP8[$120>>0]=HEAP8[$125>>0]|0;HEAP8[$120+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$120+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$120+3>>0]=HEAP8[$125+3>>0]|0;
 ;HEAP8[$121>>0]=HEAP8[$124>>0]|0;HEAP8[$121+1>>0]=HEAP8[$124+1>>0]|0;HEAP8[$121+2>>0]=HEAP8[$124+2>>0]|0;HEAP8[$121+3>>0]=HEAP8[$124+3>>0]|0;
 ;HEAP8[$122>>0]=HEAP8[$123>>0]|0;HEAP8[$122+1>>0]=HEAP8[$123+1>>0]|0;HEAP8[$122+2>>0]=HEAP8[$123+2>>0]|0;HEAP8[$122+3>>0]=HEAP8[$123+3>>0]|0;
 while(1) {
  $116 = $122;
  $117 = $121;
  $361 = $116;
  $362 = $117;
  $114 = $361;
  $115 = $362;
  $363 = $114;
  $113 = $363;
  $364 = $113;
  $365 = HEAP32[$364>>2]|0;
  $366 = $115;
  $112 = $366;
  $367 = $112;
  $368 = HEAP32[$367>>2]|0;
  $369 = ($365|0)==($368|0);
  $370 = $369 ^ 1;
  if (!($370)) {
   break;
  }
  $98 = $120;
  $99 = $119;
  $371 = $98;
  $372 = $99;
  $96 = $371;
  $97 = $372;
  $373 = $96;
  $95 = $373;
  $374 = $95;
  $375 = HEAP32[$374>>2]|0;
  $376 = $97;
  $94 = $376;
  $377 = $94;
  $378 = HEAP32[$377>>2]|0;
  $379 = ($375|0)==($378|0);
  $380 = $379 ^ 1;
  if (!($380)) {
   break;
  }
  $100 = $122;
  $381 = $100;
  $382 = HEAP32[$381>>2]|0;
  $101 = $120;
  $383 = $101;
  $384 = HEAP32[$383>>2]|0;
  $102 = $118;
  $103 = $382;
  $104 = $384;
  $385 = $103;
  $386 = HEAP8[$385>>0]|0;
  $387 = $386 << 24 >> 24;
  $388 = $104;
  $389 = HEAP8[$388>>0]|0;
  $390 = $389 << 24 >> 24;
  $391 = ($387|0)==($390|0);
  if (!($391)) {
   break;
  }
  $105 = $122;
  $392 = $105;
  $393 = HEAP32[$392>>2]|0;
  $394 = ((($393)) + 1|0);
  HEAP32[$392>>2] = $394;
  $106 = $120;
  $395 = $106;
  $396 = HEAP32[$395>>2]|0;
  $397 = ((($396)) + 1|0);
  HEAP32[$395>>2] = $397;
 }
 $109 = $mismatch;
 $110 = $122;
 $111 = $120;
 $398 = $109;
 $399 = $110;
 $108 = $399;
 $400 = $108;
 ;HEAP32[$398>>2]=HEAP32[$400>>2]|0;
 $401 = ((($398)) + 4|0);
 $402 = $111;
 $107 = $402;
 $403 = $107;
 ;HEAP32[$401>>2]=HEAP32[$403>>2]|0;
 $157 = $keyword;
 $404 = $157;
 $155 = $404;
 $405 = $155;
 $154 = $405;
 $406 = $154;
 $153 = $406;
 $407 = $153;
 $152 = $407;
 $408 = $152;
 $409 = HEAP8[$408>>0]|0;
 $410 = $409&255;
 $411 = $410 & 1;
 $412 = ($411|0)!=(0);
 if ($412) {
  $146 = $405;
  $413 = $146;
  $145 = $413;
  $414 = $145;
  $144 = $414;
  $415 = $144;
  $416 = ((($415)) + 8|0);
  $417 = HEAP32[$416>>2]|0;
  $444 = $417;
 } else {
  $151 = $405;
  $418 = $151;
  $150 = $418;
  $419 = $150;
  $149 = $419;
  $420 = $149;
  $421 = ((($420)) + 1|0);
  $148 = $421;
  $422 = $148;
  $147 = $422;
  $423 = $147;
  $444 = $423;
 }
 $141 = $404;
 $424 = $141;
 $140 = $424;
 $425 = $140;
 $139 = $425;
 $426 = $139;
 $138 = $426;
 $427 = $138;
 $428 = HEAP8[$427>>0]|0;
 $429 = $428&255;
 $430 = $429 & 1;
 $431 = ($430|0)!=(0);
 if ($431) {
  $134 = $424;
  $432 = $134;
  $133 = $432;
  $433 = $133;
  $132 = $433;
  $434 = $132;
  $435 = ((($434)) + 4|0);
  $436 = HEAP32[$435>>2]|0;
  $445 = $436;
 } else {
  $137 = $424;
  $437 = $137;
  $136 = $437;
  $438 = $136;
  $135 = $438;
  $439 = $135;
  $440 = HEAP8[$439>>0]|0;
  $441 = $440&255;
  $442 = $441 >> 1;
  $445 = $442;
 }
 $443 = (($444) + ($445)|0);
 $142 = $156;
 $143 = $443;
 $446 = $142;
 $447 = $143;
 HEAP32[$446>>2] = $447;
 $448 = HEAP32[$156>>2]|0;
 HEAP32[$178>>2] = $448;
 $160 = $mismatch;
 $161 = $178;
 $449 = $160;
 $159 = $449;
 $450 = $159;
 $451 = HEAP32[$450>>2]|0;
 $452 = $161;
 $158 = $452;
 $453 = $158;
 $454 = HEAP32[$453>>2]|0;
 $455 = ($451|0)==($454|0);
 if ($455) {
  $$expand_i1_val2 = 1;
  HEAP8[$172>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$172>>0]|0;
  $456 = $$pre_trunc&1;
  STACKTOP = sp;return ($456|0);
 } else {
  $$expand_i1_val4 = 0;
  HEAP8[$172>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$172>>0]|0;
  $456 = $$pre_trunc&1;
  STACKTOP = sp;return ($456|0);
 }
 return (0)|0;
}
function __ZN9ObjMaster3Obj26extendObjectMaterialGroupsERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS_26TextureDataHoldingMaterialEPNS_11FaceElementEi($this,$currentObjectGroupName,$currentMaterial,$currentObjectMaterialFacesPointer,$sizeOfFaceStripe) {
 $this = $this|0;
 $currentObjectGroupName = $currentObjectGroupName|0;
 $currentMaterial = $currentMaterial|0;
 $currentObjectMaterialFacesPointer = $currentObjectMaterialFacesPointer|0;
 $sizeOfFaceStripe = $sizeOfFaceStripe|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $40 = sp + 212|0;
 $41 = sp + 200|0;
 $44 = sp;
 $35 = $this;
 $36 = $currentObjectGroupName;
 $37 = $currentMaterial;
 $38 = $currentObjectMaterialFacesPointer;
 $39 = $sizeOfFaceStripe;
 $45 = $35;
 $46 = $39;
 $47 = ($46|0)>(0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = ((($45)) + 80|0);
 $49 = $36;
 __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($41,$49,10533);
 $50 = $37;
 $33 = $41;
 $34 = $50;
 $51 = $33;
 $52 = $34;
 $31 = $51;
 $32 = $52;
 $53 = $31;
 $54 = $32;
 $30 = $54;
 $55 = $30;
 $29 = $55;
 $56 = $29;
 $28 = $56;
 $57 = $28;
 $27 = $57;
 $58 = $27;
 $26 = $58;
 $59 = $26;
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $61 & 1;
 $63 = ($62|0)!=(0);
 if ($63) {
  $20 = $56;
  $64 = $20;
  $19 = $64;
  $65 = $19;
  $18 = $65;
  $66 = $18;
  $67 = ((($66)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $75 = $68;
 } else {
  $25 = $56;
  $69 = $25;
  $24 = $69;
  $70 = $24;
  $23 = $70;
  $71 = $23;
  $72 = ((($71)) + 1|0);
  $22 = $72;
  $73 = $22;
  $21 = $73;
  $74 = $21;
  $75 = $74;
 }
 $17 = $75;
 $76 = $17;
 $77 = $32;
 $16 = $77;
 $78 = $16;
 $15 = $78;
 $79 = $15;
 $14 = $79;
 $80 = $14;
 $13 = $80;
 $81 = $13;
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = $83 & 1;
 $85 = ($84|0)!=(0);
 if ($85) {
  $9 = $78;
  $86 = $9;
  $8 = $86;
  $87 = $8;
  $7 = $87;
  $88 = $7;
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $97 = $90;
 } else {
  $12 = $78;
  $91 = $12;
  $11 = $91;
  $92 = $11;
  $10 = $92;
  $93 = $10;
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = $95 >> 1;
  $97 = $96;
 }
 __THREW__ = 0;
 $98 = (invoke_iiii(382,($53|0),($76|0),($97|0))|0);
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if ($100) {
  $130 = ___cxa_find_matching_catch_2()|0;
  $131 = tempRet0;
  $42 = $130;
  $43 = $131;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($41);
  $136 = $42;
  $137 = $43;
  ___resumeException($136|0);
  // unreachable;
 }
 $6 = $98;
 $101 = $6;
 $4 = $40;
 $5 = $101;
 $102 = $4;
 $103 = $5;
 $3 = $103;
 $104 = $3;
 ;HEAP32[$102>>2]=HEAP32[$104>>2]|0;HEAP32[$102+4>>2]=HEAP32[$104+4>>2]|0;HEAP32[$102+8>>2]=HEAP32[$104+8>>2]|0;
 $105 = $5;
 $2 = $105;
 $106 = $2;
 $1 = $106;
 $107 = $1;
 $0 = $107;
 $108 = $0;
 $__a$i$i$i = $108;
 $__i$i$i$i = 0;
 while(1) {
  $109 = $__i$i$i$i;
  $110 = ($109>>>0)<(3);
  if (!($110)) {
   break;
  }
  $111 = $__i$i$i$i;
  $112 = $__a$i$i$i;
  $113 = (($112) + ($111<<2)|0);
  HEAP32[$113>>2] = 0;
  $114 = $__i$i$i$i;
  $115 = (($114) + 1)|0;
  $__i$i$i$i = $115;
 }
 __THREW__ = 0;
 $116 = (invoke_iii(383,($48|0),($40|0))|0);
 $117 = __THREW__; __THREW__ = 0;
 $118 = $117&1;
 do {
  if ($118) {
   label = 17;
  } else {
   $119 = $36;
   __THREW__ = 0;
   invoke_vii(384,($44|0),($119|0));
   $120 = __THREW__; __THREW__ = 0;
   $121 = $120&1;
   if ($121) {
    label = 17;
   } else {
    $122 = ((($44)) + 12|0);
    $123 = $37;
    __THREW__ = 0;
    invoke_vii(385,($122|0),($123|0));
    $124 = __THREW__; __THREW__ = 0;
    $125 = $124&1;
    if ($125) {
     $134 = ___cxa_find_matching_catch_2()|0;
     $135 = tempRet0;
     $42 = $134;
     $43 = $135;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($44);
     break;
    }
    $126 = ((($44)) + 184|0);
    $127 = $38;
    HEAP32[$126>>2] = $127;
    $128 = ((($44)) + 188|0);
    $129 = $39;
    HEAP32[$128>>2] = $129;
    (__ZN9ObjMaster23ObjectMaterialFaceGroupaSEOS0_($116,$44)|0);
    __ZN9ObjMaster23ObjectMaterialFaceGroupD2Ev($44);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($40);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($41);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $132 = ___cxa_find_matching_catch_2()|0;
  $133 = tempRet0;
  $42 = $132;
  $43 = $133;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($40);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($41);
 $136 = $42;
 $137 = $43;
 ___resumeException($136|0);
 // unreachable;
}
function __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $__lhs_sz = 0, $__rhs_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 8|0;
 $18 = sp + 195|0;
 $19 = sp;
 $22 = sp + 194|0;
 $43 = sp + 193|0;
 $44 = sp + 192|0;
 $41 = $__lhs;
 $42 = $__rhs;
 $$expand_i1_val = 0;
 HEAP8[$43>>0] = $$expand_i1_val;
 $47 = $41;
 $40 = $47;
 $48 = $40;
 $39 = $48;
 $49 = $39;
 $38 = $49;
 $50 = $38;
 $37 = $50;
 $20 = $agg$result;
 $21 = $44;
 $51 = $20;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $51;
 $52 = $17;
 $16 = $19;
 ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
 $14 = $52;
 $13 = $15;
 $12 = $51;
 $53 = $12;
 $11 = $53;
 $54 = $11;
 $10 = $54;
 $55 = $10;
 $__a$i$i = $55;
 $__i$i$i = 0;
 while(1) {
  $56 = $__i$i$i;
  $57 = ($56>>>0)<(3);
  if (!($57)) {
   break;
  }
  $58 = $__i$i$i;
  $59 = $__a$i$i;
  $60 = (($59) + ($58<<2)|0);
  HEAP32[$60>>2] = 0;
  $61 = $__i$i$i;
  $62 = (($61) + 1)|0;
  $__i$i$i = $62;
 }
 $63 = $41;
 $9 = $63;
 $64 = $9;
 $8 = $64;
 $65 = $8;
 $7 = $65;
 $66 = $7;
 $6 = $66;
 $67 = $6;
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $69 & 1;
 $71 = ($70|0)!=(0);
 if ($71) {
  $2 = $64;
  $72 = $2;
  $1 = $72;
  $73 = $1;
  $0 = $73;
  $74 = $0;
  $75 = ((($74)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $83 = $76;
 } else {
  $5 = $64;
  $77 = $5;
  $4 = $77;
  $78 = $4;
  $3 = $78;
  $79 = $3;
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = $81 >> 1;
  $83 = $82;
 }
 $__lhs_sz = $83;
 $84 = $42;
 __THREW__ = 0;
 $85 = (invoke_ii(379,($84|0))|0);
 $86 = __THREW__; __THREW__ = 0;
 $87 = $86&1;
 if ($87) {
  $122 = ___cxa_find_matching_catch_2()|0;
  $123 = tempRet0;
  $45 = $122;
  $46 = $123;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $124 = $45;
  $125 = $46;
  ___resumeException($124|0);
  // unreachable;
 }
 $__rhs_sz = $85;
 $88 = $41;
 $36 = $88;
 $89 = $36;
 $35 = $89;
 $90 = $35;
 $34 = $90;
 $91 = $34;
 $33 = $91;
 $92 = $33;
 $32 = $92;
 $93 = $32;
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = $95 & 1;
 $97 = ($96|0)!=(0);
 if ($97) {
  $26 = $90;
  $98 = $26;
  $25 = $98;
  $99 = $25;
  $24 = $99;
  $100 = $24;
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $109 = $102;
 } else {
  $31 = $90;
  $103 = $31;
  $30 = $103;
  $104 = $30;
  $29 = $104;
  $105 = $29;
  $106 = ((($105)) + 1|0);
  $28 = $106;
  $107 = $28;
  $27 = $107;
  $108 = $27;
  $109 = $108;
 }
 $23 = $109;
 $110 = $23;
 $111 = $__lhs_sz;
 $112 = $__lhs_sz;
 $113 = $__rhs_sz;
 $114 = (($112) + ($113))|0;
 __THREW__ = 0;
 invoke_viiii(386,($agg$result|0),($110|0),($111|0),($114|0));
 $115 = __THREW__; __THREW__ = 0;
 $116 = $115&1;
 if ($116) {
  $122 = ___cxa_find_matching_catch_2()|0;
  $123 = tempRet0;
  $45 = $122;
  $46 = $123;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $124 = $45;
  $125 = $46;
  ___resumeException($124|0);
  // unreachable;
 }
 $117 = $42;
 $118 = $__rhs_sz;
 __THREW__ = 0;
 (invoke_iiii(382,($agg$result|0),($117|0),($118|0))|0);
 $119 = __THREW__; __THREW__ = 0;
 $120 = $119&1;
 if ($120) {
  $122 = ___cxa_find_matching_catch_2()|0;
  $123 = tempRet0;
  $45 = $122;
  $46 = $123;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $124 = $45;
  $125 = $46;
  ___resumeException($124|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$43>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$43>>0]|0;
 $121 = $$pre_trunc&1;
 if ($121) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEEixEOS6_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__h = 0, $__i = 0, $__r = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp + 48|0;
 $18 = sp + 460|0;
 $28 = sp + 40|0;
 $31 = sp + 539|0;
 $42 = sp + 32|0;
 $45 = sp + 538|0;
 $73 = sp + 24|0;
 $76 = sp + 537|0;
 $87 = sp + 16|0;
 $90 = sp + 536|0;
 $100 = sp + 8|0;
 $103 = sp + 148|0;
 $105 = sp + 140|0;
 $107 = sp + 132|0;
 $109 = sp;
 $110 = sp + 124|0;
 $113 = sp + 112|0;
 $__i = sp + 96|0;
 $117 = sp + 92|0;
 $__h = sp + 80|0;
 $__r = sp + 72|0;
 $118 = sp + 64|0;
 $115 = $this;
 $116 = $__k;
 $121 = $115;
 $122 = $116;
 $111 = $121;
 $112 = $122;
 $123 = $111;
 $124 = $112;
 $125 = (__ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEERKT_($123,$124)|0);
 HEAP32[$113>>2] = $125;
 ;HEAP8[$109>>0]=HEAP8[$113>>0]|0;HEAP8[$109+1>>0]=HEAP8[$113+1>>0]|0;HEAP8[$109+2>>0]=HEAP8[$113+2>>0]|0;HEAP8[$109+3>>0]=HEAP8[$113+3>>0]|0;
 $108 = $110;
 $126 = $108;
 ;HEAP32[$126>>2]=HEAP32[$109>>2]|0;
 $127 = HEAP32[$110>>2]|0;
 HEAP32[$__i>>2] = $127;
 $106 = $121;
 $128 = $106;
 $104 = $128;
 $101 = $103;
 $102 = 0;
 $129 = $101;
 $130 = $102;
 HEAP32[$129>>2] = $130;
 $131 = HEAP32[$103>>2]|0;
 HEAP32[$107>>2] = $131;
 ;HEAP8[$100>>0]=HEAP8[$107>>0]|0;HEAP8[$100+1>>0]=HEAP8[$107+1>>0]|0;HEAP8[$100+2>>0]=HEAP8[$107+2>>0]|0;HEAP8[$100+3>>0]=HEAP8[$107+3>>0]|0;
 $99 = $105;
 $132 = $99;
 ;HEAP32[$132>>2]=HEAP32[$100>>2]|0;
 $133 = HEAP32[$105>>2]|0;
 HEAP32[$117>>2] = $133;
 $65 = $__i;
 $66 = $117;
 $134 = $65;
 $135 = $66;
 $63 = $134;
 $64 = $135;
 $136 = $63;
 $137 = $64;
 $61 = $136;
 $62 = $137;
 $138 = $61;
 $139 = HEAP32[$138>>2]|0;
 $140 = $62;
 $141 = HEAP32[$140>>2]|0;
 $142 = ($139|0)==($141|0);
 $143 = $142 ^ 1;
 if ($143) {
  $60 = $__i;
  $144 = $60;
  $59 = $144;
  $145 = $59;
  $146 = HEAP32[$145>>2]|0;
  $147 = ((($146)) + 8|0);
  $58 = $147;
  $148 = $58;
  $57 = $148;
  $149 = $57;
  $56 = $149;
  $150 = $56;
  $55 = $150;
  $151 = $55;
  $152 = ((($151)) + 12|0);
  $114 = $152;
  $279 = $114;
  STACKTOP = sp;return ($279|0);
 }
 $153 = $116;
 $54 = $153;
 $154 = $54;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEE25__construct_node_with_keyEOS6_($__h,$121,$154);
 $21 = $__h;
 $155 = $21;
 $20 = $155;
 $156 = $20;
 $19 = $156;
 $157 = $19;
 $158 = HEAP32[$157>>2]|0;
 __THREW__ = 0;
 invoke_viii(387,($118|0),($121|0),($158|0));
 $159 = __THREW__; __THREW__ = 0;
 $160 = $159&1;
 if ($160) {
  $232 = ___cxa_find_matching_catch_2()|0;
  $233 = tempRet0;
  $119 = $232;
  $120 = $233;
  $98 = $__h;
  $234 = $98;
  $96 = $234;
  $97 = 0;
  $235 = $96;
  $95 = $235;
  $236 = $95;
  $94 = $236;
  $237 = $94;
  $238 = HEAP32[$237>>2]|0;
  $__tmp$i$i = $238;
  $239 = $97;
  $70 = $235;
  $240 = $70;
  $69 = $240;
  $241 = $69;
  HEAP32[$241>>2] = $239;
  $242 = $__tmp$i$i;
  $243 = ($242|0)!=(0|0);
  if (!($243)) {
   $280 = $119;
   $281 = $120;
   ___resumeException($280|0);
   // unreachable;
  }
  $68 = $235;
  $244 = $68;
  $67 = $244;
  $245 = $67;
  $246 = ((($245)) + 4|0);
  $247 = $__tmp$i$i;
  $92 = $246;
  $93 = $247;
  $248 = $92;
  $249 = ((($248)) + 5|0);
  $250 = HEAP8[$249>>0]|0;
  $251 = $250&1;
  if ($251) {
   $252 = HEAP32[$248>>2]|0;
   $253 = $93;
   $254 = ((($253)) + 8|0);
   $255 = ((($254)) + 12|0);
   $91 = $255;
   $256 = $91;
   $88 = $252;
   $89 = $256;
   $257 = $88;
   $258 = $89;
   ;HEAP8[$87>>0]=HEAP8[$90>>0]|0;
   $85 = $257;
   $86 = $258;
   $259 = $86;
   __ZN9ObjMaster23ObjectMaterialFaceGroupD2Ev($259);
  }
  $260 = ((($248)) + 4|0);
  $261 = HEAP8[$260>>0]|0;
  $262 = $261&1;
  if ($262) {
   $263 = HEAP32[$248>>2]|0;
   $264 = $93;
   $265 = ((($264)) + 8|0);
   $84 = $265;
   $266 = $84;
   $74 = $263;
   $75 = $266;
   $267 = $74;
   $268 = $75;
   ;HEAP8[$73>>0]=HEAP8[$76>>0]|0;
   $71 = $267;
   $72 = $268;
   $269 = $72;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($269);
  }
  $270 = $93;
  $271 = ($270|0)!=(0|0);
  if (!($271)) {
   $280 = $119;
   $281 = $120;
   ___resumeException($280|0);
   // unreachable;
  }
  $272 = HEAP32[$248>>2]|0;
  $273 = $93;
  $81 = $272;
  $82 = $273;
  $83 = 1;
  $274 = $81;
  $275 = $82;
  $276 = $83;
  $78 = $274;
  $79 = $275;
  $80 = $276;
  $277 = $79;
  $77 = $277;
  $278 = $77;
  __ZdlPv($278);
  $280 = $119;
  $281 = $120;
  ___resumeException($280|0);
  // unreachable;
 } else {
  $15 = $__r;
  $16 = $118;
  $17 = 0;
  $161 = $15;
  $162 = $16;
  $14 = $162;
  $163 = $14;
  ;HEAP32[$18>>2]=HEAP32[$163>>2]|0;
  ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;HEAP8[$12+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$18+3>>0]|0;
  $11 = $161;
  $164 = $11;
  ;HEAP32[$164>>2]=HEAP32[$12>>2]|0;
  $165 = ((($161)) + 4|0);
  $166 = $16;
  $167 = ((($166)) + 4|0);
  $13 = $167;
  $168 = $13;
  $169 = HEAP8[$168>>0]|0;
  $170 = $169&1;
  $171 = $170&1;
  HEAP8[$165>>0] = $171;
  $10 = $__h;
  $172 = $10;
  $9 = $172;
  $173 = $9;
  $8 = $173;
  $174 = $8;
  $175 = HEAP32[$174>>2]|0;
  $__t$i = $175;
  $7 = $172;
  $176 = $7;
  $6 = $176;
  $177 = $6;
  HEAP32[$177>>2] = 0;
  $5 = $__r;
  $178 = $5;
  $4 = $178;
  $179 = $4;
  $180 = HEAP32[$179>>2]|0;
  $181 = ((($180)) + 8|0);
  $3 = $181;
  $182 = $3;
  $2 = $182;
  $183 = $2;
  $1 = $183;
  $184 = $1;
  $0 = $184;
  $185 = $0;
  $186 = ((($185)) + 12|0);
  $114 = $186;
  $53 = $__h;
  $187 = $53;
  $51 = $187;
  $52 = 0;
  $188 = $51;
  $50 = $188;
  $189 = $50;
  $49 = $189;
  $190 = $49;
  $191 = HEAP32[$190>>2]|0;
  $__tmp$i$i1 = $191;
  $192 = $52;
  $25 = $188;
  $193 = $25;
  $24 = $193;
  $194 = $24;
  HEAP32[$194>>2] = $192;
  $195 = $__tmp$i$i1;
  $196 = ($195|0)!=(0|0);
  if (!($196)) {
   $279 = $114;
   STACKTOP = sp;return ($279|0);
  }
  $23 = $188;
  $197 = $23;
  $22 = $197;
  $198 = $22;
  $199 = ((($198)) + 4|0);
  $200 = $__tmp$i$i1;
  $47 = $199;
  $48 = $200;
  $201 = $47;
  $202 = ((($201)) + 5|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&1;
  if ($204) {
   $205 = HEAP32[$201>>2]|0;
   $206 = $48;
   $207 = ((($206)) + 8|0);
   $208 = ((($207)) + 12|0);
   $46 = $208;
   $209 = $46;
   $43 = $205;
   $44 = $209;
   $210 = $43;
   $211 = $44;
   ;HEAP8[$42>>0]=HEAP8[$45>>0]|0;
   $40 = $210;
   $41 = $211;
   $212 = $41;
   __ZN9ObjMaster23ObjectMaterialFaceGroupD2Ev($212);
  }
  $213 = ((($201)) + 4|0);
  $214 = HEAP8[$213>>0]|0;
  $215 = $214&1;
  if ($215) {
   $216 = HEAP32[$201>>2]|0;
   $217 = $48;
   $218 = ((($217)) + 8|0);
   $39 = $218;
   $219 = $39;
   $29 = $216;
   $30 = $219;
   $220 = $29;
   $221 = $30;
   ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
   $26 = $220;
   $27 = $221;
   $222 = $27;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($222);
  }
  $223 = $48;
  $224 = ($223|0)!=(0|0);
  if (!($224)) {
   $279 = $114;
   STACKTOP = sp;return ($279|0);
  }
  $225 = HEAP32[$201>>2]|0;
  $226 = $48;
  $36 = $225;
  $37 = $226;
  $38 = 1;
  $227 = $36;
  $228 = $37;
  $229 = $38;
  $33 = $227;
  $34 = $228;
  $35 = $229;
  $230 = $34;
  $32 = $230;
  $231 = $32;
  __ZdlPv($231);
  $279 = $114;
  STACKTOP = sp;return ($279|0);
 }
 return (0)|0;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEERKT_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $71 = sp + 392|0;
 $84 = sp + 44|0;
 $89 = sp + 24|0;
 $90 = $this;
 $91 = $__k;
 $92 = $90;
 $88 = $92;
 $93 = $88;
 $94 = ((($93)) + 12|0);
 $87 = $94;
 $95 = $87;
 $86 = $95;
 $96 = $86;
 $97 = $91;
 $18 = $96;
 $19 = $97;
 $98 = $18;
 $99 = $19;
 $100 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($98,$99)|0);
 $__hash = $100;
 $17 = $92;
 $101 = $17;
 $16 = $101;
 $102 = $16;
 $15 = $102;
 $103 = $15;
 $14 = $103;
 $104 = $14;
 $105 = ((($104)) + 4|0);
 $13 = $105;
 $106 = $13;
 $12 = $106;
 $107 = $12;
 $11 = $107;
 $108 = $11;
 $109 = HEAP32[$108>>2]|0;
 $__bc = $109;
 $110 = $__bc;
 $111 = ($110|0)!=(0);
 L1: do {
  if ($111) {
   $112 = $__hash;
   $113 = $__bc;
   $9 = $112;
   $10 = $113;
   $114 = $10;
   $115 = $10;
   $116 = (($115) - 1)|0;
   $117 = $114 & $116;
   $118 = ($117|0)!=(0);
   $119 = $9;
   $120 = $10;
   if ($118) {
    $123 = (($119>>>0) % ($120>>>0))&-1;
    $124 = $123;
   } else {
    $121 = (($120) - 1)|0;
    $122 = $119 & $121;
    $124 = $122;
   }
   $__chash = $124;
   $125 = $__chash;
   $2 = $92;
   $3 = $125;
   $126 = $2;
   $127 = $3;
   $1 = $126;
   $128 = $1;
   $0 = $128;
   $129 = $0;
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + ($127<<2)|0);
   $132 = HEAP32[$131>>2]|0;
   $__nd = $132;
   $133 = $__nd;
   $134 = ($133|0)!=(0|0);
   if ($134) {
    $135 = $__nd;
    $136 = HEAP32[$135>>2]|0;
    $__nd = $136;
    L8: while(1) {
     $137 = $__nd;
     $138 = ($137|0)!=(0|0);
     if (!($138)) {
      break L1;
     }
     $139 = $__nd;
     $140 = ((($139)) + 4|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $__bc;
     $4 = $141;
     $5 = $142;
     $143 = $5;
     $144 = $5;
     $145 = (($144) - 1)|0;
     $146 = $143 & $145;
     $147 = ($146|0)!=(0);
     $148 = $4;
     $149 = $5;
     if ($147) {
      $152 = (($148>>>0) % ($149>>>0))&-1;
      $154 = $152;
     } else {
      $150 = (($149) - 1)|0;
      $151 = $148 & $150;
      $154 = $151;
     }
     $153 = $__chash;
     $155 = ($154|0)==($153|0);
     if (!($155)) {
      break L1;
     }
     $8 = $92;
     $156 = $8;
     $157 = ((($156)) + 16|0);
     $7 = $157;
     $158 = $7;
     $6 = $158;
     $159 = $6;
     $160 = $__nd;
     $161 = ((($160)) + 8|0);
     $162 = $91;
     $77 = $159;
     $78 = $161;
     $79 = $162;
     $163 = $77;
     $164 = $78;
     $165 = $79;
     $74 = $163;
     $75 = $164;
     $76 = $165;
     $166 = $75;
     $167 = $76;
     $72 = $166;
     $73 = $167;
     $168 = $72;
     $70 = $168;
     $169 = $70;
     $69 = $169;
     $170 = $69;
     $68 = $170;
     $171 = $68;
     $67 = $171;
     $172 = $67;
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = $174 & 1;
     $176 = ($175|0)!=(0);
     if ($176) {
      $63 = $169;
      $177 = $63;
      $62 = $177;
      $178 = $62;
      $61 = $178;
      $179 = $61;
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $188 = $181;
     } else {
      $66 = $169;
      $182 = $66;
      $65 = $182;
      $183 = $65;
      $64 = $183;
      $184 = $64;
      $185 = HEAP8[$184>>0]|0;
      $186 = $185&255;
      $187 = $186 >> 1;
      $188 = $187;
     }
     $__lhs_sz$i$i$i = $188;
     $189 = $__lhs_sz$i$i$i;
     $190 = $73;
     $60 = $190;
     $191 = $60;
     $59 = $191;
     $192 = $59;
     $58 = $192;
     $193 = $58;
     $57 = $193;
     $194 = $57;
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = $196 & 1;
     $198 = ($197|0)!=(0);
     if ($198) {
      $53 = $191;
      $199 = $53;
      $52 = $199;
      $200 = $52;
      $51 = $200;
      $201 = $51;
      $202 = ((($201)) + 4|0);
      $203 = HEAP32[$202>>2]|0;
      $211 = $203;
     } else {
      $56 = $191;
      $204 = $56;
      $55 = $204;
      $205 = $55;
      $54 = $205;
      $206 = $54;
      $207 = HEAP8[$206>>0]|0;
      $208 = $207&255;
      $209 = $208 >> 1;
      $211 = $209;
     }
     $210 = ($189|0)!=($211|0);
     do {
      if ($210) {
       $$expand_i1_val = 0;
       HEAP8[$71>>0] = $$expand_i1_val;
      } else {
       $212 = $72;
       $50 = $212;
       $213 = $50;
       $49 = $213;
       $214 = $49;
       $48 = $214;
       $215 = $48;
       $47 = $215;
       $216 = $47;
       $46 = $216;
       $217 = $46;
       $218 = HEAP8[$217>>0]|0;
       $219 = $218&255;
       $220 = $219 & 1;
       $221 = ($220|0)!=(0);
       if ($221) {
        $40 = $214;
        $222 = $40;
        $39 = $222;
        $223 = $39;
        $38 = $223;
        $224 = $38;
        $225 = ((($224)) + 8|0);
        $226 = HEAP32[$225>>2]|0;
        $233 = $226;
       } else {
        $45 = $214;
        $227 = $45;
        $44 = $227;
        $228 = $44;
        $43 = $228;
        $229 = $43;
        $230 = ((($229)) + 1|0);
        $42 = $230;
        $231 = $42;
        $41 = $231;
        $232 = $41;
        $233 = $232;
       }
       $37 = $233;
       $234 = $37;
       $__lp$i$i$i = $234;
       $235 = $73;
       $33 = $235;
       $236 = $33;
       $32 = $236;
       $237 = $32;
       $31 = $237;
       $238 = $31;
       $30 = $238;
       $239 = $30;
       $29 = $239;
       $240 = $29;
       $241 = HEAP8[$240>>0]|0;
       $242 = $241&255;
       $243 = $242 & 1;
       $244 = ($243|0)!=(0);
       if ($244) {
        $23 = $237;
        $245 = $23;
        $22 = $245;
        $246 = $22;
        $21 = $246;
        $247 = $21;
        $248 = ((($247)) + 8|0);
        $249 = HEAP32[$248>>2]|0;
        $256 = $249;
       } else {
        $28 = $237;
        $250 = $28;
        $27 = $250;
        $251 = $27;
        $26 = $251;
        $252 = $26;
        $253 = ((($252)) + 1|0);
        $25 = $253;
        $254 = $25;
        $24 = $254;
        $255 = $24;
        $256 = $255;
       }
       $20 = $256;
       $257 = $20;
       $__rp$i$i$i = $257;
       $258 = $72;
       $36 = $258;
       $259 = $36;
       $35 = $259;
       $260 = $35;
       $34 = $260;
       $261 = $34;
       $262 = HEAP8[$261>>0]|0;
       $263 = $262&255;
       $264 = $263 & 1;
       $265 = ($264|0)!=(0);
       if ($265) {
        $266 = $__lp$i$i$i;
        $267 = $__rp$i$i$i;
        $268 = $__lhs_sz$i$i$i;
        __THREW__ = 0;
        $269 = (invoke_iiii(388,($266|0),($267|0),($268|0))|0);
        $270 = __THREW__; __THREW__ = 0;
        $271 = $270&1;
        if ($271) {
         label = 34;
         break L8;
        }
        $272 = ($269|0)==(0);
        $$expand_i1_val2 = $272&1;
        HEAP8[$71>>0] = $$expand_i1_val2;
        break;
       }
       while(1) {
        $273 = $__lhs_sz$i$i$i;
        $274 = ($273|0)!=(0);
        if (!($274)) {
         label = 33;
         break;
        }
        $275 = $__lp$i$i$i;
        $276 = HEAP8[$275>>0]|0;
        $277 = $276 << 24 >> 24;
        $278 = $__rp$i$i$i;
        $279 = HEAP8[$278>>0]|0;
        $280 = $279 << 24 >> 24;
        $281 = ($277|0)!=($280|0);
        if ($281) {
         label = 31;
         break;
        }
        $282 = $__lhs_sz$i$i$i;
        $283 = (($282) + -1)|0;
        $__lhs_sz$i$i$i = $283;
        $284 = $__lp$i$i$i;
        $285 = ((($284)) + 1|0);
        $__lp$i$i$i = $285;
        $286 = $__rp$i$i$i;
        $287 = ((($286)) + 1|0);
        $__rp$i$i$i = $287;
       }
       if ((label|0) == 31) {
        label = 0;
        $$expand_i1_val4 = 0;
        HEAP8[$71>>0] = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val6 = 1;
        HEAP8[$71>>0] = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = HEAP8[$71>>0]|0;
     $290 = $$pre_trunc&1;
     $291 = $__nd;
     if ($290) {
      break;
     }
     $294 = HEAP32[$291>>2]|0;
     $__nd = $294;
    }
    if ((label|0) == 34) {
     $288 = ___cxa_find_matching_catch_3(0|0)|0;
     $289 = tempRet0;
     ___clang_call_terminate($288);
     // unreachable;
    }
    $80 = $89;
    $81 = $291;
    $292 = $80;
    $293 = $81;
    HEAP32[$292>>2] = $293;
    $298 = HEAP32[$89>>2]|0;
    STACKTOP = sp;return ($298|0);
   }
  }
 } while(0);
 $85 = $92;
 $82 = $84;
 $83 = 0;
 $295 = $82;
 $296 = $83;
 HEAP32[$295>>2] = $296;
 $297 = HEAP32[$84>>2]|0;
 HEAP32[$89>>2] = $297;
 $298 = HEAP32[$89>>2]|0;
 STACKTOP = sp;return ($298|0);
}
function __ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($this,$__val) {
 $this = $this|0;
 $__val = $__val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp + 168|0;
 $41 = $this;
 $42 = $__val;
 $43 = $42;
 $40 = $43;
 $44 = $40;
 $39 = $44;
 $45 = $39;
 $38 = $45;
 $46 = $38;
 $37 = $46;
 $47 = $37;
 $36 = $47;
 $48 = $36;
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = $50 & 1;
 $52 = ($51|0)!=(0);
 if ($52) {
  $30 = $45;
  $53 = $30;
  $29 = $53;
  $54 = $29;
  $28 = $54;
  $55 = $28;
  $56 = ((($55)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $64 = $57;
 } else {
  $35 = $45;
  $58 = $35;
  $34 = $58;
  $59 = $34;
  $33 = $59;
  $60 = $33;
  $61 = ((($60)) + 1|0);
  $32 = $61;
  $62 = $32;
  $31 = $62;
  $63 = $31;
  $64 = $63;
 }
 $27 = $64;
 $65 = $27;
 $66 = $42;
 $26 = $66;
 $67 = $26;
 $25 = $67;
 $68 = $25;
 $24 = $68;
 $69 = $24;
 $23 = $69;
 $70 = $23;
 $22 = $70;
 $71 = $22;
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 & 1;
 $75 = ($74|0)!=(0);
 if ($75) {
  $16 = $68;
  $76 = $16;
  $15 = $76;
  $77 = $15;
  $14 = $77;
  $78 = $14;
  $79 = ((($78)) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $87 = $80;
 } else {
  $21 = $68;
  $81 = $21;
  $20 = $81;
  $82 = $20;
  $19 = $82;
  $83 = $19;
  $84 = ((($83)) + 1|0);
  $18 = $84;
  $85 = $18;
  $17 = $85;
  $86 = $17;
  $87 = $86;
 }
 $13 = $87;
 $88 = $13;
 $89 = $42;
 $9 = $89;
 $90 = $9;
 $8 = $90;
 $91 = $8;
 $7 = $91;
 $92 = $7;
 $6 = $92;
 $93 = $6;
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = $95 & 1;
 $97 = ($96|0)!=(0);
 if ($97) {
  $2 = $90;
  $98 = $2;
  $1 = $98;
  $99 = $1;
  $0 = $99;
  $100 = $0;
  $101 = ((($100)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $110 = $102;
 } else {
  $5 = $90;
  $103 = $5;
  $4 = $103;
  $104 = $4;
  $3 = $104;
  $105 = $3;
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = $107 >> 1;
  $110 = $108;
 }
 $109 = (($88) + ($110)|0);
 $10 = $65;
 $11 = $109;
 $111 = $10;
 $112 = $11;
 $113 = $10;
 $114 = $112;
 $115 = $113;
 $116 = (($114) - ($115))|0;
 __THREW__ = 0;
 $117 = (invoke_iiii(389,($12|0),($111|0),($116|0))|0);
 $118 = __THREW__; __THREW__ = 0;
 $119 = $118&1;
 if ($119) {
  $120 = ___cxa_find_matching_catch_3(0|0)|0;
  $121 = tempRet0;
  ___clang_call_terminate($120);
  // unreachable;
 } else {
  STACKTOP = sp;return ($117|0);
 }
 return (0)|0;
}
function __ZNSt3__121__murmur2_or_cityhashIjLj32EEclEPKvj($this,$__key,$__len) {
 $this = $this|0;
 $__key = $__key|0;
 $__len = $__len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__data = 0, $__h = 0, $__k = 0, $__m = 0, $__r = 0, $__r$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__r$i = sp + 32|0;
 $1 = $this;
 $2 = $__key;
 $3 = $__len;
 $__m = 1540483477;
 $__r = 24;
 $4 = $3;
 $__h = $4;
 $5 = $2;
 $__data = $5;
 while(1) {
  $6 = $3;
  $7 = ($6>>>0)>=(4);
  if (!($7)) {
   break;
  }
  $8 = $__data;
  $0 = $8;
  $9 = $0;
  ;HEAP8[$__r$i>>0]=HEAP8[$9>>0]|0;HEAP8[$__r$i+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$__r$i+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$__r$i+3>>0]=HEAP8[$9+3>>0]|0;
  $10 = HEAP32[$__r$i>>2]|0;
  $__k = $10;
  $11 = $__k;
  $12 = Math_imul($11, 1540483477)|0;
  $__k = $12;
  $13 = $__k;
  $14 = $13 >>> 24;
  $15 = $__k;
  $16 = $15 ^ $14;
  $__k = $16;
  $17 = $__k;
  $18 = Math_imul($17, 1540483477)|0;
  $__k = $18;
  $19 = $__h;
  $20 = Math_imul($19, 1540483477)|0;
  $__h = $20;
  $21 = $__k;
  $22 = $__h;
  $23 = $22 ^ $21;
  $__h = $23;
  $24 = $__data;
  $25 = ((($24)) + 4|0);
  $__data = $25;
  $26 = $3;
  $27 = (($26) - 4)|0;
  $3 = $27;
 }
 $28 = $3;
 switch ($28|0) {
 case 3:  {
  $29 = $__data;
  $30 = ((($29)) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 << 16;
  $34 = $__h;
  $35 = $34 ^ $33;
  $__h = $35;
  label = 6;
  break;
 }
 case 2:  {
  label = 6;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  $50 = $__h;
  $51 = $50 >>> 13;
  $52 = $__h;
  $53 = $52 ^ $51;
  $__h = $53;
  $54 = $__h;
  $55 = Math_imul($54, 1540483477)|0;
  $__h = $55;
  $56 = $__h;
  $57 = $56 >>> 15;
  $58 = $__h;
  $59 = $58 ^ $57;
  $__h = $59;
  $60 = $__h;
  STACKTOP = sp;return ($60|0);
 }
 }
 if ((label|0) == 6) {
  $36 = $__data;
  $37 = ((($36)) + 1|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $39 << 8;
  $41 = $__h;
  $42 = $41 ^ $40;
  $__h = $42;
 }
 $43 = $__data;
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $__h;
 $47 = $46 ^ $45;
 $__h = $47;
 $48 = $__h;
 $49 = Math_imul($48, 1540483477)|0;
 $__h = $49;
 $50 = $__h;
 $51 = $50 >>> 13;
 $52 = $__h;
 $53 = $52 ^ $51;
 $__h = $53;
 $54 = $__h;
 $55 = Math_imul($54, 1540483477)|0;
 $__h = $55;
 $56 = $__h;
 $57 = $56 >>> 15;
 $58 = $__h;
 $59 = $58 ^ $57;
 $__h = $59;
 $60 = $__h;
 STACKTOP = sp;return ($60|0);
}
function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_memcmp($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEE25__construct_node_with_keyEOS6_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i = 0, $__i$i$i$i$i$i = 0, $__na = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 56|0;
 $14 = sp + 606|0;
 $32 = sp + 48|0;
 $37 = sp + 605|0;
 $46 = sp + 40|0;
 $49 = sp + 604|0;
 $60 = sp + 32|0;
 $63 = sp + 603|0;
 $79 = sp + 300|0;
 $80 = sp + 24|0;
 $83 = sp + 288|0;
 $84 = sp + 280|0;
 $85 = sp + 16|0;
 $90 = sp + 256|0;
 $105 = sp + 8|0;
 $108 = sp + 602|0;
 $119 = sp;
 $122 = sp + 601|0;
 $136 = sp + 600|0;
 $137 = sp + 72|0;
 $134 = $this;
 $135 = $__k;
 $140 = $134;
 $133 = $140;
 $141 = $133;
 $142 = ((($141)) + 8|0);
 $132 = $142;
 $143 = $132;
 $131 = $143;
 $144 = $131;
 $__na = $144;
 $$expand_i1_val = 0;
 HEAP8[$136>>0] = $$expand_i1_val;
 $145 = $__na;
 $97 = $145;
 $98 = 1;
 $146 = $97;
 $147 = $98;
 $94 = $146;
 $95 = $147;
 $96 = 0;
 $148 = $95;
 $149 = ($148*212)|0;
 $93 = $149;
 $150 = $93;
 $151 = (__Znwj($150)|0);
 $152 = $__na;
 $91 = $137;
 $92 = $152;
 $153 = $91;
 $154 = $92;
 HEAP32[$153>>2] = $154;
 $155 = ((($153)) + 4|0);
 HEAP8[$155>>0] = 0;
 $156 = ((($153)) + 5|0);
 HEAP8[$156>>0] = 0;
 $87 = $agg$result;
 $88 = $151;
 $89 = $137;
 $157 = $87;
 $158 = $88;
 $159 = $89;
 $86 = $159;
 $160 = $86;
 ;HEAP32[$90>>2]=HEAP32[$160>>2]|0;HEAP32[$90+4>>2]=HEAP32[$160+4>>2]|0;
 ;HEAP8[$85>>0]=HEAP8[$90>>0]|0;HEAP8[$85+1>>0]=HEAP8[$90+1>>0]|0;HEAP8[$85+2>>0]=HEAP8[$90+2>>0]|0;HEAP8[$85+3>>0]=HEAP8[$90+3>>0]|0;HEAP8[$85+4>>0]=HEAP8[$90+4>>0]|0;HEAP8[$85+5>>0]=HEAP8[$90+5>>0]|0;HEAP8[$85+6>>0]=HEAP8[$90+6>>0]|0;HEAP8[$85+7>>0]=HEAP8[$90+7>>0]|0;
 $82 = $157;
 HEAP32[$83>>2] = $158;
 $161 = $82;
 $81 = $83;
 $162 = $81;
 $163 = HEAP32[$162>>2]|0;
 $75 = $85;
 $164 = $75;
 ;HEAP32[$84>>2]=HEAP32[$164>>2]|0;HEAP32[$84+4>>2]=HEAP32[$164+4>>2]|0;
 ;HEAP8[$80>>0]=HEAP8[$84>>0]|0;HEAP8[$80+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$80+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$80+3>>0]=HEAP8[$84+3>>0]|0;HEAP8[$80+4>>0]=HEAP8[$84+4>>0]|0;HEAP8[$80+5>>0]=HEAP8[$84+5>>0]|0;HEAP8[$80+6>>0]=HEAP8[$84+6>>0]|0;HEAP8[$80+7>>0]=HEAP8[$84+7>>0]|0;
 $78 = $161;
 HEAP32[$79>>2] = $163;
 $165 = $78;
 $77 = $79;
 $166 = $77;
 $167 = HEAP32[$166>>2]|0;
 HEAP32[$165>>2] = $167;
 $168 = ((($165)) + 4|0);
 $76 = $80;
 $169 = $76;
 ;HEAP32[$168>>2]=HEAP32[$169>>2]|0;HEAP32[$168+4>>2]=HEAP32[$169+4>>2]|0;
 $170 = $__na;
 $74 = $agg$result;
 $171 = $74;
 $73 = $171;
 $172 = $73;
 $72 = $172;
 $173 = $72;
 $174 = HEAP32[$173>>2]|0;
 $175 = ((($174)) + 8|0);
 $39 = $175;
 $176 = $39;
 $177 = $135;
 $38 = $177;
 $178 = $38;
 $34 = $170;
 $35 = $176;
 $36 = $178;
 $179 = $34;
 $180 = $35;
 $181 = $36;
 $33 = $181;
 $182 = $33;
 ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
 $29 = $179;
 $30 = $180;
 $31 = $182;
 $183 = $29;
 $184 = $30;
 $185 = $31;
 $28 = $185;
 $186 = $28;
 $25 = $183;
 $26 = $184;
 $27 = $186;
 $187 = $26;
 $188 = $27;
 $24 = $188;
 $189 = $24;
 $22 = $187;
 $23 = $189;
 $190 = $22;
 $191 = $23;
 $21 = $191;
 $192 = $21;
 ;HEAP32[$190>>2]=HEAP32[$192>>2]|0;HEAP32[$190+4>>2]=HEAP32[$192+4>>2]|0;HEAP32[$190+8>>2]=HEAP32[$192+8>>2]|0;
 $193 = $23;
 $20 = $193;
 $194 = $20;
 $19 = $194;
 $195 = $19;
 $18 = $195;
 $196 = $18;
 $__a$i$i$i$i$i = $196;
 $__i$i$i$i$i$i = 0;
 while(1) {
  $197 = $__i$i$i$i$i$i;
  $198 = ($197>>>0)<(3);
  if (!($198)) {
   break;
  }
  $199 = $__i$i$i$i$i$i;
  $200 = $__a$i$i$i$i$i;
  $201 = (($200) + ($199<<2)|0);
  HEAP32[$201>>2] = 0;
  $202 = $__i$i$i$i$i$i;
  $203 = (($202) + 1)|0;
  $__i$i$i$i$i$i = $203;
 }
 $6 = $agg$result;
 $204 = $6;
 $5 = $204;
 $205 = $5;
 $4 = $205;
 $206 = $4;
 $207 = ((($206)) + 4|0);
 $208 = ((($207)) + 4|0);
 HEAP8[$208>>0] = 1;
 $209 = $__na;
 $2 = $agg$result;
 $210 = $2;
 $1 = $210;
 $211 = $1;
 $0 = $211;
 $212 = $0;
 $213 = HEAP32[$212>>2]|0;
 $214 = ((($213)) + 8|0);
 $215 = ((($214)) + 12|0);
 $3 = $215;
 $216 = $3;
 $12 = $209;
 $13 = $216;
 $217 = $12;
 $218 = $13;
 ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
 $9 = $217;
 $10 = $218;
 $219 = $9;
 $220 = $10;
 $7 = $219;
 $8 = $220;
 $221 = $8;
 _memset(($221|0),0,192)|0;
 __THREW__ = 0;
 invoke_vi(390,($221|0));
 $222 = __THREW__; __THREW__ = 0;
 $223 = $222&1;
 if ($223) {
  $230 = ___cxa_find_matching_catch_2()|0;
  $231 = tempRet0;
  $138 = $230;
  $139 = $231;
  $71 = $agg$result;
  $232 = $71;
  $69 = $232;
  $70 = 0;
  $233 = $69;
  $68 = $233;
  $234 = $68;
  $67 = $234;
  $235 = $67;
  $236 = HEAP32[$235>>2]|0;
  $__tmp$i$i1 = $236;
  $237 = $70;
  $43 = $233;
  $238 = $43;
  $42 = $238;
  $239 = $42;
  HEAP32[$239>>2] = $237;
  $240 = $__tmp$i$i1;
  $241 = ($240|0)!=(0|0);
  if (!($241)) {
   $322 = $138;
   $323 = $139;
   ___resumeException($322|0);
   // unreachable;
  }
  $41 = $233;
  $242 = $41;
  $40 = $242;
  $243 = $40;
  $244 = ((($243)) + 4|0);
  $245 = $__tmp$i$i1;
  $65 = $244;
  $66 = $245;
  $246 = $65;
  $247 = ((($246)) + 5|0);
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&1;
  if ($249) {
   $250 = HEAP32[$246>>2]|0;
   $251 = $66;
   $252 = ((($251)) + 8|0);
   $253 = ((($252)) + 12|0);
   $64 = $253;
   $254 = $64;
   $61 = $250;
   $62 = $254;
   $255 = $61;
   $256 = $62;
   ;HEAP8[$60>>0]=HEAP8[$63>>0]|0;
   $58 = $255;
   $59 = $256;
   $257 = $59;
   __ZN9ObjMaster23ObjectMaterialFaceGroupD2Ev($257);
  }
  $258 = ((($246)) + 4|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = $259&1;
  if ($260) {
   $261 = HEAP32[$246>>2]|0;
   $262 = $66;
   $263 = ((($262)) + 8|0);
   $57 = $263;
   $264 = $57;
   $47 = $261;
   $48 = $264;
   $265 = $47;
   $266 = $48;
   ;HEAP8[$46>>0]=HEAP8[$49>>0]|0;
   $44 = $265;
   $45 = $266;
   $267 = $45;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($267);
  }
  $268 = $66;
  $269 = ($268|0)!=(0|0);
  if (!($269)) {
   $322 = $138;
   $323 = $139;
   ___resumeException($322|0);
   // unreachable;
  }
  $270 = HEAP32[$246>>2]|0;
  $271 = $66;
  $54 = $270;
  $55 = $271;
  $56 = 1;
  $272 = $54;
  $273 = $55;
  $274 = $56;
  $51 = $272;
  $52 = $273;
  $53 = $274;
  $275 = $52;
  $50 = $275;
  $276 = $50;
  __ZdlPv($276);
  $322 = $138;
  $323 = $139;
  ___resumeException($322|0);
  // unreachable;
 }
 $17 = $agg$result;
 $224 = $17;
 $16 = $224;
 $225 = $16;
 $15 = $225;
 $226 = $15;
 $227 = ((($226)) + 4|0);
 $228 = ((($227)) + 5|0);
 HEAP8[$228>>0] = 1;
 $$expand_i1_val2 = 1;
 HEAP8[$136>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$136>>0]|0;
 $229 = $$pre_trunc&1;
 if ($229) {
  STACKTOP = sp;return;
 }
 $130 = $agg$result;
 $277 = $130;
 $128 = $277;
 $129 = 0;
 $278 = $128;
 $127 = $278;
 $279 = $127;
 $126 = $279;
 $280 = $126;
 $281 = HEAP32[$280>>2]|0;
 $__tmp$i$i = $281;
 $282 = $129;
 $102 = $278;
 $283 = $102;
 $101 = $283;
 $284 = $101;
 HEAP32[$284>>2] = $282;
 $285 = $__tmp$i$i;
 $286 = ($285|0)!=(0|0);
 if (!($286)) {
  STACKTOP = sp;return;
 }
 $100 = $278;
 $287 = $100;
 $99 = $287;
 $288 = $99;
 $289 = ((($288)) + 4|0);
 $290 = $__tmp$i$i;
 $124 = $289;
 $125 = $290;
 $291 = $124;
 $292 = ((($291)) + 5|0);
 $293 = HEAP8[$292>>0]|0;
 $294 = $293&1;
 if ($294) {
  $295 = HEAP32[$291>>2]|0;
  $296 = $125;
  $297 = ((($296)) + 8|0);
  $298 = ((($297)) + 12|0);
  $123 = $298;
  $299 = $123;
  $120 = $295;
  $121 = $299;
  $300 = $120;
  $301 = $121;
  ;HEAP8[$119>>0]=HEAP8[$122>>0]|0;
  $117 = $300;
  $118 = $301;
  $302 = $118;
  __ZN9ObjMaster23ObjectMaterialFaceGroupD2Ev($302);
 }
 $303 = ((($291)) + 4|0);
 $304 = HEAP8[$303>>0]|0;
 $305 = $304&1;
 if ($305) {
  $306 = HEAP32[$291>>2]|0;
  $307 = $125;
  $308 = ((($307)) + 8|0);
  $116 = $308;
  $309 = $116;
  $106 = $306;
  $107 = $309;
  $310 = $106;
  $311 = $107;
  ;HEAP8[$105>>0]=HEAP8[$108>>0]|0;
  $103 = $310;
  $104 = $311;
  $312 = $104;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($312);
 }
 $313 = $125;
 $314 = ($313|0)!=(0|0);
 if (!($314)) {
  STACKTOP = sp;return;
 }
 $315 = HEAP32[$291>>2]|0;
 $316 = $125;
 $113 = $315;
 $114 = $316;
 $115 = 1;
 $317 = $113;
 $318 = $114;
 $319 = $115;
 $110 = $317;
 $111 = $318;
 $112 = $319;
 $320 = $111;
 $109 = $320;
 $321 = $109;
 __ZdlPv($321);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster23ObjectMaterialFaceGroupC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = $this;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $5 = $11;
 $12 = $5;
 $4 = $12;
 $13 = $4;
 $3 = $13;
 $2 = $11;
 $14 = $2;
 $1 = $14;
 $15 = $1;
 $0 = $15;
 $16 = $0;
 $__a$i$i = $16;
 $__i$i$i = 0;
 while(1) {
  $17 = $__i$i$i;
  $18 = ($17>>>0)<(3);
  if (!($18)) {
   break;
  }
  $19 = $__i$i$i;
  $20 = $__a$i$i;
  $21 = (($20) + ($19<<2)|0);
  HEAP32[$21>>2] = 0;
  $22 = $__i$i$i;
  $23 = (($22) + 1)|0;
  $__i$i$i = $23;
 }
 $24 = ((($10)) + 12|0);
 __THREW__ = 0;
 invoke_vi(344,($24|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = tempRet0;
  $8 = $27;
  $9 = $28;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $29 = $8;
  $30 = $9;
  ___resumeException($29|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE20__node_insert_uniqueEPNS_11__hash_nodeISA_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0.0, $4 = 0;
 var $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__ndptr = 0, $__pn = 0, $__rp$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $60 = sp + 614|0;
 $90 = sp;
 $93 = sp + 613|0;
 $__inserted = sp + 612|0;
 $145 = sp + 16|0;
 $146 = sp + 12|0;
 $147 = sp + 4|0;
 $143 = $this;
 $144 = $__nd;
 $148 = $143;
 $142 = $148;
 $149 = $142;
 $150 = ((($149)) + 12|0);
 $141 = $150;
 $151 = $141;
 $140 = $151;
 $152 = $140;
 $153 = $144;
 $154 = ((($153)) + 8|0);
 $101 = $152;
 $102 = $154;
 $155 = $101;
 $156 = $102;
 $157 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($155,$156)|0);
 $158 = $144;
 $159 = ((($158)) + 4|0);
 HEAP32[$159>>2] = $157;
 $100 = $148;
 $160 = $100;
 $99 = $160;
 $161 = $99;
 $98 = $161;
 $162 = $98;
 $97 = $162;
 $163 = $97;
 $164 = ((($163)) + 4|0);
 $96 = $164;
 $165 = $96;
 $95 = $165;
 $166 = $95;
 $94 = $166;
 $167 = $94;
 $168 = HEAP32[$167>>2]|0;
 $__bc = $168;
 HEAP8[$__inserted>>0] = 0;
 $169 = $__bc;
 $170 = ($169|0)!=(0);
 L1: do {
  if ($170) {
   $171 = $144;
   $172 = ((($171)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $__bc;
   $82 = $173;
   $83 = $174;
   $175 = $83;
   $176 = $83;
   $177 = (($176) - 1)|0;
   $178 = $175 & $177;
   $179 = ($178|0)!=(0);
   $180 = $82;
   $181 = $83;
   if ($179) {
    $184 = (($180>>>0) % ($181>>>0))&-1;
    $185 = $184;
   } else {
    $182 = (($181) - 1)|0;
    $183 = $180 & $182;
    $185 = $183;
   }
   $__chash = $185;
   $186 = $__chash;
   $7 = $148;
   $8 = $186;
   $187 = $7;
   $188 = $8;
   $6 = $187;
   $189 = $6;
   $5 = $189;
   $190 = $5;
   $191 = HEAP32[$190>>2]|0;
   $192 = (($191) + ($188<<2)|0);
   $193 = HEAP32[$192>>2]|0;
   $__ndptr = $193;
   $194 = $__ndptr;
   $195 = ($194|0)!=(0|0);
   if ($195) {
    $196 = $__ndptr;
    $197 = HEAP32[$196>>2]|0;
    $__ndptr = $197;
    L8: while(1) {
     $198 = $__ndptr;
     $199 = ($198|0)!=(0|0);
     if (!($199)) {
      break L1;
     }
     $200 = $__ndptr;
     $201 = ((($200)) + 4|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = $__bc;
     $3 = $202;
     $4 = $203;
     $204 = $4;
     $205 = $4;
     $206 = (($205) - 1)|0;
     $207 = $204 & $206;
     $208 = ($207|0)!=(0);
     $209 = $3;
     $210 = $4;
     if ($208) {
      $213 = (($209>>>0) % ($210>>>0))&-1;
      $215 = $213;
     } else {
      $211 = (($210) - 1)|0;
      $212 = $209 & $211;
      $215 = $212;
     }
     $214 = $__chash;
     $216 = ($215|0)==($214|0);
     if (!($216)) {
      break L1;
     }
     $2 = $148;
     $217 = $2;
     $218 = ((($217)) + 16|0);
     $1 = $218;
     $219 = $1;
     $0 = $219;
     $220 = $0;
     $221 = $__ndptr;
     $222 = ((($221)) + 8|0);
     $223 = $144;
     $224 = ((($223)) + 8|0);
     $66 = $220;
     $67 = $222;
     $68 = $224;
     $225 = $66;
     $226 = $67;
     $227 = $68;
     $63 = $225;
     $64 = $226;
     $65 = $227;
     $228 = $64;
     $229 = $65;
     $61 = $228;
     $62 = $229;
     $230 = $61;
     $59 = $230;
     $231 = $59;
     $58 = $231;
     $232 = $58;
     $57 = $232;
     $233 = $57;
     $56 = $233;
     $234 = $56;
     $235 = HEAP8[$234>>0]|0;
     $236 = $235&255;
     $237 = $236 & 1;
     $238 = ($237|0)!=(0);
     if ($238) {
      $52 = $231;
      $239 = $52;
      $51 = $239;
      $240 = $51;
      $50 = $240;
      $241 = $50;
      $242 = ((($241)) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $250 = $243;
     } else {
      $55 = $231;
      $244 = $55;
      $54 = $244;
      $245 = $54;
      $53 = $245;
      $246 = $53;
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = $248 >> 1;
      $250 = $249;
     }
     $__lhs_sz$i$i$i = $250;
     $251 = $__lhs_sz$i$i$i;
     $252 = $62;
     $49 = $252;
     $253 = $49;
     $48 = $253;
     $254 = $48;
     $47 = $254;
     $255 = $47;
     $46 = $255;
     $256 = $46;
     $257 = HEAP8[$256>>0]|0;
     $258 = $257&255;
     $259 = $258 & 1;
     $260 = ($259|0)!=(0);
     if ($260) {
      $42 = $253;
      $261 = $42;
      $41 = $261;
      $262 = $41;
      $40 = $262;
      $263 = $40;
      $264 = ((($263)) + 4|0);
      $265 = HEAP32[$264>>2]|0;
      $273 = $265;
     } else {
      $45 = $253;
      $266 = $45;
      $44 = $266;
      $267 = $44;
      $43 = $267;
      $268 = $43;
      $269 = HEAP8[$268>>0]|0;
      $270 = $269&255;
      $271 = $270 >> 1;
      $273 = $271;
     }
     $272 = ($251|0)!=($273|0);
     do {
      if ($272) {
       $$expand_i1_val = 0;
       HEAP8[$60>>0] = $$expand_i1_val;
      } else {
       $274 = $61;
       $39 = $274;
       $275 = $39;
       $38 = $275;
       $276 = $38;
       $37 = $276;
       $277 = $37;
       $36 = $277;
       $278 = $36;
       $35 = $278;
       $279 = $35;
       $280 = HEAP8[$279>>0]|0;
       $281 = $280&255;
       $282 = $281 & 1;
       $283 = ($282|0)!=(0);
       if ($283) {
        $29 = $276;
        $284 = $29;
        $28 = $284;
        $285 = $28;
        $27 = $285;
        $286 = $27;
        $287 = ((($286)) + 8|0);
        $288 = HEAP32[$287>>2]|0;
        $295 = $288;
       } else {
        $34 = $276;
        $289 = $34;
        $33 = $289;
        $290 = $33;
        $32 = $290;
        $291 = $32;
        $292 = ((($291)) + 1|0);
        $31 = $292;
        $293 = $31;
        $30 = $293;
        $294 = $30;
        $295 = $294;
       }
       $26 = $295;
       $296 = $26;
       $__lp$i$i$i = $296;
       $297 = $62;
       $22 = $297;
       $298 = $22;
       $21 = $298;
       $299 = $21;
       $20 = $299;
       $300 = $20;
       $19 = $300;
       $301 = $19;
       $18 = $301;
       $302 = $18;
       $303 = HEAP8[$302>>0]|0;
       $304 = $303&255;
       $305 = $304 & 1;
       $306 = ($305|0)!=(0);
       if ($306) {
        $12 = $299;
        $307 = $12;
        $11 = $307;
        $308 = $11;
        $10 = $308;
        $309 = $10;
        $310 = ((($309)) + 8|0);
        $311 = HEAP32[$310>>2]|0;
        $318 = $311;
       } else {
        $17 = $299;
        $312 = $17;
        $16 = $312;
        $313 = $16;
        $15 = $313;
        $314 = $15;
        $315 = ((($314)) + 1|0);
        $14 = $315;
        $316 = $14;
        $13 = $316;
        $317 = $13;
        $318 = $317;
       }
       $9 = $318;
       $319 = $9;
       $__rp$i$i$i = $319;
       $320 = $61;
       $25 = $320;
       $321 = $25;
       $24 = $321;
       $322 = $24;
       $23 = $322;
       $323 = $23;
       $324 = HEAP8[$323>>0]|0;
       $325 = $324&255;
       $326 = $325 & 1;
       $327 = ($326|0)!=(0);
       if ($327) {
        $328 = $__lp$i$i$i;
        $329 = $__rp$i$i$i;
        $330 = $__lhs_sz$i$i$i;
        __THREW__ = 0;
        $331 = (invoke_iiii(388,($328|0),($329|0),($330|0))|0);
        $332 = __THREW__; __THREW__ = 0;
        $333 = $332&1;
        if ($333) {
         label = 34;
         break L8;
        }
        $334 = ($331|0)==(0);
        $$expand_i1_val3 = $334&1;
        HEAP8[$60>>0] = $$expand_i1_val3;
        break;
       }
       while(1) {
        $335 = $__lhs_sz$i$i$i;
        $336 = ($335|0)!=(0);
        if (!($336)) {
         label = 33;
         break;
        }
        $337 = $__lp$i$i$i;
        $338 = HEAP8[$337>>0]|0;
        $339 = $338 << 24 >> 24;
        $340 = $__rp$i$i$i;
        $341 = HEAP8[$340>>0]|0;
        $342 = $341 << 24 >> 24;
        $343 = ($339|0)!=($342|0);
        if ($343) {
         label = 31;
         break;
        }
        $344 = $__lhs_sz$i$i$i;
        $345 = (($344) + -1)|0;
        $__lhs_sz$i$i$i = $345;
        $346 = $__lp$i$i$i;
        $347 = ((($346)) + 1|0);
        $__lp$i$i$i = $347;
        $348 = $__rp$i$i$i;
        $349 = ((($348)) + 1|0);
        $__rp$i$i$i = $349;
       }
       if ((label|0) == 31) {
        label = 0;
        $$expand_i1_val5 = 0;
        HEAP8[$60>>0] = $$expand_i1_val5;
        break;
       }
       else if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val7 = 1;
        HEAP8[$60>>0] = $$expand_i1_val7;
        break;
       }
      }
     } while(0);
     $$pre_trunc = HEAP8[$60>>0]|0;
     $352 = $$pre_trunc&1;
     if ($352) {
      label = 52;
      break;
     }
     $353 = $__ndptr;
     $354 = HEAP32[$353>>2]|0;
     $__ndptr = $354;
    }
    if ((label|0) == 34) {
     $350 = ___cxa_find_matching_catch_3(0|0)|0;
     $351 = tempRet0;
     ___clang_call_terminate($350);
     // unreachable;
    }
    else if ((label|0) == 52) {
     $507 = $__ndptr;
     $133 = $147;
     $134 = $507;
     $508 = $133;
     $509 = $134;
     HEAP32[$508>>2] = $509;
     $137 = $agg$result;
     $138 = $147;
     $139 = $__inserted;
     $510 = $137;
     $511 = $138;
     $136 = $511;
     $512 = $136;
     ;HEAP32[$510>>2]=HEAP32[$512>>2]|0;
     $513 = ((($510)) + 4|0);
     $514 = $139;
     $135 = $514;
     $515 = $135;
     $516 = HEAP8[$515>>0]|0;
     $517 = $516&1;
     $518 = $517&1;
     HEAP8[$513>>0] = $518;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $71 = $148;
 $355 = $71;
 $356 = ((($355)) + 12|0);
 $70 = $356;
 $357 = $70;
 $69 = $357;
 $358 = $69;
 $359 = HEAP32[$358>>2]|0;
 $360 = (($359) + 1)|0;
 $361 = (+($360>>>0));
 $362 = $__bc;
 $363 = (+($362>>>0));
 $74 = $148;
 $364 = $74;
 $365 = ((($364)) + 16|0);
 $73 = $365;
 $366 = $73;
 $72 = $366;
 $367 = $72;
 $368 = +HEAPF32[$367>>2];
 $369 = $363 * $368;
 $370 = $361 > $369;
 $371 = $__bc;
 $372 = ($371|0)==(0);
 $or$cond = $370 | $372;
 if ($or$cond) {
  $373 = $__bc;
  $374 = $373<<1;
  $375 = $__bc;
  $75 = $375;
  $376 = $75;
  $377 = ($376>>>0)>(2);
  if ($377) {
   $378 = $75;
   $379 = $75;
   $380 = (($379) - 1)|0;
   $381 = $378 & $380;
   $382 = ($381|0)!=(0);
   $383 = $382 ^ 1;
   $385 = $383;
  } else {
   $385 = 0;
  }
  $384 = $385 ^ 1;
  $386 = $384&1;
  $387 = (($374) + ($386))|0;
  HEAP32[$145>>2] = $387;
  $78 = $148;
  $388 = $78;
  $389 = ((($388)) + 12|0);
  $77 = $389;
  $390 = $77;
  $76 = $390;
  $391 = $76;
  $392 = HEAP32[$391>>2]|0;
  $393 = (($392) + 1)|0;
  $394 = (+($393>>>0));
  $81 = $148;
  $395 = $81;
  $396 = ((($395)) + 16|0);
  $80 = $396;
  $397 = $80;
  $79 = $397;
  $398 = $79;
  $399 = +HEAPF32[$398>>2];
  $400 = $394 / $399;
  $84 = $400;
  $401 = $84;
  $402 = (+Math_ceil((+$401)));
  $403 = (~~(($402))>>>0);
  HEAP32[$146>>2] = $403;
  $91 = $145;
  $92 = $146;
  $404 = $91;
  $405 = $92;
  ;HEAP8[$90>>0]=HEAP8[$93>>0]|0;
  $88 = $404;
  $89 = $405;
  $406 = $88;
  $407 = $89;
  $85 = $90;
  $86 = $406;
  $87 = $407;
  $408 = $86;
  $409 = HEAP32[$408>>2]|0;
  $410 = $87;
  $411 = HEAP32[$410>>2]|0;
  $412 = ($409>>>0)<($411>>>0);
  $413 = $89;
  $414 = $88;
  $415 = $412 ? $413 : $414;
  $416 = HEAP32[$415>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE6rehashEj($148,$416);
  $109 = $148;
  $417 = $109;
  $108 = $417;
  $418 = $108;
  $107 = $418;
  $419 = $107;
  $106 = $419;
  $420 = $106;
  $421 = ((($420)) + 4|0);
  $105 = $421;
  $422 = $105;
  $104 = $422;
  $423 = $104;
  $103 = $423;
  $424 = $103;
  $425 = HEAP32[$424>>2]|0;
  $__bc = $425;
  $426 = $144;
  $427 = ((($426)) + 4|0);
  $428 = HEAP32[$427>>2]|0;
  $429 = $__bc;
  $110 = $428;
  $111 = $429;
  $430 = $111;
  $431 = $111;
  $432 = (($431) - 1)|0;
  $433 = $430 & $432;
  $434 = ($433|0)!=(0);
  $435 = $110;
  $436 = $111;
  if ($434) {
   $439 = (($435>>>0) % ($436>>>0))&-1;
   $440 = $439;
  } else {
   $437 = (($436) - 1)|0;
   $438 = $435 & $437;
   $440 = $438;
  }
  $__chash = $440;
 }
 $441 = $__chash;
 $114 = $148;
 $115 = $441;
 $442 = $114;
 $443 = $115;
 $113 = $442;
 $444 = $113;
 $112 = $444;
 $445 = $112;
 $446 = HEAP32[$445>>2]|0;
 $447 = (($446) + ($443<<2)|0);
 $448 = HEAP32[$447>>2]|0;
 $__pn = $448;
 $449 = $__pn;
 $450 = ($449|0)==(0|0);
 if ($450) {
  $451 = ((($148)) + 8|0);
  $117 = $451;
  $452 = $117;
  $116 = $452;
  $453 = $116;
  $119 = $453;
  $454 = $119;
  $118 = $454;
  $455 = $118;
  $__pn = $455;
  $456 = $__pn;
  $457 = HEAP32[$456>>2]|0;
  $458 = $144;
  HEAP32[$458>>2] = $457;
  $459 = $144;
  $460 = $__pn;
  HEAP32[$460>>2] = $459;
  $461 = $__pn;
  $462 = $__chash;
  $122 = $148;
  $123 = $462;
  $463 = $122;
  $464 = $123;
  $121 = $463;
  $465 = $121;
  $120 = $465;
  $466 = $120;
  $467 = HEAP32[$466>>2]|0;
  $468 = (($467) + ($464<<2)|0);
  HEAP32[$468>>2] = $461;
  $469 = $144;
  $470 = HEAP32[$469>>2]|0;
  $471 = ($470|0)!=(0|0);
  if ($471) {
   $472 = $144;
   $473 = $144;
   $474 = HEAP32[$473>>2]|0;
   $475 = ((($474)) + 4|0);
   $476 = HEAP32[$475>>2]|0;
   $477 = $__bc;
   $124 = $476;
   $125 = $477;
   $478 = $125;
   $479 = $125;
   $480 = (($479) - 1)|0;
   $481 = $478 & $480;
   $482 = ($481|0)!=(0);
   $483 = $124;
   $484 = $125;
   if ($482) {
    $487 = (($483>>>0) % ($484>>>0))&-1;
    $488 = $487;
   } else {
    $485 = (($484) - 1)|0;
    $486 = $483 & $485;
    $488 = $486;
   }
   $128 = $148;
   $129 = $488;
   $489 = $128;
   $490 = $129;
   $127 = $489;
   $491 = $127;
   $126 = $491;
   $492 = $126;
   $493 = HEAP32[$492>>2]|0;
   $494 = (($493) + ($490<<2)|0);
   HEAP32[$494>>2] = $472;
  }
 } else {
  $495 = $__pn;
  $496 = HEAP32[$495>>2]|0;
  $497 = $144;
  HEAP32[$497>>2] = $496;
  $498 = $144;
  $499 = $__pn;
  HEAP32[$499>>2] = $498;
 }
 $500 = $144;
 $__ndptr = $500;
 $132 = $148;
 $501 = $132;
 $502 = ((($501)) + 12|0);
 $131 = $502;
 $503 = $131;
 $130 = $503;
 $504 = $130;
 $505 = HEAP32[$504>>2]|0;
 $506 = (($505) + 1)|0;
 HEAP32[$504>>2] = $506;
 HEAP8[$__inserted>>0] = 1;
 $507 = $__ndptr;
 $133 = $147;
 $134 = $507;
 $508 = $133;
 $509 = $134;
 HEAP32[$508>>2] = $509;
 $137 = $agg$result;
 $138 = $147;
 $139 = $__inserted;
 $510 = $137;
 $511 = $138;
 $136 = $511;
 $512 = $136;
 ;HEAP32[$510>>2]=HEAP32[$512>>2]|0;
 $513 = ((($510)) + 4|0);
 $514 = $139;
 $135 = $514;
 $515 = $135;
 $516 = HEAP8[$515>>0]|0;
 $517 = $516&1;
 $518 = $517&1;
 HEAP8[$513>>0] = $518;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 12|0;
 $35 = sp + 4|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = ((($49)) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 $58 = HEAP32[$34>>2]|0;
 if ($57) {
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = $__bc;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $__bc;
 $25 = $61;
 $62 = $25;
 $63 = ($62>>>0)>(2);
 if ($63) {
  $64 = $25;
  $65 = $25;
  $66 = (($65) - 1)|0;
  $67 = $64 & $66;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if ($69) {
   $14 = $36;
   $70 = $14;
   $71 = ((($70)) + 12|0);
   $13 = $71;
   $72 = $13;
   $12 = $72;
   $73 = $12;
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $2 = $36;
   $76 = $2;
   $77 = ((($76)) + 16|0);
   $1 = $77;
   $78 = $1;
   $0 = $78;
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $75 / $80;
   $3 = $81;
   $82 = $3;
   $83 = (+Math_ceil((+$82)));
   $84 = (~~(($83))>>>0);
   $5 = $84;
   $85 = $5;
   $86 = (($85) - 1)|0;
   $4 = $86;
   $87 = $4;
   $88 = (Math_clz32(($87|0))|0);
   $89 = (32 - ($88))|0;
   $90 = 1 << $89;
   $107 = $90;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $8 = $36;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $7 = $92;
  $93 = $7;
  $6 = $93;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95>>>0));
  $11 = $36;
  $97 = $11;
  $98 = ((($97)) + 16|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  $101 = +HEAPF32[$100>>2];
  $102 = $96 / $101;
  $15 = $102;
  $103 = $15;
  $104 = (+Math_ceil((+$103)));
  $105 = (~~(($104))>>>0);
  $106 = (__ZNSt3__112__next_primeEj($105)|0);
  $107 = $106;
 }
 HEAP32[$35>>2] = $107;
 $22 = $34;
 $23 = $35;
 $108 = $22;
 $109 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $108;
 $20 = $109;
 $110 = $19;
 $111 = $20;
 $16 = $21;
 $17 = $110;
 $18 = $111;
 $112 = $17;
 $113 = HEAP32[$112>>2]|0;
 $114 = $18;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)<($115>>>0);
 $117 = $20;
 $118 = $19;
 $119 = $116 ? $117 : $118;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$34>>2] = $120;
 $121 = HEAP32[$34>>2]|0;
 $122 = $__bc;
 $123 = ($121>>>0)<($122>>>0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$34>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE8__rehashEj($36,$124);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__np = 0;
 var $__npa = 0, $__phash = 0, $__pp = 0, $__rp$i$i$i = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $116 = sp + 592|0;
 $136 = $this;
 $137 = $__nbc;
 $138 = $136;
 $135 = $138;
 $139 = $135;
 $134 = $139;
 $140 = $134;
 $133 = $140;
 $141 = $133;
 $142 = ((($141)) + 4|0);
 $64 = $142;
 $143 = $64;
 $63 = $143;
 $144 = $63;
 $62 = $144;
 $145 = $62;
 $__npa = $145;
 $146 = $137;
 $147 = ($146>>>0)>(0);
 if ($147) {
  $148 = $__npa;
  $149 = $137;
  $60 = $148;
  $61 = $149;
  $150 = $60;
  $151 = $61;
  $57 = $150;
  $58 = $151;
  $59 = 0;
  $152 = $58;
  $153 = $152<<2;
  $56 = $153;
  $154 = $56;
  $155 = (__Znwj($154)|0);
  $156 = $155;
 } else {
  $156 = 0;
 }
 $54 = $138;
 $55 = $156;
 $157 = $54;
 $53 = $157;
 $158 = $53;
 $52 = $158;
 $159 = $52;
 $160 = HEAP32[$159>>2]|0;
 $__tmp$i = $160;
 $161 = $55;
 $36 = $157;
 $162 = $36;
 $35 = $162;
 $163 = $35;
 HEAP32[$163>>2] = $161;
 $164 = $__tmp$i;
 $165 = ($164|0)!=(0|0);
 if ($165) {
  $34 = $157;
  $166 = $34;
  $33 = $166;
  $167 = $33;
  $168 = ((($167)) + 4|0);
  $169 = $__tmp$i;
  $50 = $168;
  $51 = $169;
  $170 = $50;
  $49 = $170;
  $171 = $49;
  $48 = $171;
  $172 = $48;
  $47 = $172;
  $173 = $47;
  $174 = $51;
  $39 = $170;
  $175 = $39;
  $38 = $175;
  $176 = $38;
  $37 = $176;
  $177 = $37;
  $178 = HEAP32[$177>>2]|0;
  $44 = $173;
  $45 = $174;
  $46 = $178;
  $179 = $44;
  $180 = $45;
  $181 = $46;
  $41 = $179;
  $42 = $180;
  $43 = $181;
  $182 = $42;
  $40 = $182;
  $183 = $40;
  __ZdlPv($183);
 }
 $184 = $137;
 $32 = $138;
 $185 = $32;
 $31 = $185;
 $186 = $31;
 $30 = $186;
 $187 = $30;
 $188 = ((($187)) + 4|0);
 $2 = $188;
 $189 = $2;
 $1 = $189;
 $190 = $1;
 $0 = $190;
 $191 = $0;
 HEAP32[$191>>2] = $184;
 $192 = $137;
 $193 = ($192>>>0)>(0);
 if (!($193)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $194 = $__i;
  $195 = $137;
  $196 = ($194>>>0)<($195>>>0);
  if (!($196)) {
   break;
  }
  $197 = $__i;
  $5 = $138;
  $6 = $197;
  $198 = $5;
  $199 = $6;
  $4 = $198;
  $200 = $4;
  $3 = $200;
  $201 = $3;
  $202 = HEAP32[$201>>2]|0;
  $203 = (($202) + ($199<<2)|0);
  HEAP32[$203>>2] = 0;
  $204 = $__i;
  $205 = (($204) + 1)|0;
  $__i = $205;
 }
 $206 = ((($138)) + 8|0);
 $8 = $206;
 $207 = $8;
 $7 = $207;
 $208 = $7;
 $10 = $208;
 $209 = $10;
 $9 = $209;
 $210 = $9;
 $__pp = $210;
 $211 = $__pp;
 $212 = HEAP32[$211>>2]|0;
 $__cp = $212;
 $213 = $__cp;
 $214 = ($213|0)!=(0|0);
 if (!($214)) {
  STACKTOP = sp;return;
 }
 $215 = $__cp;
 $216 = ((($215)) + 4|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = $137;
 $11 = $217;
 $12 = $218;
 $219 = $12;
 $220 = $12;
 $221 = (($220) - 1)|0;
 $222 = $219 & $221;
 $223 = ($222|0)!=(0);
 $224 = $11;
 $225 = $12;
 if ($223) {
  $228 = (($224>>>0) % ($225>>>0))&-1;
  $229 = $228;
 } else {
  $226 = (($225) - 1)|0;
  $227 = $224 & $226;
  $229 = $227;
 }
 $__chash = $229;
 $230 = $__pp;
 $231 = $__chash;
 $15 = $138;
 $16 = $231;
 $232 = $15;
 $233 = $16;
 $14 = $232;
 $234 = $14;
 $13 = $234;
 $235 = $13;
 $236 = HEAP32[$235>>2]|0;
 $237 = (($236) + ($233<<2)|0);
 HEAP32[$237>>2] = $230;
 $238 = $__chash;
 $__phash = $238;
 $239 = $__cp;
 $__pp = $239;
 $240 = $__cp;
 $241 = HEAP32[$240>>2]|0;
 $__cp = $241;
 L21: while(1) {
  $242 = $__cp;
  $243 = ($242|0)!=(0|0);
  if (!($243)) {
   label = 51;
   break;
  }
  $244 = $__cp;
  $245 = ((($244)) + 4|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $137;
  $17 = $246;
  $18 = $247;
  $248 = $18;
  $249 = $18;
  $250 = (($249) - 1)|0;
  $251 = $248 & $250;
  $252 = ($251|0)!=(0);
  $253 = $17;
  $254 = $18;
  if ($252) {
   $257 = (($253>>>0) % ($254>>>0))&-1;
   $258 = $257;
  } else {
   $255 = (($254) - 1)|0;
   $256 = $253 & $255;
   $258 = $256;
  }
  $__chash = $258;
  $259 = $__chash;
  $260 = $__phash;
  $261 = ($259|0)==($260|0);
  do {
   if ($261) {
    $262 = $__cp;
    $__pp = $262;
   } else {
    $263 = $__chash;
    $21 = $138;
    $22 = $263;
    $264 = $21;
    $265 = $22;
    $20 = $264;
    $266 = $20;
    $19 = $266;
    $267 = $19;
    $268 = HEAP32[$267>>2]|0;
    $269 = (($268) + ($265<<2)|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = ($270|0)==(0|0);
    if ($271) {
     $272 = $__pp;
     $273 = $__chash;
     $25 = $138;
     $26 = $273;
     $274 = $25;
     $275 = $26;
     $24 = $274;
     $276 = $24;
     $23 = $276;
     $277 = $23;
     $278 = HEAP32[$277>>2]|0;
     $279 = (($278) + ($275<<2)|0);
     HEAP32[$279>>2] = $272;
     $280 = $__cp;
     $__pp = $280;
     $281 = $__chash;
     $__phash = $281;
     break;
    }
    $282 = $__cp;
    $__np = $282;
    while(1) {
     $283 = $__np;
     $284 = HEAP32[$283>>2]|0;
     $285 = ($284|0)!=(0|0);
     if (!($285)) {
      break;
     }
     $29 = $138;
     $286 = $29;
     $287 = ((($286)) + 16|0);
     $28 = $287;
     $288 = $28;
     $27 = $288;
     $289 = $27;
     $290 = $__cp;
     $291 = ((($290)) + 8|0);
     $292 = $__np;
     $293 = HEAP32[$292>>2]|0;
     $294 = ((($293)) + 8|0);
     $122 = $289;
     $123 = $291;
     $124 = $294;
     $295 = $122;
     $296 = $123;
     $297 = $124;
     $119 = $295;
     $120 = $296;
     $121 = $297;
     $298 = $120;
     $299 = $121;
     $117 = $298;
     $118 = $299;
     $300 = $117;
     $115 = $300;
     $301 = $115;
     $114 = $301;
     $302 = $114;
     $113 = $302;
     $303 = $113;
     $112 = $303;
     $304 = $112;
     $305 = HEAP8[$304>>0]|0;
     $306 = $305&255;
     $307 = $306 & 1;
     $308 = ($307|0)!=(0);
     if ($308) {
      $108 = $301;
      $309 = $108;
      $107 = $309;
      $310 = $107;
      $106 = $310;
      $311 = $106;
      $312 = ((($311)) + 4|0);
      $313 = HEAP32[$312>>2]|0;
      $320 = $313;
     } else {
      $111 = $301;
      $314 = $111;
      $110 = $314;
      $315 = $110;
      $109 = $315;
      $316 = $109;
      $317 = HEAP8[$316>>0]|0;
      $318 = $317&255;
      $319 = $318 >> 1;
      $320 = $319;
     }
     $__lhs_sz$i$i$i = $320;
     $321 = $__lhs_sz$i$i$i;
     $322 = $118;
     $105 = $322;
     $323 = $105;
     $104 = $323;
     $324 = $104;
     $103 = $324;
     $325 = $103;
     $102 = $325;
     $326 = $102;
     $327 = HEAP8[$326>>0]|0;
     $328 = $327&255;
     $329 = $328 & 1;
     $330 = ($329|0)!=(0);
     if ($330) {
      $98 = $323;
      $331 = $98;
      $97 = $331;
      $332 = $97;
      $96 = $332;
      $333 = $96;
      $334 = ((($333)) + 4|0);
      $335 = HEAP32[$334>>2]|0;
      $343 = $335;
     } else {
      $101 = $323;
      $336 = $101;
      $100 = $336;
      $337 = $100;
      $99 = $337;
      $338 = $99;
      $339 = HEAP8[$338>>0]|0;
      $340 = $339&255;
      $341 = $340 >> 1;
      $343 = $341;
     }
     $342 = ($321|0)!=($343|0);
     do {
      if ($342) {
       $$expand_i1_val = 0;
       HEAP8[$116>>0] = $$expand_i1_val;
      } else {
       $344 = $117;
       $95 = $344;
       $345 = $95;
       $94 = $345;
       $346 = $94;
       $93 = $346;
       $347 = $93;
       $92 = $347;
       $348 = $92;
       $91 = $348;
       $349 = $91;
       $350 = HEAP8[$349>>0]|0;
       $351 = $350&255;
       $352 = $351 & 1;
       $353 = ($352|0)!=(0);
       if ($353) {
        $85 = $346;
        $354 = $85;
        $84 = $354;
        $355 = $84;
        $83 = $355;
        $356 = $83;
        $357 = ((($356)) + 8|0);
        $358 = HEAP32[$357>>2]|0;
        $365 = $358;
       } else {
        $90 = $346;
        $359 = $90;
        $89 = $359;
        $360 = $89;
        $88 = $360;
        $361 = $88;
        $362 = ((($361)) + 1|0);
        $87 = $362;
        $363 = $87;
        $86 = $363;
        $364 = $86;
        $365 = $364;
       }
       $82 = $365;
       $366 = $82;
       $__lp$i$i$i = $366;
       $367 = $118;
       $78 = $367;
       $368 = $78;
       $77 = $368;
       $369 = $77;
       $76 = $369;
       $370 = $76;
       $75 = $370;
       $371 = $75;
       $74 = $371;
       $372 = $74;
       $373 = HEAP8[$372>>0]|0;
       $374 = $373&255;
       $375 = $374 & 1;
       $376 = ($375|0)!=(0);
       if ($376) {
        $68 = $369;
        $377 = $68;
        $67 = $377;
        $378 = $67;
        $66 = $378;
        $379 = $66;
        $380 = ((($379)) + 8|0);
        $381 = HEAP32[$380>>2]|0;
        $388 = $381;
       } else {
        $73 = $369;
        $382 = $73;
        $72 = $382;
        $383 = $72;
        $71 = $383;
        $384 = $71;
        $385 = ((($384)) + 1|0);
        $70 = $385;
        $386 = $70;
        $69 = $386;
        $387 = $69;
        $388 = $387;
       }
       $65 = $388;
       $389 = $65;
       $__rp$i$i$i = $389;
       $390 = $117;
       $81 = $390;
       $391 = $81;
       $80 = $391;
       $392 = $80;
       $79 = $392;
       $393 = $79;
       $394 = HEAP8[$393>>0]|0;
       $395 = $394&255;
       $396 = $395 & 1;
       $397 = ($396|0)!=(0);
       if ($397) {
        $398 = $__lp$i$i$i;
        $399 = $__rp$i$i$i;
        $400 = $__lhs_sz$i$i$i;
        __THREW__ = 0;
        $401 = (invoke_iiii(388,($398|0),($399|0),($400|0))|0);
        $402 = __THREW__; __THREW__ = 0;
        $403 = $402&1;
        if ($403) {
         label = 46;
         break L21;
        }
        $404 = ($401|0)==(0);
        $$expand_i1_val2 = $404&1;
        HEAP8[$116>>0] = $$expand_i1_val2;
        break;
       }
       while(1) {
        $405 = $__lhs_sz$i$i$i;
        $406 = ($405|0)!=(0);
        if (!($406)) {
         label = 45;
         break;
        }
        $407 = $__lp$i$i$i;
        $408 = HEAP8[$407>>0]|0;
        $409 = $408 << 24 >> 24;
        $410 = $__rp$i$i$i;
        $411 = HEAP8[$410>>0]|0;
        $412 = $411 << 24 >> 24;
        $413 = ($409|0)!=($412|0);
        if ($413) {
         label = 43;
         break;
        }
        $414 = $__lhs_sz$i$i$i;
        $415 = (($414) + -1)|0;
        $__lhs_sz$i$i$i = $415;
        $416 = $__lp$i$i$i;
        $417 = ((($416)) + 1|0);
        $__lp$i$i$i = $417;
        $418 = $__rp$i$i$i;
        $419 = ((($418)) + 1|0);
        $__rp$i$i$i = $419;
       }
       if ((label|0) == 43) {
        label = 0;
        $$expand_i1_val4 = 0;
        HEAP8[$116>>0] = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 45) {
        label = 0;
        $$expand_i1_val6 = 1;
        HEAP8[$116>>0] = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = HEAP8[$116>>0]|0;
     $422 = $$pre_trunc&1;
     if (!($422)) {
      break;
     }
     $423 = $__np;
     $424 = HEAP32[$423>>2]|0;
     $__np = $424;
    }
    $425 = $__np;
    $426 = HEAP32[$425>>2]|0;
    $427 = $__pp;
    HEAP32[$427>>2] = $426;
    $428 = $__chash;
    $127 = $138;
    $128 = $428;
    $429 = $127;
    $430 = $128;
    $126 = $429;
    $431 = $126;
    $125 = $431;
    $432 = $125;
    $433 = HEAP32[$432>>2]|0;
    $434 = (($433) + ($430<<2)|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = HEAP32[$435>>2]|0;
    $437 = $__np;
    HEAP32[$437>>2] = $436;
    $438 = $__cp;
    $439 = $__chash;
    $131 = $138;
    $132 = $439;
    $440 = $131;
    $441 = $132;
    $130 = $440;
    $442 = $130;
    $129 = $442;
    $443 = $129;
    $444 = HEAP32[$443>>2]|0;
    $445 = (($444) + ($441<<2)|0);
    $446 = HEAP32[$445>>2]|0;
    HEAP32[$446>>2] = $438;
   }
  } while(0);
  $447 = $__pp;
  $448 = HEAP32[$447>>2]|0;
  $__cp = $448;
 }
 if ((label|0) == 46) {
  $420 = ___cxa_find_matching_catch_3(0|0)|0;
  $421 = tempRet0;
  ___clang_call_terminate($420);
  // unreachable;
 }
 else if ((label|0) == 51) {
  STACKTOP = sp;return;
 }
}
function __ZN9ObjMaster26TextureDataHoldingMaterialC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $5 = $1;
 $6 = $2;
 __ZN9ObjMaster8MaterialC2ERKS0_($5,$6);
 $7 = ((($5)) + 100|0);
 $8 = $2;
 $9 = ((($8)) + 100|0);
 ;HEAP32[$7>>2]=HEAP32[$9>>2]|0;HEAP32[$7+4>>2]=HEAP32[$9+4>>2]|0;
 $10 = ((($5)) + 108|0);
 $11 = $2;
 $12 = ((($11)) + 108|0);
 __THREW__ = 0;
 invoke_vii(391,($10|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  $3 = $33;
  $4 = $34;
  __ZN9ObjMaster8MaterialD2Ev($5);
  $41 = $3;
  $42 = $4;
  ___resumeException($41|0);
  // unreachable;
 }
 $15 = ((($5)) + 120|0);
 $16 = $2;
 $17 = ((($16)) + 120|0);
 __THREW__ = 0;
 invoke_vii(391,($15|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $3 = $35;
  $4 = $36;
 } else {
  $20 = ((($5)) + 132|0);
  $21 = $2;
  $22 = ((($21)) + 132|0);
  __THREW__ = 0;
  invoke_vii(391,($20|0),($22|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  do {
   if ($24) {
    $37 = ___cxa_find_matching_catch_2()|0;
    $38 = tempRet0;
    $3 = $37;
    $4 = $38;
   } else {
    $25 = ((($5)) + 144|0);
    $26 = $2;
    $27 = ((($26)) + 144|0);
    __THREW__ = 0;
    invoke_vii(391,($25|0),($27|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $39 = ___cxa_find_matching_catch_2()|0;
     $40 = tempRet0;
     $3 = $39;
     $4 = $40;
     __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($20);
     break;
    } else {
     $30 = ((($5)) + 156|0);
     $31 = $2;
     $32 = ((($31)) + 156|0);
     ;HEAP32[$30>>2]=HEAP32[$32>>2]|0;HEAP32[$30+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$30+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$30+12>>2]=HEAP32[$32+12>>2]|0;
     STACKTOP = sp;return;
    }
   }
  } while(0);
  __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($15);
 }
 __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($10);
 __ZN9ObjMaster8MaterialD2Ev($5);
 $41 = $3;
 $42 = $4;
 ___resumeException($41|0);
 // unreachable;
}
function __ZN9ObjMaster8MaterialC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $5 = $1;
 $6 = $2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($5,$6);
 $7 = ((($5)) + 12|0);
 $8 = $2;
 $9 = ((($8)) + 12|0);
 ;HEAP32[$7>>2]=HEAP32[$9>>2]|0;
 $10 = ((($5)) + 16|0);
 $11 = $2;
 $12 = ((($11)) + 16|0);
 __THREW__ = 0;
 invoke_vii(392,($10|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = tempRet0;
  $3 = $45;
  $4 = $46;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
  $59 = $3;
  $60 = $4;
  ___resumeException($59|0);
  // unreachable;
 }
 $15 = ((($5)) + 28|0);
 $16 = $2;
 $17 = ((($16)) + 28|0);
 __THREW__ = 0;
 invoke_vii(392,($15|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $47 = ___cxa_find_matching_catch_2()|0;
  $48 = tempRet0;
  $3 = $47;
  $4 = $48;
 } else {
  $20 = ((($5)) + 40|0);
  $21 = $2;
  $22 = ((($21)) + 40|0);
  __THREW__ = 0;
  invoke_vii(392,($20|0),($22|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $49 = ___cxa_find_matching_catch_2()|0;
   $50 = tempRet0;
   $3 = $49;
   $4 = $50;
  } else {
   $25 = ((($5)) + 52|0);
   $26 = $2;
   $27 = ((($26)) + 52|0);
   __THREW__ = 0;
   invoke_vii(384,($25|0),($27|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $51 = ___cxa_find_matching_catch_2()|0;
    $52 = tempRet0;
    $3 = $51;
    $4 = $52;
   } else {
    $30 = ((($5)) + 64|0);
    $31 = $2;
    $32 = ((($31)) + 64|0);
    __THREW__ = 0;
    invoke_vii(384,($30|0),($32|0));
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     $53 = ___cxa_find_matching_catch_2()|0;
     $54 = tempRet0;
     $3 = $53;
     $4 = $54;
    } else {
     $35 = ((($5)) + 76|0);
     $36 = $2;
     $37 = ((($36)) + 76|0);
     __THREW__ = 0;
     invoke_vii(384,($35|0),($37|0));
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     do {
      if ($39) {
       $55 = ___cxa_find_matching_catch_2()|0;
       $56 = tempRet0;
       $3 = $55;
       $4 = $56;
      } else {
       $40 = ((($5)) + 88|0);
       $41 = $2;
       $42 = ((($41)) + 88|0);
       __THREW__ = 0;
       invoke_vii(384,($40|0),($42|0));
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        $57 = ___cxa_find_matching_catch_2()|0;
        $58 = tempRet0;
        $3 = $57;
        $4 = $58;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
        break;
       } else {
        STACKTOP = sp;return;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($25);
   }
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($20);
  }
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($15);
 }
 __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($10);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $59 = $3;
 $60 = $4;
 ___resumeException($59|0);
 // unreachable;
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEEC2ERKS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $6 = sp + 16|0;
 $9 = sp + 72|0;
 $10 = sp + 111|0;
 $11 = sp + 8|0;
 $15 = sp + 110|0;
 $17 = sp;
 $19 = sp + 109|0;
 $25 = sp + 108|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 4)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(393,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $65 = ___cxa_find_matching_catch_2()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIfNS_9allocatorIfEEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 }
 $58 = $24;
 $59 = HEAP32[$58>>2]|0;
 $60 = $24;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_viii(394,($28|0),($59|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $65 = ___cxa_find_matching_catch_2()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIfNS_9allocatorIfEEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIfNS_9allocatorIfEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = ((($18)) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<2;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = ((($14)) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<2)|0);
  $2 = $14;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIfNS_9allocatorIfEEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIfNS_9allocatorIfEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIfNS_9allocatorIfEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIfNS_9allocatorIfEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIfNS_9allocatorIfEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEE18__construct_at_endIPfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  $45 = +HEAPF32[$44>>2];
  HEAPF32[$42>>2] = $45;
  __ZNSt3__16vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $46 = ((($21)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 4|0);
  HEAP32[$46>>2] = $48;
  $49 = $19;
  $50 = ((($49)) + 4|0);
  $19 = $50;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEEC2ERKS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $6 = sp + 16|0;
 $9 = sp + 72|0;
 $10 = sp + 111|0;
 $11 = sp + 8|0;
 $15 = sp + 110|0;
 $17 = sp;
 $19 = sp + 109|0;
 $25 = sp + 108|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $__n = $51;
 $52 = $__n;
 $53 = ($52>>>0)>(0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $54 = $__n;
 __THREW__ = 0;
 invoke_vii(395,($28|0),($54|0));
 $55 = __THREW__; __THREW__ = 0;
 $56 = $55&1;
 if ($56) {
  $64 = ___cxa_find_matching_catch_2()|0;
  $65 = tempRet0;
  $26 = $64;
  $27 = $65;
  __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($28);
  $66 = $26;
  $67 = $27;
  ___resumeException($66|0);
  // unreachable;
 }
 $57 = $24;
 $58 = HEAP32[$57>>2]|0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 __THREW__ = 0;
 invoke_viii(396,($28|0),($58|0),($61|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch_2()|0;
  $65 = tempRet0;
  $26 = $64;
  $27 = $65;
  __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($28);
  $66 = $26;
  $67 = $27;
  ___resumeException($66|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = ((($18)) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $3 = $25;
  $26 = $3;
  $27 = (__Znwj($26)|0);
  $28 = ((($14)) + 4|0);
  HEAP32[$28>>2] = $27;
  HEAP32[$14>>2] = $27;
  $29 = HEAP32[$14>>2]|0;
  $30 = $13;
  $31 = (($29) + ($30)|0);
  $2 = $14;
  $32 = $2;
  $33 = ((($32)) + 8|0);
  $1 = $33;
  $34 = $1;
  $0 = $34;
  $35 = $0;
  HEAP32[$35>>2] = $31;
  __ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = -1;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $11 = $20;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 $44 = $9;
 $45 = ((($44)) + 8|0);
 $8 = $45;
 $46 = $8;
 $7 = $46;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$43>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($41) + ($52)|0);
 $13 = $20;
 $54 = $13;
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $12;
 $57 = $19;
 $58 = (($56) + ($57)|0);
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$38,$53,$58);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  $45 = HEAP8[$44>>0]|0;
  HEAP8[$42>>0] = $45;
  __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $46 = ((($21)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 1|0);
  HEAP32[$46>>2] = $48;
  $49 = $19;
  $50 = ((($49)) + 1|0);
  $19 = $50;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster23ObjectMaterialFaceGroupaSEOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 8|0;
 $16 = sp + 207|0;
 $43 = sp + 206|0;
 $44 = sp + 205|0;
 $47 = sp;
 $50 = sp + 204|0;
 $51 = $this;
 $52 = $0;
 $53 = $51;
 $54 = $52;
 $48 = $53;
 $49 = $54;
 $55 = $48;
 $56 = $49;
 ;HEAP8[$47>>0]=HEAP8[$50>>0]|0;
 $45 = $55;
 $46 = $56;
 $57 = $45;
 $42 = $57;
 $58 = $42;
 $41 = $58;
 $40 = $58;
 $59 = $40;
 $39 = $59;
 $60 = $39;
 $38 = $60;
 $61 = $38;
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = $63 & 1;
 $65 = ($64|0)!=(0);
 if ($65) {
  $33 = $58;
  $66 = $33;
  $32 = $66;
  $67 = $32;
  $31 = $67;
  $68 = $31;
  $69 = ((($68)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  HEAP8[$43>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($70,$43);
  $24 = $58;
  $25 = 0;
  $71 = $24;
  $72 = $25;
  $23 = $71;
  $73 = $23;
  $22 = $73;
  $74 = $22;
  $75 = ((($74)) + 4|0);
  HEAP32[$75>>2] = $72;
 } else {
  $30 = $58;
  $76 = $30;
  $29 = $76;
  $77 = $29;
  $28 = $77;
  $78 = $28;
  $79 = ((($78)) + 1|0);
  $27 = $79;
  $80 = $27;
  $26 = $80;
  $81 = $26;
  HEAP8[$44>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($81,$44);
  $36 = $58;
  $37 = 0;
  $82 = $36;
  $83 = $37;
  $84 = $83 << 1;
  $85 = $84&255;
  $35 = $82;
  $86 = $35;
  $34 = $86;
  $87 = $34;
  HEAP8[$87>>0] = $85;
 }
 $21 = $57;
 $88 = $21;
 __THREW__ = 0;
 invoke_vii(368,($88|0),0);
 $89 = __THREW__; __THREW__ = 0;
 $90 = $89&1;
 if ($90) {
  $91 = ___cxa_find_matching_catch_3(0|0)|0;
  $92 = tempRet0;
  ___clang_call_terminate($91);
  // unreachable;
 }
 $20 = $57;
 $93 = $20;
 $19 = $93;
 $94 = $19;
 $95 = $46;
 $18 = $95;
 $96 = $18;
 $17 = $96;
 $97 = $17;
 ;HEAP32[$94>>2]=HEAP32[$97>>2]|0;HEAP32[$94+4>>2]=HEAP32[$97+4>>2]|0;HEAP32[$94+8>>2]=HEAP32[$97+8>>2]|0;
 $98 = $46;
 $14 = $57;
 $15 = $98;
 $99 = $14;
 $100 = $15;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $11 = $99;
 $12 = $100;
 $101 = $11;
 $10 = $101;
 $102 = $10;
 $9 = $102;
 $103 = $9;
 $8 = $103;
 $104 = $12;
 $6 = $104;
 $105 = $6;
 $5 = $105;
 $106 = $5;
 $4 = $106;
 $107 = $4;
 $7 = $107;
 $108 = $46;
 $3 = $108;
 $109 = $3;
 $2 = $109;
 $110 = $2;
 $1 = $110;
 $111 = $1;
 $__a$i$i$i = $111;
 $__i$i$i$i = 0;
 while(1) {
  $112 = $__i$i$i$i;
  $113 = ($112>>>0)<(3);
  if (!($113)) {
   break;
  }
  $114 = $__i$i$i$i;
  $115 = $__a$i$i$i;
  $116 = (($115) + ($114<<2)|0);
  HEAP32[$116>>2] = 0;
  $117 = $__i$i$i$i;
  $118 = (($117) + 1)|0;
  $__i$i$i$i = $118;
 }
 $119 = ((($53)) + 12|0);
 $120 = $52;
 $121 = ((($120)) + 12|0);
 (__ZN9ObjMaster26TextureDataHoldingMaterialaSEOS0_($119,$121)|0);
 $122 = ((($53)) + 184|0);
 $123 = $52;
 $124 = ((($123)) + 184|0);
 ;HEAP32[$122>>2]=HEAP32[$124>>2]|0;HEAP32[$122+4>>2]=HEAP32[$124+4>>2]|0;
 STACKTOP = sp;return ($53|0);
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster26TextureDataHoldingMaterialaSEOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 47|0;
 $$byval_copy2 = sp + 46|0;
 $$byval_copy1 = sp + 45|0;
 $$byval_copy = sp + 44|0;
 $3 = sp + 43|0;
 $6 = sp + 42|0;
 $9 = sp + 41|0;
 $12 = sp + 40|0;
 $13 = $this;
 $14 = $0;
 $15 = $13;
 $16 = $14;
 (__ZN9ObjMaster8MaterialaSEOS0_($15,$16)|0);
 $17 = ((($15)) + 100|0);
 $18 = $14;
 $19 = ((($18)) + 100|0);
 ;HEAP32[$17>>2]=HEAP32[$19>>2]|0;HEAP32[$17+4>>2]=HEAP32[$19+4>>2]|0;
 $20 = ((($15)) + 108|0);
 $21 = $14;
 $22 = ((($21)) + 108|0);
 $10 = $20;
 $11 = $22;
 $23 = $10;
 $24 = $11;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$12>>0]|0;
 __ZNSt3__16vectorIhNS_9allocatorIhEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($23,$24,$$byval_copy);
 $25 = ((($15)) + 120|0);
 $26 = $14;
 $27 = ((($26)) + 120|0);
 $7 = $25;
 $8 = $27;
 $28 = $7;
 $29 = $8;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$9>>0]|0;
 __ZNSt3__16vectorIhNS_9allocatorIhEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($28,$29,$$byval_copy1);
 $30 = ((($15)) + 132|0);
 $31 = $14;
 $32 = ((($31)) + 132|0);
 $4 = $30;
 $5 = $32;
 $33 = $4;
 $34 = $5;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$6>>0]|0;
 __ZNSt3__16vectorIhNS_9allocatorIhEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($33,$34,$$byval_copy2);
 $35 = ((($15)) + 144|0);
 $36 = $14;
 $37 = ((($36)) + 144|0);
 $1 = $35;
 $2 = $37;
 $38 = $1;
 $39 = $2;
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$3>>0]|0;
 __ZNSt3__16vectorIhNS_9allocatorIhEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($38,$39,$$byval_copy3);
 $40 = ((($15)) + 156|0);
 $41 = $14;
 $42 = ((($41)) + 156|0);
 ;HEAP32[$40>>2]=HEAP32[$42>>2]|0;HEAP32[$40+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$40+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$40+12>>2]=HEAP32[$42+12>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function __ZN9ObjMaster8MaterialaSEOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__a$i$i$i1 = 0, $__a$i$i$i11 = 0, $__a$i$i$i16 = 0;
 var $__a$i$i$i6 = 0, $__i$i$i$i = 0, $__i$i$i$i12 = 0, $__i$i$i$i17 = 0, $__i$i$i$i2 = 0, $__i$i$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 1053|0;
 $$byval_copy1 = sp + 1052|0;
 $$byval_copy = sp + 1051|0;
 $13 = sp + 72|0;
 $16 = sp + 1050|0;
 $43 = sp + 1049|0;
 $44 = sp + 1048|0;
 $47 = sp + 64|0;
 $50 = sp + 1047|0;
 $63 = sp + 56|0;
 $66 = sp + 1046|0;
 $93 = sp + 1045|0;
 $94 = sp + 1044|0;
 $97 = sp + 48|0;
 $100 = sp + 1043|0;
 $113 = sp + 40|0;
 $116 = sp + 1042|0;
 $143 = sp + 1041|0;
 $144 = sp + 1040|0;
 $147 = sp + 32|0;
 $150 = sp + 1039|0;
 $163 = sp + 24|0;
 $166 = sp + 1038|0;
 $193 = sp + 1037|0;
 $194 = sp + 1036|0;
 $197 = sp + 16|0;
 $200 = sp + 1035|0;
 $203 = sp + 1034|0;
 $206 = sp + 1033|0;
 $209 = sp + 1032|0;
 $222 = sp + 8|0;
 $225 = sp + 1031|0;
 $252 = sp + 1030|0;
 $253 = sp + 1029|0;
 $256 = sp;
 $259 = sp + 1028|0;
 $260 = $this;
 $261 = $0;
 $262 = $260;
 $263 = $261;
 $257 = $262;
 $258 = $263;
 $264 = $257;
 $265 = $258;
 ;HEAP8[$256>>0]=HEAP8[$259>>0]|0;
 $254 = $264;
 $255 = $265;
 $266 = $254;
 $251 = $266;
 $267 = $251;
 $250 = $267;
 $249 = $267;
 $268 = $249;
 $248 = $268;
 $269 = $248;
 $247 = $269;
 $270 = $247;
 $271 = HEAP8[$270>>0]|0;
 $272 = $271&255;
 $273 = $272 & 1;
 $274 = ($273|0)!=(0);
 if ($274) {
  $242 = $267;
  $275 = $242;
  $241 = $275;
  $276 = $241;
  $240 = $276;
  $277 = $240;
  $278 = ((($277)) + 8|0);
  $279 = HEAP32[$278>>2]|0;
  HEAP8[$252>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($279,$252);
  $233 = $267;
  $234 = 0;
  $280 = $233;
  $281 = $234;
  $232 = $280;
  $282 = $232;
  $231 = $282;
  $283 = $231;
  $284 = ((($283)) + 4|0);
  HEAP32[$284>>2] = $281;
 } else {
  $239 = $267;
  $285 = $239;
  $238 = $285;
  $286 = $238;
  $237 = $286;
  $287 = $237;
  $288 = ((($287)) + 1|0);
  $236 = $288;
  $289 = $236;
  $235 = $289;
  $290 = $235;
  HEAP8[$253>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($290,$253);
  $245 = $267;
  $246 = 0;
  $291 = $245;
  $292 = $246;
  $293 = $292 << 1;
  $294 = $293&255;
  $244 = $291;
  $295 = $244;
  $243 = $295;
  $296 = $243;
  HEAP8[$296>>0] = $294;
 }
 $230 = $266;
 $297 = $230;
 __THREW__ = 0;
 invoke_vii(368,($297|0),0);
 $298 = __THREW__; __THREW__ = 0;
 $299 = $298&1;
 if ($299) {
  $300 = ___cxa_find_matching_catch_3(0|0)|0;
  $301 = tempRet0;
  ___clang_call_terminate($300);
  // unreachable;
 }
 $229 = $266;
 $302 = $229;
 $228 = $302;
 $303 = $228;
 $304 = $255;
 $227 = $304;
 $305 = $227;
 $226 = $305;
 $306 = $226;
 ;HEAP32[$303>>2]=HEAP32[$306>>2]|0;HEAP32[$303+4>>2]=HEAP32[$306+4>>2]|0;HEAP32[$303+8>>2]=HEAP32[$306+8>>2]|0;
 $307 = $255;
 $223 = $266;
 $224 = $307;
 $308 = $223;
 $309 = $224;
 ;HEAP8[$222>>0]=HEAP8[$225>>0]|0;
 $220 = $308;
 $221 = $309;
 $310 = $220;
 $219 = $310;
 $311 = $219;
 $218 = $311;
 $312 = $218;
 $217 = $312;
 $313 = $221;
 $215 = $313;
 $314 = $215;
 $214 = $314;
 $315 = $214;
 $213 = $315;
 $316 = $213;
 $216 = $316;
 $317 = $255;
 $212 = $317;
 $318 = $212;
 $211 = $318;
 $319 = $211;
 $210 = $319;
 $320 = $210;
 $__a$i$i$i = $320;
 $__i$i$i$i = 0;
 while(1) {
  $321 = $__i$i$i$i;
  $322 = ($321>>>0)<(3);
  if (!($322)) {
   break;
  }
  $323 = $__i$i$i$i;
  $324 = $__a$i$i$i;
  $325 = (($324) + ($323<<2)|0);
  HEAP32[$325>>2] = 0;
  $326 = $__i$i$i$i;
  $327 = (($326) + 1)|0;
  $__i$i$i$i = $327;
 }
 $328 = ((($262)) + 12|0);
 $329 = $261;
 $330 = ((($329)) + 12|0);
 ;HEAP32[$328>>2]=HEAP32[$330>>2]|0;
 $331 = ((($262)) + 16|0);
 $332 = $261;
 $333 = ((($332)) + 16|0);
 $207 = $331;
 $208 = $333;
 $334 = $207;
 $335 = $208;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$209>>0]|0;
 __ZNSt3__16vectorIfNS_9allocatorIfEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($334,$335,$$byval_copy);
 $336 = ((($262)) + 28|0);
 $337 = $261;
 $338 = ((($337)) + 28|0);
 $204 = $336;
 $205 = $338;
 $339 = $204;
 $340 = $205;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$206>>0]|0;
 __ZNSt3__16vectorIfNS_9allocatorIfEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($339,$340,$$byval_copy1);
 $341 = ((($262)) + 40|0);
 $342 = $261;
 $343 = ((($342)) + 40|0);
 $201 = $341;
 $202 = $343;
 $344 = $201;
 $345 = $202;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$203>>0]|0;
 __ZNSt3__16vectorIfNS_9allocatorIfEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($344,$345,$$byval_copy2);
 $346 = ((($262)) + 52|0);
 $347 = $261;
 $348 = ((($347)) + 52|0);
 $198 = $346;
 $199 = $348;
 $349 = $198;
 $350 = $199;
 ;HEAP8[$197>>0]=HEAP8[$200>>0]|0;
 $195 = $349;
 $196 = $350;
 $351 = $195;
 $192 = $351;
 $352 = $192;
 $191 = $352;
 $190 = $352;
 $353 = $190;
 $189 = $353;
 $354 = $189;
 $188 = $354;
 $355 = $188;
 $356 = HEAP8[$355>>0]|0;
 $357 = $356&255;
 $358 = $357 & 1;
 $359 = ($358|0)!=(0);
 if ($359) {
  $183 = $352;
  $360 = $183;
  $182 = $360;
  $361 = $182;
  $181 = $361;
  $362 = $181;
  $363 = ((($362)) + 8|0);
  $364 = HEAP32[$363>>2]|0;
  HEAP8[$193>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($364,$193);
  $174 = $352;
  $175 = 0;
  $365 = $174;
  $366 = $175;
  $173 = $365;
  $367 = $173;
  $172 = $367;
  $368 = $172;
  $369 = ((($368)) + 4|0);
  HEAP32[$369>>2] = $366;
 } else {
  $180 = $352;
  $370 = $180;
  $179 = $370;
  $371 = $179;
  $178 = $371;
  $372 = $178;
  $373 = ((($372)) + 1|0);
  $177 = $373;
  $374 = $177;
  $176 = $374;
  $375 = $176;
  HEAP8[$194>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($375,$194);
  $186 = $352;
  $187 = 0;
  $376 = $186;
  $377 = $187;
  $378 = $377 << 1;
  $379 = $378&255;
  $185 = $376;
  $380 = $185;
  $184 = $380;
  $381 = $184;
  HEAP8[$381>>0] = $379;
 }
 $171 = $351;
 $382 = $171;
 __THREW__ = 0;
 invoke_vii(368,($382|0),0);
 $383 = __THREW__; __THREW__ = 0;
 $384 = $383&1;
 if ($384) {
  $385 = ___cxa_find_matching_catch_3(0|0)|0;
  $386 = tempRet0;
  ___clang_call_terminate($385);
  // unreachable;
 }
 $170 = $351;
 $387 = $170;
 $169 = $387;
 $388 = $169;
 $389 = $196;
 $168 = $389;
 $390 = $168;
 $167 = $390;
 $391 = $167;
 ;HEAP32[$388>>2]=HEAP32[$391>>2]|0;HEAP32[$388+4>>2]=HEAP32[$391+4>>2]|0;HEAP32[$388+8>>2]=HEAP32[$391+8>>2]|0;
 $392 = $196;
 $164 = $351;
 $165 = $392;
 $393 = $164;
 $394 = $165;
 ;HEAP8[$163>>0]=HEAP8[$166>>0]|0;
 $161 = $393;
 $162 = $394;
 $395 = $161;
 $160 = $395;
 $396 = $160;
 $159 = $396;
 $397 = $159;
 $158 = $397;
 $398 = $162;
 $156 = $398;
 $399 = $156;
 $155 = $399;
 $400 = $155;
 $154 = $400;
 $401 = $154;
 $157 = $401;
 $402 = $196;
 $153 = $402;
 $403 = $153;
 $152 = $403;
 $404 = $152;
 $151 = $404;
 $405 = $151;
 $__a$i$i$i1 = $405;
 $__i$i$i$i2 = 0;
 while(1) {
  $406 = $__i$i$i$i2;
  $407 = ($406>>>0)<(3);
  if (!($407)) {
   break;
  }
  $408 = $__i$i$i$i2;
  $409 = $__a$i$i$i1;
  $410 = (($409) + ($408<<2)|0);
  HEAP32[$410>>2] = 0;
  $411 = $__i$i$i$i2;
  $412 = (($411) + 1)|0;
  $__i$i$i$i2 = $412;
 }
 $413 = ((($262)) + 64|0);
 $414 = $261;
 $415 = ((($414)) + 64|0);
 $148 = $413;
 $149 = $415;
 $416 = $148;
 $417 = $149;
 ;HEAP8[$147>>0]=HEAP8[$150>>0]|0;
 $145 = $416;
 $146 = $417;
 $418 = $145;
 $142 = $418;
 $419 = $142;
 $141 = $419;
 $140 = $419;
 $420 = $140;
 $139 = $420;
 $421 = $139;
 $138 = $421;
 $422 = $138;
 $423 = HEAP8[$422>>0]|0;
 $424 = $423&255;
 $425 = $424 & 1;
 $426 = ($425|0)!=(0);
 if ($426) {
  $133 = $419;
  $427 = $133;
  $132 = $427;
  $428 = $132;
  $131 = $428;
  $429 = $131;
  $430 = ((($429)) + 8|0);
  $431 = HEAP32[$430>>2]|0;
  HEAP8[$143>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($431,$143);
  $124 = $419;
  $125 = 0;
  $432 = $124;
  $433 = $125;
  $123 = $432;
  $434 = $123;
  $122 = $434;
  $435 = $122;
  $436 = ((($435)) + 4|0);
  HEAP32[$436>>2] = $433;
 } else {
  $130 = $419;
  $437 = $130;
  $129 = $437;
  $438 = $129;
  $128 = $438;
  $439 = $128;
  $440 = ((($439)) + 1|0);
  $127 = $440;
  $441 = $127;
  $126 = $441;
  $442 = $126;
  HEAP8[$144>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($442,$144);
  $136 = $419;
  $137 = 0;
  $443 = $136;
  $444 = $137;
  $445 = $444 << 1;
  $446 = $445&255;
  $135 = $443;
  $447 = $135;
  $134 = $447;
  $448 = $134;
  HEAP8[$448>>0] = $446;
 }
 $121 = $418;
 $449 = $121;
 __THREW__ = 0;
 invoke_vii(368,($449|0),0);
 $450 = __THREW__; __THREW__ = 0;
 $451 = $450&1;
 if ($451) {
  $452 = ___cxa_find_matching_catch_3(0|0)|0;
  $453 = tempRet0;
  ___clang_call_terminate($452);
  // unreachable;
 }
 $120 = $418;
 $454 = $120;
 $119 = $454;
 $455 = $119;
 $456 = $146;
 $118 = $456;
 $457 = $118;
 $117 = $457;
 $458 = $117;
 ;HEAP32[$455>>2]=HEAP32[$458>>2]|0;HEAP32[$455+4>>2]=HEAP32[$458+4>>2]|0;HEAP32[$455+8>>2]=HEAP32[$458+8>>2]|0;
 $459 = $146;
 $114 = $418;
 $115 = $459;
 $460 = $114;
 $461 = $115;
 ;HEAP8[$113>>0]=HEAP8[$116>>0]|0;
 $111 = $460;
 $112 = $461;
 $462 = $111;
 $110 = $462;
 $463 = $110;
 $109 = $463;
 $464 = $109;
 $108 = $464;
 $465 = $112;
 $106 = $465;
 $466 = $106;
 $105 = $466;
 $467 = $105;
 $104 = $467;
 $468 = $104;
 $107 = $468;
 $469 = $146;
 $103 = $469;
 $470 = $103;
 $102 = $470;
 $471 = $102;
 $101 = $471;
 $472 = $101;
 $__a$i$i$i6 = $472;
 $__i$i$i$i7 = 0;
 while(1) {
  $473 = $__i$i$i$i7;
  $474 = ($473>>>0)<(3);
  if (!($474)) {
   break;
  }
  $475 = $__i$i$i$i7;
  $476 = $__a$i$i$i6;
  $477 = (($476) + ($475<<2)|0);
  HEAP32[$477>>2] = 0;
  $478 = $__i$i$i$i7;
  $479 = (($478) + 1)|0;
  $__i$i$i$i7 = $479;
 }
 $480 = ((($262)) + 76|0);
 $481 = $261;
 $482 = ((($481)) + 76|0);
 $98 = $480;
 $99 = $482;
 $483 = $98;
 $484 = $99;
 ;HEAP8[$97>>0]=HEAP8[$100>>0]|0;
 $95 = $483;
 $96 = $484;
 $485 = $95;
 $92 = $485;
 $486 = $92;
 $91 = $486;
 $90 = $486;
 $487 = $90;
 $89 = $487;
 $488 = $89;
 $88 = $488;
 $489 = $88;
 $490 = HEAP8[$489>>0]|0;
 $491 = $490&255;
 $492 = $491 & 1;
 $493 = ($492|0)!=(0);
 if ($493) {
  $83 = $486;
  $494 = $83;
  $82 = $494;
  $495 = $82;
  $81 = $495;
  $496 = $81;
  $497 = ((($496)) + 8|0);
  $498 = HEAP32[$497>>2]|0;
  HEAP8[$93>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($498,$93);
  $74 = $486;
  $75 = 0;
  $499 = $74;
  $500 = $75;
  $73 = $499;
  $501 = $73;
  $72 = $501;
  $502 = $72;
  $503 = ((($502)) + 4|0);
  HEAP32[$503>>2] = $500;
 } else {
  $80 = $486;
  $504 = $80;
  $79 = $504;
  $505 = $79;
  $78 = $505;
  $506 = $78;
  $507 = ((($506)) + 1|0);
  $77 = $507;
  $508 = $77;
  $76 = $508;
  $509 = $76;
  HEAP8[$94>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($509,$94);
  $86 = $486;
  $87 = 0;
  $510 = $86;
  $511 = $87;
  $512 = $511 << 1;
  $513 = $512&255;
  $85 = $510;
  $514 = $85;
  $84 = $514;
  $515 = $84;
  HEAP8[$515>>0] = $513;
 }
 $71 = $485;
 $516 = $71;
 __THREW__ = 0;
 invoke_vii(368,($516|0),0);
 $517 = __THREW__; __THREW__ = 0;
 $518 = $517&1;
 if ($518) {
  $519 = ___cxa_find_matching_catch_3(0|0)|0;
  $520 = tempRet0;
  ___clang_call_terminate($519);
  // unreachable;
 }
 $70 = $485;
 $521 = $70;
 $69 = $521;
 $522 = $69;
 $523 = $96;
 $68 = $523;
 $524 = $68;
 $67 = $524;
 $525 = $67;
 ;HEAP32[$522>>2]=HEAP32[$525>>2]|0;HEAP32[$522+4>>2]=HEAP32[$525+4>>2]|0;HEAP32[$522+8>>2]=HEAP32[$525+8>>2]|0;
 $526 = $96;
 $64 = $485;
 $65 = $526;
 $527 = $64;
 $528 = $65;
 ;HEAP8[$63>>0]=HEAP8[$66>>0]|0;
 $61 = $527;
 $62 = $528;
 $529 = $61;
 $60 = $529;
 $530 = $60;
 $59 = $530;
 $531 = $59;
 $58 = $531;
 $532 = $62;
 $56 = $532;
 $533 = $56;
 $55 = $533;
 $534 = $55;
 $54 = $534;
 $535 = $54;
 $57 = $535;
 $536 = $96;
 $53 = $536;
 $537 = $53;
 $52 = $537;
 $538 = $52;
 $51 = $538;
 $539 = $51;
 $__a$i$i$i11 = $539;
 $__i$i$i$i12 = 0;
 while(1) {
  $540 = $__i$i$i$i12;
  $541 = ($540>>>0)<(3);
  if (!($541)) {
   break;
  }
  $542 = $__i$i$i$i12;
  $543 = $__a$i$i$i11;
  $544 = (($543) + ($542<<2)|0);
  HEAP32[$544>>2] = 0;
  $545 = $__i$i$i$i12;
  $546 = (($545) + 1)|0;
  $__i$i$i$i12 = $546;
 }
 $547 = ((($262)) + 88|0);
 $548 = $261;
 $549 = ((($548)) + 88|0);
 $48 = $547;
 $49 = $549;
 $550 = $48;
 $551 = $49;
 ;HEAP8[$47>>0]=HEAP8[$50>>0]|0;
 $45 = $550;
 $46 = $551;
 $552 = $45;
 $42 = $552;
 $553 = $42;
 $41 = $553;
 $40 = $553;
 $554 = $40;
 $39 = $554;
 $555 = $39;
 $38 = $555;
 $556 = $38;
 $557 = HEAP8[$556>>0]|0;
 $558 = $557&255;
 $559 = $558 & 1;
 $560 = ($559|0)!=(0);
 if ($560) {
  $33 = $553;
  $561 = $33;
  $32 = $561;
  $562 = $32;
  $31 = $562;
  $563 = $31;
  $564 = ((($563)) + 8|0);
  $565 = HEAP32[$564>>2]|0;
  HEAP8[$43>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($565,$43);
  $24 = $553;
  $25 = 0;
  $566 = $24;
  $567 = $25;
  $23 = $566;
  $568 = $23;
  $22 = $568;
  $569 = $22;
  $570 = ((($569)) + 4|0);
  HEAP32[$570>>2] = $567;
 } else {
  $30 = $553;
  $571 = $30;
  $29 = $571;
  $572 = $29;
  $28 = $572;
  $573 = $28;
  $574 = ((($573)) + 1|0);
  $27 = $574;
  $575 = $27;
  $26 = $575;
  $576 = $26;
  HEAP8[$44>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($576,$44);
  $36 = $553;
  $37 = 0;
  $577 = $36;
  $578 = $37;
  $579 = $578 << 1;
  $580 = $579&255;
  $35 = $577;
  $581 = $35;
  $34 = $581;
  $582 = $34;
  HEAP8[$582>>0] = $580;
 }
 $21 = $552;
 $583 = $21;
 __THREW__ = 0;
 invoke_vii(368,($583|0),0);
 $584 = __THREW__; __THREW__ = 0;
 $585 = $584&1;
 if ($585) {
  $586 = ___cxa_find_matching_catch_3(0|0)|0;
  $587 = tempRet0;
  ___clang_call_terminate($586);
  // unreachable;
 }
 $20 = $552;
 $588 = $20;
 $19 = $588;
 $589 = $19;
 $590 = $46;
 $18 = $590;
 $591 = $18;
 $17 = $591;
 $592 = $17;
 ;HEAP32[$589>>2]=HEAP32[$592>>2]|0;HEAP32[$589+4>>2]=HEAP32[$592+4>>2]|0;HEAP32[$589+8>>2]=HEAP32[$592+8>>2]|0;
 $593 = $46;
 $14 = $552;
 $15 = $593;
 $594 = $14;
 $595 = $15;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $11 = $594;
 $12 = $595;
 $596 = $11;
 $10 = $596;
 $597 = $10;
 $9 = $597;
 $598 = $9;
 $8 = $598;
 $599 = $12;
 $6 = $599;
 $600 = $6;
 $5 = $600;
 $601 = $5;
 $4 = $601;
 $602 = $4;
 $7 = $602;
 $603 = $46;
 $3 = $603;
 $604 = $3;
 $2 = $604;
 $605 = $2;
 $1 = $605;
 $606 = $1;
 $__a$i$i$i16 = $606;
 $__i$i$i$i17 = 0;
 while(1) {
  $607 = $__i$i$i$i17;
  $608 = ($607>>>0)<(3);
  if (!($608)) {
   break;
  }
  $609 = $__i$i$i$i17;
  $610 = $__a$i$i$i16;
  $611 = (($610) + ($609<<2)|0);
  HEAP32[$611>>2] = 0;
  $612 = $__i$i$i$i17;
  $613 = (($612) + 1)|0;
  $__i$i$i$i17 = $613;
 }
 STACKTOP = sp;return ($262|0);
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorIfNS_9allocatorIfEEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 4)&-1;
 $__old_size$i = $48;
 $33 = $40;
 $49 = $33;
 $50 = HEAP32[$49>>2]|0;
 $31 = $49;
 $32 = $50;
 $51 = $31;
 while(1) {
  $52 = $32;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $30 = $51;
  $56 = $30;
  $57 = ((($56)) + 8|0);
  $29 = $57;
  $58 = $29;
  $28 = $58;
  $59 = $28;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -4|0);
  HEAP32[$60>>2] = $62;
  $27 = $62;
  $63 = $27;
  $24 = $59;
  $25 = $63;
  $64 = $24;
  $65 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $64;
  $22 = $65;
  $66 = $21;
  $67 = $22;
  $19 = $66;
  $20 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(397,($40|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch_3(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $73 = $17;
 $74 = ((($73)) + 8|0);
 $16 = $74;
 $75 = $16;
 $15 = $75;
 $76 = $15;
 $77 = HEAP32[$37>>2]|0;
 $14 = $37;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $12 = $79;
 $80 = $12;
 $81 = ((($80)) + 8|0);
 $11 = $81;
 $82 = $11;
 $10 = $82;
 $83 = $10;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 4)&-1;
 $4 = $76;
 $5 = $77;
 $6 = $89;
 $90 = $4;
 $91 = $5;
 $92 = $6;
 $1 = $90;
 $2 = $91;
 $3 = $92;
 $93 = $2;
 $0 = $93;
 $94 = $0;
 __ZdlPv($94);
 $9 = $37;
 $95 = $9;
 $96 = ((($95)) + 8|0);
 $8 = $96;
 $97 = $8;
 $7 = $97;
 $98 = $7;
 HEAP32[$98>>2] = 0;
 $99 = ((($37)) + 4|0);
 HEAP32[$99>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIfNS_9allocatorIfEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIfNS_9allocatorIfEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($this,$__c,$0) {
 $this = $this|0;
 $__c = $__c|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 92|0;
 $23 = $this;
 $24 = $__c;
 $25 = $23;
 __ZNSt3__16vectorIhNS_9allocatorIhEEE10deallocateEv($25);
 $26 = $24;
 $20 = $25;
 $21 = $26;
 $27 = $20;
 $28 = $21;
 ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $31 = ((($30)) + 8|0);
 $15 = $31;
 $32 = $15;
 $14 = $32;
 $33 = $18;
 $12 = $33;
 $34 = $12;
 $35 = ((($34)) + 8|0);
 $11 = $35;
 $36 = $11;
 $10 = $36;
 $37 = $10;
 $13 = $37;
 $38 = $24;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $24;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($25)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = $24;
 $3 = $44;
 $45 = $3;
 $46 = ((($45)) + 8|0);
 $2 = $46;
 $47 = $2;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $6 = $25;
 $50 = $6;
 $51 = ((($50)) + 8|0);
 $5 = $51;
 $52 = $5;
 $4 = $52;
 $53 = $4;
 HEAP32[$53>>2] = $49;
 $54 = $24;
 $9 = $54;
 $55 = $9;
 $56 = ((($55)) + 8|0);
 $8 = $56;
 $57 = $8;
 $7 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = $24;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = $24;
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $__old_size$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = sp;
 $26 = sp + 148|0;
 $36 = $this;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $35 = $37;
 $40 = $35;
 $34 = $40;
 $41 = $34;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $__old_size$i = $47;
 $33 = $40;
 $48 = $33;
 $49 = HEAP32[$48>>2]|0;
 $31 = $48;
 $32 = $49;
 $50 = $31;
 while(1) {
  $51 = $32;
  $52 = ((($50)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($51|0)!=($53|0);
  if (!($54)) {
   break;
  }
  $30 = $50;
  $55 = $30;
  $56 = ((($55)) + 8|0);
  $29 = $56;
  $57 = $29;
  $28 = $57;
  $58 = $28;
  $59 = ((($50)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + -1|0);
  HEAP32[$59>>2] = $61;
  $27 = $61;
  $62 = $27;
  $24 = $58;
  $25 = $62;
  $63 = $24;
  $64 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $63;
  $22 = $64;
  $65 = $21;
  $66 = $22;
  $19 = $65;
  $20 = $66;
 }
 $67 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(398,($40|0),($67|0));
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $70 = ___cxa_find_matching_catch_3(0|0)|0;
  $71 = tempRet0;
  ___clang_call_terminate($70);
  // unreachable;
 }
 $18 = $40;
 $17 = $37;
 $72 = $17;
 $73 = ((($72)) + 8|0);
 $16 = $73;
 $74 = $16;
 $15 = $74;
 $75 = $15;
 $76 = HEAP32[$37>>2]|0;
 $14 = $37;
 $77 = $14;
 $13 = $77;
 $78 = $13;
 $12 = $78;
 $79 = $12;
 $80 = ((($79)) + 8|0);
 $11 = $80;
 $81 = $11;
 $10 = $81;
 $82 = $10;
 $83 = HEAP32[$82>>2]|0;
 $84 = HEAP32[$78>>2]|0;
 $85 = $83;
 $86 = $84;
 $87 = (($85) - ($86))|0;
 $4 = $75;
 $5 = $76;
 $6 = $87;
 $88 = $4;
 $89 = $5;
 $90 = $6;
 $1 = $88;
 $2 = $89;
 $3 = $90;
 $91 = $2;
 $0 = $91;
 $92 = $0;
 __ZdlPv($92);
 $9 = $37;
 $93 = $9;
 $94 = ((($93)) + 8|0);
 $8 = $94;
 $95 = $8;
 $7 = $95;
 $96 = $7;
 HEAP32[$96>>2] = 0;
 $97 = ((($37)) + 4|0);
 HEAP32[$97>>2] = 0;
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($22) + ($33)|0);
 $6 = $16;
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $5 = $36;
 $37 = $5;
 $38 = $15;
 $39 = (($37) + ($38)|0);
 $8 = $16;
 $40 = $8;
 $41 = HEAP32[$40>>2]|0;
 $7 = $41;
 $42 = $7;
 $9 = $16;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($42) + ($49)|0);
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$34,$39,$50);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster6UseMtl12fetchMtlNameEPKc($agg$result,$fields) {
 $agg$result = $agg$result|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $copy = 0, $mtlNameCstr = 0, $savePtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $savePtr = sp + 8|0;
 $5 = $fields;
 $6 = $5;
 $7 = (___strdup($6)|0);
 $copy = $7;
 $8 = $copy;
 $9 = HEAP32[424]|0;
 (_strtok_r($8,$9,$savePtr)|0);
 $10 = HEAP32[424]|0;
 $11 = (_strtok_r(0,$10,$savePtr)|0);
 $mtlNameCstr = $11;
 $12 = $copy;
 _free($12);
 $13 = $mtlNameCstr;
 $3 = $agg$result;
 $4 = $13;
 $14 = $3;
 $2 = $14;
 $15 = $2;
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $17 = $4;
 $18 = $4;
 $19 = (__ZNSt3__111char_traitsIcE6lengthEPKc($18)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($14,$17,$19);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster13VertexElement10isParsableEPKc($fields) {
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fields;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==(118);
   if ($10) {
    $11 = $0;
    $12 = ((($11)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($14|0)==(32);
    $16 = $15;
   } else {
    $16 = 0;
   }
  } else {
   $16 = 0;
  }
 } else {
  $16 = 0;
 }
 STACKTOP = sp;return ($16|0);
}
function __ZN9ObjMaster13VertexElementC2EPKc($this,$fields) {
 $this = $this|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fields;
 $2 = $0;
 $3 = $1;
 $4 = (___strdup($3)|0);
 $copy = $4;
 $5 = $copy;
 __ZN9ObjMaster13VertexElement18constructionHelperEPc($2,$5);
 $6 = $copy;
 _free($6);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster13VertexElement18constructionHelperEPc($this,$fields) {
 $this = $this|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $savePtr = 0, $xStr = 0, $yStr = 0, $zStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $savePtr = sp + 16|0;
 $0 = $this;
 $1 = $fields;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN9ObjMaster13VertexElement10isParsableEPKc($3)|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP32[425]|0;
 $7 = (_strtok_r($5,$6,$savePtr)|0);
 $key = $7;
 $8 = HEAP32[425]|0;
 $9 = (_strtok_r(0,$8,$savePtr)|0);
 $xStr = $9;
 $10 = HEAP32[425]|0;
 $11 = (_strtok_r(0,$10,$savePtr)|0);
 $yStr = $11;
 $12 = HEAP32[425]|0;
 $13 = (_strtok_r(0,$12,$savePtr)|0);
 $zStr = $13;
 $14 = $xStr;
 $15 = (+_atof($14));
 $16 = $15;
 HEAPF32[$2>>2] = $16;
 $17 = $yStr;
 $18 = (+_atof($17));
 $19 = $18;
 $20 = ((($2)) + 4|0);
 HEAPF32[$20>>2] = $19;
 $21 = $zStr;
 $22 = (+_atof($21));
 $23 = $22;
 $24 = ((($2)) + 8|0);
 HEAPF32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster19VertexNormalElement10isParsableEPKc($fields) {
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fields;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==(118);
   if ($10) {
    $11 = $0;
    $12 = ((($11)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($14|0)==(110);
    if ($15) {
     $16 = $0;
     $17 = ((($16)) + 2|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     $20 = ($19|0)==(32);
     $21 = $20;
    } else {
     $21 = 0;
    }
   } else {
    $21 = 0;
   }
  } else {
   $21 = 0;
  }
 } else {
  $21 = 0;
 }
 STACKTOP = sp;return ($21|0);
}
function __ZN9ObjMaster19VertexNormalElementC2EPKc($this,$fields) {
 $this = $this|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fields;
 $2 = $0;
 $3 = $1;
 $4 = (___strdup($3)|0);
 $copy = $4;
 $5 = $copy;
 __ZN9ObjMaster19VertexNormalElement18constructionHelperEPc($2,$5);
 $6 = $copy;
 _free($6);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster19VertexNormalElement18constructionHelperEPc($this,$fields) {
 $this = $this|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $savePtr = 0, $xStr = 0, $yStr = 0, $zStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $savePtr = sp + 16|0;
 $0 = $this;
 $1 = $fields;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN9ObjMaster19VertexNormalElement10isParsableEPKc($3)|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP32[426]|0;
 $7 = (_strtok_r($5,$6,$savePtr)|0);
 $key = $7;
 $8 = HEAP32[426]|0;
 $9 = (_strtok_r(0,$8,$savePtr)|0);
 $xStr = $9;
 $10 = HEAP32[426]|0;
 $11 = (_strtok_r(0,$10,$savePtr)|0);
 $yStr = $11;
 $12 = HEAP32[426]|0;
 $13 = (_strtok_r(0,$12,$savePtr)|0);
 $zStr = $13;
 $14 = $xStr;
 $15 = (+_atof($14));
 $16 = $15;
 HEAPF32[$2>>2] = $16;
 $17 = $yStr;
 $18 = (+_atof($17));
 $19 = $18;
 $20 = ((($2)) + 4|0);
 HEAPF32[$20>>2] = $19;
 $21 = $zStr;
 $22 = (+_atof($21));
 $23 = $22;
 $24 = ((($2)) + 8|0);
 HEAPF32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster20VertexTextureElement10isParsableEPKc($fields) {
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fields;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==(118);
   if ($10) {
    $11 = $0;
    $12 = ((($11)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($14|0)==(116);
    if ($15) {
     $16 = $0;
     $17 = ((($16)) + 2|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     $20 = ($19|0)==(32);
     $21 = $20;
    } else {
     $21 = 0;
    }
   } else {
    $21 = 0;
   }
  } else {
   $21 = 0;
  }
 } else {
  $21 = 0;
 }
 STACKTOP = sp;return ($21|0);
}
function __ZN9ObjMaster20VertexTextureElementC2EPKc($this,$fields) {
 $this = $this|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fields;
 $2 = $0;
 $3 = $1;
 $4 = (___strdup($3)|0);
 $copy = $4;
 $5 = $copy;
 __ZN9ObjMaster20VertexTextureElement18constructionHelperEPc($2,$5);
 $6 = $copy;
 _free($6);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster20VertexTextureElement18constructionHelperEPc($this,$fields) {
 $this = $this|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0;
 var $savePtr = 0, $uStr = 0, $vStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $savePtr = sp + 12|0;
 $0 = $this;
 $1 = $fields;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN9ObjMaster20VertexTextureElement10isParsableEPKc($3)|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP32[427]|0;
 $7 = (_strtok_r($5,$6,$savePtr)|0);
 $key = $7;
 $8 = HEAP32[427]|0;
 $9 = (_strtok_r(0,$8,$savePtr)|0);
 $uStr = $9;
 $10 = HEAP32[427]|0;
 $11 = (_strtok_r(0,$10,$savePtr)|0);
 $vStr = $11;
 $12 = $uStr;
 $13 = (+_atof($12));
 $14 = $13;
 HEAPF32[$2>>2] = $14;
 $15 = $vStr;
 $16 = (+_atof($15));
 $17 = $16;
 $18 = ((($2)) + 4|0);
 HEAPF32[$18>>2] = $17;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster11FaceElement10isParsableEPKc($fields) {
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fields;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==(102);
   if ($10) {
    $11 = $0;
    $12 = ((($11)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($14|0)==(32);
    $16 = $15;
   } else {
    $16 = 0;
   }
  } else {
   $16 = 0;
  }
 } else {
  $16 = 0;
 }
 STACKTOP = sp;return ($16|0);
}
function __ZN9ObjMaster11FaceElementC2EPKc($this,$fields) {
 $this = $this|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fields;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = ((($3)) + 36|0);
 $5 = $3;
 while(1) {
  __ZN9ObjMaster9FacePointC2Ev($5);
  $6 = ((($5)) + 12|0);
  $7 = ($6|0)==($4|0);
  if ($7) {
   break;
  } else {
   $5 = $6;
  }
 }
 $8 = $1;
 $9 = (___strdup($8)|0);
 $copy = $9;
 $10 = $copy;
 __ZN9ObjMaster11FaceElement18constructionHelperEPc($2,$10);
 $11 = $copy;
 _free($11);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster11FaceElement18constructionHelperEPc($this,$fields) {
 $this = $this|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $delimCount = 0, $facePointStr = 0, $i = 0, $key = 0, $savePtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $savePtr = sp + 20|0;
 $2 = sp;
 $0 = $this;
 $1 = $fields;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN9ObjMaster11FaceElement10isParsableEPKc($4)|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $delimCount = 0;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $1;
  $8 = (($7) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = $1;
  $14 = (($13) + ($12)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = HEAP32[428]|0;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($16|0)==($19|0);
  if ($20) {
   $21 = $delimCount;
   $22 = (($21) + 1)|0;
   $delimCount = $22;
  }
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 $25 = $1;
 $26 = HEAP32[428]|0;
 $27 = (_strtok_r($25,$26,$savePtr)|0);
 $key = $27;
 HEAP32[$3>>2] = 0;
 while(1) {
  $28 = HEAP32[$3>>2]|0;
  $29 = $delimCount;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   label = 11;
   break;
  }
  $31 = HEAP32[$3>>2]|0;
  $32 = ($31|0)<(3);
  if (!($32)) {
   label = 11;
   break;
  }
  $33 = HEAP32[428]|0;
  $34 = (_strtok_r(0,$33,$savePtr)|0);
  $facePointStr = $34;
  $35 = HEAP32[$3>>2]|0;
  $36 = ((($3)) + 4|0);
  $37 = (($36) + (($35*12)|0)|0);
  $38 = $facePointStr;
  __ZN9ObjMaster9FacePointC2EPcb($2,$38,1);
  ;HEAP32[$37>>2]=HEAP32[$2>>2]|0;HEAP32[$37+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$2+8>>2]|0;
  $39 = HEAP32[$3>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$3>>2] = $40;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function __ZN9ObjMaster9FacePoint10isParsableEPKc($fields) {
 $fields = $fields|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delimCount = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $fields;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = $1;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)>=(48);
   if ($11) {
    $12 = $1;
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($14|0)<=(57);
    if ($15) {
     $delimCount = 0;
     $i = 0;
     while(1) {
      $16 = $i;
      $17 = $1;
      $18 = (($17) + ($16)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = $19 << 24 >> 24;
      $21 = ($20|0)!=(0);
      $22 = $i;
      $23 = ($22|0)<(1024);
      $24 = $21 ? $23 : 0;
      if (!($24)) {
       break;
      }
      $25 = $i;
      $26 = $1;
      $27 = (($26) + ($25)|0);
      $28 = HEAP8[$27>>0]|0;
      $29 = $28 << 24 >> 24;
      $30 = HEAP32[429]|0;
      $31 = HEAP8[$30>>0]|0;
      $32 = $31 << 24 >> 24;
      $33 = ($29|0)==($32|0);
      if ($33) {
       $34 = $delimCount;
       $35 = (($34) + 1)|0;
       $delimCount = $35;
      }
      $36 = $i;
      $37 = (($36) + 1)|0;
      $i = $37;
     }
     $38 = $delimCount;
     $39 = ($38|0)==(2);
     if ($39) {
      $$expand_i1_val = 1;
      HEAP8[$0>>0] = $$expand_i1_val;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $40 = $$pre_trunc&1;
      STACKTOP = sp;return ($40|0);
     } else {
      $$expand_i1_val2 = 0;
      HEAP8[$0>>0] = $$expand_i1_val2;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $40 = $$pre_trunc&1;
      STACKTOP = sp;return ($40|0);
     }
    }
   }
  }
 }
 $$expand_i1_val4 = 0;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $40 = $$pre_trunc&1;
 STACKTOP = sp;return ($40|0);
}
function __ZN9ObjMaster9FacePointC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster9FacePoint17constructorHelperEPc($this,$fields) {
 $this = $this|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $savePtr = 0, $vIndexStr = 0, $vnIndexStr = 0, $vtIndexStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $savePtr = sp + 12|0;
 $0 = $this;
 $1 = $fields;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[429]|0;
 $5 = (_strtok_r($3,$4,$savePtr)|0);
 $vIndexStr = $5;
 $6 = $vIndexStr;
 $7 = (_atoi($6)|0);
 $8 = (($7) - 1)|0;
 HEAP32[$2>>2] = $8;
 $9 = HEAP32[429]|0;
 $10 = (_strtok_r(0,$9,$savePtr)|0);
 $vtIndexStr = $10;
 $11 = $vtIndexStr;
 $12 = (_atoi($11)|0);
 $13 = (($12) - 1)|0;
 $14 = ((($2)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[429]|0;
 $16 = (_strtok_r(0,$15,$savePtr)|0);
 $vnIndexStr = $16;
 $17 = $vnIndexStr;
 $18 = (_atoi($17)|0);
 $19 = (($18) - 1)|0;
 $20 = ((($2)) + 8|0);
 HEAP32[$20>>2] = $19;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster9FacePointC2EPcb($this,$fields,$forceParser) {
 $this = $this|0;
 $fields = $fields|0;
 $forceParser = $forceParser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fields;
 $3 = $forceParser&1;
 $2 = $3;
 $4 = $0;
 $5 = $2;
 $6 = $5&1;
 if (!($6)) {
  $7 = $1;
  $8 = (__ZN9ObjMaster9FacePoint10isParsableEPKc($7)|0);
  if (!($8)) {
   STACKTOP = sp;return;
  }
 }
 $9 = $1;
 __ZN9ObjMaster9FacePoint17constructorHelperEPc($4,$9);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster13ObjMeshObjectC2ERKNS_3ObjE($this,$obj) {
 $this = $this|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $objFaceCount = 0, $objFaces = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 88|0;
 $9 = sp + 76|0;
 $16 = sp + 48|0;
 $19 = sp + 36|0;
 $23 = $this;
 $24 = $obj;
 $27 = $23;
 HEAP8[$27>>0] = 0;
 $28 = ((($27)) + 4|0);
 $22 = $28;
 $29 = $22;
 $21 = $29;
 $30 = $21;
 $20 = $30;
 HEAP32[$30>>2] = 0;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($30)) + 8|0);
 $18 = $32;
 HEAP32[$19>>2] = 0;
 $33 = $18;
 $17 = $19;
 $34 = $17;
 $35 = HEAP32[$34>>2]|0;
 $15 = $33;
 HEAP32[$16>>2] = $35;
 $36 = $15;
 $14 = $36;
 $13 = $16;
 $37 = $13;
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$36>>2] = $38;
 $39 = ((($27)) + 16|0);
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $10 = $41;
 HEAP32[$41>>2] = 0;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($41)) + 8|0);
 $8 = $43;
 HEAP32[$9>>2] = 0;
 $44 = $8;
 $7 = $9;
 $45 = $7;
 $46 = HEAP32[$45>>2]|0;
 $5 = $44;
 HEAP32[$6>>2] = $46;
 $47 = $5;
 $4 = $47;
 $3 = $6;
 $48 = $3;
 $49 = HEAP32[$48>>2]|0;
 HEAP32[$47>>2] = $49;
 $50 = $24;
 $51 = ((($50)) + 36|0);
 $1 = $51;
 $2 = 0;
 $52 = $1;
 $53 = $2;
 $54 = HEAP32[$52>>2]|0;
 $55 = (($54) + (($53*40)|0)|0);
 $objFaces = $55;
 $56 = $24;
 $57 = ((($56)) + 36|0);
 $0 = $57;
 $58 = $0;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = HEAP32[$58>>2]|0;
 $62 = $60;
 $63 = $61;
 $64 = (($62) - ($63))|0;
 $65 = (($64|0) / 40)&-1;
 $objFaceCount = $65;
 $66 = $24;
 $67 = $objFaces;
 $68 = $objFaceCount;
 __THREW__ = 0;
 invoke_viiii(399,($27|0),($66|0),($67|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  $25 = $71;
  $26 = $72;
  __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($39);
  __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEED2Ev($28);
  $73 = $25;
  $74 = $26;
  ___resumeException($73|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN9ObjMaster13ObjMeshObject14creationHelperERKNS_3ObjEPKNS_11FaceElementEi($this,$obj,$meshFaces,$meshFaceCount) {
 $this = $this|0;
 $obj = $obj|0;
 $meshFaces = $meshFaces|0;
 $meshFaceCount = $meshFaceCount|0;
 var $$byval_copy = 0, $$byval_copy17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0.0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i1 = 0, $__annotator$i4 = 0, $alreadyHandledFacePointTargets = 0, $face = 0, $fp = 0, $fv = 0, $fvn = 0, $fvt = 0, $i = 0, $its = 0, $j = 0, $lastIndex = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 928|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy17 = sp + 913|0;
 $$byval_copy = sp + 912|0;
 $vararg_buffer15 = sp + 96|0;
 $vararg_buffer12 = sp + 88|0;
 $vararg_buffer10 = sp + 80|0;
 $vararg_buffer7 = sp + 72|0;
 $vararg_buffer5 = sp + 64|0;
 $vararg_buffer3 = sp + 56|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $8 = sp + 32|0;
 $13 = sp + 911|0;
 $__annotator$i4 = sp + 910|0;
 $30 = sp + 24|0;
 $33 = sp + 780|0;
 $35 = sp + 772|0;
 $37 = sp + 764|0;
 $39 = sp + 16|0;
 $40 = sp + 756|0;
 $43 = sp + 744|0;
 $53 = sp + 8|0;
 $58 = sp + 909|0;
 $__annotator$i1 = sp + 908|0;
 $77 = sp + 907|0;
 $86 = sp;
 $91 = sp + 906|0;
 $__annotator$i = sp + 905|0;
 $104 = sp + 520|0;
 $107 = sp + 508|0;
 $113 = sp + 904|0;
 $119 = sp + 464|0;
 $122 = sp + 452|0;
 $129 = sp + 424|0;
 $132 = sp + 412|0;
 $136 = sp + 396|0;
 $139 = sp + 384|0;
 $147 = sp + 352|0;
 $150 = sp + 340|0;
 $154 = sp + 324|0;
 $157 = sp + 312|0;
 $alreadyHandledFacePointTargets = sp + 264|0;
 $165 = sp + 252|0;
 $166 = sp + 240|0;
 $lastIndex = sp + 228|0;
 $face = sp + 184|0;
 $fp = sp + 168|0;
 $its = sp + 144|0;
 $169 = sp + 140|0;
 $170 = sp + 136|0;
 $171 = sp + 104|0;
 $161 = $this;
 $162 = $obj;
 $163 = $meshFaces;
 $164 = $meshFaceCount;
 $172 = $161;
 $160 = $alreadyHandledFacePointTargets;
 $173 = $160;
 $159 = $173;
 $174 = $159;
 $158 = $174;
 $175 = $158;
 $156 = $175;
 HEAP32[$157>>2] = 0;
 $176 = $156;
 $155 = $157;
 $177 = $155;
 $178 = HEAP32[$177>>2]|0;
 $153 = $176;
 HEAP32[$154>>2] = $178;
 $179 = $153;
 $152 = $154;
 $180 = $152;
 $181 = HEAP32[$180>>2]|0;
 HEAP32[$179>>2] = $181;
 $182 = ((($179)) + 4|0);
 $151 = $182;
 $183 = $151;
 $149 = $183;
 HEAP32[$150>>2] = 0;
 $184 = $149;
 $148 = $150;
 $185 = $148;
 $186 = HEAP32[$185>>2]|0;
 $146 = $184;
 HEAP32[$147>>2] = $186;
 $187 = $146;
 $145 = $187;
 $144 = $147;
 $188 = $144;
 $189 = HEAP32[$188>>2]|0;
 HEAP32[$187>>2] = $189;
 $190 = ((($174)) + 8|0);
 $143 = $190;
 $191 = $143;
 $142 = $191;
 $192 = $142;
 $141 = $192;
 $140 = $192;
 $193 = $140;
 HEAP32[$193>>2] = 0;
 $194 = ((($174)) + 12|0);
 $138 = $194;
 HEAP32[$139>>2] = 0;
 $195 = $138;
 $137 = $139;
 $196 = $137;
 $197 = HEAP32[$196>>2]|0;
 $135 = $195;
 HEAP32[$136>>2] = $197;
 $198 = $135;
 $134 = $198;
 $133 = $136;
 $199 = $133;
 $200 = HEAP32[$199>>2]|0;
 HEAP32[$198>>2] = $200;
 $201 = ((($174)) + 16|0);
 $131 = $201;
 HEAPF32[$132>>2] = 1.0;
 $202 = $131;
 $130 = $132;
 $203 = $130;
 $204 = +HEAPF32[$203>>2];
 $128 = $202;
 HEAPF32[$129>>2] = $204;
 $205 = $128;
 $127 = $205;
 $126 = $129;
 $206 = $126;
 $207 = +HEAPF32[$206>>2];
 HEAPF32[$205>>2] = $207;
 $208 = ((($172)) + 16|0);
 $125 = $165;
 $209 = $125;
 $124 = $209;
 $210 = $124;
 $123 = $210;
 HEAP32[$210>>2] = 0;
 $211 = ((($210)) + 4|0);
 HEAP32[$211>>2] = 0;
 $212 = ((($210)) + 8|0);
 $121 = $212;
 HEAP32[$122>>2] = 0;
 $213 = $121;
 $120 = $122;
 $214 = $120;
 $215 = HEAP32[$214>>2]|0;
 $118 = $213;
 HEAP32[$119>>2] = $215;
 $216 = $118;
 $117 = $216;
 $116 = $119;
 $217 = $116;
 $218 = HEAP32[$217>>2]|0;
 HEAP32[$216>>2] = $218;
 $111 = $208;
 $112 = $165;
 $219 = $111;
 $220 = $112;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$113>>0]|0;
 __ZNSt3__16vectorIjNS_9allocatorIjEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($219,$220,$$byval_copy);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($165);
 $221 = ((($172)) + 4|0);
 $110 = $166;
 $222 = $110;
 $109 = $222;
 $223 = $109;
 $108 = $223;
 HEAP32[$223>>2] = 0;
 $224 = ((($223)) + 4|0);
 HEAP32[$224>>2] = 0;
 $225 = ((($223)) + 8|0);
 $106 = $225;
 HEAP32[$107>>2] = 0;
 $226 = $106;
 $105 = $107;
 $227 = $105;
 $228 = HEAP32[$227>>2]|0;
 $103 = $226;
 HEAP32[$104>>2] = $228;
 $229 = $103;
 $102 = $229;
 $101 = $104;
 $230 = $101;
 $231 = HEAP32[$230>>2]|0;
 HEAP32[$229>>2] = $231;
 $75 = $221;
 $76 = $166;
 $232 = $75;
 $233 = $76;
 ;HEAP8[$$byval_copy17>>0]=HEAP8[$77>>0]|0;
 __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE($232,$233,$$byval_copy17);
 __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEED2Ev($166);
 $234 = $164;
 $235 = ($234|0)!=(0);
 if ($235) {
  $236 = ((($172)) + 16|0);
  $237 = $164;
  __THREW__ = 0;
  invoke_vii(400,($236|0),($237|0));
  $238 = __THREW__; __THREW__ = 0;
  $239 = $238&1;
  if (!($239)) {
   $240 = ((($172)) + 4|0);
   $241 = $164;
   __THREW__ = 0;
   invoke_vii(401,($240|0),($241|0));
   $242 = __THREW__; __THREW__ = 0;
   $243 = $242&1;
   if (!($243)) {
    label = 5;
   }
  }
 } else {
  label = 5;
 }
 L4: do {
  if ((label|0) == 5) {
   HEAP32[$lastIndex>>2] = 0;
   $i = 0;
   while(1) {
    $248 = $i;
    $249 = $164;
    $250 = ($248|0)<($249|0);
    if (!($250)) {
     break;
    }
    $251 = $i;
    $252 = $163;
    $253 = (($252) + (($251*40)|0)|0);
    dest=$face; src=$253; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $254 = HEAP32[$face>>2]|0;
    $255 = ($254|0)==(3);
    L9: do {
     if ($255) {
      $j = 0;
      while(1) {
       $256 = $j;
       $257 = HEAP32[$face>>2]|0;
       $258 = ($256|0)<($257|0);
       if (!($258)) {
        break L9;
       }
       $259 = $j;
       $260 = ((($face)) + 4|0);
       $261 = (($260) + (($259*12)|0)|0);
       ;HEAP32[$fp>>2]=HEAP32[$261>>2]|0;HEAP32[$fp+4>>2]=HEAP32[$261+4>>2]|0;HEAP32[$fp+8>>2]=HEAP32[$261+8>>2]|0;
       $262 = $162;
       $263 = HEAP32[$fp>>2]|0;
       $73 = $262;
       $74 = $263;
       $264 = $73;
       $265 = $74;
       $266 = HEAP32[$264>>2]|0;
       $267 = (($266) + (($265*12)|0)|0);
       $fv = $267;
       $268 = $162;
       $269 = ((($268)) + 12|0);
       $270 = ((($fp)) + 4|0);
       $271 = HEAP32[$270>>2]|0;
       $71 = $269;
       $72 = $271;
       $272 = $71;
       $273 = $72;
       $274 = HEAP32[$272>>2]|0;
       $275 = (($274) + ($273<<3)|0);
       $fvt = $275;
       $276 = $162;
       $277 = ((($276)) + 24|0);
       $278 = ((($fp)) + 8|0);
       $279 = HEAP32[$278>>2]|0;
       $69 = $277;
       $70 = $279;
       $280 = $69;
       $281 = $70;
       $282 = HEAP32[$280>>2]|0;
       $283 = (($282) + (($281*12)|0)|0);
       $fvn = $283;
       $284 = $fv;
       $285 = $fvt;
       $286 = $fvn;
       __THREW__ = 0;
       invoke_viiii(402,($its|0),($284|0),($285|0),($286|0));
       $287 = __THREW__; __THREW__ = 0;
       $288 = $287&1;
       if ($288) {
        break L4;
       }
       $41 = $alreadyHandledFacePointTargets;
       $42 = $its;
       $289 = $41;
       $290 = $42;
       __THREW__ = 0;
       $291 = (invoke_iii(403,($289|0),($290|0))|0);
       $292 = __THREW__; __THREW__ = 0;
       $293 = $292&1;
       if ($293) {
        break L4;
       }
       HEAP32[$43>>2] = $291;
       ;HEAP8[$39>>0]=HEAP8[$43>>0]|0;HEAP8[$39+1>>0]=HEAP8[$43+1>>0]|0;HEAP8[$39+2>>0]=HEAP8[$43+2>>0]|0;HEAP8[$39+3>>0]=HEAP8[$43+3>>0]|0;
       $38 = $40;
       $294 = $38;
       ;HEAP32[$294>>2]=HEAP32[$39>>2]|0;
       $295 = HEAP32[$40>>2]|0;
       HEAP32[$169>>2] = $295;
       $36 = $alreadyHandledFacePointTargets;
       $296 = $36;
       $34 = $296;
       $31 = $33;
       $32 = 0;
       $297 = $31;
       $298 = $32;
       HEAP32[$297>>2] = $298;
       $299 = HEAP32[$33>>2]|0;
       HEAP32[$37>>2] = $299;
       ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;HEAP8[$30+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$30+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$30+3>>0]=HEAP8[$37+3>>0]|0;
       $29 = $35;
       $300 = $29;
       ;HEAP32[$300>>2]=HEAP32[$30>>2]|0;
       $301 = HEAP32[$35>>2]|0;
       HEAP32[$170>>2] = $301;
       $27 = $169;
       $28 = $170;
       $302 = $27;
       $303 = $28;
       $25 = $302;
       $26 = $303;
       $304 = $25;
       $305 = $26;
       $23 = $304;
       $24 = $305;
       $306 = $23;
       $307 = HEAP32[$306>>2]|0;
       $308 = $24;
       $309 = HEAP32[$308>>2]|0;
       $310 = ($307|0)==($309|0);
       $311 = $310 ^ 1;
       do {
        if ($311) {
         $312 = ((($172)) + 16|0);
         __THREW__ = 0;
         $313 = (invoke_iii(404,($alreadyHandledFacePointTargets|0),($its|0))|0);
         $314 = __THREW__; __THREW__ = 0;
         $315 = $314&1;
         if ($315) {
          break L4;
         }
         $21 = $312;
         $22 = $313;
         $316 = $21;
         $317 = ((($316)) + 4|0);
         $318 = HEAP32[$317>>2]|0;
         $20 = $316;
         $319 = $20;
         $320 = ((($319)) + 8|0);
         $19 = $320;
         $321 = $19;
         $18 = $321;
         $322 = $18;
         $323 = HEAP32[$322>>2]|0;
         $324 = ($318|0)!=($323|0);
         if ($324) {
          __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i4,$316,1);
          $17 = $316;
          $325 = $17;
          $326 = ((($325)) + 8|0);
          $16 = $326;
          $327 = $16;
          $15 = $327;
          $328 = $15;
          $329 = ((($316)) + 4|0);
          $330 = HEAP32[$329>>2]|0;
          $14 = $330;
          $331 = $14;
          $332 = $22;
          $10 = $328;
          $11 = $331;
          $12 = $332;
          $333 = $10;
          $334 = $11;
          $335 = $12;
          $9 = $335;
          $336 = $9;
          ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
          $5 = $333;
          $6 = $334;
          $7 = $336;
          $337 = $5;
          $338 = $6;
          $339 = $7;
          $4 = $339;
          $340 = $4;
          $1 = $337;
          $2 = $338;
          $3 = $340;
          $341 = $2;
          $342 = $3;
          $0 = $342;
          $343 = $0;
          $344 = HEAP32[$343>>2]|0;
          HEAP32[$341>>2] = $344;
          __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i4);
          $345 = ((($316)) + 4|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ((($346)) + 4|0);
          HEAP32[$345>>2] = $347;
          break;
         } else {
          $348 = $22;
          __THREW__ = 0;
          invoke_vii(405,($316|0),($348|0));
          $349 = __THREW__; __THREW__ = 0;
          $350 = $349&1;
          if ($350) {
           break L4;
          } else {
           break;
          }
         }
        } else {
         $351 = ((($172)) + 4|0);
         $352 = $fv;
         $353 = +HEAPF32[$352>>2];
         HEAPF32[$171>>2] = $353;
         $354 = ((($171)) + 4|0);
         $355 = $fv;
         $356 = ((($355)) + 4|0);
         $357 = +HEAPF32[$356>>2];
         HEAPF32[$354>>2] = $357;
         $358 = ((($171)) + 8|0);
         $359 = $fv;
         $360 = ((($359)) + 8|0);
         $361 = +HEAPF32[$360>>2];
         HEAPF32[$358>>2] = $361;
         $362 = ((($171)) + 12|0);
         $363 = $fvn;
         $364 = +HEAPF32[$363>>2];
         HEAPF32[$362>>2] = $364;
         $365 = ((($171)) + 16|0);
         $366 = $fvn;
         $367 = ((($366)) + 4|0);
         $368 = +HEAPF32[$367>>2];
         HEAPF32[$365>>2] = $368;
         $369 = ((($171)) + 20|0);
         $370 = $fvn;
         $371 = ((($370)) + 8|0);
         $372 = +HEAPF32[$371>>2];
         HEAPF32[$369>>2] = $372;
         $373 = ((($171)) + 24|0);
         $374 = $fvt;
         $375 = +HEAPF32[$374>>2];
         HEAPF32[$373>>2] = $375;
         $376 = ((($171)) + 28|0);
         $377 = $fvt;
         $378 = ((($377)) + 4|0);
         $379 = +HEAPF32[$378>>2];
         HEAPF32[$376>>2] = $379;
         $67 = $351;
         $68 = $171;
         $380 = $67;
         $381 = ((($380)) + 4|0);
         $382 = HEAP32[$381>>2]|0;
         $66 = $380;
         $383 = $66;
         $384 = ((($383)) + 8|0);
         $65 = $384;
         $385 = $65;
         $64 = $385;
         $386 = $64;
         $387 = HEAP32[$386>>2]|0;
         $388 = ($382>>>0)<($387>>>0);
         if ($388) {
          __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i1,$380,1);
          $63 = $380;
          $389 = $63;
          $390 = ((($389)) + 8|0);
          $62 = $390;
          $391 = $62;
          $61 = $391;
          $392 = $61;
          $393 = ((($380)) + 4|0);
          $394 = HEAP32[$393>>2]|0;
          $59 = $394;
          $395 = $59;
          $396 = $68;
          $44 = $396;
          $397 = $44;
          $55 = $392;
          $56 = $395;
          $57 = $397;
          $398 = $55;
          $399 = $56;
          $400 = $57;
          $54 = $400;
          $401 = $54;
          ;HEAP8[$53>>0]=HEAP8[$58>>0]|0;
          $50 = $398;
          $51 = $399;
          $52 = $401;
          $402 = $50;
          $403 = $51;
          $404 = $52;
          $49 = $404;
          $405 = $49;
          $46 = $402;
          $47 = $403;
          $48 = $405;
          $406 = $47;
          $407 = $48;
          $45 = $407;
          $408 = $45;
          ;HEAP32[$406>>2]=HEAP32[$408>>2]|0;HEAP32[$406+4>>2]=HEAP32[$408+4>>2]|0;HEAP32[$406+8>>2]=HEAP32[$408+8>>2]|0;HEAP32[$406+12>>2]=HEAP32[$408+12>>2]|0;HEAP32[$406+16>>2]=HEAP32[$408+16>>2]|0;HEAP32[$406+20>>2]=HEAP32[$408+20>>2]|0;HEAP32[$406+24>>2]=HEAP32[$408+24>>2]|0;HEAP32[$406+28>>2]=HEAP32[$408+28>>2]|0;
          __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i1);
          $409 = ((($380)) + 4|0);
          $410 = HEAP32[$409>>2]|0;
          $411 = ((($410)) + 32|0);
          HEAP32[$409>>2] = $411;
         } else {
          $412 = $68;
          $60 = $412;
          $413 = $60;
          __THREW__ = 0;
          invoke_vii(406,($380|0),($413|0));
          $414 = __THREW__; __THREW__ = 0;
          $415 = $414&1;
          if ($415) {
           break L4;
          }
         }
         $416 = ((($172)) + 16|0);
         $99 = $416;
         $100 = $lastIndex;
         $417 = $99;
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $98 = $417;
         $420 = $98;
         $421 = ((($420)) + 8|0);
         $97 = $421;
         $422 = $97;
         $96 = $422;
         $423 = $96;
         $424 = HEAP32[$423>>2]|0;
         $425 = ($419|0)!=($424|0);
         if ($425) {
          __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$417,1);
          $95 = $417;
          $426 = $95;
          $427 = ((($426)) + 8|0);
          $94 = $427;
          $428 = $94;
          $93 = $428;
          $429 = $93;
          $430 = ((($417)) + 4|0);
          $431 = HEAP32[$430>>2]|0;
          $92 = $431;
          $432 = $92;
          $433 = $100;
          $88 = $429;
          $89 = $432;
          $90 = $433;
          $434 = $88;
          $435 = $89;
          $436 = $90;
          $87 = $436;
          $437 = $87;
          ;HEAP8[$86>>0]=HEAP8[$91>>0]|0;
          $83 = $434;
          $84 = $435;
          $85 = $437;
          $438 = $83;
          $439 = $84;
          $440 = $85;
          $82 = $440;
          $441 = $82;
          $79 = $438;
          $80 = $439;
          $81 = $441;
          $442 = $80;
          $443 = $81;
          $78 = $443;
          $444 = $78;
          $445 = HEAP32[$444>>2]|0;
          HEAP32[$442>>2] = $445;
          __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
          $446 = ((($417)) + 4|0);
          $447 = HEAP32[$446>>2]|0;
          $448 = ((($447)) + 4|0);
          HEAP32[$446>>2] = $448;
         } else {
          $449 = $100;
          __THREW__ = 0;
          invoke_vii(405,($417|0),($449|0));
          $450 = __THREW__; __THREW__ = 0;
          $451 = $450&1;
          if ($451) {
           break L4;
          }
         }
         $452 = HEAP32[$lastIndex>>2]|0;
         __THREW__ = 0;
         $453 = (invoke_iii(404,($alreadyHandledFacePointTargets|0),($its|0))|0);
         $454 = __THREW__; __THREW__ = 0;
         $455 = $454&1;
         if ($455) {
          break L4;
         }
         HEAP32[$453>>2] = $452;
         $456 = HEAP32[$lastIndex>>2]|0;
         $457 = (($456) + 1)|0;
         HEAP32[$lastIndex>>2] = $457;
        }
       } while(0);
       $458 = $j;
       $459 = (($458) + 1)|0;
       $j = $459;
      }
     } else {
      $460 = HEAP32[475]|0;
      __THREW__ = 0;
      (invoke_iiii(339,($460|0),(10740|0),($vararg_buffer|0))|0);
      $461 = __THREW__; __THREW__ = 0;
      $462 = $461&1;
      if ($462) {
       break L4;
      }
      $463 = HEAP32[475]|0;
      __THREW__ = 0;
      (invoke_iiii(339,($463|0),(11077|0),($vararg_buffer1|0))|0);
      $464 = __THREW__; __THREW__ = 0;
      $465 = $464&1;
      if ($465) {
       break L4;
      }
     }
    } while(0);
    $466 = $i;
    $467 = (($466) + 1)|0;
    $i = $467;
   }
   $468 = HEAP32[504]|0;
   $469 = ((($172)) + 4|0);
   $114 = $469;
   $470 = $114;
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = HEAP32[$470>>2]|0;
   $474 = $472;
   $475 = $473;
   $476 = (($474) - ($475))|0;
   $477 = (($476|0) / 32)&-1;
   __THREW__ = 0;
   HEAP32[$vararg_buffer3>>2] = $477;
   (invoke_iiii(339,($468|0),(10803|0),($vararg_buffer3|0))|0);
   $478 = __THREW__; __THREW__ = 0;
   $479 = $478&1;
   if (!($479)) {
    $480 = HEAP32[504]|0;
    __THREW__ = 0;
    (invoke_iiii(339,($480|0),(11077|0),($vararg_buffer5|0))|0);
    $481 = __THREW__; __THREW__ = 0;
    $482 = $481&1;
    if (!($482)) {
     $483 = HEAP32[504]|0;
     $484 = ((($172)) + 16|0);
     $115 = $484;
     $485 = $115;
     $486 = ((($485)) + 4|0);
     $487 = HEAP32[$486>>2]|0;
     $488 = HEAP32[$485>>2]|0;
     $489 = $487;
     $490 = $488;
     $491 = (($489) - ($490))|0;
     $492 = (($491|0) / 4)&-1;
     __THREW__ = 0;
     HEAP32[$vararg_buffer7>>2] = $492;
     (invoke_iiii(339,($483|0),(10846|0),($vararg_buffer7|0))|0);
     $493 = __THREW__; __THREW__ = 0;
     $494 = $493&1;
     if (!($494)) {
      $495 = HEAP32[504]|0;
      __THREW__ = 0;
      (invoke_iiii(339,($495|0),(11077|0),($vararg_buffer10|0))|0);
      $496 = __THREW__; __THREW__ = 0;
      $497 = $496&1;
      if (!($497)) {
       $498 = HEAP32[504]|0;
       $499 = HEAP32[$lastIndex>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer12>>2] = $499;
       (invoke_iiii(339,($498|0),(10888|0),($vararg_buffer12|0))|0);
       $500 = __THREW__; __THREW__ = 0;
       $501 = $500&1;
       if (!($501)) {
        $502 = HEAP32[504]|0;
        __THREW__ = 0;
        (invoke_iiii(339,($502|0),(11077|0),($vararg_buffer15|0))|0);
        $503 = __THREW__; __THREW__ = 0;
        $504 = $503&1;
        if (!($504)) {
         HEAP8[$172>>0] = 1;
         __ZNSt3__113unordered_mapI16IndexTargetSlicejNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorINS_4pairIKS1_jEEEEED2Ev($alreadyHandledFacePointTargets);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $244 = ___cxa_find_matching_catch_2()|0;
 $245 = tempRet0;
 $167 = $244;
 $168 = $245;
 __ZNSt3__113unordered_mapI16IndexTargetSlicejNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorINS_4pairIKS1_jEEEEED2Ev($alreadyHandledFacePointTargets);
 $246 = $167;
 $247 = $168;
 ___resumeException($246|0);
 // unreachable;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 4)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 4)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(407,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 32)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 32)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferI15VertexStructureRNS_9allocatorIS1_EEEC2EjjS4_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(408,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferI15VertexStructureRNS_9allocatorIS1_EEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferI15VertexStructureRNS_9allocatorIS1_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI15VertexStructureRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<5;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<5)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<5)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 32)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<5)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<5;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 32)&-1;
 __ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 32)&-1;
 $39 = (($26) + ($38<<5)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 32)&-1;
 $51 = (($42) + ($50<<5)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 32)&-1;
 $67 = (($54) + ($66<<5)|0);
 __ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 32)&-1;
 $39 = (($26) + ($38<<5)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 32)&-1;
 $55 = (($42) + ($54<<5)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<5)|0);
 __ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI15VertexStructureRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -32|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 32)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapI16IndexTargetSlicejNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorINS_4pairIKS1_jEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = $this;
 $26 = $25;
 $27 = ((($26)) + 8|0);
 $24 = $27;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE12__deallocateEPNS_11__hash_nodeIS3_PvEE($26,$30);
 $22 = $26;
 $31 = $22;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $35 = HEAP32[$34>>2]|0;
 $__tmp$i$i = $35;
 $3 = $32;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 HEAP32[$37>>2] = 0;
 $38 = $__tmp$i$i;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $1 = $32;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = $__tmp$i$i;
 $17 = $42;
 $18 = $43;
 $44 = $17;
 $16 = $44;
 $45 = $16;
 $15 = $45;
 $46 = $15;
 $14 = $46;
 $47 = $14;
 $48 = $18;
 $6 = $44;
 $49 = $6;
 $5 = $49;
 $50 = $5;
 $4 = $50;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $11 = $47;
 $12 = $48;
 $13 = $52;
 $53 = $11;
 $54 = $12;
 $55 = $13;
 $8 = $53;
 $9 = $54;
 $10 = $55;
 $56 = $9;
 $7 = $56;
 $57 = $7;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE12__deallocateEPNS_11__hash_nodeIS3_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__np;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 8|0);
 $16 = $22;
 $23 = $16;
 $15 = $23;
 $24 = $15;
 $__na = $24;
 while(1) {
  $25 = $19;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $19;
  $28 = HEAP32[$27>>2]|0;
  $__next = $28;
  $29 = $__na;
  $30 = $19;
  $31 = ((($30)) + 8|0);
  $14 = $31;
  $32 = $14;
  $4 = $29;
  $5 = $32;
  $33 = $4;
  $34 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $33;
  $2 = $34;
  $35 = $2;
  $0 = $35;
  $36 = $__na;
  $37 = $19;
  $11 = $36;
  $12 = $37;
  $13 = 1;
  $38 = $11;
  $39 = $12;
  $40 = $13;
  $8 = $38;
  $9 = $39;
  $10 = $40;
  $41 = $9;
  $7 = $41;
  $42 = $7;
  __ZdlPv($42);
  $43 = $__next;
  $19 = $43;
 }
 STACKTOP = sp;return;
}
function __ZN16IndexTargetSliceC2EPKN9ObjMaster13VertexElementEPKNS0_20VertexTextureElementEPKNS0_19VertexNormalElementE($this,$v_,$vt_,$vn_) {
 $this = $this|0;
 $v_ = $v_|0;
 $vt_ = $vt_|0;
 $vn_ = $vn_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v_;
 $2 = $vt_;
 $3 = $vn_;
 $4 = $0;
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = $2;
 $7 = ((($4)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $3;
 $9 = ((($4)) + 8|0);
 HEAP32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE4findIS2_EENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 44|0;
 $35 = sp + 24|0;
 $36 = $this;
 $37 = $__k;
 $38 = $36;
 $34 = $38;
 $39 = $34;
 $40 = ((($39)) + 12|0);
 $33 = $40;
 $41 = $33;
 $32 = $41;
 $42 = $32;
 $43 = $37;
 $18 = $42;
 $19 = $43;
 $44 = $18;
 $45 = $19;
 $46 = (__ZNKSt3__14hashI16IndexTargetSliceEclERKS1_($44,$45)|0);
 $__hash = $46;
 $17 = $38;
 $47 = $17;
 $16 = $47;
 $48 = $16;
 $15 = $48;
 $49 = $15;
 $14 = $49;
 $50 = $14;
 $51 = ((($50)) + 4|0);
 $13 = $51;
 $52 = $13;
 $12 = $52;
 $53 = $12;
 $11 = $53;
 $54 = $11;
 $55 = HEAP32[$54>>2]|0;
 $__bc = $55;
 $56 = $__bc;
 $57 = ($56|0)!=(0);
 L1: do {
  if ($57) {
   $58 = $__hash;
   $59 = $__bc;
   $0 = $58;
   $1 = $59;
   $60 = $1;
   $61 = $1;
   $62 = (($61) - 1)|0;
   $63 = $60 & $62;
   $64 = ($63|0)!=(0);
   $65 = $0;
   $66 = $1;
   if ($64) {
    $69 = (($65>>>0) % ($66>>>0))&-1;
    $70 = $69;
   } else {
    $67 = (($66) - 1)|0;
    $68 = $65 & $67;
    $70 = $68;
   }
   $__chash = $70;
   $71 = $__chash;
   $4 = $38;
   $5 = $71;
   $72 = $4;
   $73 = $5;
   $3 = $72;
   $74 = $3;
   $2 = $74;
   $75 = $2;
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + ($73<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $__nd = $78;
   $79 = $__nd;
   $80 = ($79|0)!=(0|0);
   if ($80) {
    $81 = $__nd;
    $82 = HEAP32[$81>>2]|0;
    $__nd = $82;
    while(1) {
     $83 = $__nd;
     $84 = ($83|0)!=(0|0);
     if (!($84)) {
      break L1;
     }
     $85 = $__nd;
     $86 = ((($85)) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $__bc;
     $6 = $87;
     $7 = $88;
     $89 = $7;
     $90 = $7;
     $91 = (($90) - 1)|0;
     $92 = $89 & $91;
     $93 = ($92|0)!=(0);
     $94 = $6;
     $95 = $7;
     if ($93) {
      $98 = (($94>>>0) % ($95>>>0))&-1;
      $100 = $98;
     } else {
      $96 = (($95) - 1)|0;
      $97 = $94 & $96;
      $100 = $97;
     }
     $99 = $__chash;
     $101 = ($100|0)==($99|0);
     if (!($101)) {
      break L1;
     }
     $10 = $38;
     $102 = $10;
     $103 = ((($102)) + 16|0);
     $9 = $103;
     $104 = $9;
     $8 = $104;
     $105 = $8;
     $106 = $__nd;
     $107 = ((($106)) + 8|0);
     $108 = $37;
     $23 = $105;
     $24 = $107;
     $25 = $108;
     $109 = $23;
     $110 = $24;
     $111 = $25;
     $20 = $109;
     $21 = $110;
     $22 = $111;
     $112 = $21;
     $113 = $22;
     $114 = (__ZeqRK16IndexTargetSliceS1_($112,$113)|0);
     $115 = $__nd;
     if ($114) {
      break;
     }
     $118 = HEAP32[$115>>2]|0;
     $__nd = $118;
    }
    $26 = $35;
    $27 = $115;
    $116 = $26;
    $117 = $27;
    HEAP32[$116>>2] = $117;
    $122 = HEAP32[$35>>2]|0;
    STACKTOP = sp;return ($122|0);
   }
  }
 } while(0);
 $31 = $38;
 $28 = $30;
 $29 = 0;
 $119 = $28;
 $120 = $29;
 HEAP32[$119>>2] = $120;
 $121 = HEAP32[$30>>2]|0;
 HEAP32[$35>>2] = $121;
 $122 = HEAP32[$35>>2]|0;
 STACKTOP = sp;return ($122|0);
}
function __ZNKSt3__14hashI16IndexTargetSliceEclERKS1_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0;
 var $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0;
 var $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__u$i$i = 0, $__u$i$i1 = 0, $__u$i$i3 = 0, $__u$i$i5 = 0, $__u$i$i7 = 0, $__u$i$i9 = 0, $hv1 = 0, $hv2 = 0, $hv3 = 0, $hvn1 = 0, $hvn2 = 0, $hvn3 = 0, $hvt1 = 0, $hvt2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u$i$i9 = sp + 188|0;
 $__u$i$i7 = sp + 164|0;
 $__u$i$i5 = sp + 140|0;
 $__u$i$i3 = sp + 116|0;
 $__u$i$i1 = sp + 92|0;
 $__u$i$i = sp + 52|0;
 $36 = sp + 207|0;
 $37 = sp + 206|0;
 $38 = sp + 205|0;
 $39 = sp + 204|0;
 $40 = sp + 203|0;
 $41 = sp + 202|0;
 $42 = sp + 201|0;
 $43 = sp + 200|0;
 $34 = $this;
 $35 = $s;
 $44 = $35;
 $45 = HEAP32[$44>>2]|0;
 $46 = +HEAPF32[$45>>2];
 $32 = $36;
 $33 = $46;
 $47 = $32;
 $48 = $33;
 $49 = $48 == 0.0;
 if ($49) {
  $31 = 0;
 } else {
  $50 = $33;
  $29 = $47;
  $30 = $50;
  $51 = $30;
  HEAPF32[$__u$i$i>>2] = $51;
  $52 = HEAP32[$__u$i$i>>2]|0;
  $31 = $52;
 }
 $53 = $31;
 $hv1 = $53;
 $54 = $35;
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 4|0);
 $57 = +HEAPF32[$56>>2];
 $3 = $37;
 $4 = $57;
 $58 = $3;
 $59 = $4;
 $60 = $59 == 0.0;
 if ($60) {
  $2 = 0;
 } else {
  $61 = $4;
  $0 = $58;
  $1 = $61;
  $62 = $1;
  HEAPF32[$__u$i$i9>>2] = $62;
  $63 = HEAP32[$__u$i$i9>>2]|0;
  $2 = $63;
 }
 $64 = $2;
 $hv2 = $64;
 $65 = $35;
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($66)) + 8|0);
 $68 = +HEAPF32[$67>>2];
 $8 = $38;
 $9 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $70 == 0.0;
 if ($71) {
  $7 = 0;
 } else {
  $72 = $9;
  $5 = $69;
  $6 = $72;
  $73 = $6;
  HEAPF32[$__u$i$i7>>2] = $73;
  $74 = HEAP32[$__u$i$i7>>2]|0;
  $7 = $74;
 }
 $75 = $7;
 $hv3 = $75;
 $76 = $35;
 $77 = ((($76)) + 8|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = +HEAPF32[$78>>2];
 $13 = $39;
 $14 = $79;
 $80 = $13;
 $81 = $14;
 $82 = $81 == 0.0;
 if ($82) {
  $12 = 0;
 } else {
  $83 = $14;
  $10 = $80;
  $11 = $83;
  $84 = $11;
  HEAPF32[$__u$i$i5>>2] = $84;
  $85 = HEAP32[$__u$i$i5>>2]|0;
  $12 = $85;
 }
 $86 = $12;
 $hvn1 = $86;
 $87 = $35;
 $88 = ((($87)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ((($89)) + 4|0);
 $91 = +HEAPF32[$90>>2];
 $18 = $40;
 $19 = $91;
 $92 = $18;
 $93 = $19;
 $94 = $93 == 0.0;
 if ($94) {
  $17 = 0;
 } else {
  $95 = $19;
  $15 = $92;
  $16 = $95;
  $96 = $16;
  HEAPF32[$__u$i$i3>>2] = $96;
  $97 = HEAP32[$__u$i$i3>>2]|0;
  $17 = $97;
 }
 $98 = $17;
 $hvn2 = $98;
 $99 = $35;
 $100 = ((($99)) + 8|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ((($101)) + 8|0);
 $103 = +HEAPF32[$102>>2];
 $23 = $41;
 $24 = $103;
 $104 = $23;
 $105 = $24;
 $106 = $105 == 0.0;
 if ($106) {
  $22 = 0;
 } else {
  $107 = $24;
  $20 = $104;
  $21 = $107;
  $108 = $21;
  HEAPF32[$__u$i$i1>>2] = $108;
  $109 = HEAP32[$__u$i$i1>>2]|0;
  $22 = $109;
 }
 $110 = $22;
 $hvn3 = $110;
 $111 = $35;
 $112 = ((($111)) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = +HEAPF32[$113>>2];
 $115 = (~~(($114))>>>0);
 $25 = $42;
 $26 = $115;
 $116 = $26;
 $hvt1 = $116;
 $117 = $35;
 $118 = ((($117)) + 4|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ((($119)) + 4|0);
 $121 = +HEAPF32[$120>>2];
 $122 = (~~(($121))>>>0);
 $27 = $43;
 $28 = $122;
 $123 = $28;
 $hvt2 = $123;
 $124 = $hv1;
 $125 = $hv2;
 $126 = $125 << 1;
 $127 = $124 ^ $126;
 $128 = $hv3;
 $129 = $128 << 1;
 $130 = $127 ^ $129;
 $131 = $hvn1;
 $132 = $hvn2;
 $133 = $132 << 1;
 $134 = $131 ^ $133;
 $135 = $hvn3;
 $136 = $135 << 1;
 $137 = $134 ^ $136;
 $138 = $130 ^ $137;
 $139 = $hvt1;
 $140 = $hvt2;
 $141 = $140 << 1;
 $142 = $139 ^ $141;
 $143 = $138 ^ $142;
 STACKTOP = sp;return ($143|0);
}
function __ZeqRK16IndexTargetSliceS1_($lhs,$rhs) {
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lhs;
 $1 = $rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF32[$6>>2];
 $8 = $4 == $7;
 if (!($8)) {
  $78 = 0;
  STACKTOP = sp;return ($78|0);
 }
 $9 = $0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $12 == $16;
 if (!($17)) {
  $78 = 0;
  STACKTOP = sp;return ($78|0);
 }
 $18 = $0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $21 == $25;
 if (!($26)) {
  $78 = 0;
  STACKTOP = sp;return ($78|0);
 }
 $27 = $0;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = +HEAPF32[$29>>2];
 $31 = $1;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = +HEAPF32[$33>>2];
 $35 = $30 == $34;
 if (!($35)) {
  $78 = 0;
  STACKTOP = sp;return ($78|0);
 }
 $36 = $0;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $1;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 4|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $40 == $45;
 if (!($46)) {
  $78 = 0;
  STACKTOP = sp;return ($78|0);
 }
 $47 = $0;
 $48 = ((($47)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 8|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $1;
 $53 = ((($52)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 8|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $51 == $56;
 if (!($57)) {
  $78 = 0;
  STACKTOP = sp;return ($78|0);
 }
 $58 = $0;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = +HEAPF32[$60>>2];
 $62 = $1;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = +HEAPF32[$64>>2];
 $66 = $61 == $65;
 if (!($66)) {
  $78 = 0;
  STACKTOP = sp;return ($78|0);
 }
 $67 = $0;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 4|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $1;
 $73 = ((($72)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($74)) + 4|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $71 == $76;
 $78 = $77;
 STACKTOP = sp;return ($78|0);
}
function __ZNSt3__113unordered_mapI16IndexTargetSlicejNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorINS_4pairIKS1_jEEEEEixERS8_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__i = 0, $__r = 0, $__t$i = 0;
 var $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 48|0;
 $10 = sp + 492|0;
 $34 = sp + 40|0;
 $37 = sp + 535|0;
 $48 = sp + 32|0;
 $51 = sp + 534|0;
 $72 = sp + 24|0;
 $75 = sp + 533|0;
 $86 = sp + 16|0;
 $89 = sp + 532|0;
 $99 = sp + 8|0;
 $102 = sp + 148|0;
 $104 = sp + 140|0;
 $106 = sp + 132|0;
 $108 = sp;
 $109 = sp + 124|0;
 $112 = sp + 112|0;
 $__i = sp + 96|0;
 $116 = sp + 92|0;
 $__h = sp + 80|0;
 $__r = sp + 72|0;
 $117 = sp + 64|0;
 $114 = $this;
 $115 = $__k;
 $120 = $114;
 $121 = $115;
 $110 = $120;
 $111 = $121;
 $122 = $110;
 $123 = $111;
 $124 = (__ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE4findIS2_EENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($122,$123)|0);
 HEAP32[$112>>2] = $124;
 ;HEAP8[$108>>0]=HEAP8[$112>>0]|0;HEAP8[$108+1>>0]=HEAP8[$112+1>>0]|0;HEAP8[$108+2>>0]=HEAP8[$112+2>>0]|0;HEAP8[$108+3>>0]=HEAP8[$112+3>>0]|0;
 $107 = $109;
 $125 = $107;
 ;HEAP32[$125>>2]=HEAP32[$108>>2]|0;
 $126 = HEAP32[$109>>2]|0;
 HEAP32[$__i>>2] = $126;
 $105 = $120;
 $127 = $105;
 $103 = $127;
 $100 = $102;
 $101 = 0;
 $128 = $100;
 $129 = $101;
 HEAP32[$128>>2] = $129;
 $130 = HEAP32[$102>>2]|0;
 HEAP32[$106>>2] = $130;
 ;HEAP8[$99>>0]=HEAP8[$106>>0]|0;HEAP8[$99+1>>0]=HEAP8[$106+1>>0]|0;HEAP8[$99+2>>0]=HEAP8[$106+2>>0]|0;HEAP8[$99+3>>0]=HEAP8[$106+3>>0]|0;
 $98 = $104;
 $131 = $98;
 ;HEAP32[$131>>2]=HEAP32[$99>>2]|0;
 $132 = HEAP32[$104>>2]|0;
 HEAP32[$116>>2] = $132;
 $64 = $__i;
 $65 = $116;
 $133 = $64;
 $134 = $65;
 $62 = $133;
 $63 = $134;
 $135 = $62;
 $136 = $63;
 $60 = $135;
 $61 = $136;
 $137 = $60;
 $138 = HEAP32[$137>>2]|0;
 $139 = $61;
 $140 = HEAP32[$139>>2]|0;
 $141 = ($138|0)==($140|0);
 $142 = $141 ^ 1;
 if ($142) {
  $27 = $__i;
  $143 = $27;
  $26 = $143;
  $144 = $26;
  $145 = HEAP32[$144>>2]|0;
  $146 = ((($145)) + 8|0);
  $25 = $146;
  $147 = $25;
  $24 = $147;
  $148 = $24;
  $23 = $148;
  $149 = $23;
  $22 = $149;
  $150 = $22;
  $151 = ((($150)) + 12|0);
  $113 = $151;
  $273 = $113;
  STACKTOP = sp;return ($273|0);
 }
 $152 = $115;
 __ZNSt3__113unordered_mapI16IndexTargetSlicejNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorINS_4pairIKS1_jEEEEE25__construct_node_with_keyERS8_($__h,$120,$152);
 $2 = $__h;
 $153 = $2;
 $1 = $153;
 $154 = $1;
 $0 = $154;
 $155 = $0;
 $156 = HEAP32[$155>>2]|0;
 __THREW__ = 0;
 invoke_viii(409,($117|0),($120|0),($156|0));
 $157 = __THREW__; __THREW__ = 0;
 $158 = $157&1;
 if ($158) {
  $228 = ___cxa_find_matching_catch_2()|0;
  $229 = tempRet0;
  $118 = $228;
  $119 = $229;
  $97 = $__h;
  $230 = $97;
  $95 = $230;
  $96 = 0;
  $231 = $95;
  $94 = $231;
  $232 = $94;
  $93 = $232;
  $233 = $93;
  $234 = HEAP32[$233>>2]|0;
  $__tmp$i$i = $234;
  $235 = $96;
  $69 = $231;
  $236 = $69;
  $68 = $236;
  $237 = $68;
  HEAP32[$237>>2] = $235;
  $238 = $__tmp$i$i;
  $239 = ($238|0)!=(0|0);
  if (!($239)) {
   $274 = $118;
   $275 = $119;
   ___resumeException($274|0);
   // unreachable;
  }
  $67 = $231;
  $240 = $67;
  $66 = $240;
  $241 = $66;
  $242 = ((($241)) + 4|0);
  $243 = $__tmp$i$i;
  $91 = $242;
  $92 = $243;
  $244 = $91;
  $245 = ((($244)) + 5|0);
  $246 = HEAP8[$245>>0]|0;
  $247 = $246&1;
  if ($247) {
   $248 = HEAP32[$244>>2]|0;
   $249 = $92;
   $250 = ((($249)) + 8|0);
   $251 = ((($250)) + 12|0);
   $90 = $251;
   $252 = $90;
   $87 = $248;
   $88 = $252;
   $253 = $87;
   $254 = $88;
   ;HEAP8[$86>>0]=HEAP8[$89>>0]|0;
   $84 = $253;
   $85 = $254;
  }
  $255 = ((($244)) + 4|0);
  $256 = HEAP8[$255>>0]|0;
  $257 = $256&1;
  if ($257) {
   $258 = HEAP32[$244>>2]|0;
   $259 = $92;
   $260 = ((($259)) + 8|0);
   $76 = $260;
   $261 = $76;
   $73 = $258;
   $74 = $261;
   $262 = $73;
   $263 = $74;
   ;HEAP8[$72>>0]=HEAP8[$75>>0]|0;
   $70 = $262;
   $71 = $263;
  }
  $264 = $92;
  $265 = ($264|0)!=(0|0);
  if (!($265)) {
   $274 = $118;
   $275 = $119;
   ___resumeException($274|0);
   // unreachable;
  }
  $266 = HEAP32[$244>>2]|0;
  $267 = $92;
  $81 = $266;
  $82 = $267;
  $83 = 1;
  $268 = $81;
  $269 = $82;
  $270 = $83;
  $78 = $268;
  $79 = $269;
  $80 = $270;
  $271 = $79;
  $77 = $271;
  $272 = $77;
  __ZdlPv($272);
  $274 = $118;
  $275 = $119;
  ___resumeException($274|0);
  // unreachable;
 } else {
  $7 = $__r;
  $8 = $117;
  $9 = 0;
  $159 = $7;
  $160 = $8;
  $6 = $160;
  $161 = $6;
  ;HEAP32[$10>>2]=HEAP32[$161>>2]|0;
  ;HEAP8[$4>>0]=HEAP8[$10>>0]|0;HEAP8[$4+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$10+3>>0]|0;
  $3 = $159;
  $162 = $3;
  ;HEAP32[$162>>2]=HEAP32[$4>>2]|0;
  $163 = ((($159)) + 4|0);
  $164 = $8;
  $165 = ((($164)) + 4|0);
  $5 = $165;
  $166 = $5;
  $167 = HEAP8[$166>>0]|0;
  $168 = $167&1;
  $169 = $168&1;
  HEAP8[$163>>0] = $169;
  $15 = $__h;
  $170 = $15;
  $14 = $170;
  $171 = $14;
  $13 = $171;
  $172 = $13;
  $173 = HEAP32[$172>>2]|0;
  $__t$i = $173;
  $12 = $170;
  $174 = $12;
  $11 = $174;
  $175 = $11;
  HEAP32[$175>>2] = 0;
  $21 = $__r;
  $176 = $21;
  $20 = $176;
  $177 = $20;
  $178 = HEAP32[$177>>2]|0;
  $179 = ((($178)) + 8|0);
  $19 = $179;
  $180 = $19;
  $18 = $180;
  $181 = $18;
  $17 = $181;
  $182 = $17;
  $16 = $182;
  $183 = $16;
  $184 = ((($183)) + 12|0);
  $113 = $184;
  $59 = $__h;
  $185 = $59;
  $57 = $185;
  $58 = 0;
  $186 = $57;
  $56 = $186;
  $187 = $56;
  $55 = $187;
  $188 = $55;
  $189 = HEAP32[$188>>2]|0;
  $__tmp$i$i1 = $189;
  $190 = $58;
  $31 = $186;
  $191 = $31;
  $30 = $191;
  $192 = $30;
  HEAP32[$192>>2] = $190;
  $193 = $__tmp$i$i1;
  $194 = ($193|0)!=(0|0);
  if (!($194)) {
   $273 = $113;
   STACKTOP = sp;return ($273|0);
  }
  $29 = $186;
  $195 = $29;
  $28 = $195;
  $196 = $28;
  $197 = ((($196)) + 4|0);
  $198 = $__tmp$i$i1;
  $53 = $197;
  $54 = $198;
  $199 = $53;
  $200 = ((($199)) + 5|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&1;
  if ($202) {
   $203 = HEAP32[$199>>2]|0;
   $204 = $54;
   $205 = ((($204)) + 8|0);
   $206 = ((($205)) + 12|0);
   $52 = $206;
   $207 = $52;
   $49 = $203;
   $50 = $207;
   $208 = $49;
   $209 = $50;
   ;HEAP8[$48>>0]=HEAP8[$51>>0]|0;
   $46 = $208;
   $47 = $209;
  }
  $210 = ((($199)) + 4|0);
  $211 = HEAP8[$210>>0]|0;
  $212 = $211&1;
  if ($212) {
   $213 = HEAP32[$199>>2]|0;
   $214 = $54;
   $215 = ((($214)) + 8|0);
   $38 = $215;
   $216 = $38;
   $35 = $213;
   $36 = $216;
   $217 = $35;
   $218 = $36;
   ;HEAP8[$34>>0]=HEAP8[$37>>0]|0;
   $32 = $217;
   $33 = $218;
  }
  $219 = $54;
  $220 = ($219|0)!=(0|0);
  if (!($220)) {
   $273 = $113;
   STACKTOP = sp;return ($273|0);
  }
  $221 = HEAP32[$199>>2]|0;
  $222 = $54;
  $43 = $221;
  $44 = $222;
  $45 = 1;
  $223 = $43;
  $224 = $44;
  $225 = $45;
  $40 = $223;
  $41 = $224;
  $42 = $225;
  $226 = $41;
  $39 = $226;
  $227 = $39;
  __ZdlPv($227);
  $273 = $113;
  STACKTOP = sp;return ($273|0);
 }
 return (0)|0;
}
function __ZNSt3__113unordered_mapI16IndexTargetSlicejNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorINS_4pairIKS1_jEEEEE25__construct_node_with_keyERS8_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp + 56|0;
 $17 = sp + 555|0;
 $29 = sp + 48|0;
 $32 = sp + 554|0;
 $42 = sp + 396|0;
 $43 = sp + 40|0;
 $46 = sp + 384|0;
 $47 = sp + 376|0;
 $48 = sp + 32|0;
 $59 = sp + 320|0;
 $64 = sp + 300|0;
 $65 = sp + 24|0;
 $68 = sp + 288|0;
 $69 = sp + 280|0;
 $70 = sp + 16|0;
 $75 = sp + 256|0;
 $82 = sp + 8|0;
 $85 = sp + 553|0;
 $96 = sp;
 $99 = sp + 552|0;
 $__h = sp + 72|0;
 $121 = sp + 64|0;
 $119 = $this;
 $120 = $__k;
 $122 = $119;
 $118 = $122;
 $123 = $118;
 $124 = ((($123)) + 8|0);
 $117 = $124;
 $125 = $117;
 $116 = $125;
 $126 = $116;
 $__na = $126;
 $127 = $__na;
 $114 = $127;
 $115 = 1;
 $128 = $114;
 $129 = $115;
 $111 = $128;
 $112 = $129;
 $113 = 0;
 $130 = $112;
 $131 = ($130*24)|0;
 $110 = $131;
 $132 = $110;
 $133 = (__Znwj($132)|0);
 $134 = $__na;
 $108 = $121;
 $109 = $134;
 $135 = $108;
 $136 = $109;
 HEAP32[$135>>2] = $136;
 $137 = ((($135)) + 4|0);
 HEAP8[$137>>0] = 0;
 $138 = ((($135)) + 5|0);
 HEAP8[$138>>0] = 0;
 $72 = $__h;
 $73 = $133;
 $74 = $121;
 $139 = $72;
 $140 = $73;
 $141 = $74;
 $71 = $141;
 $142 = $71;
 ;HEAP32[$75>>2]=HEAP32[$142>>2]|0;HEAP32[$75+4>>2]=HEAP32[$142+4>>2]|0;
 ;HEAP8[$70>>0]=HEAP8[$75>>0]|0;HEAP8[$70+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$70+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$70+3>>0]=HEAP8[$75+3>>0]|0;HEAP8[$70+4>>0]=HEAP8[$75+4>>0]|0;HEAP8[$70+5>>0]=HEAP8[$75+5>>0]|0;HEAP8[$70+6>>0]=HEAP8[$75+6>>0]|0;HEAP8[$70+7>>0]=HEAP8[$75+7>>0]|0;
 $67 = $139;
 HEAP32[$68>>2] = $140;
 $143 = $67;
 $66 = $68;
 $144 = $66;
 $145 = HEAP32[$144>>2]|0;
 $60 = $70;
 $146 = $60;
 ;HEAP32[$69>>2]=HEAP32[$146>>2]|0;HEAP32[$69+4>>2]=HEAP32[$146+4>>2]|0;
 ;HEAP8[$65>>0]=HEAP8[$69>>0]|0;HEAP8[$65+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$69+3>>0]|0;HEAP8[$65+4>>0]=HEAP8[$69+4>>0]|0;HEAP8[$65+5>>0]=HEAP8[$69+5>>0]|0;HEAP8[$65+6>>0]=HEAP8[$69+6>>0]|0;HEAP8[$65+7>>0]=HEAP8[$69+7>>0]|0;
 $63 = $143;
 HEAP32[$64>>2] = $145;
 $147 = $63;
 $62 = $64;
 $148 = $62;
 $149 = HEAP32[$148>>2]|0;
 HEAP32[$147>>2] = $149;
 $150 = ((($147)) + 4|0);
 $61 = $65;
 $151 = $61;
 ;HEAP32[$150>>2]=HEAP32[$151>>2]|0;HEAP32[$150+4>>2]=HEAP32[$151+4>>2]|0;
 $152 = $__na;
 $2 = $__h;
 $153 = $2;
 $1 = $153;
 $154 = $1;
 $0 = $154;
 $155 = $0;
 $156 = HEAP32[$155>>2]|0;
 $157 = ((($156)) + 8|0);
 $3 = $157;
 $158 = $3;
 $159 = $120;
 $14 = $152;
 $15 = $158;
 $16 = $159;
 $160 = $14;
 $161 = $15;
 $162 = $16;
 $13 = $162;
 $163 = $13;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 $9 = $160;
 $10 = $161;
 $11 = $163;
 $164 = $9;
 $165 = $10;
 $166 = $11;
 $8 = $166;
 $167 = $8;
 $5 = $164;
 $6 = $165;
 $7 = $167;
 $168 = $6;
 $169 = $7;
 $4 = $169;
 $170 = $4;
 ;HEAP32[$168>>2]=HEAP32[$170>>2]|0;HEAP32[$168+4>>2]=HEAP32[$170+4>>2]|0;HEAP32[$168+8>>2]=HEAP32[$170+8>>2]|0;
 $20 = $__h;
 $171 = $20;
 $19 = $171;
 $172 = $19;
 $18 = $172;
 $173 = $18;
 $174 = ((($173)) + 4|0);
 $175 = ((($174)) + 4|0);
 HEAP8[$175>>0] = 1;
 $176 = $__na;
 $23 = $__h;
 $177 = $23;
 $22 = $177;
 $178 = $22;
 $21 = $178;
 $179 = $21;
 $180 = HEAP32[$179>>2]|0;
 $181 = ((($180)) + 8|0);
 $182 = ((($181)) + 12|0);
 $24 = $182;
 $183 = $24;
 $30 = $176;
 $31 = $183;
 $184 = $30;
 $185 = $31;
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $184;
 $28 = $185;
 $186 = $27;
 $187 = $28;
 $25 = $186;
 $26 = $187;
 $188 = $26;
 HEAP32[$188>>2] = 0;
 $35 = $__h;
 $189 = $35;
 $34 = $189;
 $190 = $34;
 $33 = $190;
 $191 = $33;
 $192 = ((($191)) + 4|0);
 $193 = ((($192)) + 5|0);
 HEAP8[$193>>0] = 1;
 $36 = $__h;
 $194 = $36;
 $57 = $agg$result;
 $58 = $194;
 $195 = $57;
 $196 = $58;
 $56 = $196;
 $197 = $56;
 $55 = $197;
 $198 = $55;
 $54 = $198;
 $199 = $54;
 $200 = HEAP32[$199>>2]|0;
 $__t$i$i = $200;
 $53 = $197;
 $201 = $53;
 $52 = $201;
 $202 = $52;
 HEAP32[$202>>2] = 0;
 $203 = $__t$i$i;
 $204 = $58;
 $51 = $204;
 $205 = $51;
 $50 = $205;
 $206 = $50;
 $49 = $206;
 $207 = $49;
 $208 = ((($207)) + 4|0);
 $37 = $208;
 $209 = $37;
 ;HEAP32[$59>>2]=HEAP32[$209>>2]|0;HEAP32[$59+4>>2]=HEAP32[$209+4>>2]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;HEAP8[$48+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$59+3>>0]|0;HEAP8[$48+4>>0]=HEAP8[$59+4>>0]|0;HEAP8[$48+5>>0]=HEAP8[$59+5>>0]|0;HEAP8[$48+6>>0]=HEAP8[$59+6>>0]|0;HEAP8[$48+7>>0]=HEAP8[$59+7>>0]|0;
 $45 = $195;
 HEAP32[$46>>2] = $203;
 $210 = $45;
 $44 = $46;
 $211 = $44;
 $212 = HEAP32[$211>>2]|0;
 $38 = $48;
 $213 = $38;
 ;HEAP32[$47>>2]=HEAP32[$213>>2]|0;HEAP32[$47+4>>2]=HEAP32[$213+4>>2]|0;
 ;HEAP8[$43>>0]=HEAP8[$47>>0]|0;HEAP8[$43+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$43+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$43+3>>0]=HEAP8[$47+3>>0]|0;HEAP8[$43+4>>0]=HEAP8[$47+4>>0]|0;HEAP8[$43+5>>0]=HEAP8[$47+5>>0]|0;HEAP8[$43+6>>0]=HEAP8[$47+6>>0]|0;HEAP8[$43+7>>0]=HEAP8[$47+7>>0]|0;
 $41 = $210;
 HEAP32[$42>>2] = $212;
 $214 = $41;
 $40 = $42;
 $215 = $40;
 $216 = HEAP32[$215>>2]|0;
 HEAP32[$214>>2] = $216;
 $217 = ((($214)) + 4|0);
 $39 = $43;
 $218 = $39;
 ;HEAP32[$217>>2]=HEAP32[$218>>2]|0;HEAP32[$217+4>>2]=HEAP32[$218+4>>2]|0;
 $107 = $__h;
 $219 = $107;
 $105 = $219;
 $106 = 0;
 $220 = $105;
 $104 = $220;
 $221 = $104;
 $103 = $221;
 $222 = $103;
 $223 = HEAP32[$222>>2]|0;
 $__tmp$i$i1 = $223;
 $224 = $106;
 $79 = $220;
 $225 = $79;
 $78 = $225;
 $226 = $78;
 HEAP32[$226>>2] = $224;
 $227 = $__tmp$i$i1;
 $228 = ($227|0)!=(0|0);
 if (!($228)) {
  STACKTOP = sp;return;
 }
 $77 = $220;
 $229 = $77;
 $76 = $229;
 $230 = $76;
 $231 = ((($230)) + 4|0);
 $232 = $__tmp$i$i1;
 $101 = $231;
 $102 = $232;
 $233 = $101;
 $234 = ((($233)) + 5|0);
 $235 = HEAP8[$234>>0]|0;
 $236 = $235&1;
 if ($236) {
  $237 = HEAP32[$233>>2]|0;
  $238 = $102;
  $239 = ((($238)) + 8|0);
  $240 = ((($239)) + 12|0);
  $100 = $240;
  $241 = $100;
  $97 = $237;
  $98 = $241;
  $242 = $97;
  $243 = $98;
  ;HEAP8[$96>>0]=HEAP8[$99>>0]|0;
  $94 = $242;
  $95 = $243;
 }
 $244 = ((($233)) + 4|0);
 $245 = HEAP8[$244>>0]|0;
 $246 = $245&1;
 if ($246) {
  $247 = HEAP32[$233>>2]|0;
  $248 = $102;
  $249 = ((($248)) + 8|0);
  $86 = $249;
  $250 = $86;
  $83 = $247;
  $84 = $250;
  $251 = $83;
  $252 = $84;
  ;HEAP8[$82>>0]=HEAP8[$85>>0]|0;
  $80 = $251;
  $81 = $252;
 }
 $253 = $102;
 $254 = ($253|0)!=(0|0);
 if (!($254)) {
  STACKTOP = sp;return;
 }
 $255 = HEAP32[$233>>2]|0;
 $256 = $102;
 $91 = $255;
 $92 = $256;
 $93 = 1;
 $257 = $91;
 $258 = $92;
 $259 = $93;
 $88 = $257;
 $89 = $258;
 $90 = $259;
 $260 = $89;
 $87 = $260;
 $261 = $87;
 __ZdlPv($261);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS3_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__ndptr = 0, $__pn = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $36 = sp;
 $39 = sp + 389|0;
 $__inserted = sp + 388|0;
 $91 = sp + 16|0;
 $92 = sp + 12|0;
 $93 = sp + 4|0;
 $89 = $this;
 $90 = $__nd;
 $94 = $89;
 $88 = $94;
 $95 = $88;
 $96 = ((($95)) + 12|0);
 $87 = $96;
 $97 = $87;
 $86 = $97;
 $98 = $86;
 $99 = $90;
 $100 = ((($99)) + 8|0);
 $47 = $98;
 $48 = $100;
 $101 = $47;
 $102 = $48;
 $103 = (__ZNKSt3__14hashI16IndexTargetSliceEclERKS1_($101,$102)|0);
 $104 = $90;
 $105 = ((($104)) + 4|0);
 HEAP32[$105>>2] = $103;
 $46 = $94;
 $106 = $46;
 $45 = $106;
 $107 = $45;
 $44 = $107;
 $108 = $44;
 $43 = $108;
 $109 = $43;
 $110 = ((($109)) + 4|0);
 $42 = $110;
 $111 = $42;
 $41 = $111;
 $112 = $41;
 $40 = $112;
 $113 = $40;
 $114 = HEAP32[$113>>2]|0;
 $__bc = $114;
 HEAP8[$__inserted>>0] = 0;
 $115 = $__bc;
 $116 = ($115|0)!=(0);
 L1: do {
  if ($116) {
   $117 = $90;
   $118 = ((($117)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $__bc;
   $28 = $119;
   $29 = $120;
   $121 = $29;
   $122 = $29;
   $123 = (($122) - 1)|0;
   $124 = $121 & $123;
   $125 = ($124|0)!=(0);
   $126 = $28;
   $127 = $29;
   if ($125) {
    $130 = (($126>>>0) % ($127>>>0))&-1;
    $131 = $130;
   } else {
    $128 = (($127) - 1)|0;
    $129 = $126 & $128;
    $131 = $129;
   }
   $__chash = $131;
   $132 = $__chash;
   $7 = $94;
   $8 = $132;
   $133 = $7;
   $134 = $8;
   $6 = $133;
   $135 = $6;
   $5 = $135;
   $136 = $5;
   $137 = HEAP32[$136>>2]|0;
   $138 = (($137) + ($134<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $__ndptr = $139;
   $140 = $__ndptr;
   $141 = ($140|0)!=(0|0);
   if ($141) {
    $142 = $__ndptr;
    $143 = HEAP32[$142>>2]|0;
    $__ndptr = $143;
    while(1) {
     $144 = $__ndptr;
     $145 = ($144|0)!=(0|0);
     if (!($145)) {
      break L1;
     }
     $146 = $__ndptr;
     $147 = ((($146)) + 4|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $__bc;
     $0 = $148;
     $1 = $149;
     $150 = $1;
     $151 = $1;
     $152 = (($151) - 1)|0;
     $153 = $150 & $152;
     $154 = ($153|0)!=(0);
     $155 = $0;
     $156 = $1;
     if ($154) {
      $159 = (($155>>>0) % ($156>>>0))&-1;
      $161 = $159;
     } else {
      $157 = (($156) - 1)|0;
      $158 = $155 & $157;
      $161 = $158;
     }
     $160 = $__chash;
     $162 = ($161|0)==($160|0);
     if (!($162)) {
      break L1;
     }
     $4 = $94;
     $163 = $4;
     $164 = ((($163)) + 16|0);
     $3 = $164;
     $165 = $3;
     $2 = $165;
     $166 = $2;
     $167 = $__ndptr;
     $168 = ((($167)) + 8|0);
     $169 = $90;
     $170 = ((($169)) + 8|0);
     $12 = $166;
     $13 = $168;
     $14 = $170;
     $171 = $12;
     $172 = $13;
     $173 = $14;
     $9 = $171;
     $10 = $172;
     $11 = $173;
     $174 = $10;
     $175 = $11;
     $176 = (__ZeqRK16IndexTargetSliceS1_($174,$175)|0);
     if ($176) {
      break;
     }
     $177 = $__ndptr;
     $178 = HEAP32[$177>>2]|0;
     $__ndptr = $178;
    }
    $331 = $__ndptr;
    $79 = $93;
    $80 = $331;
    $332 = $79;
    $333 = $80;
    HEAP32[$332>>2] = $333;
    $83 = $agg$result;
    $84 = $93;
    $85 = $__inserted;
    $334 = $83;
    $335 = $84;
    $82 = $335;
    $336 = $82;
    ;HEAP32[$334>>2]=HEAP32[$336>>2]|0;
    $337 = ((($334)) + 4|0);
    $338 = $85;
    $81 = $338;
    $339 = $81;
    $340 = HEAP8[$339>>0]|0;
    $341 = $340&1;
    $342 = $341&1;
    HEAP8[$337>>0] = $342;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $17 = $94;
 $179 = $17;
 $180 = ((($179)) + 12|0);
 $16 = $180;
 $181 = $16;
 $15 = $181;
 $182 = $15;
 $183 = HEAP32[$182>>2]|0;
 $184 = (($183) + 1)|0;
 $185 = (+($184>>>0));
 $186 = $__bc;
 $187 = (+($186>>>0));
 $20 = $94;
 $188 = $20;
 $189 = ((($188)) + 16|0);
 $19 = $189;
 $190 = $19;
 $18 = $190;
 $191 = $18;
 $192 = +HEAPF32[$191>>2];
 $193 = $187 * $192;
 $194 = $185 > $193;
 $195 = $__bc;
 $196 = ($195|0)==(0);
 $or$cond = $194 | $196;
 if ($or$cond) {
  $197 = $__bc;
  $198 = $197<<1;
  $199 = $__bc;
  $21 = $199;
  $200 = $21;
  $201 = ($200>>>0)>(2);
  if ($201) {
   $202 = $21;
   $203 = $21;
   $204 = (($203) - 1)|0;
   $205 = $202 & $204;
   $206 = ($205|0)!=(0);
   $207 = $206 ^ 1;
   $209 = $207;
  } else {
   $209 = 0;
  }
  $208 = $209 ^ 1;
  $210 = $208&1;
  $211 = (($198) + ($210))|0;
  HEAP32[$91>>2] = $211;
  $24 = $94;
  $212 = $24;
  $213 = ((($212)) + 12|0);
  $23 = $213;
  $214 = $23;
  $22 = $214;
  $215 = $22;
  $216 = HEAP32[$215>>2]|0;
  $217 = (($216) + 1)|0;
  $218 = (+($217>>>0));
  $27 = $94;
  $219 = $27;
  $220 = ((($219)) + 16|0);
  $26 = $220;
  $221 = $26;
  $25 = $221;
  $222 = $25;
  $223 = +HEAPF32[$222>>2];
  $224 = $218 / $223;
  $30 = $224;
  $225 = $30;
  $226 = (+Math_ceil((+$225)));
  $227 = (~~(($226))>>>0);
  HEAP32[$92>>2] = $227;
  $37 = $91;
  $38 = $92;
  $228 = $37;
  $229 = $38;
  ;HEAP8[$36>>0]=HEAP8[$39>>0]|0;
  $34 = $228;
  $35 = $229;
  $230 = $34;
  $231 = $35;
  $31 = $36;
  $32 = $230;
  $33 = $231;
  $232 = $32;
  $233 = HEAP32[$232>>2]|0;
  $234 = $33;
  $235 = HEAP32[$234>>2]|0;
  $236 = ($233>>>0)<($235>>>0);
  $237 = $35;
  $238 = $34;
  $239 = $236 ? $237 : $238;
  $240 = HEAP32[$239>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE6rehashEj($94,$240);
  $55 = $94;
  $241 = $55;
  $54 = $241;
  $242 = $54;
  $53 = $242;
  $243 = $53;
  $52 = $243;
  $244 = $52;
  $245 = ((($244)) + 4|0);
  $51 = $245;
  $246 = $51;
  $50 = $246;
  $247 = $50;
  $49 = $247;
  $248 = $49;
  $249 = HEAP32[$248>>2]|0;
  $__bc = $249;
  $250 = $90;
  $251 = ((($250)) + 4|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $__bc;
  $56 = $252;
  $57 = $253;
  $254 = $57;
  $255 = $57;
  $256 = (($255) - 1)|0;
  $257 = $254 & $256;
  $258 = ($257|0)!=(0);
  $259 = $56;
  $260 = $57;
  if ($258) {
   $263 = (($259>>>0) % ($260>>>0))&-1;
   $264 = $263;
  } else {
   $261 = (($260) - 1)|0;
   $262 = $259 & $261;
   $264 = $262;
  }
  $__chash = $264;
 }
 $265 = $__chash;
 $60 = $94;
 $61 = $265;
 $266 = $60;
 $267 = $61;
 $59 = $266;
 $268 = $59;
 $58 = $268;
 $269 = $58;
 $270 = HEAP32[$269>>2]|0;
 $271 = (($270) + ($267<<2)|0);
 $272 = HEAP32[$271>>2]|0;
 $__pn = $272;
 $273 = $__pn;
 $274 = ($273|0)==(0|0);
 if ($274) {
  $275 = ((($94)) + 8|0);
  $63 = $275;
  $276 = $63;
  $62 = $276;
  $277 = $62;
  $65 = $277;
  $278 = $65;
  $64 = $278;
  $279 = $64;
  $__pn = $279;
  $280 = $__pn;
  $281 = HEAP32[$280>>2]|0;
  $282 = $90;
  HEAP32[$282>>2] = $281;
  $283 = $90;
  $284 = $__pn;
  HEAP32[$284>>2] = $283;
  $285 = $__pn;
  $286 = $__chash;
  $68 = $94;
  $69 = $286;
  $287 = $68;
  $288 = $69;
  $67 = $287;
  $289 = $67;
  $66 = $289;
  $290 = $66;
  $291 = HEAP32[$290>>2]|0;
  $292 = (($291) + ($288<<2)|0);
  HEAP32[$292>>2] = $285;
  $293 = $90;
  $294 = HEAP32[$293>>2]|0;
  $295 = ($294|0)!=(0|0);
  if ($295) {
   $296 = $90;
   $297 = $90;
   $298 = HEAP32[$297>>2]|0;
   $299 = ((($298)) + 4|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = $__bc;
   $70 = $300;
   $71 = $301;
   $302 = $71;
   $303 = $71;
   $304 = (($303) - 1)|0;
   $305 = $302 & $304;
   $306 = ($305|0)!=(0);
   $307 = $70;
   $308 = $71;
   if ($306) {
    $311 = (($307>>>0) % ($308>>>0))&-1;
    $312 = $311;
   } else {
    $309 = (($308) - 1)|0;
    $310 = $307 & $309;
    $312 = $310;
   }
   $74 = $94;
   $75 = $312;
   $313 = $74;
   $314 = $75;
   $73 = $313;
   $315 = $73;
   $72 = $315;
   $316 = $72;
   $317 = HEAP32[$316>>2]|0;
   $318 = (($317) + ($314<<2)|0);
   HEAP32[$318>>2] = $296;
  }
 } else {
  $319 = $__pn;
  $320 = HEAP32[$319>>2]|0;
  $321 = $90;
  HEAP32[$321>>2] = $320;
  $322 = $90;
  $323 = $__pn;
  HEAP32[$323>>2] = $322;
 }
 $324 = $90;
 $__ndptr = $324;
 $78 = $94;
 $325 = $78;
 $326 = ((($325)) + 12|0);
 $77 = $326;
 $327 = $77;
 $76 = $327;
 $328 = $76;
 $329 = HEAP32[$328>>2]|0;
 $330 = (($329) + 1)|0;
 HEAP32[$328>>2] = $330;
 HEAP8[$__inserted>>0] = 1;
 $331 = $__ndptr;
 $79 = $93;
 $80 = $331;
 $332 = $79;
 $333 = $80;
 HEAP32[$332>>2] = $333;
 $83 = $agg$result;
 $84 = $93;
 $85 = $__inserted;
 $334 = $83;
 $335 = $84;
 $82 = $335;
 $336 = $82;
 ;HEAP32[$334>>2]=HEAP32[$336>>2]|0;
 $337 = ((($334)) + 4|0);
 $338 = $85;
 $81 = $338;
 $339 = $81;
 $340 = HEAP8[$339>>0]|0;
 $341 = $340&1;
 $342 = $341&1;
 HEAP8[$337>>0] = $342;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 12|0;
 $35 = sp + 4|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = ((($49)) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 $58 = HEAP32[$34>>2]|0;
 if ($57) {
  __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = $__bc;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $__bc;
 $25 = $61;
 $62 = $25;
 $63 = ($62>>>0)>(2);
 if ($63) {
  $64 = $25;
  $65 = $25;
  $66 = (($65) - 1)|0;
  $67 = $64 & $66;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if ($69) {
   $14 = $36;
   $70 = $14;
   $71 = ((($70)) + 12|0);
   $13 = $71;
   $72 = $13;
   $12 = $72;
   $73 = $12;
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $2 = $36;
   $76 = $2;
   $77 = ((($76)) + 16|0);
   $1 = $77;
   $78 = $1;
   $0 = $78;
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $75 / $80;
   $3 = $81;
   $82 = $3;
   $83 = (+Math_ceil((+$82)));
   $84 = (~~(($83))>>>0);
   $5 = $84;
   $85 = $5;
   $86 = (($85) - 1)|0;
   $4 = $86;
   $87 = $4;
   $88 = (Math_clz32(($87|0))|0);
   $89 = (32 - ($88))|0;
   $90 = 1 << $89;
   $107 = $90;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $8 = $36;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $7 = $92;
  $93 = $7;
  $6 = $93;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95>>>0));
  $11 = $36;
  $97 = $11;
  $98 = ((($97)) + 16|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  $101 = +HEAPF32[$100>>2];
  $102 = $96 / $101;
  $15 = $102;
  $103 = $15;
  $104 = (+Math_ceil((+$103)));
  $105 = (~~(($104))>>>0);
  $106 = (__ZNSt3__112__next_primeEj($105)|0);
  $107 = $106;
 }
 HEAP32[$35>>2] = $107;
 $22 = $34;
 $23 = $35;
 $108 = $22;
 $109 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $108;
 $20 = $109;
 $110 = $19;
 $111 = $20;
 $16 = $21;
 $17 = $110;
 $18 = $111;
 $112 = $17;
 $113 = HEAP32[$112>>2]|0;
 $114 = $18;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)<($115>>>0);
 $117 = $20;
 $118 = $19;
 $119 = $116 ? $117 : $118;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$34>>2] = $120;
 $121 = HEAP32[$34>>2]|0;
 $122 = $__bc;
 $123 = ($121>>>0)<($122>>>0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$34>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE8__rehashEj($36,$124);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0;
 var $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $82 = $this;
 $83 = $__nbc;
 $84 = $82;
 $81 = $84;
 $85 = $81;
 $80 = $85;
 $86 = $80;
 $79 = $86;
 $87 = $79;
 $88 = ((($87)) + 4|0);
 $64 = $88;
 $89 = $64;
 $63 = $89;
 $90 = $63;
 $62 = $90;
 $91 = $62;
 $__npa = $91;
 $92 = $83;
 $93 = ($92>>>0)>(0);
 if ($93) {
  $94 = $__npa;
  $95 = $83;
  $4 = $94;
  $5 = $95;
  $96 = $4;
  $97 = $5;
  $1 = $96;
  $2 = $97;
  $3 = 0;
  $98 = $2;
  $99 = $98<<2;
  $0 = $99;
  $100 = $0;
  $101 = (__Znwj($100)|0);
  $102 = $101;
 } else {
  $102 = 0;
 }
 $27 = $84;
 $28 = $102;
 $103 = $27;
 $26 = $103;
 $104 = $26;
 $25 = $104;
 $105 = $25;
 $106 = HEAP32[$105>>2]|0;
 $__tmp$i = $106;
 $107 = $28;
 $9 = $103;
 $108 = $9;
 $8 = $108;
 $109 = $8;
 HEAP32[$109>>2] = $107;
 $110 = $__tmp$i;
 $111 = ($110|0)!=(0|0);
 if ($111) {
  $7 = $103;
  $112 = $7;
  $6 = $112;
  $113 = $6;
  $114 = ((($113)) + 4|0);
  $115 = $__tmp$i;
  $23 = $114;
  $24 = $115;
  $116 = $23;
  $22 = $116;
  $117 = $22;
  $21 = $117;
  $118 = $21;
  $20 = $118;
  $119 = $20;
  $120 = $24;
  $12 = $116;
  $121 = $12;
  $11 = $121;
  $122 = $11;
  $10 = $122;
  $123 = $10;
  $124 = HEAP32[$123>>2]|0;
  $17 = $119;
  $18 = $120;
  $19 = $124;
  $125 = $17;
  $126 = $18;
  $127 = $19;
  $14 = $125;
  $15 = $126;
  $16 = $127;
  $128 = $15;
  $13 = $128;
  $129 = $13;
  __ZdlPv($129);
 }
 $130 = $83;
 $31 = $84;
 $131 = $31;
 $30 = $131;
 $132 = $30;
 $29 = $132;
 $133 = $29;
 $134 = ((($133)) + 4|0);
 $34 = $134;
 $135 = $34;
 $33 = $135;
 $136 = $33;
 $32 = $136;
 $137 = $32;
 HEAP32[$137>>2] = $130;
 $138 = $83;
 $139 = ($138>>>0)>(0);
 if (!($139)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $140 = $__i;
  $141 = $83;
  $142 = ($140>>>0)<($141>>>0);
  if (!($142)) {
   break;
  }
  $143 = $__i;
  $37 = $84;
  $38 = $143;
  $144 = $37;
  $145 = $38;
  $36 = $144;
  $146 = $36;
  $35 = $146;
  $147 = $35;
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + ($145<<2)|0);
  HEAP32[$149>>2] = 0;
  $150 = $__i;
  $151 = (($150) + 1)|0;
  $__i = $151;
 }
 $152 = ((($84)) + 8|0);
 $40 = $152;
 $153 = $40;
 $39 = $153;
 $154 = $39;
 $42 = $154;
 $155 = $42;
 $41 = $155;
 $156 = $41;
 $__pp = $156;
 $157 = $__pp;
 $158 = HEAP32[$157>>2]|0;
 $__cp = $158;
 $159 = $__cp;
 $160 = ($159|0)!=(0|0);
 if (!($160)) {
  STACKTOP = sp;return;
 }
 $161 = $__cp;
 $162 = ((($161)) + 4|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = $83;
 $43 = $163;
 $44 = $164;
 $165 = $44;
 $166 = $44;
 $167 = (($166) - 1)|0;
 $168 = $165 & $167;
 $169 = ($168|0)!=(0);
 $170 = $43;
 $171 = $44;
 if ($169) {
  $174 = (($170>>>0) % ($171>>>0))&-1;
  $175 = $174;
 } else {
  $172 = (($171) - 1)|0;
  $173 = $170 & $172;
  $175 = $173;
 }
 $__chash = $175;
 $176 = $__pp;
 $177 = $__chash;
 $47 = $84;
 $48 = $177;
 $178 = $47;
 $179 = $48;
 $46 = $178;
 $180 = $46;
 $45 = $180;
 $181 = $45;
 $182 = HEAP32[$181>>2]|0;
 $183 = (($182) + ($179<<2)|0);
 HEAP32[$183>>2] = $176;
 $184 = $__chash;
 $__phash = $184;
 $185 = $__cp;
 $__pp = $185;
 $186 = $__cp;
 $187 = HEAP32[$186>>2]|0;
 $__cp = $187;
 while(1) {
  $188 = $__cp;
  $189 = ($188|0)!=(0|0);
  if (!($189)) {
   break;
  }
  $190 = $__cp;
  $191 = ((($190)) + 4|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $83;
  $49 = $192;
  $50 = $193;
  $194 = $50;
  $195 = $50;
  $196 = (($195) - 1)|0;
  $197 = $194 & $196;
  $198 = ($197|0)!=(0);
  $199 = $49;
  $200 = $50;
  if ($198) {
   $203 = (($199>>>0) % ($200>>>0))&-1;
   $204 = $203;
  } else {
   $201 = (($200) - 1)|0;
   $202 = $199 & $201;
   $204 = $202;
  }
  $__chash = $204;
  $205 = $__chash;
  $206 = $__phash;
  $207 = ($205|0)==($206|0);
  do {
   if ($207) {
    $208 = $__cp;
    $__pp = $208;
   } else {
    $209 = $__chash;
    $53 = $84;
    $54 = $209;
    $210 = $53;
    $211 = $54;
    $52 = $210;
    $212 = $52;
    $51 = $212;
    $213 = $51;
    $214 = HEAP32[$213>>2]|0;
    $215 = (($214) + ($211<<2)|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ($216|0)==(0|0);
    if ($217) {
     $218 = $__pp;
     $219 = $__chash;
     $57 = $84;
     $58 = $219;
     $220 = $57;
     $221 = $58;
     $56 = $220;
     $222 = $56;
     $55 = $222;
     $223 = $55;
     $224 = HEAP32[$223>>2]|0;
     $225 = (($224) + ($221<<2)|0);
     HEAP32[$225>>2] = $218;
     $226 = $__cp;
     $__pp = $226;
     $227 = $__chash;
     $__phash = $227;
     break;
    }
    $228 = $__cp;
    $__np = $228;
    while(1) {
     $229 = $__np;
     $230 = HEAP32[$229>>2]|0;
     $231 = ($230|0)!=(0|0);
     if (!($231)) {
      break;
     }
     $61 = $84;
     $232 = $61;
     $233 = ((($232)) + 16|0);
     $60 = $233;
     $234 = $60;
     $59 = $234;
     $235 = $59;
     $236 = $__cp;
     $237 = ((($236)) + 8|0);
     $238 = $__np;
     $239 = HEAP32[$238>>2]|0;
     $240 = ((($239)) + 8|0);
     $68 = $235;
     $69 = $237;
     $70 = $240;
     $241 = $68;
     $242 = $69;
     $243 = $70;
     $65 = $241;
     $66 = $242;
     $67 = $243;
     $244 = $66;
     $245 = $67;
     $246 = (__ZeqRK16IndexTargetSliceS1_($244,$245)|0);
     if (!($246)) {
      break;
     }
     $247 = $__np;
     $248 = HEAP32[$247>>2]|0;
     $__np = $248;
    }
    $249 = $__np;
    $250 = HEAP32[$249>>2]|0;
    $251 = $__pp;
    HEAP32[$251>>2] = $250;
    $252 = $__chash;
    $73 = $84;
    $74 = $252;
    $253 = $73;
    $254 = $74;
    $72 = $253;
    $255 = $72;
    $71 = $255;
    $256 = $71;
    $257 = HEAP32[$256>>2]|0;
    $258 = (($257) + ($254<<2)|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = HEAP32[$259>>2]|0;
    $261 = $__np;
    HEAP32[$261>>2] = $260;
    $262 = $__cp;
    $263 = $__chash;
    $77 = $84;
    $78 = $263;
    $264 = $77;
    $265 = $78;
    $76 = $264;
    $266 = $76;
    $75 = $266;
    $267 = $75;
    $268 = HEAP32[$267>>2]|0;
    $269 = (($268) + ($265<<2)|0);
    $270 = HEAP32[$269>>2]|0;
    HEAP32[$270>>2] = $262;
   }
  } while(0);
  $271 = $__pp;
  $272 = HEAP32[$271>>2]|0;
  $__cp = $272;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIRKjEEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$118>>2] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 4|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(407,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch_2()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 32)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 32)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 32)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferI15VertexStructureRNS_9allocatorIS1_EEEC2EjjS4_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 ;HEAP32[$118>>2]=HEAP32[$120>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$120+8>>2]|0;HEAP32[$118+12>>2]=HEAP32[$120+12>>2]|0;HEAP32[$118+16>>2]=HEAP32[$120+16>>2]|0;HEAP32[$118+20>>2]=HEAP32[$120+20>>2]|0;HEAP32[$118+24>>2]=HEAP32[$120+24>>2]|0;HEAP32[$118+28>>2]=HEAP32[$120+28>>2]|0;
 $121 = ((($__v)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 32|0);
 HEAP32[$121>>2] = $123;
 __THREW__ = 0;
 invoke_vii(408,($43|0),($__v|0));
 $124 = __THREW__; __THREW__ = 0;
 $125 = $124&1;
 if ($125) {
  $126 = ___cxa_find_matching_catch_2()|0;
  $127 = tempRet0;
  $41 = $126;
  $42 = $127;
  __ZNSt3__114__split_bufferI15VertexStructureRNS_9allocatorIS1_EEED2Ev($__v);
  $128 = $41;
  $129 = $42;
  ___resumeException($128|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferI15VertexStructureRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 134217727;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZN9ObjMaster8Material13fetchRGBParamERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$mtlLine) {
 $agg$result = $agg$result|0;
 $mtlLine = $mtlLine|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0.0, $bStr = 0, $copy = 0;
 var $g = 0.0, $gStr = 0, $key = 0, $r = 0.0, $rStr = 0, $savePtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 164|0;
 $10 = sp + 152|0;
 $16 = sp;
 $savePtr = sp + 60|0;
 $33 = sp + 24|0;
 $34 = sp + 8|0;
 $32 = $mtlLine;
 $35 = $32;
 $31 = $35;
 $36 = $31;
 $30 = $36;
 $37 = $30;
 $29 = $37;
 $38 = $29;
 $28 = $38;
 $39 = $28;
 $27 = $39;
 $40 = $27;
 $26 = $40;
 $41 = $26;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 & 1;
 $45 = ($44|0)!=(0);
 if ($45) {
  $20 = $38;
  $46 = $20;
  $19 = $46;
  $47 = $19;
  $18 = $47;
  $48 = $18;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $57 = $50;
 } else {
  $25 = $38;
  $51 = $25;
  $24 = $51;
  $52 = $24;
  $23 = $52;
  $53 = $23;
  $54 = ((($53)) + 1|0);
  $22 = $54;
  $55 = $22;
  $21 = $55;
  $56 = $21;
  $57 = $56;
 }
 $17 = $57;
 $58 = $17;
 $59 = (___strdup($58)|0);
 $copy = $59;
 $60 = $copy;
 $61 = HEAP32[430]|0;
 $62 = (_strtok_r($60,$61,$savePtr)|0);
 $key = $62;
 $63 = HEAP32[430]|0;
 $64 = (_strtok_r(0,$63,$savePtr)|0);
 $rStr = $64;
 $65 = HEAP32[430]|0;
 $66 = (_strtok_r(0,$65,$savePtr)|0);
 $gStr = $66;
 $67 = HEAP32[430]|0;
 $68 = (_strtok_r(0,$67,$savePtr)|0);
 $bStr = $68;
 $69 = $copy;
 _free($69);
 $70 = $rStr;
 $71 = (+_atof($70));
 $72 = $71;
 $r = $72;
 $73 = $gStr;
 $74 = (+_atof($73));
 $75 = $74;
 $g = $75;
 $76 = $bStr;
 $77 = (+_atof($76));
 $78 = $77;
 $b = $78;
 $79 = $r;
 HEAPF32[$34>>2] = $79;
 $80 = ((($34)) + 4|0);
 $81 = $g;
 HEAPF32[$80>>2] = $81;
 $82 = ((($80)) + 4|0);
 $83 = $b;
 HEAPF32[$82>>2] = $83;
 HEAP32[$33>>2] = $34;
 $84 = ((($33)) + 4|0);
 HEAP32[$84>>2] = 3;
 ;HEAP8[$16>>0]=HEAP8[$33>>0]|0;HEAP8[$16+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$33+3>>0]|0;HEAP8[$16+4>>0]=HEAP8[$33+4>>0]|0;HEAP8[$16+5>>0]=HEAP8[$33+5>>0]|0;HEAP8[$16+6>>0]=HEAP8[$33+6>>0]|0;HEAP8[$16+7>>0]=HEAP8[$33+7>>0]|0;
 $13 = $agg$result;
 $85 = $13;
 $12 = $85;
 $86 = $12;
 $11 = $86;
 HEAP32[$86>>2] = 0;
 $87 = ((($86)) + 4|0);
 HEAP32[$87>>2] = 0;
 $88 = ((($86)) + 8|0);
 $9 = $88;
 HEAP32[$10>>2] = 0;
 $89 = $9;
 $8 = $10;
 $90 = $8;
 $91 = HEAP32[$90>>2]|0;
 $6 = $89;
 HEAP32[$7>>2] = $91;
 $92 = $6;
 $5 = $92;
 $4 = $7;
 $93 = $4;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$92>>2] = $94;
 $3 = $16;
 $95 = $3;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97>>>0)>(0);
 if (!($98)) {
  STACKTOP = sp;return;
 }
 $2 = $16;
 $99 = $2;
 $100 = ((($99)) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 __THREW__ = 0;
 invoke_vii(393,($85|0),($101|0));
 $102 = __THREW__; __THREW__ = 0;
 $103 = $102&1;
 if ($103) {
  $113 = ___cxa_find_matching_catch_2()|0;
  $114 = tempRet0;
  $14 = $113;
  $15 = $114;
  __ZNSt3__113__vector_baseIfNS_9allocatorIfEEED2Ev($85);
  $115 = $14;
  $116 = $15;
  ___resumeException($115|0);
  // unreachable;
 }
 $0 = $16;
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $1 = $16;
 $106 = $1;
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($106)) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + ($109<<2)|0);
 __THREW__ = 0;
 invoke_viii(410,($85|0),($105|0),($110|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  $113 = ___cxa_find_matching_catch_2()|0;
  $114 = tempRet0;
  $14 = $113;
  $15 = $114;
  __ZNSt3__113__vector_baseIfNS_9allocatorIfEEED2Ev($85);
  $115 = $14;
  $116 = $15;
  ___resumeException($115|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEE18__construct_at_endIPKfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  $45 = +HEAPF32[$44>>2];
  HEAPF32[$42>>2] = $45;
  __ZNSt3__16vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $46 = ((($21)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 4|0);
  HEAP32[$46>>2] = $48;
  $49 = $19;
  $50 = ((($49)) + 4|0);
  $19 = $50;
 }
 STACKTOP = sp;return;
}
function __ZN9ObjMaster8Material16fetchStringParamERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$mtlLine) {
 $agg$result = $agg$result|0;
 $mtlLine = $mtlLine|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__r$i$i = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 171|0;
 $$byval_copy = sp + 170|0;
 $12 = sp + 169|0;
 $13 = sp + 168|0;
 $41 = $mtlLine;
 $42 = $41;
 $43 = HEAP32[430]|0;
 $38 = $42;
 $39 = $43;
 $40 = 0;
 $44 = $38;
 $37 = $44;
 $45 = $37;
 $36 = $45;
 $46 = $36;
 $35 = $46;
 $47 = $35;
 $34 = $47;
 $48 = $34;
 $33 = $48;
 $49 = $33;
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 & 1;
 $53 = ($52|0)!=(0);
 if ($53) {
  $27 = $46;
  $54 = $27;
  $26 = $54;
  $55 = $26;
  $25 = $55;
  $56 = $25;
  $57 = ((($56)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $65 = $58;
 } else {
  $32 = $46;
  $59 = $32;
  $31 = $59;
  $60 = $31;
  $30 = $60;
  $61 = $30;
  $62 = ((($61)) + 1|0);
  $29 = $62;
  $63 = $29;
  $28 = $63;
  $64 = $28;
  $65 = $64;
 }
 $24 = $65;
 $66 = $24;
 $23 = $44;
 $67 = $23;
 $22 = $67;
 $68 = $22;
 $21 = $68;
 $69 = $21;
 $20 = $69;
 $70 = $20;
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = $72 & 1;
 $74 = ($73|0)!=(0);
 if ($74) {
  $16 = $67;
  $75 = $16;
  $15 = $75;
  $76 = $15;
  $14 = $76;
  $77 = $14;
  $78 = ((($77)) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  $92 = $79;
 } else {
  $19 = $67;
  $80 = $19;
  $18 = $80;
  $81 = $18;
  $17 = $81;
  $82 = $17;
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = $84 >> 1;
  $92 = $85;
 }
 $86 = $39;
 $87 = $40;
 $88 = $39;
 __THREW__ = 0;
 $89 = (invoke_ii(379,($88|0))|0);
 $90 = __THREW__; __THREW__ = 0;
 $91 = $90&1;
 if ($91) {
  $129 = ___cxa_find_matching_catch_3(0|0)|0;
  $130 = tempRet0;
  ___clang_call_terminate($129);
  // unreachable;
 }
 $7 = $66;
 $8 = $92;
 $9 = $86;
 $10 = $87;
 $11 = $89;
 $93 = $10;
 $94 = $8;
 $95 = ($93>>>0)>($94>>>0);
 do {
  if ($95) {
   label = 10;
  } else {
   $96 = $8;
   $97 = $10;
   $98 = (($96) - ($97))|0;
   $99 = $11;
   $100 = ($98>>>0)<($99>>>0);
   if ($100) {
    label = 10;
   } else {
    $101 = $11;
    $102 = ($101|0)==(0);
    if ($102) {
     $103 = $10;
     $6 = $103;
     break;
    }
    $104 = $7;
    $105 = $10;
    $106 = (($104) + ($105)|0);
    $107 = $7;
    $108 = $8;
    $109 = (($107) + ($108)|0);
    $110 = $9;
    $111 = $9;
    $112 = $11;
    $113 = (($111) + ($112)|0);
    __THREW__ = 0;
    ;HEAP8[$$byval_copy>>0]=HEAP8[$12>>0]|0;
    ;HEAP8[$$byval_copy1>>0]=HEAP8[$13>>0]|0;
    $114 = (invoke_iiiiiiii(411,($106|0),($109|0),($110|0),($113|0),(412|0),($$byval_copy|0),($$byval_copy1|0))|0);
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if ($116) {
     $127 = ___cxa_find_matching_catch_3(0|0)|0;
     $128 = tempRet0;
     ___clang_call_terminate($127);
     // unreachable;
    }
    $__r$i$i = $114;
    $117 = $__r$i$i;
    $118 = $7;
    $119 = $8;
    $120 = (($118) + ($119)|0);
    $121 = ($117|0)==($120|0);
    if ($121) {
     $6 = -1;
     break;
    } else {
     $122 = $__r$i$i;
     $123 = $7;
     $124 = $122;
     $125 = $123;
     $126 = (($124) - ($125))|0;
     $6 = $126;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $6 = -1;
 }
 $131 = $6;
 $pos = $131;
 $132 = $41;
 $133 = $pos;
 $134 = (($133) + 1)|0;
 $3 = $132;
 $4 = $134;
 $5 = -1;
 $135 = $3;
 $136 = $4;
 $137 = $5;
 $2 = $135;
 $138 = $2;
 $1 = $138;
 $139 = $1;
 $0 = $139;
 $140 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($agg$result,$135,$136,$137,$140);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($__first1,$__last1,$__first2,$__last2,$__pred,$0,$1) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__len1 = 0, $__len2 = 0, $__m1 = 0, $__m2 = 0;
 var $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__first1;
 $4 = $__last1;
 $5 = $__first2;
 $6 = $__last2;
 $7 = $__pred;
 $8 = $6;
 $9 = $5;
 $10 = $8;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $__len2 = $12;
 $13 = $__len2;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $3;
  $2 = $15;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 $16 = $4;
 $17 = $3;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $__len1 = $20;
 $21 = $__len1;
 $22 = $__len2;
 $23 = ($21|0)<($22|0);
 $24 = $4;
 if ($23) {
  $2 = $24;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 $25 = $__len2;
 $26 = (($25) - 1)|0;
 $27 = (0 - ($26))|0;
 $28 = (($24) + ($27)|0);
 $__s = $28;
 L9: while(1) {
  $29 = $3;
  $30 = $__s;
  $31 = ($29|0)==($30|0);
  if ($31) {
   label = 7;
   break;
  }
  $33 = $7;
  $34 = $3;
  $35 = HEAP8[$34>>0]|0;
  $36 = $5;
  $37 = HEAP8[$36>>0]|0;
  $38 = (FUNCTION_TABLE_iii[$33 & 511]($35,$37)|0);
  $39 = $3;
  if (!($38)) {
   $40 = ((($39)) + 1|0);
   $3 = $40;
   continue;
  }
  $__m1 = $39;
  $41 = $5;
  $__m2 = $41;
  while(1) {
   $42 = $__m2;
   $43 = ((($42)) + 1|0);
   $__m2 = $43;
   $44 = $6;
   $45 = ($43|0)==($44|0);
   if ($45) {
    label = 12;
    break L9;
   }
   $47 = $__m1;
   $48 = ((($47)) + 1|0);
   $__m1 = $48;
   $49 = $7;
   $50 = $__m1;
   $51 = HEAP8[$50>>0]|0;
   $52 = $__m2;
   $53 = HEAP8[$52>>0]|0;
   $54 = (FUNCTION_TABLE_iii[$49 & 511]($51,$53)|0);
   if (!($54)) {
    break;
   }
  }
  $55 = $3;
  $56 = ((($55)) + 1|0);
  $3 = $56;
 }
 if ((label|0) == 7) {
  $32 = $4;
  $2 = $32;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 12) {
  $46 = $3;
  $2 = $46;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function __ZN9ObjMaster8MaterialC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6vectorIS7_NS5_IS7_EEEE($this,$materialName,$descriptorLineFields) {
 $this = $this|0;
 $materialName = $materialName|0;
 $descriptorLineFields = $descriptorLineFields|0;
 var $$byval_copy = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$expand_i1_val = 0, $$expand_i1_val16 = 0, $$pre_trunc = 0, $$pre_trunc19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0;
 var $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0;
 var $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0;
 var $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0;
 var $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0;
 var $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0;
 var $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0;
 var $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0;
 var $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0;
 var $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0;
 var $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0;
 var $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0;
 var $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0;
 var $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0;
 var $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0;
 var $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0;
 var $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0;
 var $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0;
 var $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0;
 var $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0;
 var $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0;
 var $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0;
 var $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0;
 var $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0;
 var $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0;
 var $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0;
 var $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0;
 var $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0;
 var $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0;
 var $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0;
 var $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0;
 var $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0;
 var $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0;
 var $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0;
 var $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0;
 var $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0;
 var $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0;
 var $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0;
 var $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0;
 var $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0;
 var $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0;
 var $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0;
 var $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0;
 var $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0;
 var $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0;
 var $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0;
 var $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0;
 var $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0;
 var $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0;
 var $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0;
 var $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0;
 var $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0;
 var $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0;
 var $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0;
 var $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0;
 var $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0;
 var $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0;
 var $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0;
 var $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0;
 var $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0;
 var $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0;
 var $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0;
 var $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0;
 var $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0;
 var $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0;
 var $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0;
 var $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0;
 var $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0;
 var $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0;
 var $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0;
 var $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__a$i$i = 0, $__a$i$i$i = 0, $__a$i$i$i46 = 0, $__a$i$i$i66 = 0, $__a$i$i$i89 = 0, $__a$i$i1 = 0, $__a$i$i12 = 0, $__a$i$i17 = 0, $__a$i$i20 = 0, $__a$i$i23 = 0, $__a$i$i4 = 0, $__a$i$i7 = 0, $__begin = 0, $__end = 0, $__i$i$i = 0;
 var $__i$i$i$i = 0, $__i$i$i$i47 = 0, $__i$i$i$i67 = 0, $__i$i$i$i90 = 0, $__i$i$i13 = 0, $__i$i$i18 = 0, $__i$i$i2 = 0, $__i$i$i21 = 0, $__i$i$i24 = 0, $__i$i$i5 = 0, $__i$i$i8 = 0, $__range = 0, $ka = 0, $kd = 0, $ks = 0, $map_bump = 0, $map_ka = 0, $map_kd = 0, $map_ks = 0, $mtlLine = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3696|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy14 = sp + 3692|0;
 $$byval_copy13 = sp + 3691|0;
 $$byval_copy = sp + 3690|0;
 $vararg_buffer11 = sp + 128|0;
 $vararg_buffer8 = sp + 120|0;
 $vararg_buffer6 = sp + 112|0;
 $vararg_buffer3 = sp + 104|0;
 $vararg_buffer1 = sp + 96|0;
 $vararg_buffer = sp + 88|0;
 $65 = sp + 80|0;
 $68 = sp + 3688|0;
 $95 = sp + 3687|0;
 $96 = sp + 3686|0;
 $99 = sp + 72|0;
 $102 = sp + 3685|0;
 $218 = sp + 64|0;
 $221 = sp + 3684|0;
 $248 = sp + 3683|0;
 $249 = sp + 3682|0;
 $252 = sp + 56|0;
 $255 = sp + 3681|0;
 $276 = sp + 3678|0;
 $346 = sp + 3676|0;
 $372 = sp + 3674|0;
 $385 = sp + 48|0;
 $388 = sp + 3673|0;
 $415 = sp + 3672|0;
 $416 = sp + 3671|0;
 $419 = sp + 40|0;
 $422 = sp + 3670|0;
 $598 = sp + 1348|0;
 $601 = sp + 1336|0;
 $605 = sp + 1320|0;
 $608 = sp + 1308|0;
 $636 = sp + 32|0;
 $639 = sp + 3668|0;
 $666 = sp + 3667|0;
 $667 = sp + 3666|0;
 $670 = sp + 24|0;
 $673 = sp + 3665|0;
 $693 = sp + 16|0;
 $696 = sp + 3663|0;
 $708 = sp + 8|0;
 $711 = sp + 3662|0;
 $717 = sp + 876|0;
 $720 = sp + 864|0;
 $726 = sp;
 $729 = sp + 3661|0;
 $735 = sp + 812|0;
 $738 = sp + 800|0;
 $745 = sp + 772|0;
 $748 = sp + 760|0;
 $783 = sp + 588|0;
 $786 = sp + 576|0;
 $793 = sp + 548|0;
 $796 = sp + 536|0;
 $803 = sp + 508|0;
 $806 = sp + 496|0;
 $ka = sp + 460|0;
 $kd = sp + 448|0;
 $ks = sp + 436|0;
 $map_ka = sp + 424|0;
 $map_kd = sp + 412|0;
 $map_ks = sp + 400|0;
 $map_bump = sp + 388|0;
 $__begin = sp + 380|0;
 $__end = sp + 376|0;
 $815 = sp + 352|0;
 $816 = sp + 344|0;
 $817 = sp + 328|0;
 $818 = sp + 320|0;
 $819 = sp + 304|0;
 $820 = sp + 296|0;
 $821 = sp + 280|0;
 $822 = sp + 268|0;
 $823 = sp + 256|0;
 $824 = sp + 248|0;
 $825 = sp + 236|0;
 $826 = sp + 224|0;
 $827 = sp + 216|0;
 $828 = sp + 204|0;
 $829 = sp + 192|0;
 $830 = sp + 184|0;
 $831 = sp + 168|0;
 $832 = sp + 156|0;
 $833 = sp + 3660|0;
 $834 = sp + 144|0;
 $835 = sp + 136|0;
 $812 = $this;
 $836 = $812;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($836,$materialName);
 $837 = ((($836)) + 12|0);
 $811 = $837;
 $838 = $811;
 $810 = $838;
 $839 = $810;
 HEAP32[$839>>2] = 0;
 $840 = ((($836)) + 16|0);
 $809 = $840;
 $841 = $809;
 $808 = $841;
 $842 = $808;
 $807 = $842;
 HEAP32[$842>>2] = 0;
 $843 = ((($842)) + 4|0);
 HEAP32[$843>>2] = 0;
 $844 = ((($842)) + 8|0);
 $805 = $844;
 HEAP32[$806>>2] = 0;
 $845 = $805;
 $804 = $806;
 $846 = $804;
 $847 = HEAP32[$846>>2]|0;
 $802 = $845;
 HEAP32[$803>>2] = $847;
 $848 = $802;
 $801 = $848;
 $800 = $803;
 $849 = $800;
 $850 = HEAP32[$849>>2]|0;
 HEAP32[$848>>2] = $850;
 $851 = ((($836)) + 28|0);
 $799 = $851;
 $852 = $799;
 $798 = $852;
 $853 = $798;
 $797 = $853;
 HEAP32[$853>>2] = 0;
 $854 = ((($853)) + 4|0);
 HEAP32[$854>>2] = 0;
 $855 = ((($853)) + 8|0);
 $795 = $855;
 HEAP32[$796>>2] = 0;
 $856 = $795;
 $794 = $796;
 $857 = $794;
 $858 = HEAP32[$857>>2]|0;
 $792 = $856;
 HEAP32[$793>>2] = $858;
 $859 = $792;
 $791 = $859;
 $790 = $793;
 $860 = $790;
 $861 = HEAP32[$860>>2]|0;
 HEAP32[$859>>2] = $861;
 $862 = ((($836)) + 40|0);
 $789 = $862;
 $863 = $789;
 $788 = $863;
 $864 = $788;
 $787 = $864;
 HEAP32[$864>>2] = 0;
 $865 = ((($864)) + 4|0);
 HEAP32[$865>>2] = 0;
 $866 = ((($864)) + 8|0);
 $785 = $866;
 HEAP32[$786>>2] = 0;
 $867 = $785;
 $784 = $786;
 $868 = $784;
 $869 = HEAP32[$868>>2]|0;
 $782 = $867;
 HEAP32[$783>>2] = $869;
 $870 = $782;
 $781 = $870;
 $780 = $783;
 $871 = $780;
 $872 = HEAP32[$871>>2]|0;
 HEAP32[$870>>2] = $872;
 $873 = ((($836)) + 52|0);
 $779 = $873;
 $874 = $779;
 $778 = $874;
 $875 = $778;
 $777 = $875;
 $876 = $777;
 $776 = $876;
 $775 = $874;
 $877 = $775;
 $774 = $877;
 $878 = $774;
 $773 = $878;
 $879 = $773;
 $__a$i$i = $879;
 $__i$i$i = 0;
 while(1) {
  $880 = $__i$i$i;
  $881 = ($880>>>0)<(3);
  if (!($881)) {
   break;
  }
  $882 = $__i$i$i;
  $883 = $__a$i$i;
  $884 = (($883) + ($882<<2)|0);
  HEAP32[$884>>2] = 0;
  $885 = $__i$i$i;
  $886 = (($885) + 1)|0;
  $__i$i$i = $886;
 }
 $887 = ((($836)) + 64|0);
 $772 = $887;
 $888 = $772;
 $771 = $888;
 $889 = $771;
 $770 = $889;
 $890 = $770;
 $769 = $890;
 $768 = $888;
 $891 = $768;
 $767 = $891;
 $892 = $767;
 $766 = $892;
 $893 = $766;
 $__a$i$i1 = $893;
 $__i$i$i2 = 0;
 while(1) {
  $894 = $__i$i$i2;
  $895 = ($894>>>0)<(3);
  if (!($895)) {
   break;
  }
  $896 = $__i$i$i2;
  $897 = $__a$i$i1;
  $898 = (($897) + ($896<<2)|0);
  HEAP32[$898>>2] = 0;
  $899 = $__i$i$i2;
  $900 = (($899) + 1)|0;
  $__i$i$i2 = $900;
 }
 $901 = ((($836)) + 76|0);
 $765 = $901;
 $902 = $765;
 $764 = $902;
 $903 = $764;
 $763 = $903;
 $904 = $763;
 $762 = $904;
 $761 = $902;
 $905 = $761;
 $760 = $905;
 $906 = $760;
 $759 = $906;
 $907 = $759;
 $__a$i$i4 = $907;
 $__i$i$i5 = 0;
 while(1) {
  $908 = $__i$i$i5;
  $909 = ($908>>>0)<(3);
  if (!($909)) {
   break;
  }
  $910 = $__i$i$i5;
  $911 = $__a$i$i4;
  $912 = (($911) + ($910<<2)|0);
  HEAP32[$912>>2] = 0;
  $913 = $__i$i$i5;
  $914 = (($913) + 1)|0;
  $__i$i$i5 = $914;
 }
 $915 = ((($836)) + 88|0);
 $758 = $915;
 $916 = $758;
 $757 = $916;
 $917 = $757;
 $756 = $917;
 $918 = $756;
 $755 = $918;
 $754 = $916;
 $919 = $754;
 $753 = $919;
 $920 = $753;
 $752 = $920;
 $921 = $752;
 $__a$i$i7 = $921;
 $__i$i$i8 = 0;
 while(1) {
  $922 = $__i$i$i8;
  $923 = ($922>>>0)<(3);
  if (!($923)) {
   break;
  }
  $924 = $__i$i$i8;
  $925 = $__a$i$i7;
  $926 = (($925) + ($924<<2)|0);
  HEAP32[$926>>2] = 0;
  $927 = $__i$i$i8;
  $928 = (($927) + 1)|0;
  $__i$i$i8 = $928;
 }
 $751 = $ka;
 $929 = $751;
 $750 = $929;
 $930 = $750;
 $749 = $930;
 HEAP32[$930>>2] = 0;
 $931 = ((($930)) + 4|0);
 HEAP32[$931>>2] = 0;
 $932 = ((($930)) + 8|0);
 $747 = $932;
 HEAP32[$748>>2] = 0;
 $933 = $747;
 $746 = $748;
 $934 = $746;
 $935 = HEAP32[$934>>2]|0;
 $744 = $933;
 HEAP32[$745>>2] = $935;
 $936 = $744;
 $743 = $936;
 $742 = $745;
 $937 = $742;
 $938 = HEAP32[$937>>2]|0;
 HEAP32[$936>>2] = $938;
 $741 = $kd;
 $939 = $741;
 $740 = $939;
 $940 = $740;
 $739 = $940;
 HEAP32[$940>>2] = 0;
 $941 = ((($940)) + 4|0);
 HEAP32[$941>>2] = 0;
 $942 = ((($940)) + 8|0);
 $737 = $942;
 HEAP32[$738>>2] = 0;
 $943 = $737;
 $736 = $738;
 $944 = $736;
 $945 = HEAP32[$944>>2]|0;
 $734 = $943;
 HEAP32[$735>>2] = $945;
 $946 = $734;
 $733 = $946;
 $732 = $735;
 $947 = $732;
 $948 = HEAP32[$947>>2]|0;
 HEAP32[$946>>2] = $948;
 $723 = $ks;
 $949 = $723;
 $722 = $949;
 $950 = $722;
 $721 = $950;
 HEAP32[$950>>2] = 0;
 $951 = ((($950)) + 4|0);
 HEAP32[$951>>2] = 0;
 $952 = ((($950)) + 8|0);
 $719 = $952;
 HEAP32[$720>>2] = 0;
 $953 = $719;
 $718 = $720;
 $954 = $718;
 $955 = HEAP32[$954>>2]|0;
 $716 = $953;
 HEAP32[$717>>2] = $955;
 $956 = $716;
 $715 = $956;
 $714 = $717;
 $957 = $714;
 $958 = HEAP32[$957>>2]|0;
 HEAP32[$956>>2] = $958;
 $705 = $map_ka;
 $959 = $705;
 $704 = $959;
 $960 = $704;
 $703 = $960;
 $961 = $703;
 $702 = $961;
 $701 = $959;
 $962 = $701;
 $700 = $962;
 $963 = $700;
 $699 = $963;
 $964 = $699;
 $__a$i$i12 = $964;
 $__i$i$i13 = 0;
 while(1) {
  $965 = $__i$i$i13;
  $966 = ($965>>>0)<(3);
  if (!($966)) {
   break;
  }
  $967 = $__i$i$i13;
  $968 = $__a$i$i12;
  $969 = (($968) + ($967<<2)|0);
  HEAP32[$969>>2] = 0;
  $970 = $__i$i$i13;
  $971 = (($970) + 1)|0;
  $__i$i$i13 = $971;
 }
 $690 = $map_kd;
 $972 = $690;
 $689 = $972;
 $973 = $689;
 $688 = $973;
 $974 = $688;
 $687 = $974;
 $686 = $972;
 $975 = $686;
 $685 = $975;
 $976 = $685;
 $684 = $976;
 $977 = $684;
 $__a$i$i17 = $977;
 $__i$i$i18 = 0;
 while(1) {
  $978 = $__i$i$i18;
  $979 = ($978>>>0)<(3);
  if (!($979)) {
   break;
  }
  $980 = $__i$i$i18;
  $981 = $__a$i$i17;
  $982 = (($981) + ($980<<2)|0);
  HEAP32[$982>>2] = 0;
  $983 = $__i$i$i18;
  $984 = (($983) + 1)|0;
  $__i$i$i18 = $984;
 }
 $623 = $map_ks;
 $985 = $623;
 $622 = $985;
 $986 = $622;
 $621 = $986;
 $987 = $621;
 $620 = $987;
 $619 = $985;
 $988 = $619;
 $618 = $988;
 $989 = $618;
 $617 = $989;
 $990 = $617;
 $__a$i$i20 = $990;
 $__i$i$i21 = 0;
 while(1) {
  $991 = $__i$i$i21;
  $992 = ($991>>>0)<(3);
  if (!($992)) {
   break;
  }
  $993 = $__i$i$i21;
  $994 = $__a$i$i20;
  $995 = (($994) + ($993<<2)|0);
  HEAP32[$995>>2] = 0;
  $996 = $__i$i$i21;
  $997 = (($996) + 1)|0;
  $__i$i$i21 = $997;
 }
 $616 = $map_bump;
 $998 = $616;
 $615 = $998;
 $999 = $615;
 $614 = $999;
 $1000 = $614;
 $613 = $1000;
 $612 = $998;
 $1001 = $612;
 $611 = $1001;
 $1002 = $611;
 $610 = $1002;
 $1003 = $610;
 $__a$i$i23 = $1003;
 $__i$i$i24 = 0;
 while(1) {
  $1004 = $__i$i$i24;
  $1005 = ($1004>>>0)<(3);
  if (!($1005)) {
   break;
  }
  $1006 = $__i$i$i24;
  $1007 = $__a$i$i23;
  $1008 = (($1007) + ($1006<<2)|0);
  HEAP32[$1008>>2] = 0;
  $1009 = $__i$i$i24;
  $1010 = (($1009) + 1)|0;
  $__i$i$i24 = $1010;
 }
 $__range = $descriptorLineFields;
 $1011 = $__range;
 $609 = $1011;
 $1012 = $609;
 $1013 = HEAP32[$1012>>2]|0;
 $606 = $1012;
 $607 = $1013;
 $1014 = $607;
 $603 = $605;
 $604 = $1014;
 $1015 = $603;
 $1016 = $604;
 HEAP32[$1015>>2] = $1016;
 $1017 = HEAP32[$605>>2]|0;
 HEAP32[$608>>2] = $1017;
 $1018 = HEAP32[$608>>2]|0;
 HEAP32[$__begin>>2] = $1018;
 $1019 = $__range;
 $602 = $1019;
 $1020 = $602;
 $1021 = ((($1020)) + 4|0);
 $1022 = HEAP32[$1021>>2]|0;
 $599 = $1020;
 $600 = $1022;
 $1023 = $600;
 $596 = $598;
 $597 = $1023;
 $1024 = $596;
 $1025 = $597;
 HEAP32[$1024>>2] = $1025;
 $1026 = HEAP32[$598>>2]|0;
 HEAP32[$601>>2] = $1026;
 $1027 = HEAP32[$601>>2]|0;
 HEAP32[$__end>>2] = $1027;
 L33: while(1) {
  $594 = $__begin;
  $595 = $__end;
  $1028 = $594;
  $1029 = $595;
  $592 = $1028;
  $593 = $1029;
  $1030 = $592;
  $591 = $1030;
  $1031 = $591;
  $1032 = HEAP32[$1031>>2]|0;
  $1033 = $593;
  $590 = $1033;
  $1034 = $590;
  $1035 = HEAP32[$1034>>2]|0;
  $1036 = ($1032|0)==($1035|0);
  $1037 = $1036 ^ 1;
  if (!($1037)) {
   label = 215;
   break;
  }
  $561 = $__begin;
  $1038 = $561;
  $1039 = HEAP32[$1038>>2]|0;
  $mtlLine = $1039;
  $1040 = HEAP32[504]|0;
  $1041 = $mtlLine;
  $544 = $1041;
  $1042 = $544;
  $543 = $1042;
  $1043 = $543;
  $542 = $1043;
  $1044 = $542;
  $541 = $1044;
  $1045 = $541;
  $540 = $1045;
  $1046 = $540;
  $539 = $1046;
  $1047 = $539;
  $1048 = HEAP8[$1047>>0]|0;
  $1049 = $1048&255;
  $1050 = $1049 & 1;
  $1051 = ($1050|0)!=(0);
  if ($1051) {
   $533 = $1044;
   $1052 = $533;
   $532 = $1052;
   $1053 = $532;
   $531 = $1053;
   $1054 = $531;
   $1055 = ((($1054)) + 8|0);
   $1056 = HEAP32[$1055>>2]|0;
   $1063 = $1056;
  } else {
   $538 = $1044;
   $1057 = $538;
   $537 = $1057;
   $1058 = $537;
   $536 = $1058;
   $1059 = $536;
   $1060 = ((($1059)) + 1|0);
   $535 = $1060;
   $1061 = $535;
   $534 = $1061;
   $1062 = $534;
   $1063 = $1062;
  }
  $530 = $1063;
  $1064 = $530;
  __THREW__ = 0;
  HEAP32[$vararg_buffer>>2] = $1064;
  (invoke_iiii(339,($1040|0),(10911|0),($vararg_buffer|0))|0);
  $1065 = __THREW__; __THREW__ = 0;
  $1066 = $1065&1;
  if ($1066) {
   label = 53;
   break;
  }
  $1067 = HEAP32[504]|0;
  __THREW__ = 0;
  (invoke_iiii(339,($1067|0),(11077|0),($vararg_buffer1|0))|0);
  $1068 = __THREW__; __THREW__ = 0;
  $1069 = $1068&1;
  if ($1069) {
   label = 53;
   break;
  }
  $1070 = $mtlLine;
  $529 = $1070;
  $1071 = $529;
  $528 = $1071;
  $1072 = $528;
  $527 = $1072;
  $1073 = $527;
  $526 = $1073;
  $1074 = $526;
  $525 = $1074;
  $1075 = $525;
  $1076 = HEAP8[$1075>>0]|0;
  $1077 = $1076&255;
  $1078 = $1077 & 1;
  $1079 = ($1078|0)!=(0);
  if ($1079) {
   $521 = $1072;
   $1080 = $521;
   $520 = $1080;
   $1081 = $520;
   $519 = $1081;
   $1082 = $519;
   $1083 = ((($1082)) + 4|0);
   $1084 = HEAP32[$1083>>2]|0;
   $1091 = $1084;
  } else {
   $524 = $1072;
   $1085 = $524;
   $523 = $1085;
   $1086 = $523;
   $522 = $1086;
   $1087 = $522;
   $1088 = HEAP8[$1087>>0]|0;
   $1089 = $1088&255;
   $1090 = $1089 >> 1;
   $1091 = $1090;
  }
  $1092 = ($1091>>>0)>(1);
  do {
   if ($1092) {
    $1093 = $mtlLine;
    $489 = $1093;
    $490 = 0;
    $1094 = $489;
    $488 = $1094;
    $1095 = $488;
    $487 = $1095;
    $1096 = $487;
    $486 = $1096;
    $1097 = $486;
    $485 = $1097;
    $1098 = $485;
    $1099 = HEAP8[$1098>>0]|0;
    $1100 = $1099&255;
    $1101 = $1100 & 1;
    $1102 = ($1101|0)!=(0);
    if ($1102) {
     $479 = $1095;
     $1103 = $479;
     $478 = $1103;
     $1104 = $478;
     $477 = $1104;
     $1105 = $477;
     $1106 = ((($1105)) + 8|0);
     $1107 = HEAP32[$1106>>2]|0;
     $1116 = $1107;
    } else {
     $484 = $1095;
     $1108 = $484;
     $483 = $1108;
     $1109 = $483;
     $482 = $1109;
     $1110 = $482;
     $1111 = ((($1110)) + 1|0);
     $481 = $1111;
     $1112 = $481;
     $480 = $1112;
     $1113 = $480;
     $1116 = $1113;
    }
    $1114 = $490;
    $1115 = (($1116) + ($1114)|0);
    $1117 = HEAP8[$1115>>0]|0;
    $1118 = $1117 << 24 >> 24;
    $1119 = ($1118|0)==(75);
    if ($1119) {
     $1120 = HEAP32[504]|0;
     $1121 = $mtlLine;
     $460 = $1121;
     $1122 = $460;
     $459 = $1122;
     $1123 = $459;
     $458 = $1123;
     $1124 = $458;
     $457 = $1124;
     $1125 = $457;
     $456 = $1125;
     $1126 = $456;
     $455 = $1126;
     $1127 = $455;
     $1128 = HEAP8[$1127>>0]|0;
     $1129 = $1128&255;
     $1130 = $1129 & 1;
     $1131 = ($1130|0)!=(0);
     if ($1131) {
      $449 = $1124;
      $1132 = $449;
      $448 = $1132;
      $1133 = $448;
      $447 = $1133;
      $1134 = $447;
      $1135 = ((($1134)) + 8|0);
      $1136 = HEAP32[$1135>>2]|0;
      $1143 = $1136;
     } else {
      $454 = $1124;
      $1137 = $454;
      $453 = $1137;
      $1138 = $453;
      $452 = $1138;
      $1139 = $452;
      $1140 = ((($1139)) + 1|0);
      $451 = $1140;
      $1141 = $451;
      $450 = $1141;
      $1142 = $450;
      $1143 = $1142;
     }
     $446 = $1143;
     $1144 = $446;
     __THREW__ = 0;
     HEAP32[$vararg_buffer3>>2] = $1144;
     (invoke_iiii(339,($1120|0),(10928|0),($vararg_buffer3|0))|0);
     $1145 = __THREW__; __THREW__ = 0;
     $1146 = $1145&1;
     if ($1146) {
      label = 53;
      break L33;
     }
     $1147 = HEAP32[504]|0;
     __THREW__ = 0;
     (invoke_iiii(339,($1147|0),(11077|0),($vararg_buffer6|0))|0);
     $1148 = __THREW__; __THREW__ = 0;
     $1149 = $1148&1;
     if ($1149) {
      label = 53;
      break L33;
     }
     $1150 = $mtlLine;
     $444 = $1150;
     $445 = 1;
     $1151 = $444;
     $443 = $1151;
     $1152 = $443;
     $442 = $1152;
     $1153 = $442;
     $441 = $1153;
     $1154 = $441;
     $440 = $1154;
     $1155 = $440;
     $1156 = HEAP8[$1155>>0]|0;
     $1157 = $1156&255;
     $1158 = $1157 & 1;
     $1159 = ($1158|0)!=(0);
     if ($1159) {
      $434 = $1152;
      $1160 = $434;
      $433 = $1160;
      $1161 = $433;
      $432 = $1161;
      $1162 = $432;
      $1163 = ((($1162)) + 8|0);
      $1164 = HEAP32[$1163>>2]|0;
      $1173 = $1164;
     } else {
      $439 = $1152;
      $1165 = $439;
      $438 = $1165;
      $1166 = $438;
      $437 = $1166;
      $1167 = $437;
      $1168 = ((($1167)) + 1|0);
      $436 = $1168;
      $1169 = $436;
      $435 = $1169;
      $1170 = $435;
      $1173 = $1170;
     }
     $1171 = $445;
     $1172 = (($1173) + ($1171)|0);
     $1174 = HEAP8[$1172>>0]|0;
     $1175 = $1174 << 24 >> 24;
     $1176 = ($1175|0)==(97);
     $1177 = $mtlLine;
     if ($1176) {
      __THREW__ = 0;
      invoke_vii(413,($815|0),($1177|0));
      $1178 = __THREW__; __THREW__ = 0;
      $1179 = $1178&1;
      if ($1179) {
       label = 53;
       break L33;
      }
      $370 = $ka;
      $371 = $815;
      $1180 = $370;
      $1181 = $371;
      ;HEAP8[$$byval_copy>>0]=HEAP8[$372>>0]|0;
      __ZNSt3__16vectorIfNS_9allocatorIfEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($1180,$1181,$$byval_copy);
      __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($815);
      $1182 = ((($836)) + 12|0);
      $368 = $1182;
      $369 = 0;
      $1183 = $368;
      $1184 = $369;
      $366 = $1183;
      $367 = $1184;
      $1185 = $366;
      $1186 = $367;
      $1187 = 1 << $1186;
      $363 = $816;
      $364 = $1185;
      $365 = $1187;
      $1188 = $363;
      $1189 = $364;
      HEAP32[$1188>>2] = $1189;
      $1190 = ((($1188)) + 4|0);
      $1191 = $365;
      HEAP32[$1190>>2] = $1191;
      $361 = $816;
      $362 = 1;
      $1192 = $361;
      $1193 = $362;
      $1194 = $1193&1;
      $1195 = ((($1192)) + 4|0);
      $1196 = HEAP32[$1195>>2]|0;
      if ($1194) {
       $1197 = HEAP32[$1192>>2]|0;
       $1198 = HEAP32[$1197>>2]|0;
       $1199 = $1198 | $1196;
       HEAP32[$1197>>2] = $1199;
       break;
      } else {
       $1200 = $1196 ^ -1;
       $1201 = HEAP32[$1192>>2]|0;
       $1202 = HEAP32[$1201>>2]|0;
       $1203 = $1202 & $1200;
       HEAP32[$1201>>2] = $1203;
       break;
      }
     }
     $359 = $1177;
     $360 = 1;
     $1206 = $359;
     $358 = $1206;
     $1207 = $358;
     $357 = $1207;
     $1208 = $357;
     $356 = $1208;
     $1209 = $356;
     $355 = $1209;
     $1210 = $355;
     $1211 = HEAP8[$1210>>0]|0;
     $1212 = $1211&255;
     $1213 = $1212 & 1;
     $1214 = ($1213|0)!=(0);
     if ($1214) {
      $349 = $1207;
      $1215 = $349;
      $348 = $1215;
      $1216 = $348;
      $347 = $1216;
      $1217 = $347;
      $1218 = ((($1217)) + 8|0);
      $1219 = HEAP32[$1218>>2]|0;
      $1228 = $1219;
     } else {
      $354 = $1207;
      $1220 = $354;
      $353 = $1220;
      $1221 = $353;
      $352 = $1221;
      $1222 = $352;
      $1223 = ((($1222)) + 1|0);
      $351 = $1223;
      $1224 = $351;
      $350 = $1224;
      $1225 = $350;
      $1228 = $1225;
     }
     $1226 = $360;
     $1227 = (($1228) + ($1226)|0);
     $1229 = HEAP8[$1227>>0]|0;
     $1230 = $1229 << 24 >> 24;
     $1231 = ($1230|0)==(100);
     $1232 = $mtlLine;
     if ($1231) {
      __THREW__ = 0;
      invoke_vii(413,($817|0),($1232|0));
      $1233 = __THREW__; __THREW__ = 0;
      $1234 = $1233&1;
      if ($1234) {
       label = 53;
       break L33;
      }
      $344 = $kd;
      $345 = $817;
      $1235 = $344;
      $1236 = $345;
      ;HEAP8[$$byval_copy13>>0]=HEAP8[$346>>0]|0;
      __ZNSt3__16vectorIfNS_9allocatorIfEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($1235,$1236,$$byval_copy13);
      __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($817);
      $1237 = ((($836)) + 12|0);
      $342 = $1237;
      $343 = 1;
      $1238 = $342;
      $1239 = $343;
      $340 = $1238;
      $341 = $1239;
      $1240 = $340;
      $1241 = $341;
      $1242 = 1 << $1241;
      $337 = $818;
      $338 = $1240;
      $339 = $1242;
      $1243 = $337;
      $1244 = $338;
      HEAP32[$1243>>2] = $1244;
      $1245 = ((($1243)) + 4|0);
      $1246 = $339;
      HEAP32[$1245>>2] = $1246;
      $335 = $818;
      $336 = 1;
      $1247 = $335;
      $1248 = $336;
      $1249 = $1248&1;
      $1250 = ((($1247)) + 4|0);
      $1251 = HEAP32[$1250>>2]|0;
      if ($1249) {
       $1252 = HEAP32[$1247>>2]|0;
       $1253 = HEAP32[$1252>>2]|0;
       $1254 = $1253 | $1251;
       HEAP32[$1252>>2] = $1254;
       break;
      } else {
       $1255 = $1251 ^ -1;
       $1256 = HEAP32[$1247>>2]|0;
       $1257 = HEAP32[$1256>>2]|0;
       $1258 = $1257 & $1255;
       HEAP32[$1256>>2] = $1258;
       break;
      }
     }
     $305 = $1232;
     $306 = 1;
     $1259 = $305;
     $304 = $1259;
     $1260 = $304;
     $303 = $1260;
     $1261 = $303;
     $302 = $1261;
     $1262 = $302;
     $301 = $1262;
     $1263 = $301;
     $1264 = HEAP8[$1263>>0]|0;
     $1265 = $1264&255;
     $1266 = $1265 & 1;
     $1267 = ($1266|0)!=(0);
     if ($1267) {
      $295 = $1260;
      $1268 = $295;
      $294 = $1268;
      $1269 = $294;
      $293 = $1269;
      $1270 = $293;
      $1271 = ((($1270)) + 8|0);
      $1272 = HEAP32[$1271>>2]|0;
      $1281 = $1272;
     } else {
      $300 = $1260;
      $1273 = $300;
      $299 = $1273;
      $1274 = $299;
      $298 = $1274;
      $1275 = $298;
      $1276 = ((($1275)) + 1|0);
      $297 = $1276;
      $1277 = $297;
      $296 = $1277;
      $1278 = $296;
      $1281 = $1278;
     }
     $1279 = $306;
     $1280 = (($1281) + ($1279)|0);
     $1282 = HEAP8[$1280>>0]|0;
     $1283 = $1282 << 24 >> 24;
     $1284 = ($1283|0)==(115);
     if ($1284) {
      $1285 = $mtlLine;
      __THREW__ = 0;
      invoke_vii(413,($819|0),($1285|0));
      $1286 = __THREW__; __THREW__ = 0;
      $1287 = $1286&1;
      if ($1287) {
       label = 53;
       break L33;
      }
      $274 = $ks;
      $275 = $819;
      $1288 = $274;
      $1289 = $275;
      ;HEAP8[$$byval_copy14>>0]=HEAP8[$276>>0]|0;
      __ZNSt3__16vectorIfNS_9allocatorIfEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($1288,$1289,$$byval_copy14);
      __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($819);
      $1290 = ((($836)) + 12|0);
      $272 = $1290;
      $273 = 2;
      $1291 = $272;
      $1292 = $273;
      $270 = $1291;
      $271 = $1292;
      $1293 = $270;
      $1294 = $271;
      $1295 = 1 << $1294;
      $267 = $820;
      $268 = $1293;
      $269 = $1295;
      $1296 = $267;
      $1297 = $268;
      HEAP32[$1296>>2] = $1297;
      $1298 = ((($1296)) + 4|0);
      $1299 = $269;
      HEAP32[$1298>>2] = $1299;
      $265 = $820;
      $266 = 1;
      $1300 = $265;
      $1301 = $266;
      $1302 = $1301&1;
      $1303 = ((($1300)) + 4|0);
      $1304 = HEAP32[$1303>>2]|0;
      if ($1302) {
       $1305 = HEAP32[$1300>>2]|0;
       $1306 = HEAP32[$1305>>2]|0;
       $1307 = $1306 | $1304;
       HEAP32[$1305>>2] = $1307;
       break;
      } else {
       $1308 = $1304 ^ -1;
       $1309 = HEAP32[$1300>>2]|0;
       $1310 = HEAP32[$1309>>2]|0;
       $1311 = $1310 & $1308;
       HEAP32[$1309>>2] = $1311;
       break;
      }
     } else {
      label = 70;
     }
    } else {
     label = 70;
    }
   } else {
    label = 70;
   }
  } while(0);
  do {
   if ((label|0) == 70) {
    label = 0;
    $1312 = $mtlLine;
    $205 = $1312;
    $1313 = $205;
    $204 = $1313;
    $1314 = $204;
    $203 = $1314;
    $1315 = $203;
    $202 = $1315;
    $1316 = $202;
    $201 = $1316;
    $1317 = $201;
    $1318 = HEAP8[$1317>>0]|0;
    $1319 = $1318&255;
    $1320 = $1319 & 1;
    $1321 = ($1320|0)!=(0);
    if ($1321) {
     $197 = $1314;
     $1322 = $197;
     $196 = $1322;
     $1323 = $196;
     $195 = $1323;
     $1324 = $195;
     $1325 = ((($1324)) + 4|0);
     $1326 = HEAP32[$1325>>2]|0;
     $1333 = $1326;
    } else {
     $200 = $1314;
     $1327 = $200;
     $199 = $1327;
     $1328 = $199;
     $198 = $1328;
     $1329 = $198;
     $1330 = HEAP8[$1329>>0]|0;
     $1331 = $1330&255;
     $1332 = $1331 >> 1;
     $1333 = $1332;
    }
    $1334 = ($1333>>>0)>(0);
    if ($1334) {
     $1335 = $mtlLine;
     $193 = $1335;
     $194 = 0;
     $1336 = $193;
     $192 = $1336;
     $1337 = $192;
     $191 = $1337;
     $1338 = $191;
     $190 = $1338;
     $1339 = $190;
     $189 = $1339;
     $1340 = $189;
     $1341 = HEAP8[$1340>>0]|0;
     $1342 = $1341&255;
     $1343 = $1342 & 1;
     $1344 = ($1343|0)!=(0);
     if ($1344) {
      $183 = $1337;
      $1345 = $183;
      $182 = $1345;
      $1346 = $182;
      $181 = $1346;
      $1347 = $181;
      $1348 = ((($1347)) + 8|0);
      $1349 = HEAP32[$1348>>2]|0;
      $1358 = $1349;
     } else {
      $188 = $1337;
      $1350 = $188;
      $187 = $1350;
      $1351 = $187;
      $186 = $1351;
      $1352 = $186;
      $1353 = ((($1352)) + 1|0);
      $185 = $1353;
      $1354 = $185;
      $184 = $1354;
      $1355 = $184;
      $1358 = $1355;
     }
     $1356 = $194;
     $1357 = (($1358) + ($1356)|0);
     $1359 = HEAP8[$1357>>0]|0;
     $1360 = $1359 << 24 >> 24;
     $1361 = ($1360|0)==(109);
     if (!($1361)) {
      $1362 = $mtlLine;
      $179 = $1362;
      $180 = 0;
      $1363 = $179;
      $178 = $1363;
      $1364 = $178;
      $177 = $1364;
      $1365 = $177;
      $176 = $1365;
      $1366 = $176;
      $175 = $1366;
      $1367 = $175;
      $1368 = HEAP8[$1367>>0]|0;
      $1369 = $1368&255;
      $1370 = $1369 & 1;
      $1371 = ($1370|0)!=(0);
      if ($1371) {
       $169 = $1364;
       $1372 = $169;
       $168 = $1372;
       $1373 = $168;
       $167 = $1373;
       $1374 = $167;
       $1375 = ((($1374)) + 8|0);
       $1376 = HEAP32[$1375>>2]|0;
       $1385 = $1376;
      } else {
       $174 = $1364;
       $1377 = $174;
       $173 = $1377;
       $1378 = $173;
       $172 = $1378;
       $1379 = $172;
       $1380 = ((($1379)) + 1|0);
       $171 = $1380;
       $1381 = $171;
       $170 = $1381;
       $1382 = $170;
       $1385 = $1382;
      }
      $1383 = $180;
      $1384 = (($1385) + ($1383)|0);
      $1386 = HEAP8[$1384>>0]|0;
      $1387 = $1386 << 24 >> 24;
      $1388 = ($1387|0)==(98);
      if (!($1388)) {
       break;
      }
     }
     $1389 = HEAP32[504]|0;
     $1390 = $mtlLine;
     $166 = $1390;
     $1391 = $166;
     $165 = $1391;
     $1392 = $165;
     $164 = $1392;
     $1393 = $164;
     $163 = $1393;
     $1394 = $163;
     $162 = $1394;
     $1395 = $162;
     $161 = $1395;
     $1396 = $161;
     $1397 = HEAP8[$1396>>0]|0;
     $1398 = $1397&255;
     $1399 = $1398 & 1;
     $1400 = ($1399|0)!=(0);
     if ($1400) {
      $155 = $1393;
      $1401 = $155;
      $154 = $1401;
      $1402 = $154;
      $153 = $1402;
      $1403 = $153;
      $1404 = ((($1403)) + 8|0);
      $1405 = HEAP32[$1404>>2]|0;
      $1412 = $1405;
     } else {
      $160 = $1393;
      $1406 = $160;
      $159 = $1406;
      $1407 = $159;
      $158 = $1407;
      $1408 = $158;
      $1409 = ((($1408)) + 1|0);
      $157 = $1409;
      $1410 = $157;
      $156 = $1410;
      $1411 = $156;
      $1412 = $1411;
     }
     $152 = $1412;
     $1413 = $152;
     __THREW__ = 0;
     HEAP32[$vararg_buffer8>>2] = $1413;
     (invoke_iiii(339,($1389|0),(10964|0),($vararg_buffer8|0))|0);
     $1414 = __THREW__; __THREW__ = 0;
     $1415 = $1414&1;
     if ($1415) {
      label = 53;
      break L33;
     }
     $1416 = HEAP32[504]|0;
     __THREW__ = 0;
     (invoke_iiii(339,($1416|0),(11077|0),($vararg_buffer11|0))|0);
     $1417 = __THREW__; __THREW__ = 0;
     $1418 = $1417&1;
     if ($1418) {
      label = 53;
      break L33;
     }
     $1419 = $mtlLine;
     $150 = $821;
     $151 = 11002;
     $1420 = $150;
     $149 = $1420;
     $1421 = $149;
     $148 = $1421;
     $1422 = $148;
     $147 = $1422;
     $1423 = $151;
     $1424 = $151;
     __THREW__ = 0;
     $1425 = (invoke_ii(379,($1424|0))|0);
     $1426 = __THREW__; __THREW__ = 0;
     $1427 = $1426&1;
     if ($1427) {
      label = 53;
      break L33;
     }
     __THREW__ = 0;
     invoke_viii(380,($1420|0),($1423|0),($1425|0));
     $1428 = __THREW__; __THREW__ = 0;
     $1429 = $1428&1;
     if ($1429) {
      label = 53;
      break L33;
     }
     $146 = $821;
     $1430 = $146;
     $145 = $1430;
     $1431 = $145;
     $144 = $1431;
     $1432 = $144;
     $143 = $1432;
     $1433 = $143;
     $142 = $1433;
     $1434 = $142;
     $1435 = HEAP8[$1434>>0]|0;
     $1436 = $1435&255;
     $1437 = $1436 & 1;
     $1438 = ($1437|0)!=(0);
     if ($1438) {
      $138 = $1431;
      $1439 = $138;
      $137 = $1439;
      $1440 = $137;
      $136 = $1440;
      $1441 = $136;
      $1442 = ((($1441)) + 4|0);
      $1443 = HEAP32[$1442>>2]|0;
      $1460 = $1443;
     } else {
      $141 = $1431;
      $1444 = $141;
      $140 = $1444;
      $1445 = $140;
      $139 = $1445;
      $1446 = $139;
      $1447 = HEAP8[$1446>>0]|0;
      $1448 = $1447&255;
      $1449 = $1448 >> 1;
      $1460 = $1449;
     }
     $134 = $822;
     $135 = 11002;
     $1450 = $134;
     $133 = $1450;
     $1451 = $133;
     $132 = $1451;
     $1452 = $132;
     $131 = $1452;
     $1453 = $135;
     $1454 = $135;
     __THREW__ = 0;
     $1455 = (invoke_ii(379,($1454|0))|0);
     $1456 = __THREW__; __THREW__ = 0;
     $1457 = $1456&1;
     if ($1457) {
      label = 114;
      break L33;
     }
     __THREW__ = 0;
     invoke_viii(380,($1450|0),($1453|0),($1455|0));
     $1458 = __THREW__; __THREW__ = 0;
     $1459 = $1458&1;
     if ($1459) {
      label = 114;
      break L33;
     }
     $127 = $1419;
     $128 = 0;
     $129 = $1460;
     $130 = $822;
     $1461 = $127;
     $1462 = $128;
     $1463 = $129;
     $1464 = $130;
     $126 = $1464;
     $1465 = $126;
     $125 = $1465;
     $1466 = $125;
     $124 = $1466;
     $1467 = $124;
     $123 = $1467;
     $1468 = $123;
     $122 = $1468;
     $1469 = $122;
     $1470 = HEAP8[$1469>>0]|0;
     $1471 = $1470&255;
     $1472 = $1471 & 1;
     $1473 = ($1472|0)!=(0);
     if ($1473) {
      $116 = $1466;
      $1474 = $116;
      $115 = $1474;
      $1475 = $115;
      $114 = $1475;
      $1476 = $114;
      $1477 = ((($1476)) + 8|0);
      $1478 = HEAP32[$1477>>2]|0;
      $1485 = $1478;
     } else {
      $121 = $1466;
      $1479 = $121;
      $120 = $1479;
      $1480 = $120;
      $119 = $1480;
      $1481 = $119;
      $1482 = ((($1481)) + 1|0);
      $118 = $1482;
      $1483 = $118;
      $117 = $1483;
      $1484 = $117;
      $1485 = $1484;
     }
     $113 = $1485;
     $1486 = $113;
     $1487 = $130;
     $112 = $1487;
     $1488 = $112;
     $111 = $1488;
     $1489 = $111;
     $110 = $1489;
     $1490 = $110;
     $109 = $1490;
     $1491 = $109;
     $1492 = HEAP8[$1491>>0]|0;
     $1493 = $1492&255;
     $1494 = $1493 & 1;
     $1495 = ($1494|0)!=(0);
     if ($1495) {
      $105 = $1488;
      $1496 = $105;
      $104 = $1496;
      $1497 = $104;
      $103 = $1497;
      $1498 = $103;
      $1499 = ((($1498)) + 4|0);
      $1500 = HEAP32[$1499>>2]|0;
      $1507 = $1500;
     } else {
      $108 = $1488;
      $1501 = $108;
      $107 = $1501;
      $1502 = $107;
      $106 = $1502;
      $1503 = $106;
      $1504 = HEAP8[$1503>>0]|0;
      $1505 = $1504&255;
      $1506 = $1505 >> 1;
      $1507 = $1506;
     }
     __THREW__ = 0;
     $1508 = (invoke_iiiiii(414,($1461|0),($1462|0),($1463|0),($1486|0),($1507|0))|0);
     $1509 = __THREW__; __THREW__ = 0;
     $1510 = $1509&1;
     if ($1510) {
      label = 115;
      break L33;
     }
     $1511 = ($1508|0)==(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($822);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($821);
     if ($1511) {
      $1512 = $mtlLine;
      __THREW__ = 0;
      invoke_vii(415,($823|0),($1512|0));
      $1513 = __THREW__; __THREW__ = 0;
      $1514 = $1513&1;
      if ($1514) {
       label = 53;
       break L33;
      }
      $100 = $map_ka;
      $101 = $823;
      $1515 = $100;
      $1516 = $101;
      ;HEAP8[$99>>0]=HEAP8[$102>>0]|0;
      $97 = $1515;
      $98 = $1516;
      $1517 = $97;
      $94 = $1517;
      $1518 = $94;
      $93 = $1518;
      $92 = $1518;
      $1519 = $92;
      $91 = $1519;
      $1520 = $91;
      $90 = $1520;
      $1521 = $90;
      $1522 = HEAP8[$1521>>0]|0;
      $1523 = $1522&255;
      $1524 = $1523 & 1;
      $1525 = ($1524|0)!=(0);
      if ($1525) {
       $85 = $1518;
       $1526 = $85;
       $84 = $1526;
       $1527 = $84;
       $83 = $1527;
       $1528 = $83;
       $1529 = ((($1528)) + 8|0);
       $1530 = HEAP32[$1529>>2]|0;
       HEAP8[$95>>0] = 0;
       __ZNSt3__111char_traitsIcE6assignERcRKc($1530,$95);
       $76 = $1518;
       $77 = 0;
       $1531 = $76;
       $1532 = $77;
       $75 = $1531;
       $1533 = $75;
       $74 = $1533;
       $1534 = $74;
       $1535 = ((($1534)) + 4|0);
       HEAP32[$1535>>2] = $1532;
      } else {
       $82 = $1518;
       $1536 = $82;
       $81 = $1536;
       $1537 = $81;
       $80 = $1537;
       $1538 = $80;
       $1539 = ((($1538)) + 1|0);
       $79 = $1539;
       $1540 = $79;
       $78 = $1540;
       $1541 = $78;
       HEAP8[$96>>0] = 0;
       __ZNSt3__111char_traitsIcE6assignERcRKc($1541,$96);
       $88 = $1518;
       $89 = 0;
       $1542 = $88;
       $1543 = $89;
       $1544 = $1543 << 1;
       $1545 = $1544&255;
       $87 = $1542;
       $1546 = $87;
       $86 = $1546;
       $1547 = $86;
       HEAP8[$1547>>0] = $1545;
      }
      $73 = $1517;
      $1548 = $73;
      __THREW__ = 0;
      invoke_vii(368,($1548|0),0);
      $1549 = __THREW__; __THREW__ = 0;
      $1550 = $1549&1;
      if ($1550) {
       label = 107;
       break L33;
      }
      $72 = $1517;
      $1553 = $72;
      $71 = $1553;
      $1554 = $71;
      $1555 = $98;
      $70 = $1555;
      $1556 = $70;
      $69 = $1556;
      $1557 = $69;
      ;HEAP32[$1554>>2]=HEAP32[$1557>>2]|0;HEAP32[$1554+4>>2]=HEAP32[$1557+4>>2]|0;HEAP32[$1554+8>>2]=HEAP32[$1557+8>>2]|0;
      $1558 = $98;
      $66 = $1517;
      $67 = $1558;
      $1559 = $66;
      $1560 = $67;
      ;HEAP8[$65>>0]=HEAP8[$68>>0]|0;
      $63 = $1559;
      $64 = $1560;
      $1561 = $63;
      $62 = $1561;
      $1562 = $62;
      $61 = $1562;
      $1563 = $61;
      $60 = $1563;
      $1564 = $64;
      $58 = $1564;
      $1565 = $58;
      $57 = $1565;
      $1566 = $57;
      $56 = $1566;
      $1567 = $56;
      $59 = $1567;
      $1568 = $98;
      $55 = $1568;
      $1569 = $55;
      $54 = $1569;
      $1570 = $54;
      $53 = $1570;
      $1571 = $53;
      $__a$i$i$i89 = $1571;
      $__i$i$i$i90 = 0;
      while(1) {
       $1572 = $__i$i$i$i90;
       $1573 = ($1572>>>0)<(3);
       if (!($1573)) {
        break;
       }
       $1574 = $__i$i$i$i90;
       $1575 = $__a$i$i$i89;
       $1576 = (($1575) + ($1574<<2)|0);
       HEAP32[$1576>>2] = 0;
       $1577 = $__i$i$i$i90;
       $1578 = (($1577) + 1)|0;
       $__i$i$i$i90 = $1578;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($823);
      $1579 = ((($836)) + 12|0);
      $51 = $1579;
      $52 = 3;
      $1580 = $51;
      $1581 = $52;
      $49 = $1580;
      $50 = $1581;
      $1582 = $49;
      $1583 = $50;
      $1584 = 1 << $1583;
      $46 = $824;
      $47 = $1582;
      $48 = $1584;
      $1585 = $46;
      $1586 = $47;
      HEAP32[$1585>>2] = $1586;
      $1587 = ((($1585)) + 4|0);
      $1588 = $48;
      HEAP32[$1587>>2] = $1588;
      $44 = $824;
      $45 = 1;
      $1589 = $44;
      $1590 = $45;
      $1591 = $1590&1;
      $1592 = ((($1589)) + 4|0);
      $1593 = HEAP32[$1592>>2]|0;
      if ($1591) {
       $1594 = HEAP32[$1589>>2]|0;
       $1595 = HEAP32[$1594>>2]|0;
       $1596 = $1595 | $1593;
       HEAP32[$1594>>2] = $1596;
       break;
      } else {
       $1597 = $1593 ^ -1;
       $1598 = HEAP32[$1589>>2]|0;
       $1599 = HEAP32[$1598>>2]|0;
       $1600 = $1599 & $1597;
       HEAP32[$1598>>2] = $1600;
       break;
      }
     }
     $42 = $825;
     $43 = 11009;
     $1605 = $42;
     $41 = $1605;
     $1606 = $41;
     $40 = $1606;
     $1607 = $40;
     $39 = $1607;
     $1608 = $43;
     $1609 = $43;
     __THREW__ = 0;
     $1610 = (invoke_ii(379,($1609|0))|0);
     $1611 = __THREW__; __THREW__ = 0;
     $1612 = $1611&1;
     if ($1612) {
      label = 53;
      break L33;
     }
     __THREW__ = 0;
     invoke_viii(380,($1605|0),($1608|0),($1610|0));
     $1613 = __THREW__; __THREW__ = 0;
     $1614 = $1613&1;
     if ($1614) {
      label = 53;
      break L33;
     }
     $1615 = $mtlLine;
     $38 = $1615;
     $1616 = $38;
     $37 = $1616;
     $1617 = $37;
     $36 = $1617;
     $1618 = $36;
     $35 = $1618;
     $1619 = $35;
     $34 = $1619;
     $1620 = $34;
     $1621 = HEAP8[$1620>>0]|0;
     $1622 = $1621&255;
     $1623 = $1622 & 1;
     $1624 = ($1623|0)!=(0);
     if ($1624) {
      $30 = $1617;
      $1625 = $30;
      $29 = $1625;
      $1626 = $29;
      $28 = $1626;
      $1627 = $28;
      $1628 = ((($1627)) + 4|0);
      $1629 = HEAP32[$1628>>2]|0;
      $1637 = $1629;
     } else {
      $33 = $1617;
      $1630 = $33;
      $32 = $1630;
      $1631 = $32;
      $31 = $1631;
      $1632 = $31;
      $1633 = HEAP8[$1632>>0]|0;
      $1634 = $1633&255;
      $1635 = $1634 >> 1;
      $1637 = $1635;
     }
     $1636 = $mtlLine;
     $24 = $825;
     $25 = 0;
     $26 = $1637;
     $27 = $1636;
     $1638 = $24;
     $1639 = $25;
     $1640 = $26;
     $1641 = $27;
     $23 = $1641;
     $1642 = $23;
     $22 = $1642;
     $1643 = $22;
     $21 = $1643;
     $1644 = $21;
     $20 = $1644;
     $1645 = $20;
     $19 = $1645;
     $1646 = $19;
     $1647 = HEAP8[$1646>>0]|0;
     $1648 = $1647&255;
     $1649 = $1648 & 1;
     $1650 = ($1649|0)!=(0);
     if ($1650) {
      $13 = $1643;
      $1651 = $13;
      $12 = $1651;
      $1652 = $12;
      $11 = $1652;
      $1653 = $11;
      $1654 = ((($1653)) + 8|0);
      $1655 = HEAP32[$1654>>2]|0;
      $1662 = $1655;
     } else {
      $18 = $1643;
      $1656 = $18;
      $17 = $1656;
      $1657 = $17;
      $16 = $1657;
      $1658 = $16;
      $1659 = ((($1658)) + 1|0);
      $15 = $1659;
      $1660 = $15;
      $14 = $1660;
      $1661 = $14;
      $1662 = $1661;
     }
     $10 = $1662;
     $1663 = $10;
     $1664 = $27;
     $9 = $1664;
     $1665 = $9;
     $8 = $1665;
     $1666 = $8;
     $7 = $1666;
     $1667 = $7;
     $6 = $1667;
     $1668 = $6;
     $1669 = HEAP8[$1668>>0]|0;
     $1670 = $1669&255;
     $1671 = $1670 & 1;
     $1672 = ($1671|0)!=(0);
     if ($1672) {
      $2 = $1665;
      $1673 = $2;
      $1 = $1673;
      $1674 = $1;
      $0 = $1674;
      $1675 = $0;
      $1676 = ((($1675)) + 4|0);
      $1677 = HEAP32[$1676>>2]|0;
      $1684 = $1677;
     } else {
      $5 = $1665;
      $1678 = $5;
      $4 = $1678;
      $1679 = $4;
      $3 = $1679;
      $1680 = $3;
      $1681 = HEAP8[$1680>>0]|0;
      $1682 = $1681&255;
      $1683 = $1682 >> 1;
      $1684 = $1683;
     }
     __THREW__ = 0;
     $1685 = (invoke_iiiiii(414,($1638|0),($1639|0),($1640|0),($1663|0),($1684|0))|0);
     $1686 = __THREW__; __THREW__ = 0;
     $1687 = $1686&1;
     if ($1687) {
      label = 142;
      break L33;
     }
     $1688 = ($1685|0)==(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($825);
     if ($1688) {
      $1689 = $mtlLine;
      __THREW__ = 0;
      invoke_vii(415,($826|0),($1689|0));
      $1690 = __THREW__; __THREW__ = 0;
      $1691 = $1690&1;
      if ($1691) {
       label = 53;
       break L33;
      }
      $253 = $map_kd;
      $254 = $826;
      $1692 = $253;
      $1693 = $254;
      ;HEAP8[$252>>0]=HEAP8[$255>>0]|0;
      $250 = $1692;
      $251 = $1693;
      $1694 = $250;
      $247 = $1694;
      $1695 = $247;
      $246 = $1695;
      $245 = $1695;
      $1696 = $245;
      $244 = $1696;
      $1697 = $244;
      $243 = $1697;
      $1698 = $243;
      $1699 = HEAP8[$1698>>0]|0;
      $1700 = $1699&255;
      $1701 = $1700 & 1;
      $1702 = ($1701|0)!=(0);
      if ($1702) {
       $238 = $1695;
       $1703 = $238;
       $237 = $1703;
       $1704 = $237;
       $236 = $1704;
       $1705 = $236;
       $1706 = ((($1705)) + 8|0);
       $1707 = HEAP32[$1706>>2]|0;
       HEAP8[$248>>0] = 0;
       __ZNSt3__111char_traitsIcE6assignERcRKc($1707,$248);
       $229 = $1695;
       $230 = 0;
       $1708 = $229;
       $1709 = $230;
       $228 = $1708;
       $1710 = $228;
       $227 = $1710;
       $1711 = $227;
       $1712 = ((($1711)) + 4|0);
       HEAP32[$1712>>2] = $1709;
      } else {
       $235 = $1695;
       $1713 = $235;
       $234 = $1713;
       $1714 = $234;
       $233 = $1714;
       $1715 = $233;
       $1716 = ((($1715)) + 1|0);
       $232 = $1716;
       $1717 = $232;
       $231 = $1717;
       $1718 = $231;
       HEAP8[$249>>0] = 0;
       __ZNSt3__111char_traitsIcE6assignERcRKc($1718,$249);
       $241 = $1695;
       $242 = 0;
       $1719 = $241;
       $1720 = $242;
       $1721 = $1720 << 1;
       $1722 = $1721&255;
       $240 = $1719;
       $1723 = $240;
       $239 = $1723;
       $1724 = $239;
       HEAP8[$1724>>0] = $1722;
      }
      $226 = $1694;
      $1725 = $226;
      __THREW__ = 0;
      invoke_vii(368,($1725|0),0);
      $1726 = __THREW__; __THREW__ = 0;
      $1727 = $1726&1;
      if ($1727) {
       label = 135;
       break L33;
      }
      $225 = $1694;
      $1730 = $225;
      $224 = $1730;
      $1731 = $224;
      $1732 = $251;
      $223 = $1732;
      $1733 = $223;
      $222 = $1733;
      $1734 = $222;
      ;HEAP32[$1731>>2]=HEAP32[$1734>>2]|0;HEAP32[$1731+4>>2]=HEAP32[$1734+4>>2]|0;HEAP32[$1731+8>>2]=HEAP32[$1734+8>>2]|0;
      $1735 = $251;
      $219 = $1694;
      $220 = $1735;
      $1736 = $219;
      $1737 = $220;
      ;HEAP8[$218>>0]=HEAP8[$221>>0]|0;
      $216 = $1736;
      $217 = $1737;
      $1738 = $216;
      $215 = $1738;
      $1739 = $215;
      $214 = $1739;
      $1740 = $214;
      $213 = $1740;
      $1741 = $217;
      $211 = $1741;
      $1742 = $211;
      $210 = $1742;
      $1743 = $210;
      $209 = $1743;
      $1744 = $209;
      $212 = $1744;
      $1745 = $251;
      $208 = $1745;
      $1746 = $208;
      $207 = $1746;
      $1747 = $207;
      $206 = $1747;
      $1748 = $206;
      $__a$i$i$i66 = $1748;
      $__i$i$i$i67 = 0;
      while(1) {
       $1749 = $__i$i$i$i67;
       $1750 = ($1749>>>0)<(3);
       if (!($1750)) {
        break;
       }
       $1751 = $__i$i$i$i67;
       $1752 = $__a$i$i$i66;
       $1753 = (($1752) + ($1751<<2)|0);
       HEAP32[$1753>>2] = 0;
       $1754 = $__i$i$i$i67;
       $1755 = (($1754) + 1)|0;
       $__i$i$i$i67 = $1755;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($826);
      $1756 = ((($836)) + 12|0);
      $261 = $1756;
      $262 = 4;
      $1757 = $261;
      $1758 = $262;
      $259 = $1757;
      $260 = $1758;
      $1759 = $259;
      $1760 = $260;
      $1761 = 1 << $1760;
      $256 = $827;
      $257 = $1759;
      $258 = $1761;
      $1762 = $256;
      $1763 = $257;
      HEAP32[$1762>>2] = $1763;
      $1764 = ((($1762)) + 4|0);
      $1765 = $258;
      HEAP32[$1764>>2] = $1765;
      $263 = $827;
      $264 = 1;
      $1766 = $263;
      $1767 = $264;
      $1768 = $1767&1;
      $1769 = ((($1766)) + 4|0);
      $1770 = HEAP32[$1769>>2]|0;
      if ($1768) {
       $1771 = HEAP32[$1766>>2]|0;
       $1772 = HEAP32[$1771>>2]|0;
       $1773 = $1772 | $1770;
       HEAP32[$1771>>2] = $1773;
       break;
      } else {
       $1774 = $1770 ^ -1;
       $1775 = HEAP32[$1766>>2]|0;
       $1776 = HEAP32[$1775>>2]|0;
       $1777 = $1776 & $1774;
       HEAP32[$1775>>2] = $1777;
       break;
      }
     }
     $280 = $828;
     $281 = 11016;
     $1780 = $280;
     $279 = $1780;
     $1781 = $279;
     $278 = $1781;
     $1782 = $278;
     $277 = $1782;
     $1783 = $281;
     $1784 = $281;
     __THREW__ = 0;
     $1785 = (invoke_ii(379,($1784|0))|0);
     $1786 = __THREW__; __THREW__ = 0;
     $1787 = $1786&1;
     if ($1787) {
      label = 53;
      break L33;
     }
     __THREW__ = 0;
     invoke_viii(380,($1780|0),($1783|0),($1785|0));
     $1788 = __THREW__; __THREW__ = 0;
     $1789 = $1788&1;
     if ($1789) {
      label = 53;
      break L33;
     }
     $1790 = $mtlLine;
     $292 = $1790;
     $1791 = $292;
     $291 = $1791;
     $1792 = $291;
     $290 = $1792;
     $1793 = $290;
     $289 = $1793;
     $1794 = $289;
     $288 = $1794;
     $1795 = $288;
     $1796 = HEAP8[$1795>>0]|0;
     $1797 = $1796&255;
     $1798 = $1797 & 1;
     $1799 = ($1798|0)!=(0);
     if ($1799) {
      $284 = $1792;
      $1800 = $284;
      $283 = $1800;
      $1801 = $283;
      $282 = $1801;
      $1802 = $282;
      $1803 = ((($1802)) + 4|0);
      $1804 = HEAP32[$1803>>2]|0;
      $1812 = $1804;
     } else {
      $287 = $1792;
      $1805 = $287;
      $286 = $1805;
      $1806 = $286;
      $285 = $1806;
      $1807 = $285;
      $1808 = HEAP8[$1807>>0]|0;
      $1809 = $1808&255;
      $1810 = $1809 >> 1;
      $1812 = $1810;
     }
     $1811 = $mtlLine;
     $331 = $828;
     $332 = 0;
     $333 = $1812;
     $334 = $1811;
     $1813 = $331;
     $1814 = $332;
     $1815 = $333;
     $1816 = $334;
     $330 = $1816;
     $1817 = $330;
     $329 = $1817;
     $1818 = $329;
     $328 = $1818;
     $1819 = $328;
     $327 = $1819;
     $1820 = $327;
     $326 = $1820;
     $1821 = $326;
     $1822 = HEAP8[$1821>>0]|0;
     $1823 = $1822&255;
     $1824 = $1823 & 1;
     $1825 = ($1824|0)!=(0);
     if ($1825) {
      $320 = $1818;
      $1826 = $320;
      $319 = $1826;
      $1827 = $319;
      $318 = $1827;
      $1828 = $318;
      $1829 = ((($1828)) + 8|0);
      $1830 = HEAP32[$1829>>2]|0;
      $1837 = $1830;
     } else {
      $325 = $1818;
      $1831 = $325;
      $324 = $1831;
      $1832 = $324;
      $323 = $1832;
      $1833 = $323;
      $1834 = ((($1833)) + 1|0);
      $322 = $1834;
      $1835 = $322;
      $321 = $1835;
      $1836 = $321;
      $1837 = $1836;
     }
     $317 = $1837;
     $1838 = $317;
     $1839 = $334;
     $316 = $1839;
     $1840 = $316;
     $315 = $1840;
     $1841 = $315;
     $314 = $1841;
     $1842 = $314;
     $313 = $1842;
     $1843 = $313;
     $1844 = HEAP8[$1843>>0]|0;
     $1845 = $1844&255;
     $1846 = $1845 & 1;
     $1847 = ($1846|0)!=(0);
     if ($1847) {
      $309 = $1840;
      $1848 = $309;
      $308 = $1848;
      $1849 = $308;
      $307 = $1849;
      $1850 = $307;
      $1851 = ((($1850)) + 4|0);
      $1852 = HEAP32[$1851>>2]|0;
      $1859 = $1852;
     } else {
      $312 = $1840;
      $1853 = $312;
      $311 = $1853;
      $1854 = $311;
      $310 = $1854;
      $1855 = $310;
      $1856 = HEAP8[$1855>>0]|0;
      $1857 = $1856&255;
      $1858 = $1857 >> 1;
      $1859 = $1858;
     }
     __THREW__ = 0;
     $1860 = (invoke_iiiiii(414,($1813|0),($1814|0),($1815|0),($1838|0),($1859|0))|0);
     $1861 = __THREW__; __THREW__ = 0;
     $1862 = $1861&1;
     if ($1862) {
      label = 168;
      break L33;
     }
     $1863 = ($1860|0)==(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($828);
     if ($1863) {
      $1864 = $mtlLine;
      __THREW__ = 0;
      invoke_vii(415,($829|0),($1864|0));
      $1865 = __THREW__; __THREW__ = 0;
      $1866 = $1865&1;
      if ($1866) {
       label = 53;
       break L33;
      }
      $420 = $map_ks;
      $421 = $829;
      $1867 = $420;
      $1868 = $421;
      ;HEAP8[$419>>0]=HEAP8[$422>>0]|0;
      $417 = $1867;
      $418 = $1868;
      $1869 = $417;
      $414 = $1869;
      $1870 = $414;
      $413 = $1870;
      $412 = $1870;
      $1871 = $412;
      $411 = $1871;
      $1872 = $411;
      $410 = $1872;
      $1873 = $410;
      $1874 = HEAP8[$1873>>0]|0;
      $1875 = $1874&255;
      $1876 = $1875 & 1;
      $1877 = ($1876|0)!=(0);
      if ($1877) {
       $405 = $1870;
       $1878 = $405;
       $404 = $1878;
       $1879 = $404;
       $403 = $1879;
       $1880 = $403;
       $1881 = ((($1880)) + 8|0);
       $1882 = HEAP32[$1881>>2]|0;
       HEAP8[$415>>0] = 0;
       __ZNSt3__111char_traitsIcE6assignERcRKc($1882,$415);
       $396 = $1870;
       $397 = 0;
       $1883 = $396;
       $1884 = $397;
       $395 = $1883;
       $1885 = $395;
       $394 = $1885;
       $1886 = $394;
       $1887 = ((($1886)) + 4|0);
       HEAP32[$1887>>2] = $1884;
      } else {
       $402 = $1870;
       $1888 = $402;
       $401 = $1888;
       $1889 = $401;
       $400 = $1889;
       $1890 = $400;
       $1891 = ((($1890)) + 1|0);
       $399 = $1891;
       $1892 = $399;
       $398 = $1892;
       $1893 = $398;
       HEAP8[$416>>0] = 0;
       __ZNSt3__111char_traitsIcE6assignERcRKc($1893,$416);
       $408 = $1870;
       $409 = 0;
       $1894 = $408;
       $1895 = $409;
       $1896 = $1895 << 1;
       $1897 = $1896&255;
       $407 = $1894;
       $1898 = $407;
       $406 = $1898;
       $1899 = $406;
       HEAP8[$1899>>0] = $1897;
      }
      $393 = $1869;
      $1900 = $393;
      __THREW__ = 0;
      invoke_vii(368,($1900|0),0);
      $1901 = __THREW__; __THREW__ = 0;
      $1902 = $1901&1;
      if ($1902) {
       label = 161;
       break L33;
      }
      $392 = $1869;
      $1905 = $392;
      $391 = $1905;
      $1906 = $391;
      $1907 = $418;
      $390 = $1907;
      $1908 = $390;
      $389 = $1908;
      $1909 = $389;
      ;HEAP32[$1906>>2]=HEAP32[$1909>>2]|0;HEAP32[$1906+4>>2]=HEAP32[$1909+4>>2]|0;HEAP32[$1906+8>>2]=HEAP32[$1909+8>>2]|0;
      $1910 = $418;
      $386 = $1869;
      $387 = $1910;
      $1911 = $386;
      $1912 = $387;
      ;HEAP8[$385>>0]=HEAP8[$388>>0]|0;
      $383 = $1911;
      $384 = $1912;
      $1913 = $383;
      $382 = $1913;
      $1914 = $382;
      $381 = $1914;
      $1915 = $381;
      $380 = $1915;
      $1916 = $384;
      $378 = $1916;
      $1917 = $378;
      $377 = $1917;
      $1918 = $377;
      $376 = $1918;
      $1919 = $376;
      $379 = $1919;
      $1920 = $418;
      $375 = $1920;
      $1921 = $375;
      $374 = $1921;
      $1922 = $374;
      $373 = $1922;
      $1923 = $373;
      $__a$i$i$i46 = $1923;
      $__i$i$i$i47 = 0;
      while(1) {
       $1924 = $__i$i$i$i47;
       $1925 = ($1924>>>0)<(3);
       if (!($1925)) {
        break;
       }
       $1926 = $__i$i$i$i47;
       $1927 = $__a$i$i$i46;
       $1928 = (($1927) + ($1926<<2)|0);
       HEAP32[$1928>>2] = 0;
       $1929 = $__i$i$i$i47;
       $1930 = (($1929) + 1)|0;
       $__i$i$i$i47 = $1930;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($829);
      $1931 = ((($836)) + 12|0);
      $428 = $1931;
      $429 = 5;
      $1932 = $428;
      $1933 = $429;
      $426 = $1932;
      $427 = $1933;
      $1934 = $426;
      $1935 = $427;
      $1936 = 1 << $1935;
      $423 = $830;
      $424 = $1934;
      $425 = $1936;
      $1937 = $423;
      $1938 = $424;
      HEAP32[$1937>>2] = $1938;
      $1939 = ((($1937)) + 4|0);
      $1940 = $425;
      HEAP32[$1939>>2] = $1940;
      $430 = $830;
      $431 = 1;
      $1941 = $430;
      $1942 = $431;
      $1943 = $1942&1;
      $1944 = ((($1941)) + 4|0);
      $1945 = HEAP32[$1944>>2]|0;
      if ($1943) {
       $1946 = HEAP32[$1941>>2]|0;
       $1947 = HEAP32[$1946>>2]|0;
       $1948 = $1947 | $1945;
       HEAP32[$1946>>2] = $1948;
       break;
      } else {
       $1949 = $1945 ^ -1;
       $1950 = HEAP32[$1941>>2]|0;
       $1951 = HEAP32[$1950>>2]|0;
       $1952 = $1951 & $1949;
       HEAP32[$1950>>2] = $1952;
       break;
      }
     }
     $$expand_i1_val = 0;
     HEAP8[$833>>0] = $$expand_i1_val;
     $464 = $831;
     $465 = 11023;
     $1955 = $464;
     $463 = $1955;
     $1956 = $463;
     $462 = $1956;
     $1957 = $462;
     $461 = $1957;
     $1958 = $465;
     $1959 = $465;
     __THREW__ = 0;
     $1960 = (invoke_ii(379,($1959|0))|0);
     $1961 = __THREW__; __THREW__ = 0;
     $1962 = $1961&1;
     if ($1962) {
      label = 53;
      break L33;
     }
     __THREW__ = 0;
     invoke_viii(380,($1955|0),($1958|0),($1960|0));
     $1963 = __THREW__; __THREW__ = 0;
     $1964 = $1963&1;
     if ($1964) {
      label = 53;
      break L33;
     }
     $1965 = $mtlLine;
     $476 = $1965;
     $1966 = $476;
     $475 = $1966;
     $1967 = $475;
     $474 = $1967;
     $1968 = $474;
     $473 = $1968;
     $1969 = $473;
     $472 = $1969;
     $1970 = $472;
     $1971 = HEAP8[$1970>>0]|0;
     $1972 = $1971&255;
     $1973 = $1972 & 1;
     $1974 = ($1973|0)!=(0);
     if ($1974) {
      $468 = $1967;
      $1975 = $468;
      $467 = $1975;
      $1976 = $467;
      $466 = $1976;
      $1977 = $466;
      $1978 = ((($1977)) + 4|0);
      $1979 = HEAP32[$1978>>2]|0;
      $1987 = $1979;
     } else {
      $471 = $1967;
      $1980 = $471;
      $470 = $1980;
      $1981 = $470;
      $469 = $1981;
      $1982 = $469;
      $1983 = HEAP8[$1982>>0]|0;
      $1984 = $1983&255;
      $1985 = $1984 >> 1;
      $1987 = $1985;
     }
     $1986 = $mtlLine;
     $515 = $831;
     $516 = 0;
     $517 = $1987;
     $518 = $1986;
     $1988 = $515;
     $1989 = $516;
     $1990 = $517;
     $1991 = $518;
     $514 = $1991;
     $1992 = $514;
     $513 = $1992;
     $1993 = $513;
     $512 = $1993;
     $1994 = $512;
     $511 = $1994;
     $1995 = $511;
     $510 = $1995;
     $1996 = $510;
     $1997 = HEAP8[$1996>>0]|0;
     $1998 = $1997&255;
     $1999 = $1998 & 1;
     $2000 = ($1999|0)!=(0);
     if ($2000) {
      $504 = $1993;
      $2001 = $504;
      $503 = $2001;
      $2002 = $503;
      $502 = $2002;
      $2003 = $502;
      $2004 = ((($2003)) + 8|0);
      $2005 = HEAP32[$2004>>2]|0;
      $2012 = $2005;
     } else {
      $509 = $1993;
      $2006 = $509;
      $508 = $2006;
      $2007 = $508;
      $507 = $2007;
      $2008 = $507;
      $2009 = ((($2008)) + 1|0);
      $506 = $2009;
      $2010 = $506;
      $505 = $2010;
      $2011 = $505;
      $2012 = $2011;
     }
     $501 = $2012;
     $2013 = $501;
     $2014 = $518;
     $500 = $2014;
     $2015 = $500;
     $499 = $2015;
     $2016 = $499;
     $498 = $2016;
     $2017 = $498;
     $497 = $2017;
     $2018 = $497;
     $2019 = HEAP8[$2018>>0]|0;
     $2020 = $2019&255;
     $2021 = $2020 & 1;
     $2022 = ($2021|0)!=(0);
     if ($2022) {
      $493 = $2015;
      $2023 = $493;
      $492 = $2023;
      $2024 = $492;
      $491 = $2024;
      $2025 = $491;
      $2026 = ((($2025)) + 4|0);
      $2027 = HEAP32[$2026>>2]|0;
      $2034 = $2027;
     } else {
      $496 = $2015;
      $2028 = $496;
      $495 = $2028;
      $2029 = $495;
      $494 = $2029;
      $2030 = $494;
      $2031 = HEAP8[$2030>>0]|0;
      $2032 = $2031&255;
      $2033 = $2032 >> 1;
      $2034 = $2033;
     }
     __THREW__ = 0;
     $2035 = (invoke_iiiiii(414,($1988|0),($1989|0),($1990|0),($2013|0),($2034|0))|0);
     $2036 = __THREW__; __THREW__ = 0;
     $2037 = $2036&1;
     if ($2037) {
      label = 210;
      break L33;
     }
     $2038 = ($2035|0)==(0);
     if ($2038) {
      $2277 = 1;
     } else {
      $548 = $832;
      $549 = 11032;
      $2039 = $548;
      $547 = $2039;
      $2040 = $547;
      $546 = $2040;
      $2041 = $546;
      $545 = $2041;
      $2042 = $549;
      $2043 = $549;
      __THREW__ = 0;
      $2044 = (invoke_ii(379,($2043|0))|0);
      $2045 = __THREW__; __THREW__ = 0;
      $2046 = $2045&1;
      if ($2046) {
       label = 210;
       break L33;
      }
      __THREW__ = 0;
      invoke_viii(380,($2039|0),($2042|0),($2044|0));
      $2047 = __THREW__; __THREW__ = 0;
      $2048 = $2047&1;
      if ($2048) {
       label = 210;
       break L33;
      }
      $$expand_i1_val16 = 1;
      HEAP8[$833>>0] = $$expand_i1_val16;
      $2049 = $mtlLine;
      $560 = $2049;
      $2050 = $560;
      $559 = $2050;
      $2051 = $559;
      $558 = $2051;
      $2052 = $558;
      $557 = $2052;
      $2053 = $557;
      $556 = $2053;
      $2054 = $556;
      $2055 = HEAP8[$2054>>0]|0;
      $2056 = $2055&255;
      $2057 = $2056 & 1;
      $2058 = ($2057|0)!=(0);
      if ($2058) {
       $552 = $2051;
       $2059 = $552;
       $551 = $2059;
       $2060 = $551;
       $550 = $2060;
       $2061 = $550;
       $2062 = ((($2061)) + 4|0);
       $2063 = HEAP32[$2062>>2]|0;
       $2071 = $2063;
      } else {
       $555 = $2051;
       $2064 = $555;
       $554 = $2064;
       $2065 = $554;
       $553 = $2065;
       $2066 = $553;
       $2067 = HEAP8[$2066>>0]|0;
       $2068 = $2067&255;
       $2069 = $2068 >> 1;
       $2071 = $2069;
      }
      $2070 = $mtlLine;
      $586 = $832;
      $587 = 0;
      $588 = $2071;
      $589 = $2070;
      $2072 = $586;
      $2073 = $587;
      $2074 = $588;
      $2075 = $589;
      $585 = $2075;
      $2076 = $585;
      $584 = $2076;
      $2077 = $584;
      $583 = $2077;
      $2078 = $583;
      $582 = $2078;
      $2079 = $582;
      $581 = $2079;
      $2080 = $581;
      $2081 = HEAP8[$2080>>0]|0;
      $2082 = $2081&255;
      $2083 = $2082 & 1;
      $2084 = ($2083|0)!=(0);
      if ($2084) {
       $575 = $2077;
       $2085 = $575;
       $574 = $2085;
       $2086 = $574;
       $573 = $2086;
       $2087 = $573;
       $2088 = ((($2087)) + 8|0);
       $2089 = HEAP32[$2088>>2]|0;
       $2096 = $2089;
      } else {
       $580 = $2077;
       $2090 = $580;
       $579 = $2090;
       $2091 = $579;
       $578 = $2091;
       $2092 = $578;
       $2093 = ((($2092)) + 1|0);
       $577 = $2093;
       $2094 = $577;
       $576 = $2094;
       $2095 = $576;
       $2096 = $2095;
      }
      $572 = $2096;
      $2097 = $572;
      $2098 = $589;
      $571 = $2098;
      $2099 = $571;
      $570 = $2099;
      $2100 = $570;
      $569 = $2100;
      $2101 = $569;
      $568 = $2101;
      $2102 = $568;
      $2103 = HEAP8[$2102>>0]|0;
      $2104 = $2103&255;
      $2105 = $2104 & 1;
      $2106 = ($2105|0)!=(0);
      if ($2106) {
       $564 = $2099;
       $2107 = $564;
       $563 = $2107;
       $2108 = $563;
       $562 = $2108;
       $2109 = $562;
       $2110 = ((($2109)) + 4|0);
       $2111 = HEAP32[$2110>>2]|0;
       $2118 = $2111;
      } else {
       $567 = $2099;
       $2112 = $567;
       $566 = $2112;
       $2113 = $566;
       $565 = $2113;
       $2114 = $565;
       $2115 = HEAP8[$2114>>0]|0;
       $2116 = $2115&255;
       $2117 = $2116 >> 1;
       $2118 = $2117;
      }
      __THREW__ = 0;
      $2119 = (invoke_iiiiii(414,($2072|0),($2073|0),($2074|0),($2097|0),($2118|0))|0);
      $2120 = __THREW__; __THREW__ = 0;
      $2121 = $2120&1;
      if ($2121) {
       label = 211;
       break L33;
      }
      $2122 = ($2119|0)==(0);
      $2277 = $2122;
     }
     $$pre_trunc = HEAP8[$833>>0]|0;
     $2123 = $$pre_trunc&1;
     if ($2123) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($832);
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($831);
     if (!($2277)) {
      break;
     }
     $2124 = $mtlLine;
     __THREW__ = 0;
     invoke_vii(415,($834|0),($2124|0));
     $2125 = __THREW__; __THREW__ = 0;
     $2126 = $2125&1;
     if ($2126) {
      label = 53;
      break L33;
     }
     $671 = $map_bump;
     $672 = $834;
     $2127 = $671;
     $2128 = $672;
     ;HEAP8[$670>>0]=HEAP8[$673>>0]|0;
     $668 = $2127;
     $669 = $2128;
     $2129 = $668;
     $665 = $2129;
     $2130 = $665;
     $664 = $2130;
     $663 = $2130;
     $2131 = $663;
     $662 = $2131;
     $2132 = $662;
     $661 = $2132;
     $2133 = $661;
     $2134 = HEAP8[$2133>>0]|0;
     $2135 = $2134&255;
     $2136 = $2135 & 1;
     $2137 = ($2136|0)!=(0);
     if ($2137) {
      $656 = $2130;
      $2138 = $656;
      $655 = $2138;
      $2139 = $655;
      $654 = $2139;
      $2140 = $654;
      $2141 = ((($2140)) + 8|0);
      $2142 = HEAP32[$2141>>2]|0;
      HEAP8[$666>>0] = 0;
      __ZNSt3__111char_traitsIcE6assignERcRKc($2142,$666);
      $647 = $2130;
      $648 = 0;
      $2143 = $647;
      $2144 = $648;
      $646 = $2143;
      $2145 = $646;
      $645 = $2145;
      $2146 = $645;
      $2147 = ((($2146)) + 4|0);
      HEAP32[$2147>>2] = $2144;
     } else {
      $653 = $2130;
      $2148 = $653;
      $652 = $2148;
      $2149 = $652;
      $651 = $2149;
      $2150 = $651;
      $2151 = ((($2150)) + 1|0);
      $650 = $2151;
      $2152 = $650;
      $649 = $2152;
      $2153 = $649;
      HEAP8[$667>>0] = 0;
      __ZNSt3__111char_traitsIcE6assignERcRKc($2153,$667);
      $659 = $2130;
      $660 = 0;
      $2154 = $659;
      $2155 = $660;
      $2156 = $2155 << 1;
      $2157 = $2156&255;
      $658 = $2154;
      $2158 = $658;
      $657 = $2158;
      $2159 = $657;
      HEAP8[$2159>>0] = $2157;
     }
     $644 = $2129;
     $2160 = $644;
     __THREW__ = 0;
     invoke_vii(368,($2160|0),0);
     $2161 = __THREW__; __THREW__ = 0;
     $2162 = $2161&1;
     if ($2162) {
      label = 203;
      break L33;
     }
     $643 = $2129;
     $2165 = $643;
     $642 = $2165;
     $2166 = $642;
     $2167 = $669;
     $641 = $2167;
     $2168 = $641;
     $640 = $2168;
     $2169 = $640;
     ;HEAP32[$2166>>2]=HEAP32[$2169>>2]|0;HEAP32[$2166+4>>2]=HEAP32[$2169+4>>2]|0;HEAP32[$2166+8>>2]=HEAP32[$2169+8>>2]|0;
     $2170 = $669;
     $637 = $2129;
     $638 = $2170;
     $2171 = $637;
     $2172 = $638;
     ;HEAP8[$636>>0]=HEAP8[$639>>0]|0;
     $634 = $2171;
     $635 = $2172;
     $2173 = $634;
     $633 = $2173;
     $2174 = $633;
     $632 = $2174;
     $2175 = $632;
     $631 = $2175;
     $2176 = $635;
     $629 = $2176;
     $2177 = $629;
     $628 = $2177;
     $2178 = $628;
     $627 = $2178;
     $2179 = $627;
     $630 = $2179;
     $2180 = $669;
     $626 = $2180;
     $2181 = $626;
     $625 = $2181;
     $2182 = $625;
     $624 = $2182;
     $2183 = $624;
     $__a$i$i$i = $2183;
     $__i$i$i$i = 0;
     while(1) {
      $2184 = $__i$i$i$i;
      $2185 = ($2184>>>0)<(3);
      if (!($2185)) {
       break;
      }
      $2186 = $__i$i$i$i;
      $2187 = $__a$i$i$i;
      $2188 = (($2187) + ($2186<<2)|0);
      HEAP32[$2188>>2] = 0;
      $2189 = $__i$i$i$i;
      $2190 = (($2189) + 1)|0;
      $__i$i$i$i = $2190;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($834);
     $2191 = ((($836)) + 12|0);
     $679 = $2191;
     $680 = 6;
     $2192 = $679;
     $2193 = $680;
     $677 = $2192;
     $678 = $2193;
     $2194 = $677;
     $2195 = $678;
     $2196 = 1 << $2195;
     $674 = $835;
     $675 = $2194;
     $676 = $2196;
     $2197 = $674;
     $2198 = $675;
     HEAP32[$2197>>2] = $2198;
     $2199 = ((($2197)) + 4|0);
     $2200 = $676;
     HEAP32[$2199>>2] = $2200;
     $681 = $835;
     $682 = 1;
     $2201 = $681;
     $2202 = $682;
     $2203 = $2202&1;
     $2204 = ((($2201)) + 4|0);
     $2205 = HEAP32[$2204>>2]|0;
     if ($2203) {
      $2206 = HEAP32[$2201>>2]|0;
      $2207 = HEAP32[$2206>>2]|0;
      $2208 = $2207 | $2205;
      HEAP32[$2206>>2] = $2208;
      break;
     } else {
      $2209 = $2205 ^ -1;
      $2210 = HEAP32[$2201>>2]|0;
      $2211 = HEAP32[$2210>>2]|0;
      $2212 = $2211 & $2209;
      HEAP32[$2210>>2] = $2212;
      break;
     }
    }
   }
  } while(0);
  $683 = $__begin;
  $2218 = $683;
  $2219 = HEAP32[$2218>>2]|0;
  $2220 = ((($2219)) + 12|0);
  HEAP32[$2218>>2] = $2220;
 }
 switch (label|0) {
  case 107: {
   $1551 = ___cxa_find_matching_catch_3(0|0)|0;
   $1552 = tempRet0;
   ___clang_call_terminate($1551);
   // unreachable;
   break;
  }
  case 114: {
   $1601 = ___cxa_find_matching_catch_2()|0;
   $1602 = tempRet0;
   $813 = $1601;
   $814 = $1602;
   label = 116;
   break;
  }
  case 115: {
   $1603 = ___cxa_find_matching_catch_2()|0;
   $1604 = tempRet0;
   $813 = $1603;
   $814 = $1604;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($822);
   label = 116;
   break;
  }
  case 135: {
   $1728 = ___cxa_find_matching_catch_3(0|0)|0;
   $1729 = tempRet0;
   ___clang_call_terminate($1728);
   // unreachable;
   break;
  }
  case 142: {
   $1778 = ___cxa_find_matching_catch_2()|0;
   $1779 = tempRet0;
   $813 = $1778;
   $814 = $1779;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($825);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_bump);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ks);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_kd);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ka);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ks);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($kd);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ka);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($915);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($901);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($887);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($873);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($862);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($851);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($840);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($836);
   $2275 = $813;
   $2276 = $814;
   ___resumeException($2275|0);
   // unreachable;
   break;
  }
  case 161: {
   $1903 = ___cxa_find_matching_catch_3(0|0)|0;
   $1904 = tempRet0;
   ___clang_call_terminate($1903);
   // unreachable;
   break;
  }
  case 168: {
   $1953 = ___cxa_find_matching_catch_2()|0;
   $1954 = tempRet0;
   $813 = $1953;
   $814 = $1954;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($828);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_bump);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ks);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_kd);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ka);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ks);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($kd);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ka);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($915);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($901);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($887);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($873);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($862);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($851);
   __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($840);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($836);
   $2275 = $813;
   $2276 = $814;
   ___resumeException($2275|0);
   // unreachable;
   break;
  }
  case 203: {
   $2163 = ___cxa_find_matching_catch_3(0|0)|0;
   $2164 = tempRet0;
   ___clang_call_terminate($2163);
   // unreachable;
   break;
  }
  case 210: {
   $2213 = ___cxa_find_matching_catch_2()|0;
   $2214 = tempRet0;
   $813 = $2213;
   $814 = $2214;
   label = 213;
   break;
  }
  case 211: {
   $2215 = ___cxa_find_matching_catch_2()|0;
   $2216 = tempRet0;
   $813 = $2215;
   $814 = $2216;
   $$pre_trunc19 = HEAP8[$833>>0]|0;
   $2217 = $$pre_trunc19&1;
   if ($2217) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($832);
    label = 213;
   } else {
    label = 213;
   }
   break;
  }
  case 215: {
   $2221 = ((($836)) + 16|0);
   $697 = $2221;
   $698 = $ka;
   $2222 = $697;
   $2223 = $698;
   $2224 = ($2222|0)!=($2223|0);
   if ($2224) {
    $2225 = $698;
    $694 = $2222;
    $695 = $2225;
    $2226 = $694;
    $2227 = $695;
    ;HEAP8[$693>>0]=HEAP8[$696>>0]|0;
    $691 = $2226;
    $692 = $2227;
    $2228 = $698;
    $2229 = HEAP32[$2228>>2]|0;
    $2230 = $698;
    $2231 = ((($2230)) + 4|0);
    $2232 = HEAP32[$2231>>2]|0;
    __THREW__ = 0;
    invoke_viii(416,($2222|0),($2229|0),($2232|0));
    $2233 = __THREW__; __THREW__ = 0;
    $2234 = $2233&1;
    if ($2234) {
     label = 53;
     break;
    }
   }
   $2235 = ((($836)) + 28|0);
   $712 = $2235;
   $713 = $kd;
   $2236 = $712;
   $2237 = $713;
   $2238 = ($2236|0)!=($2237|0);
   if ($2238) {
    $2239 = $713;
    $709 = $2236;
    $710 = $2239;
    $2240 = $709;
    $2241 = $710;
    ;HEAP8[$708>>0]=HEAP8[$711>>0]|0;
    $706 = $2240;
    $707 = $2241;
    $2242 = $713;
    $2243 = HEAP32[$2242>>2]|0;
    $2244 = $713;
    $2245 = ((($2244)) + 4|0);
    $2246 = HEAP32[$2245>>2]|0;
    __THREW__ = 0;
    invoke_viii(416,($2236|0),($2243|0),($2246|0));
    $2247 = __THREW__; __THREW__ = 0;
    $2248 = $2247&1;
    if ($2248) {
     label = 53;
     break;
    }
   }
   $2249 = ((($836)) + 40|0);
   $730 = $2249;
   $731 = $ks;
   $2250 = $730;
   $2251 = $731;
   $2252 = ($2250|0)!=($2251|0);
   if ($2252) {
    $2253 = $731;
    $727 = $2250;
    $728 = $2253;
    $2254 = $727;
    $2255 = $728;
    ;HEAP8[$726>>0]=HEAP8[$729>>0]|0;
    $724 = $2254;
    $725 = $2255;
    $2256 = $731;
    $2257 = HEAP32[$2256>>2]|0;
    $2258 = $731;
    $2259 = ((($2258)) + 4|0);
    $2260 = HEAP32[$2259>>2]|0;
    __THREW__ = 0;
    invoke_viii(416,($2250|0),($2257|0),($2260|0));
    $2261 = __THREW__; __THREW__ = 0;
    $2262 = $2261&1;
    if ($2262) {
     label = 53;
     break;
    }
   }
   $2263 = ((($836)) + 52|0);
   __THREW__ = 0;
   (invoke_iii(417,($2263|0),($map_ka|0))|0);
   $2264 = __THREW__; __THREW__ = 0;
   $2265 = $2264&1;
   if ($2265) {
    label = 53;
   } else {
    $2266 = ((($836)) + 64|0);
    __THREW__ = 0;
    (invoke_iii(417,($2266|0),($map_kd|0))|0);
    $2267 = __THREW__; __THREW__ = 0;
    $2268 = $2267&1;
    if ($2268) {
     label = 53;
    } else {
     $2269 = ((($836)) + 76|0);
     __THREW__ = 0;
     (invoke_iii(417,($2269|0),($map_ks|0))|0);
     $2270 = __THREW__; __THREW__ = 0;
     $2271 = $2270&1;
     if ($2271) {
      label = 53;
     } else {
      $2272 = ((($836)) + 88|0);
      __THREW__ = 0;
      (invoke_iii(417,($2272|0),($map_bump|0))|0);
      $2273 = __THREW__; __THREW__ = 0;
      $2274 = $2273&1;
      if ($2274) {
       label = 53;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_bump);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ks);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_kd);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ka);
       __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ks);
       __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($kd);
       __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ka);
       STACKTOP = sp;return;
      }
     }
    }
   }
   break;
  }
 }
 if ((label|0) == 53) {
  $1204 = ___cxa_find_matching_catch_2()|0;
  $1205 = tempRet0;
  $813 = $1204;
  $814 = $1205;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_bump);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ks);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_kd);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ka);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ks);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($kd);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ka);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($915);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($901);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($887);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($873);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($862);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($851);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($840);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($836);
  $2275 = $813;
  $2276 = $814;
  ___resumeException($2275|0);
  // unreachable;
 }
 else if ((label|0) == 116) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($821);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_bump);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ks);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_kd);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ka);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ks);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($kd);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ka);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($915);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($901);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($887);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($873);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($862);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($851);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($840);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($836);
  $2275 = $813;
  $2276 = $814;
  ___resumeException($2275|0);
  // unreachable;
 }
 else if ((label|0) == 213) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($831);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_bump);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ks);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_kd);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($map_ka);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ks);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($kd);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($ka);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($915);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($901);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($887);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($873);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($862);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($851);
  __ZNSt3__16vectorIfNS_9allocatorIfEEED2Ev($840);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($836);
  $2275 = $813;
  $2276 = $814;
  ___resumeException($2275|0);
  // unreachable;
 }
}
function __ZNSt3__16vectorIfNS_9allocatorIfEEE6assignIPfEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap$i = 0, $__growing = 0, $__m = 0;
 var $__mid = 0, $__ms$i = 0, $__n$i$i = 0, $__new_size = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 24|0;
 $7 = sp + 292|0;
 $28 = sp + 16|0;
 $31 = sp + 291|0;
 $38 = sp + 8|0;
 $41 = sp + 290|0;
 $49 = sp + 104|0;
 $50 = sp + 92|0;
 $59 = sp;
 $62 = sp + 289|0;
 $__mid = sp + 32|0;
 $63 = $this;
 $64 = $__first;
 $65 = $__last;
 $66 = $63;
 $67 = $64;
 $68 = $65;
 $60 = $67;
 $61 = $68;
 $69 = $60;
 $70 = $61;
 ;HEAP8[$59>>0]=HEAP8[$62>>0]|0;
 $57 = $69;
 $58 = $70;
 $71 = $58;
 $72 = $57;
 $73 = $71;
 $74 = $72;
 $75 = (($73) - ($74))|0;
 $76 = (($75|0) / 4)&-1;
 $__new_size = $76;
 $77 = $__new_size;
 $56 = $66;
 $78 = $56;
 $55 = $78;
 $79 = $55;
 $54 = $79;
 $80 = $54;
 $81 = ((($80)) + 8|0);
 $53 = $81;
 $82 = $53;
 $52 = $82;
 $83 = $52;
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$79>>2]|0;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = (($88|0) / 4)&-1;
 $90 = ($77>>>0)<=($89>>>0);
 if (!($90)) {
  __ZNSt3__16vectorIfNS_9allocatorIfEEE10deallocateEv($66);
  $176 = $__new_size;
  $48 = $66;
  HEAP32[$49>>2] = $176;
  $177 = $48;
  $178 = (__ZNKSt3__16vectorIfNS_9allocatorIfEEE8max_sizeEv($177)|0);
  $__ms$i = $178;
  $179 = HEAP32[$49>>2]|0;
  $180 = $__ms$i;
  $181 = ($179>>>0)>($180>>>0);
  if ($181) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($177);
   // unreachable;
  }
  $46 = $177;
  $182 = $46;
  $45 = $182;
  $183 = $45;
  $44 = $183;
  $184 = $44;
  $185 = ((($184)) + 8|0);
  $43 = $185;
  $186 = $43;
  $42 = $186;
  $187 = $42;
  $188 = HEAP32[$187>>2]|0;
  $189 = HEAP32[$183>>2]|0;
  $190 = $188;
  $191 = $189;
  $192 = (($190) - ($191))|0;
  $193 = (($192|0) / 4)&-1;
  $__cap$i = $193;
  $194 = $__cap$i;
  $195 = $__ms$i;
  $196 = (($195>>>0) / 2)&-1;
  $197 = ($194>>>0)>=($196>>>0);
  if ($197) {
   $198 = $__ms$i;
   $47 = $198;
  } else {
   $199 = $__cap$i;
   $200 = $199<<1;
   HEAP32[$50>>2] = $200;
   $39 = $50;
   $40 = $49;
   $201 = $39;
   $202 = $40;
   ;HEAP8[$38>>0]=HEAP8[$41>>0]|0;
   $36 = $201;
   $37 = $202;
   $203 = $36;
   $204 = $37;
   $33 = $38;
   $34 = $203;
   $35 = $204;
   $205 = $34;
   $206 = HEAP32[$205>>2]|0;
   $207 = $35;
   $208 = HEAP32[$207>>2]|0;
   $209 = ($206>>>0)<($208>>>0);
   $210 = $37;
   $211 = $36;
   $212 = $209 ? $210 : $211;
   $213 = HEAP32[$212>>2]|0;
   $47 = $213;
  }
  $214 = $47;
  __ZNSt3__16vectorIfNS_9allocatorIfEEE8allocateEj($66,$214);
  $215 = $64;
  $216 = $65;
  __ZNSt3__16vectorIfNS_9allocatorIfEEE18__construct_at_endIPfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($66,$215,$216);
  STACKTOP = sp;return;
 }
 $91 = $65;
 HEAP32[$__mid>>2] = $91;
 $__growing = 0;
 $92 = $__new_size;
 $51 = $66;
 $93 = $51;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = HEAP32[$93>>2]|0;
 $97 = $95;
 $98 = $96;
 $99 = (($97) - ($98))|0;
 $100 = (($99|0) / 4)&-1;
 $101 = ($92>>>0)>($100>>>0);
 if ($101) {
  $__growing = 1;
  $102 = $64;
  HEAP32[$__mid>>2] = $102;
  $32 = $66;
  $103 = $32;
  $104 = ((($103)) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$103>>2]|0;
  $107 = $105;
  $108 = $106;
  $109 = (($107) - ($108))|0;
  $110 = (($109|0) / 4)&-1;
  $29 = $__mid;
  $30 = $110;
  $111 = $29;
  $112 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $111;
  $27 = $112;
  $113 = $27;
  $114 = $26;
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($113<<2)|0);
  HEAP32[$114>>2] = $116;
 }
 $117 = $64;
 $118 = HEAP32[$__mid>>2]|0;
 $119 = HEAP32[$66>>2]|0;
 $23 = $117;
 $24 = $118;
 $25 = $119;
 $120 = $23;
 $22 = $120;
 $121 = $22;
 $122 = $24;
 $17 = $122;
 $123 = $17;
 $124 = $25;
 $18 = $124;
 $125 = $18;
 $19 = $121;
 $20 = $123;
 $21 = $125;
 $126 = $20;
 $127 = $19;
 $128 = $126;
 $129 = $127;
 $130 = (($128) - ($129))|0;
 $131 = (($130|0) / 4)&-1;
 $__n$i$i = $131;
 $132 = $21;
 $133 = $19;
 $134 = $__n$i$i;
 $135 = $134<<2;
 _memmove(($132|0),($133|0),($135|0))|0;
 $136 = $21;
 $137 = $__n$i$i;
 $138 = (($136) + ($137<<2)|0);
 $__m = $138;
 $139 = $__growing;
 $140 = $139&1;
 if ($140) {
  $141 = HEAP32[$__mid>>2]|0;
  $142 = $65;
  __ZNSt3__16vectorIfNS_9allocatorIfEEE18__construct_at_endIPfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($66,$141,$142);
  STACKTOP = sp;return;
 }
 $143 = $__m;
 $15 = $66;
 $16 = $143;
 $144 = $15;
 $14 = $144;
 $145 = $14;
 $146 = ((($145)) + 4|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = HEAP32[$145>>2]|0;
 $149 = $147;
 $150 = $148;
 $151 = (($149) - ($150))|0;
 $152 = (($151|0) / 4)&-1;
 $__old_size$i = $152;
 $153 = $16;
 $12 = $144;
 $13 = $153;
 $154 = $12;
 while(1) {
  $155 = $13;
  $156 = ((($154)) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($155|0)!=($157|0);
  if (!($158)) {
   break;
  }
  $11 = $154;
  $159 = $11;
  $160 = ((($159)) + 8|0);
  $10 = $160;
  $161 = $10;
  $9 = $161;
  $162 = $9;
  $163 = ((($154)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ((($164)) + -4|0);
  HEAP32[$163>>2] = $165;
  $8 = $165;
  $166 = $8;
  $5 = $162;
  $6 = $166;
  $167 = $5;
  $168 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $167;
  $3 = $168;
  $169 = $2;
  $170 = $3;
  $0 = $169;
  $1 = $170;
 }
 $171 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(397,($144|0),($171|0));
 $172 = __THREW__; __THREW__ = 0;
 $173 = $172&1;
 if ($173) {
  $174 = ___cxa_find_matching_catch_3(0|0)|0;
  $175 = tempRet0;
  ___clang_call_terminate($174);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN9ObjMaster26TextureDataHoldingMaterialC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6vectorIS7_NS5_IS7_EEEE($this,$materialName,$descriptorLineFields) {
 $this = $this|0;
 $materialName = $materialName|0;
 $descriptorLineFields = $descriptorLineFields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 180|0;
 $6 = sp + 168|0;
 $13 = sp + 140|0;
 $16 = sp + 128|0;
 $23 = sp + 100|0;
 $26 = sp + 88|0;
 $33 = sp + 60|0;
 $36 = sp + 48|0;
 $41 = sp + 20|0;
 $42 = sp + 8|0;
 $40 = $this;
 $45 = $40;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($41,$materialName);
 __THREW__ = 0;
 invoke_vii(418,($42|0),($descriptorLineFields|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $94 = ___cxa_find_matching_catch_2()|0;
  $95 = tempRet0;
  $43 = $94;
  $44 = $95;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($41);
  $98 = $43;
  $99 = $44;
  ___resumeException($98|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viii(419,($45|0),($41|0),($42|0));
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 if (!($49)) {
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($42);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($41);
  $50 = ((($45)) + 108|0);
  $39 = $50;
  $51 = $39;
  $38 = $51;
  $52 = $38;
  $37 = $52;
  HEAP32[$52>>2] = 0;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = 0;
  $54 = ((($52)) + 8|0);
  $35 = $54;
  HEAP32[$36>>2] = 0;
  $55 = $35;
  $34 = $36;
  $56 = $34;
  $57 = HEAP32[$56>>2]|0;
  $32 = $55;
  HEAP32[$33>>2] = $57;
  $58 = $32;
  $31 = $58;
  $30 = $33;
  $59 = $30;
  $60 = HEAP32[$59>>2]|0;
  HEAP32[$58>>2] = $60;
  $61 = ((($45)) + 120|0);
  $29 = $61;
  $62 = $29;
  $28 = $62;
  $63 = $28;
  $27 = $63;
  HEAP32[$63>>2] = 0;
  $64 = ((($63)) + 4|0);
  HEAP32[$64>>2] = 0;
  $65 = ((($63)) + 8|0);
  $25 = $65;
  HEAP32[$26>>2] = 0;
  $66 = $25;
  $24 = $26;
  $67 = $24;
  $68 = HEAP32[$67>>2]|0;
  $22 = $66;
  HEAP32[$23>>2] = $68;
  $69 = $22;
  $21 = $69;
  $20 = $23;
  $70 = $20;
  $71 = HEAP32[$70>>2]|0;
  HEAP32[$69>>2] = $71;
  $72 = ((($45)) + 132|0);
  $9 = $72;
  $73 = $9;
  $8 = $73;
  $74 = $8;
  $7 = $74;
  HEAP32[$74>>2] = 0;
  $75 = ((($74)) + 4|0);
  HEAP32[$75>>2] = 0;
  $76 = ((($74)) + 8|0);
  $5 = $76;
  HEAP32[$6>>2] = 0;
  $77 = $5;
  $4 = $6;
  $78 = $4;
  $79 = HEAP32[$78>>2]|0;
  $2 = $77;
  HEAP32[$3>>2] = $79;
  $80 = $2;
  $1 = $80;
  $0 = $3;
  $81 = $0;
  $82 = HEAP32[$81>>2]|0;
  HEAP32[$80>>2] = $82;
  $83 = ((($45)) + 144|0);
  $19 = $83;
  $84 = $19;
  $18 = $84;
  $85 = $18;
  $17 = $85;
  HEAP32[$85>>2] = 0;
  $86 = ((($85)) + 4|0);
  HEAP32[$86>>2] = 0;
  $87 = ((($85)) + 8|0);
  $15 = $87;
  HEAP32[$16>>2] = 0;
  $88 = $15;
  $14 = $16;
  $89 = $14;
  $90 = HEAP32[$89>>2]|0;
  $12 = $88;
  HEAP32[$13>>2] = $90;
  $91 = $12;
  $11 = $91;
  $10 = $13;
  $92 = $10;
  $93 = HEAP32[$92>>2]|0;
  HEAP32[$91>>2] = $93;
  STACKTOP = sp;return;
 }
 $96 = ___cxa_find_matching_catch_2()|0;
 $97 = tempRet0;
 $43 = $96;
 $44 = $97;
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($42);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($41);
 $98 = $43;
 $99 = $44;
 ___resumeException($98|0);
 // unreachable;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $6 = sp + 16|0;
 $9 = sp + 72|0;
 $10 = sp + 111|0;
 $11 = sp + 8|0;
 $15 = sp + 110|0;
 $17 = sp;
 $19 = sp + 109|0;
 $25 = sp + 108|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 12)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(420,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $65 = ___cxa_find_matching_catch_2()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 }
 $58 = $24;
 $59 = HEAP32[$58>>2]|0;
 $60 = $24;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_viii(421,($28|0),($59|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $65 = ___cxa_find_matching_catch_2()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = ((($18)) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = ($25*12)|0;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = ((($14)) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + (($31*12)|0)|0);
  $2 = $14;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($42,$44);
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 12|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 12|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN9ObjMaster18ObjectGroupElement10isParsableEPKc($fields) {
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fields;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==(111);
   if ($10) {
    $11 = $0;
    $12 = ((($11)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($14|0)==(32);
    $16 = $15;
   } else {
    $16 = 0;
   }
  } else {
   $16 = 0;
  }
 } else {
  $16 = 0;
 }
 STACKTOP = sp;return ($16|0);
}
function __ZN9ObjMaster18ObjectGroupElement18getObjectGroupNameEPKc($agg$result,$fields) {
 $agg$result = $agg$result|0;
 $fields = $fields|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $8 = sp + 8|0;
 $9 = sp + 44|0;
 $7 = $fields;
 $10 = $7;
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 HEAP8[$9>>0] = $12;
 HEAP32[$8>>2] = $9;
 $13 = ((($8)) + 4|0);
 HEAP32[$13>>2] = 1;
 ;HEAP8[$6>>0]=HEAP8[$8>>0]|0;HEAP8[$6+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$6+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$6+3>>0]=HEAP8[$8+3>>0]|0;HEAP8[$6+4>>0]=HEAP8[$8+4>>0]|0;HEAP8[$6+5>>0]=HEAP8[$8+5>>0]|0;HEAP8[$6+6>>0]=HEAP8[$8+6>>0]|0;HEAP8[$6+7>>0]=HEAP8[$8+7>>0]|0;
 $5 = $agg$result;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $3 = $15;
 $16 = $3;
 $2 = $16;
 $1 = $6;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $0 = $6;
 $19 = $0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($19)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + ($22)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($14,$18,$23);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap = 0, $__m$i = 0, $__p = 0, $__sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $34 = sp + 8|0;
 $36 = sp + 214|0;
 $43 = sp;
 $46 = sp + 213|0;
 $50 = sp + 212|0;
 $47 = $this;
 $48 = $__first;
 $49 = $__last;
 $51 = $47;
 $52 = $48;
 $53 = $49;
 $44 = $52;
 $45 = $53;
 $54 = $44;
 $55 = $45;
 ;HEAP8[$43>>0]=HEAP8[$46>>0]|0;
 $41 = $54;
 $42 = $55;
 $56 = $42;
 $57 = $41;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $__sz = $60;
 $61 = $__sz;
 $40 = $51;
 $62 = $40;
 $39 = $62;
 $63 = $39;
 $38 = $63;
 $64 = $38;
 $37 = $64;
 $65 = $37;
 $35 = $65;
 $66 = $35;
 ;HEAP8[$34>>0]=HEAP8[$36>>0]|0;
 $33 = $66;
 $67 = $33;
 $32 = $67;
 $__m$i = -1;
 $68 = $__m$i;
 $69 = (($68) - 16)|0;
 $70 = ($61>>>0)>($69>>>0);
 if ($70) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($51);
  // unreachable;
 }
 $71 = $__sz;
 $72 = ($71>>>0)<(11);
 $73 = $__sz;
 if ($72) {
  $30 = $51;
  $31 = $73;
  $74 = $30;
  $75 = $31;
  $76 = $75 << 1;
  $77 = $76&255;
  $29 = $74;
  $78 = $29;
  $28 = $78;
  $79 = $28;
  HEAP8[$79>>0] = $77;
  $9 = $51;
  $80 = $9;
  $8 = $80;
  $81 = $8;
  $7 = $81;
  $82 = $7;
  $83 = ((($82)) + 1|0);
  $6 = $83;
  $84 = $6;
  $5 = $84;
  $85 = $5;
  $__p = $85;
 } else {
  $1 = $73;
  $86 = $1;
  $87 = ($86>>>0)<(11);
  if ($87) {
   $94 = 11;
  } else {
   $88 = $1;
   $89 = (($88) + 1)|0;
   $0 = $89;
   $90 = $0;
   $91 = (($90) + 15)|0;
   $92 = $91 & -16;
   $94 = $92;
  }
  $93 = (($94) - 1)|0;
  $__cap = $93;
  $4 = $51;
  $95 = $4;
  $3 = $95;
  $96 = $3;
  $2 = $96;
  $97 = $2;
  $98 = $__cap;
  $99 = (($98) + 1)|0;
  $14 = $97;
  $15 = $99;
  $100 = $14;
  $101 = $15;
  $11 = $100;
  $12 = $101;
  $13 = 0;
  $102 = $12;
  $10 = $102;
  $103 = $10;
  $104 = (__Znwj($103)|0);
  $__p = $104;
  $105 = $__p;
  $18 = $51;
  $19 = $105;
  $106 = $18;
  $107 = $19;
  $17 = $106;
  $108 = $17;
  $16 = $108;
  $109 = $16;
  $110 = ((($109)) + 8|0);
  HEAP32[$110>>2] = $107;
  $111 = $__cap;
  $112 = (($111) + 1)|0;
  $22 = $51;
  $23 = $112;
  $113 = $22;
  $114 = $23;
  $115 = 1 | $114;
  $21 = $113;
  $116 = $21;
  $20 = $116;
  $117 = $20;
  HEAP32[$117>>2] = $115;
  $118 = $__sz;
  $26 = $51;
  $27 = $118;
  $119 = $26;
  $120 = $27;
  $25 = $119;
  $121 = $25;
  $24 = $121;
  $122 = $24;
  $123 = ((($122)) + 4|0);
  HEAP32[$123>>2] = $120;
 }
 while(1) {
  $124 = $48;
  $125 = $49;
  $126 = ($124|0)!=($125|0);
  $127 = $__p;
  if (!($126)) {
   break;
  }
  $128 = $48;
  __ZNSt3__111char_traitsIcE6assignERcRKc($127,$128);
  $129 = $48;
  $130 = ((($129)) + 1|0);
  $48 = $130;
  $131 = $__p;
  $132 = ((($131)) + 1|0);
  $__p = $132;
 }
 HEAP8[$50>>0] = 0;
 __ZNSt3__111char_traitsIcE6assignERcRKc($127,$50);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_MtlLib_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_79();
 return;
}
function ___cxx_global_var_init_79() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = 18236;
 $4 = 11037;
 $5 = $3;
 $2 = $5;
 $6 = $2;
 $1 = $6;
 $7 = $1;
 $0 = $7;
 $8 = $4;
 $9 = $4;
 $10 = (__ZNSt3__111char_traitsIcE6lengthEPKc($9)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($5,$8,$10);
 (___cxa_atexit((422|0),(18236|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster6MtlLib10isParsableEPKc($fields) {
 $fields = $fields|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $targetString = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 56|0;
 $targetString = sp + 20|0;
 $7 = sp + 8|0;
 $6 = $fields;
 $10 = $6;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $6;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $6;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)==(109);
   if ($19) {
    $20 = $6;
    $3 = $targetString;
    $4 = $20;
    $21 = $3;
    $2 = $21;
    $22 = $2;
    $1 = $22;
    $23 = $1;
    $0 = $23;
    $24 = $4;
    $25 = $4;
    $26 = (__ZNSt3__111char_traitsIcE6lengthEPKc($25)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($21,$24,$26);
    __THREW__ = 0;
    invoke_vii(384,($7|0),(18236|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $32 = ___cxa_find_matching_catch_2()|0;
     $33 = tempRet0;
     $8 = $32;
     $9 = $33;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($targetString);
     $36 = $8;
     $37 = $9;
     ___resumeException($36|0);
     // unreachable;
    }
    __THREW__ = 0;
    $29 = (invoke_iii(423,($targetString|0),($7|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     $34 = ___cxa_find_matching_catch_2()|0;
     $35 = tempRet0;
     $8 = $34;
     $9 = $35;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($targetString);
     $36 = $8;
     $37 = $9;
     ___resumeException($36|0);
     // unreachable;
    } else {
     $$expand_i1_val = $29&1;
     HEAP8[$5>>0] = $$expand_i1_val;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($targetString);
     $$pre_trunc = HEAP8[$5>>0]|0;
     $38 = $$pre_trunc&1;
     STACKTOP = sp;return ($38|0);
    }
   }
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$5>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$5>>0]|0;
 $38 = $$pre_trunc&1;
 STACKTOP = sp;return ($38|0);
}
function __ZL12isStartsWithRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5__83($targetString,$keyword) {
 $targetString = $targetString|0;
 $keyword = $keyword|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $mismatch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $24 = sp + 648|0;
 $50 = sp + 544|0;
 $66 = sp + 480|0;
 $92 = sp + 376|0;
 $118 = sp + 64|0;
 $119 = sp + 56|0;
 $120 = sp + 48|0;
 $121 = sp + 40|0;
 $122 = sp + 32|0;
 $123 = sp + 272|0;
 $124 = sp + 268|0;
 $125 = sp + 264|0;
 $126 = sp + 260|0;
 $127 = sp + 749|0;
 $128 = sp + 24|0;
 $129 = sp + 16|0;
 $130 = sp + 8|0;
 $131 = sp;
 $156 = sp + 160|0;
 $172 = sp + 748|0;
 $mismatch = sp + 88|0;
 $174 = sp + 84|0;
 $175 = sp + 80|0;
 $176 = sp + 76|0;
 $177 = sp + 72|0;
 $178 = sp + 68|0;
 $173 = $targetString;
 $171 = $keyword;
 $179 = $171;
 $170 = $179;
 $180 = $170;
 $169 = $180;
 $181 = $169;
 $168 = $181;
 $182 = $168;
 $183 = HEAP8[$182>>0]|0;
 $184 = $183&255;
 $185 = $184 & 1;
 $186 = ($185|0)!=(0);
 if ($186) {
  $164 = $179;
  $187 = $164;
  $163 = $187;
  $188 = $163;
  $162 = $188;
  $189 = $162;
  $190 = ((($189)) + 4|0);
  $191 = HEAP32[$190>>2]|0;
  $218 = $191;
 } else {
  $167 = $179;
  $192 = $167;
  $166 = $192;
  $193 = $166;
  $165 = $193;
  $194 = $165;
  $195 = HEAP8[$194>>0]|0;
  $196 = $195&255;
  $197 = $196 >> 1;
  $218 = $197;
 }
 $198 = $173;
 $9 = $198;
 $199 = $9;
 $8 = $199;
 $200 = $8;
 $7 = $200;
 $201 = $7;
 $6 = $201;
 $202 = $6;
 $203 = HEAP8[$202>>0]|0;
 $204 = $203&255;
 $205 = $204 & 1;
 $206 = ($205|0)!=(0);
 if ($206) {
  $2 = $199;
  $207 = $2;
  $1 = $207;
  $208 = $1;
  $0 = $208;
  $209 = $0;
  $210 = ((($209)) + 4|0);
  $211 = HEAP32[$210>>2]|0;
  $220 = $211;
 } else {
  $5 = $199;
  $212 = $5;
  $4 = $212;
  $213 = $4;
  $3 = $213;
  $214 = $3;
  $215 = HEAP8[$214>>0]|0;
  $216 = $215&255;
  $217 = $216 >> 1;
  $220 = $217;
 }
 $219 = ($218>>>0)>($220>>>0);
 if ($219) {
  $$expand_i1_val = 0;
  HEAP8[$172>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$172>>0]|0;
  $456 = $$pre_trunc&1;
  STACKTOP = sp;return ($456|0);
 }
 $25 = $keyword;
 $221 = $25;
 $23 = $221;
 $222 = $23;
 $22 = $222;
 $223 = $22;
 $21 = $223;
 $224 = $21;
 $20 = $224;
 $225 = $20;
 $226 = HEAP8[$225>>0]|0;
 $227 = $226&255;
 $228 = $227 & 1;
 $229 = ($228|0)!=(0);
 if ($229) {
  $14 = $222;
  $230 = $14;
  $13 = $230;
  $231 = $13;
  $12 = $231;
  $232 = $12;
  $233 = ((($232)) + 8|0);
  $234 = HEAP32[$233>>2]|0;
  $241 = $234;
 } else {
  $19 = $222;
  $235 = $19;
  $18 = $235;
  $236 = $18;
  $17 = $236;
  $237 = $17;
  $238 = ((($237)) + 1|0);
  $16 = $238;
  $239 = $16;
  $15 = $239;
  $240 = $15;
  $241 = $240;
 }
 $10 = $24;
 $11 = $241;
 $242 = $10;
 $243 = $11;
 HEAP32[$242>>2] = $243;
 $244 = HEAP32[$24>>2]|0;
 HEAP32[$174>>2] = $244;
 $51 = $keyword;
 $245 = $51;
 $49 = $245;
 $246 = $49;
 $48 = $246;
 $247 = $48;
 $47 = $247;
 $248 = $47;
 $46 = $248;
 $249 = $46;
 $250 = HEAP8[$249>>0]|0;
 $251 = $250&255;
 $252 = $251 & 1;
 $253 = ($252|0)!=(0);
 if ($253) {
  $40 = $246;
  $254 = $40;
  $39 = $254;
  $255 = $39;
  $38 = $255;
  $256 = $38;
  $257 = ((($256)) + 8|0);
  $258 = HEAP32[$257>>2]|0;
  $285 = $258;
 } else {
  $45 = $246;
  $259 = $45;
  $44 = $259;
  $260 = $44;
  $43 = $260;
  $261 = $43;
  $262 = ((($261)) + 1|0);
  $42 = $262;
  $263 = $42;
  $41 = $263;
  $264 = $41;
  $285 = $264;
 }
 $35 = $245;
 $265 = $35;
 $34 = $265;
 $266 = $34;
 $33 = $266;
 $267 = $33;
 $32 = $267;
 $268 = $32;
 $269 = HEAP8[$268>>0]|0;
 $270 = $269&255;
 $271 = $270 & 1;
 $272 = ($271|0)!=(0);
 if ($272) {
  $28 = $265;
  $273 = $28;
  $27 = $273;
  $274 = $27;
  $26 = $274;
  $275 = $26;
  $276 = ((($275)) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  $286 = $277;
 } else {
  $31 = $265;
  $278 = $31;
  $30 = $278;
  $279 = $30;
  $29 = $279;
  $280 = $29;
  $281 = HEAP8[$280>>0]|0;
  $282 = $281&255;
  $283 = $282 >> 1;
  $286 = $283;
 }
 $284 = (($285) + ($286)|0);
 $36 = $50;
 $37 = $284;
 $287 = $36;
 $288 = $37;
 HEAP32[$287>>2] = $288;
 $289 = HEAP32[$50>>2]|0;
 HEAP32[$175>>2] = $289;
 $290 = $173;
 $67 = $290;
 $291 = $67;
 $65 = $291;
 $292 = $65;
 $64 = $292;
 $293 = $64;
 $63 = $293;
 $294 = $63;
 $62 = $294;
 $295 = $62;
 $296 = HEAP8[$295>>0]|0;
 $297 = $296&255;
 $298 = $297 & 1;
 $299 = ($298|0)!=(0);
 if ($299) {
  $56 = $292;
  $300 = $56;
  $55 = $300;
  $301 = $55;
  $54 = $301;
  $302 = $54;
  $303 = ((($302)) + 8|0);
  $304 = HEAP32[$303>>2]|0;
  $311 = $304;
 } else {
  $61 = $292;
  $305 = $61;
  $60 = $305;
  $306 = $60;
  $59 = $306;
  $307 = $59;
  $308 = ((($307)) + 1|0);
  $58 = $308;
  $309 = $58;
  $57 = $309;
  $310 = $57;
  $311 = $310;
 }
 $52 = $66;
 $53 = $311;
 $312 = $52;
 $313 = $53;
 HEAP32[$312>>2] = $313;
 $314 = HEAP32[$66>>2]|0;
 HEAP32[$176>>2] = $314;
 $315 = $173;
 $93 = $315;
 $316 = $93;
 $91 = $316;
 $317 = $91;
 $90 = $317;
 $318 = $90;
 $89 = $318;
 $319 = $89;
 $88 = $319;
 $320 = $88;
 $321 = HEAP8[$320>>0]|0;
 $322 = $321&255;
 $323 = $322 & 1;
 $324 = ($323|0)!=(0);
 if ($324) {
  $82 = $317;
  $325 = $82;
  $81 = $325;
  $326 = $81;
  $80 = $326;
  $327 = $80;
  $328 = ((($327)) + 8|0);
  $329 = HEAP32[$328>>2]|0;
  $356 = $329;
 } else {
  $87 = $317;
  $330 = $87;
  $86 = $330;
  $331 = $86;
  $85 = $331;
  $332 = $85;
  $333 = ((($332)) + 1|0);
  $84 = $333;
  $334 = $84;
  $83 = $334;
  $335 = $83;
  $356 = $335;
 }
 $77 = $316;
 $336 = $77;
 $76 = $336;
 $337 = $76;
 $75 = $337;
 $338 = $75;
 $74 = $338;
 $339 = $74;
 $340 = HEAP8[$339>>0]|0;
 $341 = $340&255;
 $342 = $341 & 1;
 $343 = ($342|0)!=(0);
 if ($343) {
  $70 = $336;
  $344 = $70;
  $69 = $344;
  $345 = $69;
  $68 = $345;
  $346 = $68;
  $347 = ((($346)) + 4|0);
  $348 = HEAP32[$347>>2]|0;
  $357 = $348;
 } else {
  $73 = $336;
  $349 = $73;
  $72 = $349;
  $350 = $72;
  $71 = $350;
  $351 = $71;
  $352 = HEAP8[$351>>0]|0;
  $353 = $352&255;
  $354 = $353 >> 1;
  $357 = $354;
 }
 $355 = (($356) + ($357)|0);
 $78 = $92;
 $79 = $355;
 $358 = $78;
 $359 = $79;
 HEAP32[$358>>2] = $359;
 $360 = HEAP32[$92>>2]|0;
 HEAP32[$177>>2] = $360;
 ;HEAP8[$128>>0]=HEAP8[$177>>0]|0;HEAP8[$128+1>>0]=HEAP8[$177+1>>0]|0;HEAP8[$128+2>>0]=HEAP8[$177+2>>0]|0;HEAP8[$128+3>>0]=HEAP8[$177+3>>0]|0;
 ;HEAP8[$129>>0]=HEAP8[$176>>0]|0;HEAP8[$129+1>>0]=HEAP8[$176+1>>0]|0;HEAP8[$129+2>>0]=HEAP8[$176+2>>0]|0;HEAP8[$129+3>>0]=HEAP8[$176+3>>0]|0;
 ;HEAP8[$130>>0]=HEAP8[$175>>0]|0;HEAP8[$130+1>>0]=HEAP8[$175+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$175+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$175+3>>0]|0;
 ;HEAP8[$131>>0]=HEAP8[$174>>0]|0;HEAP8[$131+1>>0]=HEAP8[$174+1>>0]|0;HEAP8[$131+2>>0]=HEAP8[$174+2>>0]|0;HEAP8[$131+3>>0]=HEAP8[$174+3>>0]|0;
 ;HEAP32[$123>>2]=HEAP32[$131>>2]|0;
 ;HEAP32[$124>>2]=HEAP32[$130>>2]|0;
 ;HEAP32[$125>>2]=HEAP32[$129>>2]|0;
 ;HEAP32[$126>>2]=HEAP32[$128>>2]|0;
 ;HEAP8[$118>>0]=HEAP8[$127>>0]|0;
 ;HEAP8[$119>>0]=HEAP8[$126>>0]|0;HEAP8[$119+1>>0]=HEAP8[$126+1>>0]|0;HEAP8[$119+2>>0]=HEAP8[$126+2>>0]|0;HEAP8[$119+3>>0]=HEAP8[$126+3>>0]|0;
 ;HEAP8[$120>>0]=HEAP8[$125>>0]|0;HEAP8[$120+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$120+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$120+3>>0]=HEAP8[$125+3>>0]|0;
 ;HEAP8[$121>>0]=HEAP8[$124>>0]|0;HEAP8[$121+1>>0]=HEAP8[$124+1>>0]|0;HEAP8[$121+2>>0]=HEAP8[$124+2>>0]|0;HEAP8[$121+3>>0]=HEAP8[$124+3>>0]|0;
 ;HEAP8[$122>>0]=HEAP8[$123>>0]|0;HEAP8[$122+1>>0]=HEAP8[$123+1>>0]|0;HEAP8[$122+2>>0]=HEAP8[$123+2>>0]|0;HEAP8[$122+3>>0]=HEAP8[$123+3>>0]|0;
 while(1) {
  $116 = $122;
  $117 = $121;
  $361 = $116;
  $362 = $117;
  $114 = $361;
  $115 = $362;
  $363 = $114;
  $113 = $363;
  $364 = $113;
  $365 = HEAP32[$364>>2]|0;
  $366 = $115;
  $112 = $366;
  $367 = $112;
  $368 = HEAP32[$367>>2]|0;
  $369 = ($365|0)==($368|0);
  $370 = $369 ^ 1;
  if (!($370)) {
   break;
  }
  $98 = $120;
  $99 = $119;
  $371 = $98;
  $372 = $99;
  $96 = $371;
  $97 = $372;
  $373 = $96;
  $95 = $373;
  $374 = $95;
  $375 = HEAP32[$374>>2]|0;
  $376 = $97;
  $94 = $376;
  $377 = $94;
  $378 = HEAP32[$377>>2]|0;
  $379 = ($375|0)==($378|0);
  $380 = $379 ^ 1;
  if (!($380)) {
   break;
  }
  $100 = $122;
  $381 = $100;
  $382 = HEAP32[$381>>2]|0;
  $101 = $120;
  $383 = $101;
  $384 = HEAP32[$383>>2]|0;
  $102 = $118;
  $103 = $382;
  $104 = $384;
  $385 = $103;
  $386 = HEAP8[$385>>0]|0;
  $387 = $386 << 24 >> 24;
  $388 = $104;
  $389 = HEAP8[$388>>0]|0;
  $390 = $389 << 24 >> 24;
  $391 = ($387|0)==($390|0);
  if (!($391)) {
   break;
  }
  $105 = $122;
  $392 = $105;
  $393 = HEAP32[$392>>2]|0;
  $394 = ((($393)) + 1|0);
  HEAP32[$392>>2] = $394;
  $106 = $120;
  $395 = $106;
  $396 = HEAP32[$395>>2]|0;
  $397 = ((($396)) + 1|0);
  HEAP32[$395>>2] = $397;
 }
 $109 = $mismatch;
 $110 = $122;
 $111 = $120;
 $398 = $109;
 $399 = $110;
 $108 = $399;
 $400 = $108;
 ;HEAP32[$398>>2]=HEAP32[$400>>2]|0;
 $401 = ((($398)) + 4|0);
 $402 = $111;
 $107 = $402;
 $403 = $107;
 ;HEAP32[$401>>2]=HEAP32[$403>>2]|0;
 $157 = $keyword;
 $404 = $157;
 $155 = $404;
 $405 = $155;
 $154 = $405;
 $406 = $154;
 $153 = $406;
 $407 = $153;
 $152 = $407;
 $408 = $152;
 $409 = HEAP8[$408>>0]|0;
 $410 = $409&255;
 $411 = $410 & 1;
 $412 = ($411|0)!=(0);
 if ($412) {
  $146 = $405;
  $413 = $146;
  $145 = $413;
  $414 = $145;
  $144 = $414;
  $415 = $144;
  $416 = ((($415)) + 8|0);
  $417 = HEAP32[$416>>2]|0;
  $444 = $417;
 } else {
  $151 = $405;
  $418 = $151;
  $150 = $418;
  $419 = $150;
  $149 = $419;
  $420 = $149;
  $421 = ((($420)) + 1|0);
  $148 = $421;
  $422 = $148;
  $147 = $422;
  $423 = $147;
  $444 = $423;
 }
 $141 = $404;
 $424 = $141;
 $140 = $424;
 $425 = $140;
 $139 = $425;
 $426 = $139;
 $138 = $426;
 $427 = $138;
 $428 = HEAP8[$427>>0]|0;
 $429 = $428&255;
 $430 = $429 & 1;
 $431 = ($430|0)!=(0);
 if ($431) {
  $134 = $424;
  $432 = $134;
  $133 = $432;
  $433 = $133;
  $132 = $433;
  $434 = $132;
  $435 = ((($434)) + 4|0);
  $436 = HEAP32[$435>>2]|0;
  $445 = $436;
 } else {
  $137 = $424;
  $437 = $137;
  $136 = $437;
  $438 = $136;
  $135 = $438;
  $439 = $135;
  $440 = HEAP8[$439>>0]|0;
  $441 = $440&255;
  $442 = $441 >> 1;
  $445 = $442;
 }
 $443 = (($444) + ($445)|0);
 $142 = $156;
 $143 = $443;
 $446 = $142;
 $447 = $143;
 HEAP32[$446>>2] = $447;
 $448 = HEAP32[$156>>2]|0;
 HEAP32[$178>>2] = $448;
 $160 = $mismatch;
 $161 = $178;
 $449 = $160;
 $159 = $449;
 $450 = $159;
 $451 = HEAP32[$450>>2]|0;
 $452 = $161;
 $158 = $452;
 $453 = $158;
 $454 = HEAP32[$453>>2]|0;
 $455 = ($451|0)==($454|0);
 if ($455) {
  $$expand_i1_val2 = 1;
  HEAP8[$172>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$172>>0]|0;
  $456 = $$pre_trunc&1;
  STACKTOP = sp;return ($456|0);
 } else {
  $$expand_i1_val4 = 0;
  HEAP8[$172>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$172>>0]|0;
  $456 = $$pre_trunc&1;
  STACKTOP = sp;return ($456|0);
 }
 return (0)|0;
}
function __ZN9ObjMaster6MtlLib18constructionHelperEPcPKcRK12AssetLibrary($this,$fields,$assetPath,$assetLibrary) {
 $this = $this|0;
 $fields = $fields|0;
 $assetPath = $assetPath|0;
 $assetLibrary = $assetLibrary|0;
 var $$expand_i1_val = 0, $$expand_i1_val26 = 0, $$expand_i1_val28 = 0, $$expand_i1_val30 = 0, $$pre_trunc = 0, $$pre_trunc33 = 0, $$pre_trunc35 = 0, $$pre_trunc37 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0, $__a$i$i$i = 0, $__a$i$i$i$i$i$i = 0, $__annotator$i = 0, $__annotator$i14 = 0, $__i$i$i = 0, $__i$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__old_size$i = 0, $__old_size$i16 = 0, $__tmp$i$i = 0, $__tmp$i$i20 = 0, $currentMaterialName = 0, $descriptorLineFields = 0, $eh$lpad$body$index21Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var $firstMaterial = 0, $input = 0, $key = 0, $libFileCstr = 0, $libraryFile = 0, $line = 0, $savePtr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1984|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 104|0;
 $vararg_buffer14 = sp + 96|0;
 $vararg_buffer12 = sp + 88|0;
 $vararg_buffer8 = sp + 80|0;
 $vararg_buffer6 = sp + 72|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer2 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $31 = sp + 40|0;
 $34 = sp + 1979|0;
 $60 = sp + 32|0;
 $65 = sp + 1978|0;
 $__annotator$i14 = sp + 1977|0;
 $93 = sp + 24|0;
 $96 = sp + 1976|0;
 $123 = sp + 1975|0;
 $124 = sp + 1974|0;
 $127 = sp + 16|0;
 $130 = sp + 1973|0;
 $151 = sp + 8|0;
 $154 = sp + 1972|0;
 $182 = sp + 1004|0;
 $212 = sp + 872|0;
 $215 = sp + 860|0;
 $257 = sp;
 $262 = sp + 1969|0;
 $__annotator$i = sp + 1968|0;
 $savePtr = sp + 604|0;
 $libraryFile = sp + 584|0;
 $input = sp + 572|0;
 $line = sp + 1712|0;
 $descriptorLineFields = sp + 560|0;
 $currentMaterialName = sp + 548|0;
 $283 = sp + 536|0;
 $284 = sp + 1709|0;
 $285 = sp + 524|0;
 $286 = sp + 1708|0;
 $287 = sp + 352|0;
 $288 = sp + 340|0;
 $289 = sp + 328|0;
 $290 = sp + 316|0;
 $291 = sp + 304|0;
 $292 = sp + 132|0;
 $293 = sp + 120|0;
 $294 = sp + 108|0;
 $277 = $this;
 $278 = $fields;
 $279 = $assetPath;
 $280 = $assetLibrary;
 $295 = $277;
 $296 = $278;
 $297 = (__ZN9ObjMaster6MtlLib10isParsableEPKc($296)|0);
 if (!($297)) {
  STACKTOP = sp;return;
 }
 $298 = $278;
 $299 = HEAP32[431]|0;
 $300 = (_strtok_r($298,$299,$savePtr)|0);
 $key = $300;
 $301 = HEAP32[431]|0;
 $302 = (_strtok_r(0,$301,$savePtr)|0);
 $libFileCstr = $302;
 $303 = $libFileCstr;
 $275 = $libraryFile;
 $276 = $303;
 $304 = $275;
 $274 = $304;
 $305 = $274;
 $273 = $305;
 $306 = $273;
 $272 = $306;
 $307 = $276;
 $308 = $276;
 $309 = (__ZNSt3__111char_traitsIcE6lengthEPKc($308)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($304,$307,$309);
 $270 = $295;
 $271 = $libraryFile;
 $310 = $270;
 $311 = ((($310)) + 4|0);
 $312 = HEAP32[$311>>2]|0;
 $269 = $310;
 $313 = $269;
 $314 = ((($313)) + 8|0);
 $268 = $314;
 $315 = $268;
 $267 = $315;
 $316 = $267;
 $317 = HEAP32[$316>>2]|0;
 $318 = ($312|0)!=($317|0);
 if ($318) {
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i,$310,1);
  $266 = $310;
  $319 = $266;
  $320 = ((($319)) + 8|0);
  $265 = $320;
  $321 = $265;
  $264 = $321;
  $322 = $264;
  $323 = ((($310)) + 4|0);
  $324 = HEAP32[$323>>2]|0;
  $263 = $324;
  $325 = $263;
  $326 = $271;
  $259 = $322;
  $260 = $325;
  $261 = $326;
  $327 = $259;
  $328 = $260;
  $329 = $261;
  $258 = $329;
  $330 = $258;
  ;HEAP8[$257>>0]=HEAP8[$262>>0]|0;
  $254 = $327;
  $255 = $328;
  $256 = $330;
  $331 = $254;
  $332 = $255;
  $333 = $256;
  $253 = $333;
  $334 = $253;
  $250 = $331;
  $251 = $332;
  $252 = $334;
  $335 = $251;
  $336 = $252;
  $249 = $336;
  $337 = $249;
  __THREW__ = 0;
  invoke_vii(384,($335|0),($337|0));
  $338 = __THREW__; __THREW__ = 0;
  $339 = $338&1;
  if (!($339)) {
   __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $340 = ((($310)) + 4|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = ((($341)) + 12|0);
   HEAP32[$340>>2] = $342;
   label = 6;
  }
 } else {
  $343 = $271;
  __THREW__ = 0;
  invoke_vii(424,($310|0),($343|0));
  $344 = __THREW__; __THREW__ = 0;
  $345 = $344&1;
  if (!($345)) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $346 = HEAP32[504]|0;
  $347 = $279;
  $248 = $libraryFile;
  $348 = $248;
  $247 = $348;
  $349 = $247;
  $246 = $349;
  $350 = $246;
  $245 = $350;
  $351 = $245;
  $244 = $351;
  $352 = $244;
  $243 = $352;
  $353 = $243;
  $354 = HEAP8[$353>>0]|0;
  $355 = $354&255;
  $356 = $355 & 1;
  $357 = ($356|0)!=(0);
  if ($357) {
   $237 = $350;
   $358 = $237;
   $236 = $358;
   $359 = $236;
   $235 = $359;
   $360 = $235;
   $361 = ((($360)) + 8|0);
   $362 = HEAP32[$361>>2]|0;
   $369 = $362;
  } else {
   $242 = $350;
   $363 = $242;
   $241 = $363;
   $364 = $241;
   $240 = $364;
   $365 = $240;
   $366 = ((($365)) + 1|0);
   $239 = $366;
   $367 = $239;
   $238 = $367;
   $368 = $238;
   $369 = $368;
  }
  $234 = $369;
  $370 = $234;
  __THREW__ = 0;
  HEAP32[$vararg_buffer>>2] = $347;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $370;
  (invoke_iiii(339,($346|0),(11046|0),($vararg_buffer|0))|0);
  $371 = __THREW__; __THREW__ = 0;
  $372 = $371&1;
  if (!($372)) {
   $373 = HEAP32[504]|0;
   __THREW__ = 0;
   (invoke_iiii(339,($373|0),(11077|0),($vararg_buffer2|0))|0);
   $374 = __THREW__; __THREW__ = 0;
   $375 = $374&1;
   if (!($375)) {
    $376 = $280;
    $377 = HEAP32[$376>>2]|0;
    $378 = HEAP32[$377>>2]|0;
    $379 = $279;
    $233 = $libraryFile;
    $380 = $233;
    $232 = $380;
    $381 = $232;
    $231 = $381;
    $382 = $231;
    $230 = $382;
    $383 = $230;
    $229 = $383;
    $384 = $229;
    $228 = $384;
    $385 = $228;
    $386 = HEAP8[$385>>0]|0;
    $387 = $386&255;
    $388 = $387 & 1;
    $389 = ($388|0)!=(0);
    if ($389) {
     $222 = $382;
     $390 = $222;
     $221 = $390;
     $391 = $221;
     $220 = $391;
     $392 = $220;
     $393 = ((($392)) + 8|0);
     $394 = HEAP32[$393>>2]|0;
     $401 = $394;
    } else {
     $227 = $382;
     $395 = $227;
     $226 = $395;
     $396 = $226;
     $225 = $396;
     $397 = $225;
     $398 = ((($397)) + 1|0);
     $224 = $398;
     $399 = $224;
     $223 = $399;
     $400 = $223;
     $401 = $400;
    }
    $219 = $401;
    $402 = $219;
    __THREW__ = 0;
    $403 = (invoke_iiii($378|0,($376|0),($379|0),($402|0))|0);
    $404 = __THREW__; __THREW__ = 0;
    $405 = $404&1;
    if (!($405)) {
     HEAP32[$input>>2] = $403;
     $406 = HEAP32[504]|0;
     __THREW__ = 0;
     (invoke_iiii(339,($406|0),(11079|0),($vararg_buffer4|0))|0);
     $407 = __THREW__; __THREW__ = 0;
     $408 = $407&1;
     if ($408) {
      label = 40;
     } else {
      $409 = HEAP32[504]|0;
      __THREW__ = 0;
      (invoke_iiii(339,($409|0),(11077|0),($vararg_buffer6|0))|0);
      $410 = __THREW__; __THREW__ = 0;
      $411 = $410&1;
      if ($411) {
       label = 40;
      } else {
       $218 = $descriptorLineFields;
       $412 = $218;
       $217 = $412;
       $413 = $217;
       $216 = $413;
       HEAP32[$413>>2] = 0;
       $414 = ((($413)) + 4|0);
       HEAP32[$414>>2] = 0;
       $415 = ((($413)) + 8|0);
       $214 = $415;
       HEAP32[$215>>2] = 0;
       $416 = $214;
       $213 = $215;
       $417 = $213;
       $418 = HEAP32[$417>>2]|0;
       $211 = $416;
       HEAP32[$212>>2] = $418;
       $419 = $211;
       $210 = $419;
       $209 = $212;
       $420 = $209;
       $421 = HEAP32[$420>>2]|0;
       HEAP32[$419>>2] = $421;
       $firstMaterial = 1;
       $208 = $currentMaterialName;
       $422 = $208;
       $207 = $422;
       $423 = $207;
       $206 = $423;
       $424 = $206;
       $205 = $424;
       $204 = $422;
       $425 = $204;
       $203 = $425;
       $426 = $203;
       $202 = $426;
       $427 = $202;
       $__a$i$i = $427;
       $__i$i$i = 0;
       while(1) {
        $428 = $__i$i$i;
        $429 = ($428>>>0)<(3);
        if (!($429)) {
         break;
        }
        $430 = $__i$i$i;
        $431 = $__a$i$i;
        $432 = (($431) + ($430<<2)|0);
        HEAP32[$432>>2] = 0;
        $433 = $__i$i$i;
        $434 = (($433) + 1)|0;
        $__i$i$i = $434;
       }
       while(1) {
        $201 = $input;
        $435 = $201;
        $200 = $435;
        $436 = $200;
        $199 = $436;
        $437 = $199;
        $438 = HEAP32[$437>>2]|0;
        $185 = $438;
        $186 = $line;
        $187 = 256;
        $439 = $185;
        $440 = $186;
        $441 = $187;
        $442 = HEAP32[$439>>2]|0;
        $443 = ((($442)) + -12|0);
        $444 = HEAP32[$443>>2]|0;
        $445 = (($439) + ($444)|0);
        $180 = $445;
        $181 = 10;
        $446 = $180;
        __THREW__ = 0;
        $447 = (invoke_ii(345,($446|0))|0);
        $448 = __THREW__; __THREW__ = 0;
        $449 = $448&1;
        if ($449) {
         label = 41;
         break;
        }
        HEAP32[$182>>2] = $447;
        $179 = $182;
        $450 = $179;
        __THREW__ = 0;
        $451 = (invoke_iii(346,($450|0),(18820|0))|0);
        $452 = __THREW__; __THREW__ = 0;
        $453 = $452&1;
        if ($453) {
         label = 23;
         break;
        }
        $454 = $181;
        $177 = $451;
        $178 = $454;
        $455 = $177;
        $456 = HEAP32[$455>>2]|0;
        $457 = ((($456)) + 28|0);
        $458 = HEAP32[$457>>2]|0;
        $459 = $178;
        __THREW__ = 0;
        $460 = (invoke_iii($458|0,($455|0),($459|0))|0);
        $461 = __THREW__; __THREW__ = 0;
        $462 = $461&1;
        if ($462) {
         label = 23;
         break;
        }
        __ZNSt3__16localeD2Ev($182);
        __THREW__ = 0;
        $467 = (invoke_iiiii(347,($439|0),($440|0),($441|0),($460|0))|0);
        $468 = __THREW__; __THREW__ = 0;
        $469 = $468&1;
        if ($469) {
         label = 41;
         break;
        }
        $470 = HEAP32[$467>>2]|0;
        $471 = ((($470)) + -12|0);
        $472 = HEAP32[$471>>2]|0;
        $473 = (($467) + ($472)|0);
        $176 = $473;
        $474 = $176;
        $175 = $474;
        $475 = $175;
        $174 = $475;
        $476 = $174;
        $477 = ((($476)) + 16|0);
        $478 = HEAP32[$477>>2]|0;
        $479 = $478 & 5;
        $480 = ($479|0)!=(0);
        $481 = $480 ^ 1;
        if (!($481)) {
         label = 85;
         break;
        }
        $482 = HEAP8[$line>>0]|0;
        $483 = $482 << 24 >> 24;
        $484 = ($483|0)==(110);
        $$expand_i1_val = 0;
        HEAP8[$284>>0] = $$expand_i1_val;
        $$expand_i1_val26 = 0;
        HEAP8[$286>>0] = $$expand_i1_val26;
        if ($484) {
         $172 = $283;
         $173 = $line;
         $485 = $172;
         $171 = $485;
         $486 = $171;
         $170 = $486;
         $487 = $170;
         $169 = $487;
         $488 = $173;
         $489 = $173;
         __THREW__ = 0;
         $490 = (invoke_ii(379,($489|0))|0);
         $491 = __THREW__; __THREW__ = 0;
         $492 = $491&1;
         if ($492) {
          label = 41;
          break;
         }
         __THREW__ = 0;
         invoke_viii(380,($485|0),($488|0),($490|0));
         $493 = __THREW__; __THREW__ = 0;
         $494 = $493&1;
         if ($494) {
          label = 41;
          break;
         }
         $$expand_i1_val28 = 1;
         HEAP8[$284>>0] = $$expand_i1_val28;
         $167 = $285;
         $168 = 11114;
         $495 = $167;
         $166 = $495;
         $496 = $166;
         $165 = $496;
         $497 = $165;
         $164 = $497;
         $498 = $168;
         $499 = $168;
         __THREW__ = 0;
         $500 = (invoke_ii(379,($499|0))|0);
         $501 = __THREW__; __THREW__ = 0;
         $502 = $501&1;
         if ($502) {
          label = 43;
          break;
         }
         __THREW__ = 0;
         invoke_viii(380,($495|0),($498|0),($500|0));
         $503 = __THREW__; __THREW__ = 0;
         $504 = $503&1;
         if ($504) {
          label = 43;
          break;
         }
         $$expand_i1_val30 = 1;
         HEAP8[$286>>0] = $$expand_i1_val30;
         __THREW__ = 0;
         $505 = (invoke_iii(423,($283|0),($285|0))|0);
         $506 = __THREW__; __THREW__ = 0;
         $507 = $506&1;
         if ($507) {
          label = 44;
          break;
         } else {
          $855 = $505;
         }
        } else {
         $855 = 0;
        }
        $$pre_trunc = HEAP8[$286>>0]|0;
        $508 = $$pre_trunc&1;
        if ($508) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($285);
        }
        $$pre_trunc33 = HEAP8[$284>>0]|0;
        $509 = $$pre_trunc33&1;
        if ($509) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($283);
        }
        if (!($855)) {
         $79 = $291;
         $80 = $line;
         $668 = $79;
         $78 = $668;
         $669 = $78;
         $77 = $669;
         $670 = $77;
         $76 = $670;
         $671 = $80;
         $672 = $80;
         __THREW__ = 0;
         $673 = (invoke_ii(379,($672|0))|0);
         $674 = __THREW__; __THREW__ = 0;
         $675 = $674&1;
         if ($675) {
          label = 41;
          break;
         }
         __THREW__ = 0;
         invoke_viii(380,($668|0),($671|0),($673|0));
         $676 = __THREW__; __THREW__ = 0;
         $677 = $676&1;
         if ($677) {
          label = 41;
          break;
         }
         $74 = $descriptorLineFields;
         $75 = $291;
         $678 = $74;
         $679 = ((($678)) + 4|0);
         $680 = HEAP32[$679>>2]|0;
         $73 = $678;
         $681 = $73;
         $682 = ((($681)) + 8|0);
         $72 = $682;
         $683 = $72;
         $71 = $683;
         $684 = $71;
         $685 = HEAP32[$684>>2]|0;
         $686 = ($680>>>0)<($685>>>0);
         if ($686) {
          __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i14,$678,1);
          $70 = $678;
          $687 = $70;
          $688 = ((($687)) + 8|0);
          $69 = $688;
          $689 = $69;
          $68 = $689;
          $690 = $68;
          $691 = ((($678)) + 4|0);
          $692 = HEAP32[$691>>2]|0;
          $66 = $692;
          $693 = $66;
          $694 = $75;
          $45 = $694;
          $695 = $45;
          $62 = $690;
          $63 = $693;
          $64 = $695;
          $696 = $62;
          $697 = $63;
          $698 = $64;
          $61 = $698;
          $699 = $61;
          ;HEAP8[$60>>0]=HEAP8[$65>>0]|0;
          $57 = $696;
          $58 = $697;
          $59 = $699;
          $700 = $57;
          $701 = $58;
          $702 = $59;
          $56 = $702;
          $703 = $56;
          $53 = $700;
          $54 = $701;
          $55 = $703;
          $704 = $54;
          $705 = $55;
          $52 = $705;
          $706 = $52;
          $50 = $704;
          $51 = $706;
          $707 = $50;
          $708 = $51;
          $49 = $708;
          $709 = $49;
          ;HEAP32[$707>>2]=HEAP32[$709>>2]|0;HEAP32[$707+4>>2]=HEAP32[$709+4>>2]|0;HEAP32[$707+8>>2]=HEAP32[$709+8>>2]|0;
          $710 = $51;
          $48 = $710;
          $711 = $48;
          $47 = $711;
          $712 = $47;
          $46 = $712;
          $713 = $46;
          $__a$i$i$i$i$i$i = $713;
          $__i$i$i$i$i$i$i = 0;
          while(1) {
           $714 = $__i$i$i$i$i$i$i;
           $715 = ($714>>>0)<(3);
           if (!($715)) {
            break;
           }
           $716 = $__i$i$i$i$i$i$i;
           $717 = $__a$i$i$i$i$i$i;
           $718 = (($717) + ($716<<2)|0);
           HEAP32[$718>>2] = 0;
           $719 = $__i$i$i$i$i$i$i;
           $720 = (($719) + 1)|0;
           $__i$i$i$i$i$i$i = $720;
          }
          __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i14);
          $721 = ((($678)) + 4|0);
          $722 = HEAP32[$721>>2]|0;
          $723 = ((($722)) + 12|0);
          HEAP32[$721>>2] = $723;
         } else {
          $724 = $75;
          $67 = $724;
          $725 = $67;
          __THREW__ = 0;
          invoke_vii(428,($678|0),($725|0));
          $726 = __THREW__; __THREW__ = 0;
          $727 = $726&1;
          if ($727) {
           label = 84;
           break;
          }
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($291);
         continue;
        }
        $510 = $firstMaterial;
        $511 = $510&1;
        if ($511) {
         $firstMaterial = 0;
        } else {
         $524 = ((($295)) + 12|0);
         __THREW__ = 0;
         $525 = (invoke_iii(425,($524|0),($currentMaterialName|0))|0);
         $526 = __THREW__; __THREW__ = 0;
         $527 = $526&1;
         if ($527) {
          label = 41;
          break;
         }
         __THREW__ = 0;
         invoke_vii(384,($288|0),($currentMaterialName|0));
         $528 = __THREW__; __THREW__ = 0;
         $529 = $528&1;
         if ($529) {
          label = 41;
          break;
         }
         __THREW__ = 0;
         invoke_vii(418,($289|0),($descriptorLineFields|0));
         $530 = __THREW__; __THREW__ = 0;
         $531 = $530&1;
         if ($531) {
          label = 62;
          break;
         }
         __THREW__ = 0;
         invoke_viii(426,($287|0),($288|0),($289|0));
         $532 = __THREW__; __THREW__ = 0;
         $533 = $532&1;
         if ($533) {
          label = 63;
          break;
         }
         (__ZN9ObjMaster26TextureDataHoldingMaterialaSEOS0_($525,$287)|0);
         __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($287);
         __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($289);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($288);
         $163 = $descriptorLineFields;
         $534 = $163;
         $162 = $534;
         $535 = $162;
         $536 = ((($535)) + 4|0);
         $537 = HEAP32[$536>>2]|0;
         $538 = HEAP32[$535>>2]|0;
         $539 = $537;
         $540 = $538;
         $541 = (($539) - ($540))|0;
         $542 = (($541|0) / 12)&-1;
         $__old_size$i = $542;
         $161 = $534;
         $543 = $161;
         $544 = HEAP32[$543>>2]|0;
         $159 = $543;
         $160 = $544;
         $545 = $159;
         while(1) {
          $546 = $160;
          $547 = ((($545)) + 4|0);
          $548 = HEAP32[$547>>2]|0;
          $549 = ($546|0)!=($548|0);
          if (!($549)) {
           break;
          }
          $158 = $545;
          $550 = $158;
          $551 = ((($550)) + 8|0);
          $157 = $551;
          $552 = $157;
          $156 = $552;
          $553 = $156;
          $554 = ((($545)) + 4|0);
          $555 = HEAP32[$554>>2]|0;
          $556 = ((($555)) + -12|0);
          HEAP32[$554>>2] = $556;
          $155 = $556;
          $557 = $155;
          $152 = $553;
          $153 = $557;
          $558 = $152;
          $559 = $153;
          ;HEAP8[$151>>0]=HEAP8[$154>>0]|0;
          $149 = $558;
          $150 = $559;
          $560 = $149;
          $561 = $150;
          $147 = $560;
          $148 = $561;
          $562 = $148;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($562);
         }
         $563 = $__old_size$i;
         __THREW__ = 0;
         invoke_vii(378,($534|0),($563|0));
         $564 = __THREW__; __THREW__ = 0;
         $565 = $564&1;
         if ($565) {
          label = 56;
          break;
         }
         $146 = $534;
         $568 = HEAP32[504]|0;
         $569 = $libFileCstr;
         $145 = $currentMaterialName;
         $570 = $145;
         $144 = $570;
         $571 = $144;
         $143 = $571;
         $572 = $143;
         $142 = $572;
         $573 = $142;
         $141 = $573;
         $574 = $141;
         $140 = $574;
         $575 = $140;
         $576 = HEAP8[$575>>0]|0;
         $577 = $576&255;
         $578 = $577 & 1;
         $579 = ($578|0)!=(0);
         if ($579) {
          $134 = $572;
          $580 = $134;
          $133 = $580;
          $581 = $133;
          $132 = $581;
          $582 = $132;
          $583 = ((($582)) + 8|0);
          $584 = HEAP32[$583>>2]|0;
          $591 = $584;
         } else {
          $139 = $572;
          $585 = $139;
          $138 = $585;
          $586 = $138;
          $137 = $586;
          $587 = $137;
          $588 = ((($587)) + 1|0);
          $136 = $588;
          $589 = $136;
          $135 = $589;
          $590 = $135;
          $591 = $590;
         }
         $131 = $591;
         $592 = $131;
         __THREW__ = 0;
         HEAP32[$vararg_buffer8>>2] = $569;
         $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
         HEAP32[$vararg_ptr11>>2] = $592;
         (invoke_iiii(339,($568|0),(11121|0),($vararg_buffer8|0))|0);
         $593 = __THREW__; __THREW__ = 0;
         $594 = $593&1;
         if ($594) {
          label = 41;
          break;
         }
         $595 = HEAP32[504]|0;
         __THREW__ = 0;
         (invoke_iiii(339,($595|0),(11077|0),($vararg_buffer12|0))|0);
         $596 = __THREW__; __THREW__ = 0;
         $597 = $596&1;
         if ($597) {
          label = 41;
          break;
         }
        }
        __THREW__ = 0;
        invoke_viii(427,($290|0),($295|0),($line|0));
        $602 = __THREW__; __THREW__ = 0;
        $603 = $602&1;
        if ($603) {
         label = 41;
         break;
        }
        $128 = $currentMaterialName;
        $129 = $290;
        $604 = $128;
        $605 = $129;
        ;HEAP8[$127>>0]=HEAP8[$130>>0]|0;
        $125 = $604;
        $126 = $605;
        $606 = $125;
        $122 = $606;
        $607 = $122;
        $121 = $607;
        $120 = $607;
        $608 = $120;
        $119 = $608;
        $609 = $119;
        $118 = $609;
        $610 = $118;
        $611 = HEAP8[$610>>0]|0;
        $612 = $611&255;
        $613 = $612 & 1;
        $614 = ($613|0)!=(0);
        if ($614) {
         $113 = $607;
         $615 = $113;
         $112 = $615;
         $616 = $112;
         $111 = $616;
         $617 = $111;
         $618 = ((($617)) + 8|0);
         $619 = HEAP32[$618>>2]|0;
         HEAP8[$123>>0] = 0;
         __ZNSt3__111char_traitsIcE6assignERcRKc($619,$123);
         $104 = $607;
         $105 = 0;
         $620 = $104;
         $621 = $105;
         $103 = $620;
         $622 = $103;
         $102 = $622;
         $623 = $102;
         $624 = ((($623)) + 4|0);
         HEAP32[$624>>2] = $621;
        } else {
         $110 = $607;
         $625 = $110;
         $109 = $625;
         $626 = $109;
         $108 = $626;
         $627 = $108;
         $628 = ((($627)) + 1|0);
         $107 = $628;
         $629 = $107;
         $106 = $629;
         $630 = $106;
         HEAP8[$124>>0] = 0;
         __ZNSt3__111char_traitsIcE6assignERcRKc($630,$124);
         $116 = $607;
         $117 = 0;
         $631 = $116;
         $632 = $117;
         $633 = $632 << 1;
         $634 = $633&255;
         $115 = $631;
         $635 = $115;
         $114 = $635;
         $636 = $114;
         HEAP8[$636>>0] = $634;
        }
        $101 = $606;
        $637 = $101;
        __THREW__ = 0;
        invoke_vii(368,($637|0),0);
        $638 = __THREW__; __THREW__ = 0;
        $639 = $638&1;
        if ($639) {
         label = 70;
         break;
        }
        $100 = $606;
        $642 = $100;
        $99 = $642;
        $643 = $99;
        $644 = $126;
        $98 = $644;
        $645 = $98;
        $97 = $645;
        $646 = $97;
        ;HEAP32[$643>>2]=HEAP32[$646>>2]|0;HEAP32[$643+4>>2]=HEAP32[$646+4>>2]|0;HEAP32[$643+8>>2]=HEAP32[$646+8>>2]|0;
        $647 = $126;
        $94 = $606;
        $95 = $647;
        $648 = $94;
        $649 = $95;
        ;HEAP8[$93>>0]=HEAP8[$96>>0]|0;
        $91 = $648;
        $92 = $649;
        $650 = $91;
        $90 = $650;
        $651 = $90;
        $89 = $651;
        $652 = $89;
        $88 = $652;
        $653 = $92;
        $86 = $653;
        $654 = $86;
        $85 = $654;
        $655 = $85;
        $84 = $655;
        $656 = $84;
        $87 = $656;
        $657 = $126;
        $83 = $657;
        $658 = $83;
        $82 = $658;
        $659 = $82;
        $81 = $659;
        $660 = $81;
        $__a$i$i$i = $660;
        $__i$i$i$i = 0;
        while(1) {
         $661 = $__i$i$i$i;
         $662 = ($661>>>0)<(3);
         if (!($662)) {
          break;
         }
         $663 = $__i$i$i$i;
         $664 = $__a$i$i$i;
         $665 = (($664) + ($663<<2)|0);
         HEAP32[$665>>2] = 0;
         $666 = $__i$i$i$i;
         $667 = (($666) + 1)|0;
         $__i$i$i$i = $667;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($290);
       }
       L88: do {
        if ((label|0) == 23) {
         $463 = ___cxa_find_matching_catch_2()|0;
         $464 = tempRet0;
         $183 = $463;
         $184 = $464;
         __ZNSt3__16localeD2Ev($182);
         $465 = $183;
         $466 = $184;
         $eh$lpad$body$index21Z2D = $466;$eh$lpad$body$indexZ2D = $465;
         label = 42;
        }
        else if ((label|0) == 43) {
         $518 = ___cxa_find_matching_catch_2()|0;
         $519 = tempRet0;
         $281 = $518;
         $282 = $519;
         label = 46;
        }
        else if ((label|0) == 44) {
         $520 = ___cxa_find_matching_catch_2()|0;
         $521 = tempRet0;
         $281 = $520;
         $282 = $521;
         $$pre_trunc35 = HEAP8[$286>>0]|0;
         $522 = $$pre_trunc35&1;
         if ($522) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($285);
          label = 46;
         } else {
          label = 46;
         }
        }
        else if ((label|0) == 56) {
         $566 = ___cxa_find_matching_catch_3(0|0)|0;
         $567 = tempRet0;
         ___clang_call_terminate($566);
         // unreachable;
        }
        else if ((label|0) == 62) {
         $598 = ___cxa_find_matching_catch_2()|0;
         $599 = tempRet0;
         $281 = $598;
         $282 = $599;
         label = 64;
        }
        else if ((label|0) == 63) {
         $600 = ___cxa_find_matching_catch_2()|0;
         $601 = tempRet0;
         $281 = $600;
         $282 = $601;
         __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($289);
         label = 64;
        }
        else if ((label|0) == 70) {
         $640 = ___cxa_find_matching_catch_3(0|0)|0;
         $641 = tempRet0;
         ___clang_call_terminate($640);
         // unreachable;
        }
        else if ((label|0) == 84) {
         $728 = ___cxa_find_matching_catch_2()|0;
         $729 = tempRet0;
         $281 = $728;
         $282 = $729;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($291);
        }
        else if ((label|0) == 85) {
         $44 = $descriptorLineFields;
         $730 = $44;
         $731 = ((($730)) + 4|0);
         $732 = HEAP32[$731>>2]|0;
         $733 = HEAP32[$730>>2]|0;
         $734 = $732;
         $735 = $733;
         $736 = (($734) - ($735))|0;
         $737 = (($736|0) / 12)&-1;
         $738 = ($737>>>0)>(0);
         L94: do {
          if ($738) {
           $739 = ((($295)) + 12|0);
           __THREW__ = 0;
           $740 = (invoke_iii(425,($739|0),($currentMaterialName|0))|0);
           $741 = __THREW__; __THREW__ = 0;
           $742 = $741&1;
           if ($742) {
            label = 41;
            break L88;
           }
           __THREW__ = 0;
           invoke_vii(384,($293|0),($currentMaterialName|0));
           $743 = __THREW__; __THREW__ = 0;
           $744 = $743&1;
           if ($744) {
            label = 41;
            break L88;
           }
           __THREW__ = 0;
           invoke_vii(418,($294|0),($descriptorLineFields|0));
           $745 = __THREW__; __THREW__ = 0;
           $746 = $745&1;
           do {
            if ($746) {
             $813 = ___cxa_find_matching_catch_2()|0;
             $814 = tempRet0;
             $281 = $813;
             $282 = $814;
            } else {
             __THREW__ = 0;
             invoke_viii(426,($292|0),($293|0),($294|0));
             $747 = __THREW__; __THREW__ = 0;
             $748 = $747&1;
             if ($748) {
              $815 = ___cxa_find_matching_catch_2()|0;
              $816 = tempRet0;
              $281 = $815;
              $282 = $816;
              __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($294);
              break;
             }
             (__ZN9ObjMaster26TextureDataHoldingMaterialaSEOS0_($740,$292)|0);
             __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($292);
             __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($294);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($293);
             $43 = $descriptorLineFields;
             $749 = $43;
             $42 = $749;
             $750 = $42;
             $751 = ((($750)) + 4|0);
             $752 = HEAP32[$751>>2]|0;
             $753 = HEAP32[$750>>2]|0;
             $754 = $752;
             $755 = $753;
             $756 = (($754) - ($755))|0;
             $757 = (($756|0) / 12)&-1;
             $__old_size$i16 = $757;
             $41 = $749;
             $758 = $41;
             $759 = HEAP32[$758>>2]|0;
             $39 = $758;
             $40 = $759;
             $760 = $39;
             while(1) {
              $761 = $40;
              $762 = ((($760)) + 4|0);
              $763 = HEAP32[$762>>2]|0;
              $764 = ($761|0)!=($763|0);
              if (!($764)) {
               break;
              }
              $38 = $760;
              $765 = $38;
              $766 = ((($765)) + 8|0);
              $37 = $766;
              $767 = $37;
              $36 = $767;
              $768 = $36;
              $769 = ((($760)) + 4|0);
              $770 = HEAP32[$769>>2]|0;
              $771 = ((($770)) + -12|0);
              HEAP32[$769>>2] = $771;
              $35 = $771;
              $772 = $35;
              $32 = $768;
              $33 = $772;
              $773 = $32;
              $774 = $33;
              ;HEAP8[$31>>0]=HEAP8[$34>>0]|0;
              $29 = $773;
              $30 = $774;
              $775 = $29;
              $776 = $30;
              $27 = $775;
              $28 = $776;
              $777 = $28;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($777);
             }
             $778 = $__old_size$i16;
             __THREW__ = 0;
             invoke_vii(378,($749|0),($778|0));
             $779 = __THREW__; __THREW__ = 0;
             $780 = $779&1;
             if ($780) {
              $781 = ___cxa_find_matching_catch_3(0|0)|0;
              $782 = tempRet0;
              ___clang_call_terminate($781);
              // unreachable;
             }
             $26 = $749;
             $783 = HEAP32[504]|0;
             $784 = $libFileCstr;
             $25 = $currentMaterialName;
             $785 = $25;
             $24 = $785;
             $786 = $24;
             $23 = $786;
             $787 = $23;
             $22 = $787;
             $788 = $22;
             $21 = $788;
             $789 = $21;
             $20 = $789;
             $790 = $20;
             $791 = HEAP8[$790>>0]|0;
             $792 = $791&255;
             $793 = $792 & 1;
             $794 = ($793|0)!=(0);
             if ($794) {
              $14 = $787;
              $795 = $14;
              $13 = $795;
              $796 = $13;
              $12 = $796;
              $797 = $12;
              $798 = ((($797)) + 8|0);
              $799 = HEAP32[$798>>2]|0;
              $806 = $799;
             } else {
              $19 = $787;
              $800 = $19;
              $18 = $800;
              $801 = $18;
              $17 = $801;
              $802 = $17;
              $803 = ((($802)) + 1|0);
              $16 = $803;
              $804 = $16;
              $15 = $804;
              $805 = $15;
              $806 = $805;
             }
             $11 = $806;
             $807 = $11;
             __THREW__ = 0;
             HEAP32[$vararg_buffer14>>2] = $784;
             $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
             HEAP32[$vararg_ptr17>>2] = $807;
             (invoke_iiii(339,($783|0),(11121|0),($vararg_buffer14|0))|0);
             $808 = __THREW__; __THREW__ = 0;
             $809 = $808&1;
             if ($809) {
              label = 41;
              break L88;
             }
             $810 = HEAP32[504]|0;
             __THREW__ = 0;
             (invoke_iiii(339,($810|0),(11077|0),($vararg_buffer18|0))|0);
             $811 = __THREW__; __THREW__ = 0;
             $812 = $811&1;
             if ($812) {
              label = 41;
              break L88;
             } else {
              break L94;
             }
            }
           } while(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($293);
           break L88;
          }
         } while(0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($currentMaterialName);
         __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($descriptorLineFields);
         $10 = $input;
         $817 = $10;
         $8 = $817;
         $9 = 0;
         $818 = $8;
         $7 = $818;
         $819 = $7;
         $6 = $819;
         $820 = $6;
         $821 = HEAP32[$820>>2]|0;
         $__tmp$i$i20 = $821;
         $822 = $9;
         $3 = $818;
         $823 = $3;
         $2 = $823;
         $824 = $2;
         HEAP32[$824>>2] = $822;
         $825 = $__tmp$i$i20;
         $826 = ($825|0)!=(0|0);
         if ($826) {
          $1 = $818;
          $827 = $1;
          $0 = $827;
          $828 = $0;
          $829 = $__tmp$i$i20;
          $4 = $828;
          $5 = $829;
          $830 = $5;
          $831 = ($830|0)==(0|0);
          if (!($831)) {
           $832 = HEAP32[$830>>2]|0;
           $833 = ((($832)) + 4|0);
           $834 = HEAP32[$833>>2]|0;
           FUNCTION_TABLE_vi[$834 & 1023]($830);
          }
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($libraryFile);
         STACKTOP = sp;return;
        }
       } while(0);
       if ((label|0) == 41) {
        $516 = ___cxa_find_matching_catch_2()|0;
        $517 = tempRet0;
        $eh$lpad$body$index21Z2D = $517;$eh$lpad$body$indexZ2D = $516;
        label = 42;
       }
       else if ((label|0) == 46) {
        $$pre_trunc37 = HEAP8[$284>>0]|0;
        $523 = $$pre_trunc37&1;
        if ($523) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($283);
        }
       }
       else if ((label|0) == 64) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($288);
       }
       if ((label|0) == 42) {
        $281 = $eh$lpad$body$indexZ2D;
        $282 = $eh$lpad$body$index21Z2D;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($currentMaterialName);
       __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($descriptorLineFields);
      }
     }
     if ((label|0) == 40) {
      $514 = ___cxa_find_matching_catch_2()|0;
      $515 = tempRet0;
      $281 = $514;
      $282 = $515;
     }
     $198 = $input;
     $835 = $198;
     $196 = $835;
     $197 = 0;
     $836 = $196;
     $195 = $836;
     $837 = $195;
     $194 = $837;
     $838 = $194;
     $839 = HEAP32[$838>>2]|0;
     $__tmp$i$i = $839;
     $840 = $197;
     $191 = $836;
     $841 = $191;
     $190 = $841;
     $842 = $190;
     HEAP32[$842>>2] = $840;
     $843 = $__tmp$i$i;
     $844 = ($843|0)!=(0|0);
     if (!($844)) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($libraryFile);
      $853 = $281;
      $854 = $282;
      ___resumeException($853|0);
      // unreachable;
     }
     $189 = $836;
     $845 = $189;
     $188 = $845;
     $846 = $188;
     $847 = $__tmp$i$i;
     $192 = $846;
     $193 = $847;
     $848 = $193;
     $849 = ($848|0)==(0|0);
     if ($849) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($libraryFile);
      $853 = $281;
      $854 = $282;
      ___resumeException($853|0);
      // unreachable;
     }
     $850 = HEAP32[$848>>2]|0;
     $851 = ((($850)) + 4|0);
     $852 = HEAP32[$851>>2]|0;
     FUNCTION_TABLE_vi[$852 & 1023]($848);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($libraryFile);
     $853 = $281;
     $854 = $282;
     ___resumeException($853|0);
     // unreachable;
    }
   }
  }
 }
 $512 = ___cxa_find_matching_catch_2()|0;
 $513 = tempRet0;
 $281 = $512;
 $282 = $513;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($libraryFile);
 $853 = $281;
 $854 = $282;
 ___resumeException($853|0);
 // unreachable;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 12)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 12)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 12)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 __THREW__ = 0;
 invoke_vii(384,($118|0),($120|0));
 $121 = __THREW__; __THREW__ = 0;
 $122 = $121&1;
 if ($122) {
  $128 = ___cxa_find_matching_catch_2()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 }
 $123 = ((($__v)) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($124)) + 12|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(429,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if ($127) {
  $128 = ___cxa_find_matching_catch_2()|0;
  $129 = tempRet0;
  $41 = $128;
  $42 = $129;
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  $130 = $41;
  $131 = $42;
  ___resumeException($130|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*12)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*12)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*12)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$i$i$i$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 212|0;
 $__t$i1 = sp + 188|0;
 $__t$i = sp + 140|0;
 $38 = sp;
 $43 = sp + 236|0;
 $53 = $this;
 $54 = $__v;
 $55 = $53;
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($55);
 $52 = $55;
 $56 = $52;
 $57 = ((($56)) + 8|0);
 $51 = $57;
 $58 = $51;
 $50 = $58;
 $59 = $50;
 $60 = HEAP32[$55>>2]|0;
 $61 = ((($55)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $54;
 $64 = ((($63)) + 4|0);
 $45 = $59;
 $46 = $60;
 $47 = $62;
 $48 = $64;
 while(1) {
  $65 = $47;
  $66 = $46;
  $67 = ($65|0)!=($66|0);
  if (!($67)) {
   break;
  }
  $68 = $45;
  $69 = $48;
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + -12|0);
  $44 = $71;
  $72 = $44;
  $73 = $47;
  $74 = ((($73)) + -12|0);
  $47 = $74;
  $23 = $74;
  $75 = $23;
  $22 = $75;
  $76 = $22;
  $40 = $68;
  $41 = $72;
  $42 = $76;
  $77 = $40;
  $78 = $41;
  $79 = $42;
  $39 = $79;
  $80 = $39;
  ;HEAP8[$38>>0]=HEAP8[$43>>0]|0;
  $35 = $77;
  $36 = $78;
  $37 = $80;
  $81 = $35;
  $82 = $36;
  $83 = $37;
  $34 = $83;
  $84 = $34;
  $31 = $81;
  $32 = $82;
  $33 = $84;
  $85 = $32;
  $86 = $33;
  $30 = $86;
  $87 = $30;
  $28 = $85;
  $29 = $87;
  $88 = $28;
  $89 = $29;
  $27 = $89;
  $90 = $27;
  ;HEAP32[$88>>2]=HEAP32[$90>>2]|0;HEAP32[$88+4>>2]=HEAP32[$90+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$90+8>>2]|0;
  $91 = $29;
  $26 = $91;
  $92 = $26;
  $25 = $92;
  $93 = $25;
  $24 = $93;
  $94 = $24;
  $__a$i$i$i$i$i$i = $94;
  $__i$i$i$i$i$i$i = 0;
  while(1) {
   $95 = $__i$i$i$i$i$i$i;
   $96 = ($95>>>0)<(3);
   if (!($96)) {
    break;
   }
   $97 = $__i$i$i$i$i$i$i;
   $98 = $__a$i$i$i$i$i$i;
   $99 = (($98) + ($97<<2)|0);
   HEAP32[$99>>2] = 0;
   $100 = $__i$i$i$i$i$i$i;
   $101 = (($100) + 1)|0;
   $__i$i$i$i$i$i$i = $101;
  }
  $102 = $48;
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($103)) + -12|0);
  HEAP32[$102>>2] = $104;
 }
 $105 = $54;
 $106 = ((($105)) + 4|0);
 $3 = $55;
 $4 = $106;
 $107 = $3;
 $2 = $107;
 $108 = $2;
 $109 = HEAP32[$108>>2]|0;
 HEAP32[$__t$i2>>2] = $109;
 $110 = $4;
 $0 = $110;
 $111 = $0;
 $112 = HEAP32[$111>>2]|0;
 $113 = $3;
 HEAP32[$113>>2] = $112;
 $1 = $__t$i2;
 $114 = $1;
 $115 = HEAP32[$114>>2]|0;
 $116 = $4;
 HEAP32[$116>>2] = $115;
 $117 = ((($55)) + 4|0);
 $118 = $54;
 $119 = ((($118)) + 8|0);
 $8 = $117;
 $9 = $119;
 $120 = $8;
 $7 = $120;
 $121 = $7;
 $122 = HEAP32[$121>>2]|0;
 HEAP32[$__t$i1>>2] = $122;
 $123 = $9;
 $5 = $123;
 $124 = $5;
 $125 = HEAP32[$124>>2]|0;
 $126 = $8;
 HEAP32[$126>>2] = $125;
 $6 = $__t$i1;
 $127 = $6;
 $128 = HEAP32[$127>>2]|0;
 $129 = $9;
 HEAP32[$129>>2] = $128;
 $12 = $55;
 $130 = $12;
 $131 = ((($130)) + 8|0);
 $11 = $131;
 $132 = $11;
 $10 = $132;
 $133 = $10;
 $134 = $54;
 $15 = $134;
 $135 = $15;
 $136 = ((($135)) + 12|0);
 $14 = $136;
 $137 = $14;
 $13 = $137;
 $138 = $13;
 $19 = $133;
 $20 = $138;
 $139 = $19;
 $18 = $139;
 $140 = $18;
 $141 = HEAP32[$140>>2]|0;
 HEAP32[$__t$i>>2] = $141;
 $142 = $20;
 $16 = $142;
 $143 = $16;
 $144 = HEAP32[$143>>2]|0;
 $145 = $19;
 HEAP32[$145>>2] = $144;
 $17 = $__t$i;
 $146 = $17;
 $147 = HEAP32[$146>>2]|0;
 $148 = $20;
 HEAP32[$148>>2] = $147;
 $149 = $54;
 $150 = ((($149)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $54;
 HEAP32[$152>>2] = $151;
 $21 = $55;
 $153 = $21;
 $154 = ((($153)) + 4|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$153>>2]|0;
 $157 = $155;
 $158 = $156;
 $159 = (($157) - ($158))|0;
 $160 = (($159|0) / 12)&-1;
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($55,$160);
 $49 = $55;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -12|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 12)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSE_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__h = 0, $__i = 0, $__r = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp + 48|0;
 $18 = sp + 456|0;
 $25 = sp + 40|0;
 $28 = sp + 535|0;
 $39 = sp + 32|0;
 $42 = sp + 534|0;
 $72 = sp + 24|0;
 $75 = sp + 533|0;
 $86 = sp + 16|0;
 $89 = sp + 532|0;
 $99 = sp + 8|0;
 $102 = sp + 148|0;
 $104 = sp + 140|0;
 $106 = sp + 132|0;
 $108 = sp;
 $109 = sp + 124|0;
 $112 = sp + 112|0;
 $__i = sp + 96|0;
 $116 = sp + 92|0;
 $__h = sp + 80|0;
 $__r = sp + 72|0;
 $117 = sp + 64|0;
 $114 = $this;
 $115 = $__k;
 $120 = $114;
 $121 = $115;
 $110 = $120;
 $111 = $121;
 $122 = $110;
 $123 = $111;
 $124 = (__ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEERKT_($122,$123)|0);
 HEAP32[$112>>2] = $124;
 ;HEAP8[$108>>0]=HEAP8[$112>>0]|0;HEAP8[$108+1>>0]=HEAP8[$112+1>>0]|0;HEAP8[$108+2>>0]=HEAP8[$112+2>>0]|0;HEAP8[$108+3>>0]=HEAP8[$112+3>>0]|0;
 $107 = $109;
 $125 = $107;
 ;HEAP32[$125>>2]=HEAP32[$108>>2]|0;
 $126 = HEAP32[$109>>2]|0;
 HEAP32[$__i>>2] = $126;
 $105 = $120;
 $127 = $105;
 $103 = $127;
 $100 = $102;
 $101 = 0;
 $128 = $100;
 $129 = $101;
 HEAP32[$128>>2] = $129;
 $130 = HEAP32[$102>>2]|0;
 HEAP32[$106>>2] = $130;
 ;HEAP8[$99>>0]=HEAP8[$106>>0]|0;HEAP8[$99+1>>0]=HEAP8[$106+1>>0]|0;HEAP8[$99+2>>0]=HEAP8[$106+2>>0]|0;HEAP8[$99+3>>0]=HEAP8[$106+3>>0]|0;
 $98 = $104;
 $131 = $98;
 ;HEAP32[$131>>2]=HEAP32[$99>>2]|0;
 $132 = HEAP32[$104>>2]|0;
 HEAP32[$116>>2] = $132;
 $64 = $__i;
 $65 = $116;
 $133 = $64;
 $134 = $65;
 $62 = $133;
 $63 = $134;
 $135 = $62;
 $136 = $63;
 $60 = $135;
 $61 = $136;
 $137 = $60;
 $138 = HEAP32[$137>>2]|0;
 $139 = $61;
 $140 = HEAP32[$139>>2]|0;
 $141 = ($138|0)==($140|0);
 $142 = $141 ^ 1;
 if ($142) {
  $59 = $__i;
  $143 = $59;
  $58 = $143;
  $144 = $58;
  $145 = HEAP32[$144>>2]|0;
  $146 = ((($145)) + 8|0);
  $57 = $146;
  $147 = $57;
  $56 = $147;
  $148 = $56;
  $55 = $148;
  $149 = $55;
  $54 = $149;
  $150 = $54;
  $151 = ((($150)) + 12|0);
  $113 = $151;
  $277 = $113;
  STACKTOP = sp;return ($277|0);
 }
 $152 = $115;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEE25__construct_node_with_keyERSE_($__h,$120,$152);
 $53 = $__h;
 $153 = $53;
 $52 = $153;
 $154 = $52;
 $51 = $154;
 $155 = $51;
 $156 = HEAP32[$155>>2]|0;
 __THREW__ = 0;
 invoke_viii(430,($117|0),($120|0),($156|0));
 $157 = __THREW__; __THREW__ = 0;
 $158 = $157&1;
 if ($158) {
  $230 = ___cxa_find_matching_catch_2()|0;
  $231 = tempRet0;
  $118 = $230;
  $119 = $231;
  $97 = $__h;
  $232 = $97;
  $95 = $232;
  $96 = 0;
  $233 = $95;
  $94 = $233;
  $234 = $94;
  $93 = $234;
  $235 = $93;
  $236 = HEAP32[$235>>2]|0;
  $__tmp$i$i = $236;
  $237 = $96;
  $69 = $233;
  $238 = $69;
  $68 = $238;
  $239 = $68;
  HEAP32[$239>>2] = $237;
  $240 = $__tmp$i$i;
  $241 = ($240|0)!=(0|0);
  if (!($241)) {
   $278 = $118;
   $279 = $119;
   ___resumeException($278|0);
   // unreachable;
  }
  $67 = $233;
  $242 = $67;
  $66 = $242;
  $243 = $66;
  $244 = ((($243)) + 4|0);
  $245 = $__tmp$i$i;
  $91 = $244;
  $92 = $245;
  $246 = $91;
  $247 = ((($246)) + 5|0);
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&1;
  if ($249) {
   $250 = HEAP32[$246>>2]|0;
   $251 = $92;
   $252 = ((($251)) + 8|0);
   $253 = ((($252)) + 12|0);
   $90 = $253;
   $254 = $90;
   $87 = $250;
   $88 = $254;
   $255 = $87;
   $256 = $88;
   ;HEAP8[$86>>0]=HEAP8[$89>>0]|0;
   $84 = $255;
   $85 = $256;
   $257 = $85;
   __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($257);
  }
  $258 = ((($246)) + 4|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = $259&1;
  if ($260) {
   $261 = HEAP32[$246>>2]|0;
   $262 = $92;
   $263 = ((($262)) + 8|0);
   $83 = $263;
   $264 = $83;
   $73 = $261;
   $74 = $264;
   $265 = $73;
   $266 = $74;
   ;HEAP8[$72>>0]=HEAP8[$75>>0]|0;
   $70 = $265;
   $71 = $266;
   $267 = $71;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($267);
  }
  $268 = $92;
  $269 = ($268|0)!=(0|0);
  if (!($269)) {
   $278 = $118;
   $279 = $119;
   ___resumeException($278|0);
   // unreachable;
  }
  $270 = HEAP32[$246>>2]|0;
  $271 = $92;
  $80 = $270;
  $81 = $271;
  $82 = 1;
  $272 = $80;
  $273 = $81;
  $274 = $82;
  $77 = $272;
  $78 = $273;
  $79 = $274;
  $275 = $78;
  $76 = $275;
  $276 = $76;
  __ZdlPv($276);
  $278 = $118;
  $279 = $119;
  ___resumeException($278|0);
  // unreachable;
 } else {
  $15 = $__r;
  $16 = $117;
  $17 = 0;
  $159 = $15;
  $160 = $16;
  $14 = $160;
  $161 = $14;
  ;HEAP32[$18>>2]=HEAP32[$161>>2]|0;
  ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;HEAP8[$12+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$18+3>>0]|0;
  $11 = $159;
  $162 = $11;
  ;HEAP32[$162>>2]=HEAP32[$12>>2]|0;
  $163 = ((($159)) + 4|0);
  $164 = $16;
  $165 = ((($164)) + 4|0);
  $13 = $165;
  $166 = $13;
  $167 = HEAP8[$166>>0]|0;
  $168 = $167&1;
  $169 = $168&1;
  HEAP8[$163>>0] = $169;
  $10 = $__h;
  $170 = $10;
  $9 = $170;
  $171 = $9;
  $8 = $171;
  $172 = $8;
  $173 = HEAP32[$172>>2]|0;
  $__t$i = $173;
  $7 = $170;
  $174 = $7;
  $6 = $174;
  $175 = $6;
  HEAP32[$175>>2] = 0;
  $5 = $__r;
  $176 = $5;
  $4 = $176;
  $177 = $4;
  $178 = HEAP32[$177>>2]|0;
  $179 = ((($178)) + 8|0);
  $3 = $179;
  $180 = $3;
  $2 = $180;
  $181 = $2;
  $1 = $181;
  $182 = $1;
  $0 = $182;
  $183 = $0;
  $184 = ((($183)) + 12|0);
  $113 = $184;
  $50 = $__h;
  $185 = $50;
  $48 = $185;
  $49 = 0;
  $186 = $48;
  $47 = $186;
  $187 = $47;
  $46 = $187;
  $188 = $46;
  $189 = HEAP32[$188>>2]|0;
  $__tmp$i$i1 = $189;
  $190 = $49;
  $22 = $186;
  $191 = $22;
  $21 = $191;
  $192 = $21;
  HEAP32[$192>>2] = $190;
  $193 = $__tmp$i$i1;
  $194 = ($193|0)!=(0|0);
  if (!($194)) {
   $277 = $113;
   STACKTOP = sp;return ($277|0);
  }
  $20 = $186;
  $195 = $20;
  $19 = $195;
  $196 = $19;
  $197 = ((($196)) + 4|0);
  $198 = $__tmp$i$i1;
  $44 = $197;
  $45 = $198;
  $199 = $44;
  $200 = ((($199)) + 5|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&1;
  if ($202) {
   $203 = HEAP32[$199>>2]|0;
   $204 = $45;
   $205 = ((($204)) + 8|0);
   $206 = ((($205)) + 12|0);
   $43 = $206;
   $207 = $43;
   $40 = $203;
   $41 = $207;
   $208 = $40;
   $209 = $41;
   ;HEAP8[$39>>0]=HEAP8[$42>>0]|0;
   $37 = $208;
   $38 = $209;
   $210 = $38;
   __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($210);
  }
  $211 = ((($199)) + 4|0);
  $212 = HEAP8[$211>>0]|0;
  $213 = $212&1;
  if ($213) {
   $214 = HEAP32[$199>>2]|0;
   $215 = $45;
   $216 = ((($215)) + 8|0);
   $36 = $216;
   $217 = $36;
   $26 = $214;
   $27 = $217;
   $218 = $26;
   $219 = $27;
   ;HEAP8[$25>>0]=HEAP8[$28>>0]|0;
   $23 = $218;
   $24 = $219;
   $220 = $24;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($220);
  }
  $221 = $45;
  $222 = ($221|0)!=(0|0);
  if (!($222)) {
   $277 = $113;
   STACKTOP = sp;return ($277|0);
  }
  $223 = HEAP32[$199>>2]|0;
  $224 = $45;
  $33 = $223;
  $34 = $224;
  $35 = 1;
  $225 = $33;
  $226 = $34;
  $227 = $35;
  $30 = $225;
  $31 = $226;
  $32 = $227;
  $228 = $31;
  $29 = $228;
  $229 = $29;
  __ZdlPv($229);
  $277 = $113;
  STACKTOP = sp;return ($277|0);
 }
 return (0)|0;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEERKT_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $71 = sp + 392|0;
 $84 = sp + 44|0;
 $89 = sp + 24|0;
 $90 = $this;
 $91 = $__k;
 $92 = $90;
 $88 = $92;
 $93 = $88;
 $94 = ((($93)) + 12|0);
 $87 = $94;
 $95 = $87;
 $86 = $95;
 $96 = $86;
 $97 = $91;
 $18 = $96;
 $19 = $97;
 $98 = $18;
 $99 = $19;
 $100 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($98,$99)|0);
 $__hash = $100;
 $17 = $92;
 $101 = $17;
 $16 = $101;
 $102 = $16;
 $15 = $102;
 $103 = $15;
 $14 = $103;
 $104 = $14;
 $105 = ((($104)) + 4|0);
 $13 = $105;
 $106 = $13;
 $12 = $106;
 $107 = $12;
 $11 = $107;
 $108 = $11;
 $109 = HEAP32[$108>>2]|0;
 $__bc = $109;
 $110 = $__bc;
 $111 = ($110|0)!=(0);
 L1: do {
  if ($111) {
   $112 = $__hash;
   $113 = $__bc;
   $9 = $112;
   $10 = $113;
   $114 = $10;
   $115 = $10;
   $116 = (($115) - 1)|0;
   $117 = $114 & $116;
   $118 = ($117|0)!=(0);
   $119 = $9;
   $120 = $10;
   if ($118) {
    $123 = (($119>>>0) % ($120>>>0))&-1;
    $124 = $123;
   } else {
    $121 = (($120) - 1)|0;
    $122 = $119 & $121;
    $124 = $122;
   }
   $__chash = $124;
   $125 = $__chash;
   $2 = $92;
   $3 = $125;
   $126 = $2;
   $127 = $3;
   $1 = $126;
   $128 = $1;
   $0 = $128;
   $129 = $0;
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + ($127<<2)|0);
   $132 = HEAP32[$131>>2]|0;
   $__nd = $132;
   $133 = $__nd;
   $134 = ($133|0)!=(0|0);
   if ($134) {
    $135 = $__nd;
    $136 = HEAP32[$135>>2]|0;
    $__nd = $136;
    L8: while(1) {
     $137 = $__nd;
     $138 = ($137|0)!=(0|0);
     if (!($138)) {
      break L1;
     }
     $139 = $__nd;
     $140 = ((($139)) + 4|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $__bc;
     $4 = $141;
     $5 = $142;
     $143 = $5;
     $144 = $5;
     $145 = (($144) - 1)|0;
     $146 = $143 & $145;
     $147 = ($146|0)!=(0);
     $148 = $4;
     $149 = $5;
     if ($147) {
      $152 = (($148>>>0) % ($149>>>0))&-1;
      $154 = $152;
     } else {
      $150 = (($149) - 1)|0;
      $151 = $148 & $150;
      $154 = $151;
     }
     $153 = $__chash;
     $155 = ($154|0)==($153|0);
     if (!($155)) {
      break L1;
     }
     $8 = $92;
     $156 = $8;
     $157 = ((($156)) + 16|0);
     $7 = $157;
     $158 = $7;
     $6 = $158;
     $159 = $6;
     $160 = $__nd;
     $161 = ((($160)) + 8|0);
     $162 = $91;
     $77 = $159;
     $78 = $161;
     $79 = $162;
     $163 = $77;
     $164 = $78;
     $165 = $79;
     $74 = $163;
     $75 = $164;
     $76 = $165;
     $166 = $75;
     $167 = $76;
     $72 = $166;
     $73 = $167;
     $168 = $72;
     $70 = $168;
     $169 = $70;
     $69 = $169;
     $170 = $69;
     $68 = $170;
     $171 = $68;
     $67 = $171;
     $172 = $67;
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = $174 & 1;
     $176 = ($175|0)!=(0);
     if ($176) {
      $63 = $169;
      $177 = $63;
      $62 = $177;
      $178 = $62;
      $61 = $178;
      $179 = $61;
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $188 = $181;
     } else {
      $66 = $169;
      $182 = $66;
      $65 = $182;
      $183 = $65;
      $64 = $183;
      $184 = $64;
      $185 = HEAP8[$184>>0]|0;
      $186 = $185&255;
      $187 = $186 >> 1;
      $188 = $187;
     }
     $__lhs_sz$i$i$i = $188;
     $189 = $__lhs_sz$i$i$i;
     $190 = $73;
     $60 = $190;
     $191 = $60;
     $59 = $191;
     $192 = $59;
     $58 = $192;
     $193 = $58;
     $57 = $193;
     $194 = $57;
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = $196 & 1;
     $198 = ($197|0)!=(0);
     if ($198) {
      $53 = $191;
      $199 = $53;
      $52 = $199;
      $200 = $52;
      $51 = $200;
      $201 = $51;
      $202 = ((($201)) + 4|0);
      $203 = HEAP32[$202>>2]|0;
      $211 = $203;
     } else {
      $56 = $191;
      $204 = $56;
      $55 = $204;
      $205 = $55;
      $54 = $205;
      $206 = $54;
      $207 = HEAP8[$206>>0]|0;
      $208 = $207&255;
      $209 = $208 >> 1;
      $211 = $209;
     }
     $210 = ($189|0)!=($211|0);
     do {
      if ($210) {
       $$expand_i1_val = 0;
       HEAP8[$71>>0] = $$expand_i1_val;
      } else {
       $212 = $72;
       $50 = $212;
       $213 = $50;
       $49 = $213;
       $214 = $49;
       $48 = $214;
       $215 = $48;
       $47 = $215;
       $216 = $47;
       $46 = $216;
       $217 = $46;
       $218 = HEAP8[$217>>0]|0;
       $219 = $218&255;
       $220 = $219 & 1;
       $221 = ($220|0)!=(0);
       if ($221) {
        $40 = $214;
        $222 = $40;
        $39 = $222;
        $223 = $39;
        $38 = $223;
        $224 = $38;
        $225 = ((($224)) + 8|0);
        $226 = HEAP32[$225>>2]|0;
        $233 = $226;
       } else {
        $45 = $214;
        $227 = $45;
        $44 = $227;
        $228 = $44;
        $43 = $228;
        $229 = $43;
        $230 = ((($229)) + 1|0);
        $42 = $230;
        $231 = $42;
        $41 = $231;
        $232 = $41;
        $233 = $232;
       }
       $37 = $233;
       $234 = $37;
       $__lp$i$i$i = $234;
       $235 = $73;
       $33 = $235;
       $236 = $33;
       $32 = $236;
       $237 = $32;
       $31 = $237;
       $238 = $31;
       $30 = $238;
       $239 = $30;
       $29 = $239;
       $240 = $29;
       $241 = HEAP8[$240>>0]|0;
       $242 = $241&255;
       $243 = $242 & 1;
       $244 = ($243|0)!=(0);
       if ($244) {
        $23 = $237;
        $245 = $23;
        $22 = $245;
        $246 = $22;
        $21 = $246;
        $247 = $21;
        $248 = ((($247)) + 8|0);
        $249 = HEAP32[$248>>2]|0;
        $256 = $249;
       } else {
        $28 = $237;
        $250 = $28;
        $27 = $250;
        $251 = $27;
        $26 = $251;
        $252 = $26;
        $253 = ((($252)) + 1|0);
        $25 = $253;
        $254 = $25;
        $24 = $254;
        $255 = $24;
        $256 = $255;
       }
       $20 = $256;
       $257 = $20;
       $__rp$i$i$i = $257;
       $258 = $72;
       $36 = $258;
       $259 = $36;
       $35 = $259;
       $260 = $35;
       $34 = $260;
       $261 = $34;
       $262 = HEAP8[$261>>0]|0;
       $263 = $262&255;
       $264 = $263 & 1;
       $265 = ($264|0)!=(0);
       if ($265) {
        $266 = $__lp$i$i$i;
        $267 = $__rp$i$i$i;
        $268 = $__lhs_sz$i$i$i;
        __THREW__ = 0;
        $269 = (invoke_iiii(388,($266|0),($267|0),($268|0))|0);
        $270 = __THREW__; __THREW__ = 0;
        $271 = $270&1;
        if ($271) {
         label = 34;
         break L8;
        }
        $272 = ($269|0)==(0);
        $$expand_i1_val2 = $272&1;
        HEAP8[$71>>0] = $$expand_i1_val2;
        break;
       }
       while(1) {
        $273 = $__lhs_sz$i$i$i;
        $274 = ($273|0)!=(0);
        if (!($274)) {
         label = 33;
         break;
        }
        $275 = $__lp$i$i$i;
        $276 = HEAP8[$275>>0]|0;
        $277 = $276 << 24 >> 24;
        $278 = $__rp$i$i$i;
        $279 = HEAP8[$278>>0]|0;
        $280 = $279 << 24 >> 24;
        $281 = ($277|0)!=($280|0);
        if ($281) {
         label = 31;
         break;
        }
        $282 = $__lhs_sz$i$i$i;
        $283 = (($282) + -1)|0;
        $__lhs_sz$i$i$i = $283;
        $284 = $__lp$i$i$i;
        $285 = ((($284)) + 1|0);
        $__lp$i$i$i = $285;
        $286 = $__rp$i$i$i;
        $287 = ((($286)) + 1|0);
        $__rp$i$i$i = $287;
       }
       if ((label|0) == 31) {
        label = 0;
        $$expand_i1_val4 = 0;
        HEAP8[$71>>0] = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val6 = 1;
        HEAP8[$71>>0] = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = HEAP8[$71>>0]|0;
     $290 = $$pre_trunc&1;
     $291 = $__nd;
     if ($290) {
      break;
     }
     $294 = HEAP32[$291>>2]|0;
     $__nd = $294;
    }
    if ((label|0) == 34) {
     $288 = ___cxa_find_matching_catch_3(0|0)|0;
     $289 = tempRet0;
     ___clang_call_terminate($288);
     // unreachable;
    }
    $80 = $89;
    $81 = $291;
    $292 = $80;
    $293 = $81;
    HEAP32[$292>>2] = $293;
    $298 = HEAP32[$89>>2]|0;
    STACKTOP = sp;return ($298|0);
   }
  }
 } while(0);
 $85 = $92;
 $82 = $84;
 $83 = 0;
 $295 = $82;
 $296 = $83;
 HEAP32[$295>>2] = $296;
 $297 = HEAP32[$84>>2]|0;
 HEAP32[$89>>2] = $297;
 $298 = HEAP32[$89>>2]|0;
 STACKTOP = sp;return ($298|0);
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEE25__construct_node_with_keyERSE_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 72|0;
 $8 = sp + 701|0;
 $18 = sp + 628|0;
 $19 = sp + 64|0;
 $22 = sp + 616|0;
 $23 = sp + 608|0;
 $24 = sp + 56|0;
 $35 = sp + 552|0;
 $50 = sp + 48|0;
 $55 = sp + 700|0;
 $63 = sp + 40|0;
 $66 = sp + 699|0;
 $77 = sp + 32|0;
 $80 = sp + 698|0;
 $96 = sp + 324|0;
 $97 = sp + 24|0;
 $100 = sp + 312|0;
 $101 = sp + 304|0;
 $102 = sp + 16|0;
 $107 = sp + 280|0;
 $122 = sp + 8|0;
 $125 = sp + 697|0;
 $136 = sp;
 $139 = sp + 696|0;
 $__h = sp + 96|0;
 $153 = sp + 88|0;
 $151 = $this;
 $152 = $__k;
 $156 = $151;
 $150 = $156;
 $157 = $150;
 $158 = ((($157)) + 8|0);
 $149 = $158;
 $159 = $149;
 $148 = $159;
 $160 = $148;
 $__na = $160;
 $161 = $__na;
 $114 = $161;
 $115 = 1;
 $162 = $114;
 $163 = $115;
 $111 = $162;
 $112 = $163;
 $113 = 0;
 $164 = $112;
 $165 = ($164*192)|0;
 $110 = $165;
 $166 = $110;
 $167 = (__Znwj($166)|0);
 $168 = $__na;
 $108 = $153;
 $109 = $168;
 $169 = $108;
 $170 = $109;
 HEAP32[$169>>2] = $170;
 $171 = ((($169)) + 4|0);
 HEAP8[$171>>0] = 0;
 $172 = ((($169)) + 5|0);
 HEAP8[$172>>0] = 0;
 $104 = $__h;
 $105 = $167;
 $106 = $153;
 $173 = $104;
 $174 = $105;
 $175 = $106;
 $103 = $175;
 $176 = $103;
 ;HEAP32[$107>>2]=HEAP32[$176>>2]|0;HEAP32[$107+4>>2]=HEAP32[$176+4>>2]|0;
 ;HEAP8[$102>>0]=HEAP8[$107>>0]|0;HEAP8[$102+1>>0]=HEAP8[$107+1>>0]|0;HEAP8[$102+2>>0]=HEAP8[$107+2>>0]|0;HEAP8[$102+3>>0]=HEAP8[$107+3>>0]|0;HEAP8[$102+4>>0]=HEAP8[$107+4>>0]|0;HEAP8[$102+5>>0]=HEAP8[$107+5>>0]|0;HEAP8[$102+6>>0]=HEAP8[$107+6>>0]|0;HEAP8[$102+7>>0]=HEAP8[$107+7>>0]|0;
 $99 = $173;
 HEAP32[$100>>2] = $174;
 $177 = $99;
 $98 = $100;
 $178 = $98;
 $179 = HEAP32[$178>>2]|0;
 $92 = $102;
 $180 = $92;
 ;HEAP32[$101>>2]=HEAP32[$180>>2]|0;HEAP32[$101+4>>2]=HEAP32[$180+4>>2]|0;
 ;HEAP8[$97>>0]=HEAP8[$101>>0]|0;HEAP8[$97+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$101+3>>0]|0;HEAP8[$97+4>>0]=HEAP8[$101+4>>0]|0;HEAP8[$97+5>>0]=HEAP8[$101+5>>0]|0;HEAP8[$97+6>>0]=HEAP8[$101+6>>0]|0;HEAP8[$97+7>>0]=HEAP8[$101+7>>0]|0;
 $95 = $177;
 HEAP32[$96>>2] = $179;
 $181 = $95;
 $94 = $96;
 $182 = $94;
 $183 = HEAP32[$182>>2]|0;
 HEAP32[$181>>2] = $183;
 $184 = ((($181)) + 4|0);
 $93 = $97;
 $185 = $93;
 ;HEAP32[$184>>2]=HEAP32[$185>>2]|0;HEAP32[$184+4>>2]=HEAP32[$185+4>>2]|0;
 $186 = $__na;
 $91 = $__h;
 $187 = $91;
 $90 = $187;
 $188 = $90;
 $89 = $188;
 $189 = $89;
 $190 = HEAP32[$189>>2]|0;
 $191 = ((($190)) + 8|0);
 $56 = $191;
 $192 = $56;
 $193 = $152;
 $52 = $186;
 $53 = $192;
 $54 = $193;
 $194 = $52;
 $195 = $53;
 $196 = $54;
 $51 = $196;
 $197 = $51;
 ;HEAP8[$50>>0]=HEAP8[$55>>0]|0;
 $47 = $194;
 $48 = $195;
 $49 = $197;
 $198 = $47;
 $199 = $48;
 $200 = $49;
 $46 = $200;
 $201 = $46;
 $43 = $198;
 $44 = $199;
 $45 = $201;
 $202 = $44;
 $203 = $45;
 $42 = $203;
 $204 = $42;
 __THREW__ = 0;
 invoke_vii(384,($202|0),($204|0));
 $205 = __THREW__; __THREW__ = 0;
 $206 = $205&1;
 if (!($206)) {
  $41 = $__h;
  $207 = $41;
  $40 = $207;
  $208 = $40;
  $39 = $208;
  $209 = $39;
  $210 = ((($209)) + 4|0);
  $211 = ((($210)) + 4|0);
  HEAP8[$211>>0] = 1;
  $212 = $__na;
  $38 = $__h;
  $213 = $38;
  $37 = $213;
  $214 = $37;
  $36 = $214;
  $215 = $36;
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 8|0);
  $218 = ((($217)) + 12|0);
  $0 = $218;
  $219 = $0;
  $6 = $212;
  $7 = $219;
  $220 = $6;
  $221 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $220;
  $4 = $221;
  $222 = $3;
  $223 = $4;
  $1 = $222;
  $2 = $223;
  $224 = $2;
  __THREW__ = 0;
  invoke_vi(344,($224|0));
  $225 = __THREW__; __THREW__ = 0;
  $226 = $225&1;
  if (!($226)) {
   $11 = $__h;
   $227 = $11;
   $10 = $227;
   $228 = $10;
   $9 = $228;
   $229 = $9;
   $230 = ((($229)) + 4|0);
   $231 = ((($230)) + 5|0);
   HEAP8[$231>>0] = 1;
   $12 = $__h;
   $232 = $12;
   $33 = $agg$result;
   $34 = $232;
   $233 = $33;
   $234 = $34;
   $32 = $234;
   $235 = $32;
   $31 = $235;
   $236 = $31;
   $30 = $236;
   $237 = $30;
   $238 = HEAP32[$237>>2]|0;
   $__t$i$i = $238;
   $29 = $235;
   $239 = $29;
   $28 = $239;
   $240 = $28;
   HEAP32[$240>>2] = 0;
   $241 = $__t$i$i;
   $242 = $34;
   $27 = $242;
   $243 = $27;
   $26 = $243;
   $244 = $26;
   $25 = $244;
   $245 = $25;
   $246 = ((($245)) + 4|0);
   $13 = $246;
   $247 = $13;
   ;HEAP32[$35>>2]=HEAP32[$247>>2]|0;HEAP32[$35+4>>2]=HEAP32[$247+4>>2]|0;
   ;HEAP8[$24>>0]=HEAP8[$35>>0]|0;HEAP8[$24+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$35+3>>0]|0;HEAP8[$24+4>>0]=HEAP8[$35+4>>0]|0;HEAP8[$24+5>>0]=HEAP8[$35+5>>0]|0;HEAP8[$24+6>>0]=HEAP8[$35+6>>0]|0;HEAP8[$24+7>>0]=HEAP8[$35+7>>0]|0;
   $21 = $233;
   HEAP32[$22>>2] = $241;
   $248 = $21;
   $20 = $22;
   $249 = $20;
   $250 = HEAP32[$249>>2]|0;
   $14 = $24;
   $251 = $14;
   ;HEAP32[$23>>2]=HEAP32[$251>>2]|0;HEAP32[$23+4>>2]=HEAP32[$251+4>>2]|0;
   ;HEAP8[$19>>0]=HEAP8[$23>>0]|0;HEAP8[$19+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$23+3>>0]|0;HEAP8[$19+4>>0]=HEAP8[$23+4>>0]|0;HEAP8[$19+5>>0]=HEAP8[$23+5>>0]|0;HEAP8[$19+6>>0]=HEAP8[$23+6>>0]|0;HEAP8[$19+7>>0]=HEAP8[$23+7>>0]|0;
   $17 = $248;
   HEAP32[$18>>2] = $250;
   $252 = $17;
   $16 = $18;
   $253 = $16;
   $254 = HEAP32[$253>>2]|0;
   HEAP32[$252>>2] = $254;
   $255 = ((($252)) + 4|0);
   $15 = $19;
   $256 = $15;
   ;HEAP32[$255>>2]=HEAP32[$256>>2]|0;HEAP32[$255+4>>2]=HEAP32[$256+4>>2]|0;
   $88 = $__h;
   $257 = $88;
   $86 = $257;
   $87 = 0;
   $258 = $86;
   $85 = $258;
   $259 = $85;
   $84 = $259;
   $260 = $84;
   $261 = HEAP32[$260>>2]|0;
   $__tmp$i$i1 = $261;
   $262 = $87;
   $60 = $258;
   $263 = $60;
   $59 = $263;
   $264 = $59;
   HEAP32[$264>>2] = $262;
   $265 = $__tmp$i$i1;
   $266 = ($265|0)!=(0|0);
   if (!($266)) {
    STACKTOP = sp;return;
   }
   $58 = $258;
   $267 = $58;
   $57 = $267;
   $268 = $57;
   $269 = ((($268)) + 4|0);
   $270 = $__tmp$i$i1;
   $82 = $269;
   $83 = $270;
   $271 = $82;
   $272 = ((($271)) + 5|0);
   $273 = HEAP8[$272>>0]|0;
   $274 = $273&1;
   if ($274) {
    $275 = HEAP32[$271>>2]|0;
    $276 = $83;
    $277 = ((($276)) + 8|0);
    $278 = ((($277)) + 12|0);
    $81 = $278;
    $279 = $81;
    $78 = $275;
    $79 = $279;
    $280 = $78;
    $281 = $79;
    ;HEAP8[$77>>0]=HEAP8[$80>>0]|0;
    $75 = $280;
    $76 = $281;
    $282 = $76;
    __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($282);
   }
   $283 = ((($271)) + 4|0);
   $284 = HEAP8[$283>>0]|0;
   $285 = $284&1;
   if ($285) {
    $286 = HEAP32[$271>>2]|0;
    $287 = $83;
    $288 = ((($287)) + 8|0);
    $74 = $288;
    $289 = $74;
    $64 = $286;
    $65 = $289;
    $290 = $64;
    $291 = $65;
    ;HEAP8[$63>>0]=HEAP8[$66>>0]|0;
    $61 = $290;
    $62 = $291;
    $292 = $62;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($292);
   }
   $293 = $83;
   $294 = ($293|0)!=(0|0);
   if (!($294)) {
    STACKTOP = sp;return;
   }
   $295 = HEAP32[$271>>2]|0;
   $296 = $83;
   $71 = $295;
   $72 = $296;
   $73 = 1;
   $297 = $71;
   $298 = $72;
   $299 = $73;
   $68 = $297;
   $69 = $298;
   $70 = $299;
   $300 = $69;
   $67 = $300;
   $301 = $67;
   __ZdlPv($301);
   STACKTOP = sp;return;
  }
 }
 $302 = ___cxa_find_matching_catch_2()|0;
 $303 = tempRet0;
 $154 = $302;
 $155 = $303;
 $147 = $__h;
 $304 = $147;
 $145 = $304;
 $146 = 0;
 $305 = $145;
 $144 = $305;
 $306 = $144;
 $143 = $306;
 $307 = $143;
 $308 = HEAP32[$307>>2]|0;
 $__tmp$i$i = $308;
 $309 = $146;
 $119 = $305;
 $310 = $119;
 $118 = $310;
 $311 = $118;
 HEAP32[$311>>2] = $309;
 $312 = $__tmp$i$i;
 $313 = ($312|0)!=(0|0);
 if (!($313)) {
  $349 = $154;
  $350 = $155;
  ___resumeException($349|0);
  // unreachable;
 }
 $117 = $305;
 $314 = $117;
 $116 = $314;
 $315 = $116;
 $316 = ((($315)) + 4|0);
 $317 = $__tmp$i$i;
 $141 = $316;
 $142 = $317;
 $318 = $141;
 $319 = ((($318)) + 5|0);
 $320 = HEAP8[$319>>0]|0;
 $321 = $320&1;
 if ($321) {
  $322 = HEAP32[$318>>2]|0;
  $323 = $142;
  $324 = ((($323)) + 8|0);
  $325 = ((($324)) + 12|0);
  $140 = $325;
  $326 = $140;
  $137 = $322;
  $138 = $326;
  $327 = $137;
  $328 = $138;
  ;HEAP8[$136>>0]=HEAP8[$139>>0]|0;
  $134 = $327;
  $135 = $328;
  $329 = $135;
  __ZN9ObjMaster26TextureDataHoldingMaterialD2Ev($329);
 }
 $330 = ((($318)) + 4|0);
 $331 = HEAP8[$330>>0]|0;
 $332 = $331&1;
 if ($332) {
  $333 = HEAP32[$318>>2]|0;
  $334 = $142;
  $335 = ((($334)) + 8|0);
  $133 = $335;
  $336 = $133;
  $123 = $333;
  $124 = $336;
  $337 = $123;
  $338 = $124;
  ;HEAP8[$122>>0]=HEAP8[$125>>0]|0;
  $120 = $337;
  $121 = $338;
  $339 = $121;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($339);
 }
 $340 = $142;
 $341 = ($340|0)!=(0|0);
 if (!($341)) {
  $349 = $154;
  $350 = $155;
  ___resumeException($349|0);
  // unreachable;
 }
 $342 = HEAP32[$318>>2]|0;
 $343 = $142;
 $130 = $342;
 $131 = $343;
 $132 = 1;
 $344 = $130;
 $345 = $131;
 $346 = $132;
 $127 = $344;
 $128 = $345;
 $129 = $346;
 $347 = $128;
 $126 = $347;
 $348 = $126;
 __ZdlPv($348);
 $349 = $154;
 $350 = $155;
 ___resumeException($349|0);
 // unreachable;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE20__node_insert_uniqueEPNS_11__hash_nodeISA_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0.0, $4 = 0;
 var $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__ndptr = 0, $__pn = 0, $__rp$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $60 = sp + 614|0;
 $90 = sp;
 $93 = sp + 613|0;
 $__inserted = sp + 612|0;
 $145 = sp + 16|0;
 $146 = sp + 12|0;
 $147 = sp + 4|0;
 $143 = $this;
 $144 = $__nd;
 $148 = $143;
 $142 = $148;
 $149 = $142;
 $150 = ((($149)) + 12|0);
 $141 = $150;
 $151 = $141;
 $140 = $151;
 $152 = $140;
 $153 = $144;
 $154 = ((($153)) + 8|0);
 $101 = $152;
 $102 = $154;
 $155 = $101;
 $156 = $102;
 $157 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($155,$156)|0);
 $158 = $144;
 $159 = ((($158)) + 4|0);
 HEAP32[$159>>2] = $157;
 $100 = $148;
 $160 = $100;
 $99 = $160;
 $161 = $99;
 $98 = $161;
 $162 = $98;
 $97 = $162;
 $163 = $97;
 $164 = ((($163)) + 4|0);
 $96 = $164;
 $165 = $96;
 $95 = $165;
 $166 = $95;
 $94 = $166;
 $167 = $94;
 $168 = HEAP32[$167>>2]|0;
 $__bc = $168;
 HEAP8[$__inserted>>0] = 0;
 $169 = $__bc;
 $170 = ($169|0)!=(0);
 L1: do {
  if ($170) {
   $171 = $144;
   $172 = ((($171)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $__bc;
   $82 = $173;
   $83 = $174;
   $175 = $83;
   $176 = $83;
   $177 = (($176) - 1)|0;
   $178 = $175 & $177;
   $179 = ($178|0)!=(0);
   $180 = $82;
   $181 = $83;
   if ($179) {
    $184 = (($180>>>0) % ($181>>>0))&-1;
    $185 = $184;
   } else {
    $182 = (($181) - 1)|0;
    $183 = $180 & $182;
    $185 = $183;
   }
   $__chash = $185;
   $186 = $__chash;
   $7 = $148;
   $8 = $186;
   $187 = $7;
   $188 = $8;
   $6 = $187;
   $189 = $6;
   $5 = $189;
   $190 = $5;
   $191 = HEAP32[$190>>2]|0;
   $192 = (($191) + ($188<<2)|0);
   $193 = HEAP32[$192>>2]|0;
   $__ndptr = $193;
   $194 = $__ndptr;
   $195 = ($194|0)!=(0|0);
   if ($195) {
    $196 = $__ndptr;
    $197 = HEAP32[$196>>2]|0;
    $__ndptr = $197;
    L8: while(1) {
     $198 = $__ndptr;
     $199 = ($198|0)!=(0|0);
     if (!($199)) {
      break L1;
     }
     $200 = $__ndptr;
     $201 = ((($200)) + 4|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = $__bc;
     $3 = $202;
     $4 = $203;
     $204 = $4;
     $205 = $4;
     $206 = (($205) - 1)|0;
     $207 = $204 & $206;
     $208 = ($207|0)!=(0);
     $209 = $3;
     $210 = $4;
     if ($208) {
      $213 = (($209>>>0) % ($210>>>0))&-1;
      $215 = $213;
     } else {
      $211 = (($210) - 1)|0;
      $212 = $209 & $211;
      $215 = $212;
     }
     $214 = $__chash;
     $216 = ($215|0)==($214|0);
     if (!($216)) {
      break L1;
     }
     $2 = $148;
     $217 = $2;
     $218 = ((($217)) + 16|0);
     $1 = $218;
     $219 = $1;
     $0 = $219;
     $220 = $0;
     $221 = $__ndptr;
     $222 = ((($221)) + 8|0);
     $223 = $144;
     $224 = ((($223)) + 8|0);
     $66 = $220;
     $67 = $222;
     $68 = $224;
     $225 = $66;
     $226 = $67;
     $227 = $68;
     $63 = $225;
     $64 = $226;
     $65 = $227;
     $228 = $64;
     $229 = $65;
     $61 = $228;
     $62 = $229;
     $230 = $61;
     $59 = $230;
     $231 = $59;
     $58 = $231;
     $232 = $58;
     $57 = $232;
     $233 = $57;
     $56 = $233;
     $234 = $56;
     $235 = HEAP8[$234>>0]|0;
     $236 = $235&255;
     $237 = $236 & 1;
     $238 = ($237|0)!=(0);
     if ($238) {
      $52 = $231;
      $239 = $52;
      $51 = $239;
      $240 = $51;
      $50 = $240;
      $241 = $50;
      $242 = ((($241)) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $250 = $243;
     } else {
      $55 = $231;
      $244 = $55;
      $54 = $244;
      $245 = $54;
      $53 = $245;
      $246 = $53;
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = $248 >> 1;
      $250 = $249;
     }
     $__lhs_sz$i$i$i = $250;
     $251 = $__lhs_sz$i$i$i;
     $252 = $62;
     $49 = $252;
     $253 = $49;
     $48 = $253;
     $254 = $48;
     $47 = $254;
     $255 = $47;
     $46 = $255;
     $256 = $46;
     $257 = HEAP8[$256>>0]|0;
     $258 = $257&255;
     $259 = $258 & 1;
     $260 = ($259|0)!=(0);
     if ($260) {
      $42 = $253;
      $261 = $42;
      $41 = $261;
      $262 = $41;
      $40 = $262;
      $263 = $40;
      $264 = ((($263)) + 4|0);
      $265 = HEAP32[$264>>2]|0;
      $273 = $265;
     } else {
      $45 = $253;
      $266 = $45;
      $44 = $266;
      $267 = $44;
      $43 = $267;
      $268 = $43;
      $269 = HEAP8[$268>>0]|0;
      $270 = $269&255;
      $271 = $270 >> 1;
      $273 = $271;
     }
     $272 = ($251|0)!=($273|0);
     do {
      if ($272) {
       $$expand_i1_val = 0;
       HEAP8[$60>>0] = $$expand_i1_val;
      } else {
       $274 = $61;
       $39 = $274;
       $275 = $39;
       $38 = $275;
       $276 = $38;
       $37 = $276;
       $277 = $37;
       $36 = $277;
       $278 = $36;
       $35 = $278;
       $279 = $35;
       $280 = HEAP8[$279>>0]|0;
       $281 = $280&255;
       $282 = $281 & 1;
       $283 = ($282|0)!=(0);
       if ($283) {
        $29 = $276;
        $284 = $29;
        $28 = $284;
        $285 = $28;
        $27 = $285;
        $286 = $27;
        $287 = ((($286)) + 8|0);
        $288 = HEAP32[$287>>2]|0;
        $295 = $288;
       } else {
        $34 = $276;
        $289 = $34;
        $33 = $289;
        $290 = $33;
        $32 = $290;
        $291 = $32;
        $292 = ((($291)) + 1|0);
        $31 = $292;
        $293 = $31;
        $30 = $293;
        $294 = $30;
        $295 = $294;
       }
       $26 = $295;
       $296 = $26;
       $__lp$i$i$i = $296;
       $297 = $62;
       $22 = $297;
       $298 = $22;
       $21 = $298;
       $299 = $21;
       $20 = $299;
       $300 = $20;
       $19 = $300;
       $301 = $19;
       $18 = $301;
       $302 = $18;
       $303 = HEAP8[$302>>0]|0;
       $304 = $303&255;
       $305 = $304 & 1;
       $306 = ($305|0)!=(0);
       if ($306) {
        $12 = $299;
        $307 = $12;
        $11 = $307;
        $308 = $11;
        $10 = $308;
        $309 = $10;
        $310 = ((($309)) + 8|0);
        $311 = HEAP32[$310>>2]|0;
        $318 = $311;
       } else {
        $17 = $299;
        $312 = $17;
        $16 = $312;
        $313 = $16;
        $15 = $313;
        $314 = $15;
        $315 = ((($314)) + 1|0);
        $14 = $315;
        $316 = $14;
        $13 = $316;
        $317 = $13;
        $318 = $317;
       }
       $9 = $318;
       $319 = $9;
       $__rp$i$i$i = $319;
       $320 = $61;
       $25 = $320;
       $321 = $25;
       $24 = $321;
       $322 = $24;
       $23 = $322;
       $323 = $23;
       $324 = HEAP8[$323>>0]|0;
       $325 = $324&255;
       $326 = $325 & 1;
       $327 = ($326|0)!=(0);
       if ($327) {
        $328 = $__lp$i$i$i;
        $329 = $__rp$i$i$i;
        $330 = $__lhs_sz$i$i$i;
        __THREW__ = 0;
        $331 = (invoke_iiii(388,($328|0),($329|0),($330|0))|0);
        $332 = __THREW__; __THREW__ = 0;
        $333 = $332&1;
        if ($333) {
         label = 34;
         break L8;
        }
        $334 = ($331|0)==(0);
        $$expand_i1_val3 = $334&1;
        HEAP8[$60>>0] = $$expand_i1_val3;
        break;
       }
       while(1) {
        $335 = $__lhs_sz$i$i$i;
        $336 = ($335|0)!=(0);
        if (!($336)) {
         label = 33;
         break;
        }
        $337 = $__lp$i$i$i;
        $338 = HEAP8[$337>>0]|0;
        $339 = $338 << 24 >> 24;
        $340 = $__rp$i$i$i;
        $341 = HEAP8[$340>>0]|0;
        $342 = $341 << 24 >> 24;
        $343 = ($339|0)!=($342|0);
        if ($343) {
         label = 31;
         break;
        }
        $344 = $__lhs_sz$i$i$i;
        $345 = (($344) + -1)|0;
        $__lhs_sz$i$i$i = $345;
        $346 = $__lp$i$i$i;
        $347 = ((($346)) + 1|0);
        $__lp$i$i$i = $347;
        $348 = $__rp$i$i$i;
        $349 = ((($348)) + 1|0);
        $__rp$i$i$i = $349;
       }
       if ((label|0) == 31) {
        label = 0;
        $$expand_i1_val5 = 0;
        HEAP8[$60>>0] = $$expand_i1_val5;
        break;
       }
       else if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val7 = 1;
        HEAP8[$60>>0] = $$expand_i1_val7;
        break;
       }
      }
     } while(0);
     $$pre_trunc = HEAP8[$60>>0]|0;
     $352 = $$pre_trunc&1;
     if ($352) {
      label = 52;
      break;
     }
     $353 = $__ndptr;
     $354 = HEAP32[$353>>2]|0;
     $__ndptr = $354;
    }
    if ((label|0) == 34) {
     $350 = ___cxa_find_matching_catch_3(0|0)|0;
     $351 = tempRet0;
     ___clang_call_terminate($350);
     // unreachable;
    }
    else if ((label|0) == 52) {
     $507 = $__ndptr;
     $133 = $147;
     $134 = $507;
     $508 = $133;
     $509 = $134;
     HEAP32[$508>>2] = $509;
     $137 = $agg$result;
     $138 = $147;
     $139 = $__inserted;
     $510 = $137;
     $511 = $138;
     $136 = $511;
     $512 = $136;
     ;HEAP32[$510>>2]=HEAP32[$512>>2]|0;
     $513 = ((($510)) + 4|0);
     $514 = $139;
     $135 = $514;
     $515 = $135;
     $516 = HEAP8[$515>>0]|0;
     $517 = $516&1;
     $518 = $517&1;
     HEAP8[$513>>0] = $518;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $71 = $148;
 $355 = $71;
 $356 = ((($355)) + 12|0);
 $70 = $356;
 $357 = $70;
 $69 = $357;
 $358 = $69;
 $359 = HEAP32[$358>>2]|0;
 $360 = (($359) + 1)|0;
 $361 = (+($360>>>0));
 $362 = $__bc;
 $363 = (+($362>>>0));
 $74 = $148;
 $364 = $74;
 $365 = ((($364)) + 16|0);
 $73 = $365;
 $366 = $73;
 $72 = $366;
 $367 = $72;
 $368 = +HEAPF32[$367>>2];
 $369 = $363 * $368;
 $370 = $361 > $369;
 $371 = $__bc;
 $372 = ($371|0)==(0);
 $or$cond = $370 | $372;
 if ($or$cond) {
  $373 = $__bc;
  $374 = $373<<1;
  $375 = $__bc;
  $75 = $375;
  $376 = $75;
  $377 = ($376>>>0)>(2);
  if ($377) {
   $378 = $75;
   $379 = $75;
   $380 = (($379) - 1)|0;
   $381 = $378 & $380;
   $382 = ($381|0)!=(0);
   $383 = $382 ^ 1;
   $385 = $383;
  } else {
   $385 = 0;
  }
  $384 = $385 ^ 1;
  $386 = $384&1;
  $387 = (($374) + ($386))|0;
  HEAP32[$145>>2] = $387;
  $78 = $148;
  $388 = $78;
  $389 = ((($388)) + 12|0);
  $77 = $389;
  $390 = $77;
  $76 = $390;
  $391 = $76;
  $392 = HEAP32[$391>>2]|0;
  $393 = (($392) + 1)|0;
  $394 = (+($393>>>0));
  $81 = $148;
  $395 = $81;
  $396 = ((($395)) + 16|0);
  $80 = $396;
  $397 = $80;
  $79 = $397;
  $398 = $79;
  $399 = +HEAPF32[$398>>2];
  $400 = $394 / $399;
  $84 = $400;
  $401 = $84;
  $402 = (+Math_ceil((+$401)));
  $403 = (~~(($402))>>>0);
  HEAP32[$146>>2] = $403;
  $91 = $145;
  $92 = $146;
  $404 = $91;
  $405 = $92;
  ;HEAP8[$90>>0]=HEAP8[$93>>0]|0;
  $88 = $404;
  $89 = $405;
  $406 = $88;
  $407 = $89;
  $85 = $90;
  $86 = $406;
  $87 = $407;
  $408 = $86;
  $409 = HEAP32[$408>>2]|0;
  $410 = $87;
  $411 = HEAP32[$410>>2]|0;
  $412 = ($409>>>0)<($411>>>0);
  $413 = $89;
  $414 = $88;
  $415 = $412 ? $413 : $414;
  $416 = HEAP32[$415>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE6rehashEj($148,$416);
  $109 = $148;
  $417 = $109;
  $108 = $417;
  $418 = $108;
  $107 = $418;
  $419 = $107;
  $106 = $419;
  $420 = $106;
  $421 = ((($420)) + 4|0);
  $105 = $421;
  $422 = $105;
  $104 = $422;
  $423 = $104;
  $103 = $423;
  $424 = $103;
  $425 = HEAP32[$424>>2]|0;
  $__bc = $425;
  $426 = $144;
  $427 = ((($426)) + 4|0);
  $428 = HEAP32[$427>>2]|0;
  $429 = $__bc;
  $110 = $428;
  $111 = $429;
  $430 = $111;
  $431 = $111;
  $432 = (($431) - 1)|0;
  $433 = $430 & $432;
  $434 = ($433|0)!=(0);
  $435 = $110;
  $436 = $111;
  if ($434) {
   $439 = (($435>>>0) % ($436>>>0))&-1;
   $440 = $439;
  } else {
   $437 = (($436) - 1)|0;
   $438 = $435 & $437;
   $440 = $438;
  }
  $__chash = $440;
 }
 $441 = $__chash;
 $114 = $148;
 $115 = $441;
 $442 = $114;
 $443 = $115;
 $113 = $442;
 $444 = $113;
 $112 = $444;
 $445 = $112;
 $446 = HEAP32[$445>>2]|0;
 $447 = (($446) + ($443<<2)|0);
 $448 = HEAP32[$447>>2]|0;
 $__pn = $448;
 $449 = $__pn;
 $450 = ($449|0)==(0|0);
 if ($450) {
  $451 = ((($148)) + 8|0);
  $117 = $451;
  $452 = $117;
  $116 = $452;
  $453 = $116;
  $119 = $453;
  $454 = $119;
  $118 = $454;
  $455 = $118;
  $__pn = $455;
  $456 = $__pn;
  $457 = HEAP32[$456>>2]|0;
  $458 = $144;
  HEAP32[$458>>2] = $457;
  $459 = $144;
  $460 = $__pn;
  HEAP32[$460>>2] = $459;
  $461 = $__pn;
  $462 = $__chash;
  $122 = $148;
  $123 = $462;
  $463 = $122;
  $464 = $123;
  $121 = $463;
  $465 = $121;
  $120 = $465;
  $466 = $120;
  $467 = HEAP32[$466>>2]|0;
  $468 = (($467) + ($464<<2)|0);
  HEAP32[$468>>2] = $461;
  $469 = $144;
  $470 = HEAP32[$469>>2]|0;
  $471 = ($470|0)!=(0|0);
  if ($471) {
   $472 = $144;
   $473 = $144;
   $474 = HEAP32[$473>>2]|0;
   $475 = ((($474)) + 4|0);
   $476 = HEAP32[$475>>2]|0;
   $477 = $__bc;
   $124 = $476;
   $125 = $477;
   $478 = $125;
   $479 = $125;
   $480 = (($479) - 1)|0;
   $481 = $478 & $480;
   $482 = ($481|0)!=(0);
   $483 = $124;
   $484 = $125;
   if ($482) {
    $487 = (($483>>>0) % ($484>>>0))&-1;
    $488 = $487;
   } else {
    $485 = (($484) - 1)|0;
    $486 = $483 & $485;
    $488 = $486;
   }
   $128 = $148;
   $129 = $488;
   $489 = $128;
   $490 = $129;
   $127 = $489;
   $491 = $127;
   $126 = $491;
   $492 = $126;
   $493 = HEAP32[$492>>2]|0;
   $494 = (($493) + ($490<<2)|0);
   HEAP32[$494>>2] = $472;
  }
 } else {
  $495 = $__pn;
  $496 = HEAP32[$495>>2]|0;
  $497 = $144;
  HEAP32[$497>>2] = $496;
  $498 = $144;
  $499 = $__pn;
  HEAP32[$499>>2] = $498;
 }
 $500 = $144;
 $__ndptr = $500;
 $132 = $148;
 $501 = $132;
 $502 = ((($501)) + 12|0);
 $131 = $502;
 $503 = $131;
 $130 = $503;
 $504 = $130;
 $505 = HEAP32[$504>>2]|0;
 $506 = (($505) + 1)|0;
 HEAP32[$504>>2] = $506;
 HEAP8[$__inserted>>0] = 1;
 $507 = $__ndptr;
 $133 = $147;
 $134 = $507;
 $508 = $133;
 $509 = $134;
 HEAP32[$508>>2] = $509;
 $137 = $agg$result;
 $138 = $147;
 $139 = $__inserted;
 $510 = $137;
 $511 = $138;
 $136 = $511;
 $512 = $136;
 ;HEAP32[$510>>2]=HEAP32[$512>>2]|0;
 $513 = ((($510)) + 4|0);
 $514 = $139;
 $135 = $514;
 $515 = $135;
 $516 = HEAP8[$515>>0]|0;
 $517 = $516&1;
 $518 = $517&1;
 HEAP8[$513>>0] = $518;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 12|0;
 $35 = sp + 4|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = ((($49)) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 $58 = HEAP32[$34>>2]|0;
 if ($57) {
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = $__bc;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $__bc;
 $25 = $61;
 $62 = $25;
 $63 = ($62>>>0)>(2);
 if ($63) {
  $64 = $25;
  $65 = $25;
  $66 = (($65) - 1)|0;
  $67 = $64 & $66;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if ($69) {
   $14 = $36;
   $70 = $14;
   $71 = ((($70)) + 12|0);
   $13 = $71;
   $72 = $13;
   $12 = $72;
   $73 = $12;
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $2 = $36;
   $76 = $2;
   $77 = ((($76)) + 16|0);
   $1 = $77;
   $78 = $1;
   $0 = $78;
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $75 / $80;
   $3 = $81;
   $82 = $3;
   $83 = (+Math_ceil((+$82)));
   $84 = (~~(($83))>>>0);
   $5 = $84;
   $85 = $5;
   $86 = (($85) - 1)|0;
   $4 = $86;
   $87 = $4;
   $88 = (Math_clz32(($87|0))|0);
   $89 = (32 - ($88))|0;
   $90 = 1 << $89;
   $107 = $90;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $8 = $36;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $7 = $92;
  $93 = $7;
  $6 = $93;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95>>>0));
  $11 = $36;
  $97 = $11;
  $98 = ((($97)) + 16|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  $101 = +HEAPF32[$100>>2];
  $102 = $96 / $101;
  $15 = $102;
  $103 = $15;
  $104 = (+Math_ceil((+$103)));
  $105 = (~~(($104))>>>0);
  $106 = (__ZNSt3__112__next_primeEj($105)|0);
  $107 = $106;
 }
 HEAP32[$35>>2] = $107;
 $22 = $34;
 $23 = $35;
 $108 = $22;
 $109 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $108;
 $20 = $109;
 $110 = $19;
 $111 = $20;
 $16 = $21;
 $17 = $110;
 $18 = $111;
 $112 = $17;
 $113 = HEAP32[$112>>2]|0;
 $114 = $18;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)<($115>>>0);
 $117 = $20;
 $118 = $19;
 $119 = $116 ? $117 : $118;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$34>>2] = $120;
 $121 = HEAP32[$34>>2]|0;
 $122 = $__bc;
 $123 = ($121>>>0)<($122>>>0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$34>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE8__rehashEj($36,$124);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__np = 0;
 var $__npa = 0, $__phash = 0, $__pp = 0, $__rp$i$i$i = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $116 = sp + 592|0;
 $136 = $this;
 $137 = $__nbc;
 $138 = $136;
 $135 = $138;
 $139 = $135;
 $134 = $139;
 $140 = $134;
 $133 = $140;
 $141 = $133;
 $142 = ((($141)) + 4|0);
 $64 = $142;
 $143 = $64;
 $63 = $143;
 $144 = $63;
 $62 = $144;
 $145 = $62;
 $__npa = $145;
 $146 = $137;
 $147 = ($146>>>0)>(0);
 if ($147) {
  $148 = $__npa;
  $149 = $137;
  $60 = $148;
  $61 = $149;
  $150 = $60;
  $151 = $61;
  $57 = $150;
  $58 = $151;
  $59 = 0;
  $152 = $58;
  $153 = $152<<2;
  $56 = $153;
  $154 = $56;
  $155 = (__Znwj($154)|0);
  $156 = $155;
 } else {
  $156 = 0;
 }
 $54 = $138;
 $55 = $156;
 $157 = $54;
 $53 = $157;
 $158 = $53;
 $52 = $158;
 $159 = $52;
 $160 = HEAP32[$159>>2]|0;
 $__tmp$i = $160;
 $161 = $55;
 $36 = $157;
 $162 = $36;
 $35 = $162;
 $163 = $35;
 HEAP32[$163>>2] = $161;
 $164 = $__tmp$i;
 $165 = ($164|0)!=(0|0);
 if ($165) {
  $34 = $157;
  $166 = $34;
  $33 = $166;
  $167 = $33;
  $168 = ((($167)) + 4|0);
  $169 = $__tmp$i;
  $50 = $168;
  $51 = $169;
  $170 = $50;
  $49 = $170;
  $171 = $49;
  $48 = $171;
  $172 = $48;
  $47 = $172;
  $173 = $47;
  $174 = $51;
  $39 = $170;
  $175 = $39;
  $38 = $175;
  $176 = $38;
  $37 = $176;
  $177 = $37;
  $178 = HEAP32[$177>>2]|0;
  $44 = $173;
  $45 = $174;
  $46 = $178;
  $179 = $44;
  $180 = $45;
  $181 = $46;
  $41 = $179;
  $42 = $180;
  $43 = $181;
  $182 = $42;
  $40 = $182;
  $183 = $40;
  __ZdlPv($183);
 }
 $184 = $137;
 $32 = $138;
 $185 = $32;
 $31 = $185;
 $186 = $31;
 $30 = $186;
 $187 = $30;
 $188 = ((($187)) + 4|0);
 $2 = $188;
 $189 = $2;
 $1 = $189;
 $190 = $1;
 $0 = $190;
 $191 = $0;
 HEAP32[$191>>2] = $184;
 $192 = $137;
 $193 = ($192>>>0)>(0);
 if (!($193)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $194 = $__i;
  $195 = $137;
  $196 = ($194>>>0)<($195>>>0);
  if (!($196)) {
   break;
  }
  $197 = $__i;
  $5 = $138;
  $6 = $197;
  $198 = $5;
  $199 = $6;
  $4 = $198;
  $200 = $4;
  $3 = $200;
  $201 = $3;
  $202 = HEAP32[$201>>2]|0;
  $203 = (($202) + ($199<<2)|0);
  HEAP32[$203>>2] = 0;
  $204 = $__i;
  $205 = (($204) + 1)|0;
  $__i = $205;
 }
 $206 = ((($138)) + 8|0);
 $8 = $206;
 $207 = $8;
 $7 = $207;
 $208 = $7;
 $10 = $208;
 $209 = $10;
 $9 = $209;
 $210 = $9;
 $__pp = $210;
 $211 = $__pp;
 $212 = HEAP32[$211>>2]|0;
 $__cp = $212;
 $213 = $__cp;
 $214 = ($213|0)!=(0|0);
 if (!($214)) {
  STACKTOP = sp;return;
 }
 $215 = $__cp;
 $216 = ((($215)) + 4|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = $137;
 $11 = $217;
 $12 = $218;
 $219 = $12;
 $220 = $12;
 $221 = (($220) - 1)|0;
 $222 = $219 & $221;
 $223 = ($222|0)!=(0);
 $224 = $11;
 $225 = $12;
 if ($223) {
  $228 = (($224>>>0) % ($225>>>0))&-1;
  $229 = $228;
 } else {
  $226 = (($225) - 1)|0;
  $227 = $224 & $226;
  $229 = $227;
 }
 $__chash = $229;
 $230 = $__pp;
 $231 = $__chash;
 $15 = $138;
 $16 = $231;
 $232 = $15;
 $233 = $16;
 $14 = $232;
 $234 = $14;
 $13 = $234;
 $235 = $13;
 $236 = HEAP32[$235>>2]|0;
 $237 = (($236) + ($233<<2)|0);
 HEAP32[$237>>2] = $230;
 $238 = $__chash;
 $__phash = $238;
 $239 = $__cp;
 $__pp = $239;
 $240 = $__cp;
 $241 = HEAP32[$240>>2]|0;
 $__cp = $241;
 L21: while(1) {
  $242 = $__cp;
  $243 = ($242|0)!=(0|0);
  if (!($243)) {
   label = 51;
   break;
  }
  $244 = $__cp;
  $245 = ((($244)) + 4|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $137;
  $17 = $246;
  $18 = $247;
  $248 = $18;
  $249 = $18;
  $250 = (($249) - 1)|0;
  $251 = $248 & $250;
  $252 = ($251|0)!=(0);
  $253 = $17;
  $254 = $18;
  if ($252) {
   $257 = (($253>>>0) % ($254>>>0))&-1;
   $258 = $257;
  } else {
   $255 = (($254) - 1)|0;
   $256 = $253 & $255;
   $258 = $256;
  }
  $__chash = $258;
  $259 = $__chash;
  $260 = $__phash;
  $261 = ($259|0)==($260|0);
  do {
   if ($261) {
    $262 = $__cp;
    $__pp = $262;
   } else {
    $263 = $__chash;
    $21 = $138;
    $22 = $263;
    $264 = $21;
    $265 = $22;
    $20 = $264;
    $266 = $20;
    $19 = $266;
    $267 = $19;
    $268 = HEAP32[$267>>2]|0;
    $269 = (($268) + ($265<<2)|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = ($270|0)==(0|0);
    if ($271) {
     $272 = $__pp;
     $273 = $__chash;
     $25 = $138;
     $26 = $273;
     $274 = $25;
     $275 = $26;
     $24 = $274;
     $276 = $24;
     $23 = $276;
     $277 = $23;
     $278 = HEAP32[$277>>2]|0;
     $279 = (($278) + ($275<<2)|0);
     HEAP32[$279>>2] = $272;
     $280 = $__cp;
     $__pp = $280;
     $281 = $__chash;
     $__phash = $281;
     break;
    }
    $282 = $__cp;
    $__np = $282;
    while(1) {
     $283 = $__np;
     $284 = HEAP32[$283>>2]|0;
     $285 = ($284|0)!=(0|0);
     if (!($285)) {
      break;
     }
     $29 = $138;
     $286 = $29;
     $287 = ((($286)) + 16|0);
     $28 = $287;
     $288 = $28;
     $27 = $288;
     $289 = $27;
     $290 = $__cp;
     $291 = ((($290)) + 8|0);
     $292 = $__np;
     $293 = HEAP32[$292>>2]|0;
     $294 = ((($293)) + 8|0);
     $122 = $289;
     $123 = $291;
     $124 = $294;
     $295 = $122;
     $296 = $123;
     $297 = $124;
     $119 = $295;
     $120 = $296;
     $121 = $297;
     $298 = $120;
     $299 = $121;
     $117 = $298;
     $118 = $299;
     $300 = $117;
     $115 = $300;
     $301 = $115;
     $114 = $301;
     $302 = $114;
     $113 = $302;
     $303 = $113;
     $112 = $303;
     $304 = $112;
     $305 = HEAP8[$304>>0]|0;
     $306 = $305&255;
     $307 = $306 & 1;
     $308 = ($307|0)!=(0);
     if ($308) {
      $108 = $301;
      $309 = $108;
      $107 = $309;
      $310 = $107;
      $106 = $310;
      $311 = $106;
      $312 = ((($311)) + 4|0);
      $313 = HEAP32[$312>>2]|0;
      $320 = $313;
     } else {
      $111 = $301;
      $314 = $111;
      $110 = $314;
      $315 = $110;
      $109 = $315;
      $316 = $109;
      $317 = HEAP8[$316>>0]|0;
      $318 = $317&255;
      $319 = $318 >> 1;
      $320 = $319;
     }
     $__lhs_sz$i$i$i = $320;
     $321 = $__lhs_sz$i$i$i;
     $322 = $118;
     $105 = $322;
     $323 = $105;
     $104 = $323;
     $324 = $104;
     $103 = $324;
     $325 = $103;
     $102 = $325;
     $326 = $102;
     $327 = HEAP8[$326>>0]|0;
     $328 = $327&255;
     $329 = $328 & 1;
     $330 = ($329|0)!=(0);
     if ($330) {
      $98 = $323;
      $331 = $98;
      $97 = $331;
      $332 = $97;
      $96 = $332;
      $333 = $96;
      $334 = ((($333)) + 4|0);
      $335 = HEAP32[$334>>2]|0;
      $343 = $335;
     } else {
      $101 = $323;
      $336 = $101;
      $100 = $336;
      $337 = $100;
      $99 = $337;
      $338 = $99;
      $339 = HEAP8[$338>>0]|0;
      $340 = $339&255;
      $341 = $340 >> 1;
      $343 = $341;
     }
     $342 = ($321|0)!=($343|0);
     do {
      if ($342) {
       $$expand_i1_val = 0;
       HEAP8[$116>>0] = $$expand_i1_val;
      } else {
       $344 = $117;
       $95 = $344;
       $345 = $95;
       $94 = $345;
       $346 = $94;
       $93 = $346;
       $347 = $93;
       $92 = $347;
       $348 = $92;
       $91 = $348;
       $349 = $91;
       $350 = HEAP8[$349>>0]|0;
       $351 = $350&255;
       $352 = $351 & 1;
       $353 = ($352|0)!=(0);
       if ($353) {
        $85 = $346;
        $354 = $85;
        $84 = $354;
        $355 = $84;
        $83 = $355;
        $356 = $83;
        $357 = ((($356)) + 8|0);
        $358 = HEAP32[$357>>2]|0;
        $365 = $358;
       } else {
        $90 = $346;
        $359 = $90;
        $89 = $359;
        $360 = $89;
        $88 = $360;
        $361 = $88;
        $362 = ((($361)) + 1|0);
        $87 = $362;
        $363 = $87;
        $86 = $363;
        $364 = $86;
        $365 = $364;
       }
       $82 = $365;
       $366 = $82;
       $__lp$i$i$i = $366;
       $367 = $118;
       $78 = $367;
       $368 = $78;
       $77 = $368;
       $369 = $77;
       $76 = $369;
       $370 = $76;
       $75 = $370;
       $371 = $75;
       $74 = $371;
       $372 = $74;
       $373 = HEAP8[$372>>0]|0;
       $374 = $373&255;
       $375 = $374 & 1;
       $376 = ($375|0)!=(0);
       if ($376) {
        $68 = $369;
        $377 = $68;
        $67 = $377;
        $378 = $67;
        $66 = $378;
        $379 = $66;
        $380 = ((($379)) + 8|0);
        $381 = HEAP32[$380>>2]|0;
        $388 = $381;
       } else {
        $73 = $369;
        $382 = $73;
        $72 = $382;
        $383 = $72;
        $71 = $383;
        $384 = $71;
        $385 = ((($384)) + 1|0);
        $70 = $385;
        $386 = $70;
        $69 = $386;
        $387 = $69;
        $388 = $387;
       }
       $65 = $388;
       $389 = $65;
       $__rp$i$i$i = $389;
       $390 = $117;
       $81 = $390;
       $391 = $81;
       $80 = $391;
       $392 = $80;
       $79 = $392;
       $393 = $79;
       $394 = HEAP8[$393>>0]|0;
       $395 = $394&255;
       $396 = $395 & 1;
       $397 = ($396|0)!=(0);
       if ($397) {
        $398 = $__lp$i$i$i;
        $399 = $__rp$i$i$i;
        $400 = $__lhs_sz$i$i$i;
        __THREW__ = 0;
        $401 = (invoke_iiii(388,($398|0),($399|0),($400|0))|0);
        $402 = __THREW__; __THREW__ = 0;
        $403 = $402&1;
        if ($403) {
         label = 46;
         break L21;
        }
        $404 = ($401|0)==(0);
        $$expand_i1_val2 = $404&1;
        HEAP8[$116>>0] = $$expand_i1_val2;
        break;
       }
       while(1) {
        $405 = $__lhs_sz$i$i$i;
        $406 = ($405|0)!=(0);
        if (!($406)) {
         label = 45;
         break;
        }
        $407 = $__lp$i$i$i;
        $408 = HEAP8[$407>>0]|0;
        $409 = $408 << 24 >> 24;
        $410 = $__rp$i$i$i;
        $411 = HEAP8[$410>>0]|0;
        $412 = $411 << 24 >> 24;
        $413 = ($409|0)!=($412|0);
        if ($413) {
         label = 43;
         break;
        }
        $414 = $__lhs_sz$i$i$i;
        $415 = (($414) + -1)|0;
        $__lhs_sz$i$i$i = $415;
        $416 = $__lp$i$i$i;
        $417 = ((($416)) + 1|0);
        $__lp$i$i$i = $417;
        $418 = $__rp$i$i$i;
        $419 = ((($418)) + 1|0);
        $__rp$i$i$i = $419;
       }
       if ((label|0) == 43) {
        label = 0;
        $$expand_i1_val4 = 0;
        HEAP8[$116>>0] = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 45) {
        label = 0;
        $$expand_i1_val6 = 1;
        HEAP8[$116>>0] = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = HEAP8[$116>>0]|0;
     $422 = $$pre_trunc&1;
     if (!($422)) {
      break;
     }
     $423 = $__np;
     $424 = HEAP32[$423>>2]|0;
     $__np = $424;
    }
    $425 = $__np;
    $426 = HEAP32[$425>>2]|0;
    $427 = $__pp;
    HEAP32[$427>>2] = $426;
    $428 = $__chash;
    $127 = $138;
    $128 = $428;
    $429 = $127;
    $430 = $128;
    $126 = $429;
    $431 = $126;
    $125 = $431;
    $432 = $125;
    $433 = HEAP32[$432>>2]|0;
    $434 = (($433) + ($430<<2)|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = HEAP32[$435>>2]|0;
    $437 = $__np;
    HEAP32[$437>>2] = $436;
    $438 = $__cp;
    $439 = $__chash;
    $131 = $138;
    $132 = $439;
    $440 = $131;
    $441 = $132;
    $130 = $440;
    $442 = $130;
    $129 = $442;
    $443 = $129;
    $444 = HEAP32[$443>>2]|0;
    $445 = (($444) + ($441<<2)|0);
    $446 = HEAP32[$445>>2]|0;
    HEAP32[$446>>2] = $438;
   }
  } while(0);
  $447 = $__pp;
  $448 = HEAP32[$447>>2]|0;
  $__cp = $448;
 }
 if ((label|0) == 46) {
  $420 = ___cxa_find_matching_catch_3(0|0)|0;
  $421 = tempRet0;
  ___clang_call_terminate($420);
  // unreachable;
 }
 else if ((label|0) == 51) {
  STACKTOP = sp;return;
 }
}
function __ZN9ObjMaster6MtlLib25updateCurrentMaterialNameEPc($agg$result,$this,$line) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mtlNameCstr = 0, $savePtr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $savePtr = sp + 4|0;
 $5 = $this;
 $6 = $line;
 $7 = $6;
 $8 = HEAP32[431]|0;
 (_strtok_r($7,$8,$savePtr)|0);
 $9 = HEAP32[431]|0;
 $10 = (_strtok_r(0,$9,$savePtr)|0);
 $mtlNameCstr = $10;
 $11 = $mtlNameCstr;
 $3 = $agg$result;
 $4 = $11;
 $12 = $3;
 $2 = $12;
 $13 = $2;
 $1 = $13;
 $14 = $1;
 $0 = $14;
 $15 = $4;
 $16 = $4;
 $17 = (__ZNSt3__111char_traitsIcE6lengthEPKc($16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($12,$15,$17);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__a$i$i$i$i$i = 0, $__cap$i = 0, $__i$i$i$i$i$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 8|0;
 $19 = sp + 233|0;
 $28 = sp;
 $31 = sp + 232|0;
 $39 = sp + 80|0;
 $40 = sp + 68|0;
 $__v = sp + 20|0;
 $45 = $this;
 $46 = $__x;
 $49 = $45;
 $44 = $49;
 $50 = $44;
 $51 = ((($50)) + 8|0);
 $43 = $51;
 $52 = $43;
 $42 = $52;
 $53 = $42;
 $__a = $53;
 $41 = $49;
 $54 = $41;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$54>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $61 = (($60|0) / 12)&-1;
 $62 = (($61) + 1)|0;
 $38 = $49;
 HEAP32[$39>>2] = $62;
 $63 = $38;
 $64 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($63)|0);
 $__ms$i = $64;
 $65 = HEAP32[$39>>2]|0;
 $66 = $__ms$i;
 $67 = ($65>>>0)>($66>>>0);
 if ($67) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($63);
  // unreachable;
 }
 $36 = $63;
 $68 = $36;
 $35 = $68;
 $69 = $35;
 $34 = $69;
 $70 = $34;
 $71 = ((($70)) + 8|0);
 $33 = $71;
 $72 = $33;
 $32 = $72;
 $73 = $32;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 12)&-1;
 $__cap$i = $79;
 $80 = $__cap$i;
 $81 = $__ms$i;
 $82 = (($81>>>0) / 2)&-1;
 $83 = ($80>>>0)>=($82>>>0);
 if ($83) {
  $84 = $__ms$i;
  $37 = $84;
 } else {
  $85 = $__cap$i;
  $86 = $85<<1;
  HEAP32[$40>>2] = $86;
  $29 = $40;
  $30 = $39;
  $87 = $29;
  $88 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $87;
  $27 = $88;
  $89 = $26;
  $90 = $27;
  $23 = $28;
  $24 = $89;
  $25 = $90;
  $91 = $24;
  $92 = HEAP32[$91>>2]|0;
  $93 = $25;
  $94 = HEAP32[$93>>2]|0;
  $95 = ($92>>>0)<($94>>>0);
  $96 = $27;
  $97 = $26;
  $98 = $95 ? $96 : $97;
  $99 = HEAP32[$98>>2]|0;
  $37 = $99;
 }
 $100 = $37;
 $22 = $49;
 $101 = $22;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$101>>2]|0;
 $105 = $103;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $108 = (($107|0) / 12)&-1;
 $109 = $__a;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($__v,$100,$108,$109);
 $110 = $__a;
 $111 = ((($__v)) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $21 = $112;
 $113 = $21;
 $114 = $46;
 $20 = $114;
 $115 = $20;
 $16 = $110;
 $17 = $113;
 $18 = $115;
 $116 = $16;
 $117 = $17;
 $118 = $18;
 $15 = $118;
 $119 = $15;
 ;HEAP8[$14>>0]=HEAP8[$19>>0]|0;
 $11 = $116;
 $12 = $117;
 $13 = $119;
 $120 = $11;
 $121 = $12;
 $122 = $13;
 $10 = $122;
 $123 = $10;
 $7 = $120;
 $8 = $121;
 $9 = $123;
 $124 = $8;
 $125 = $9;
 $6 = $125;
 $126 = $6;
 $4 = $124;
 $5 = $126;
 $127 = $4;
 $128 = $5;
 $3 = $128;
 $129 = $3;
 ;HEAP32[$127>>2]=HEAP32[$129>>2]|0;HEAP32[$127+4>>2]=HEAP32[$129+4>>2]|0;HEAP32[$127+8>>2]=HEAP32[$129+8>>2]|0;
 $130 = $5;
 $2 = $130;
 $131 = $2;
 $1 = $131;
 $132 = $1;
 $0 = $132;
 $133 = $0;
 $__a$i$i$i$i$i = $133;
 $__i$i$i$i$i$i = 0;
 while(1) {
  $134 = $__i$i$i$i$i$i;
  $135 = ($134>>>0)<(3);
  if (!($135)) {
   break;
  }
  $136 = $__i$i$i$i$i$i;
  $137 = $__a$i$i$i$i$i;
  $138 = (($137) + ($136<<2)|0);
  HEAP32[$138>>2] = 0;
  $139 = $__i$i$i$i$i$i;
  $140 = (($139) + 1)|0;
  $__i$i$i$i$i$i = $140;
 }
 $141 = ((($__v)) + 8|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($142)) + 12|0);
 HEAP32[$141>>2] = $143;
 __THREW__ = 0;
 invoke_vii(429,($49|0),($__v|0));
 $144 = __THREW__; __THREW__ = 0;
 $145 = $144&1;
 if ($145) {
  $146 = ___cxa_find_matching_catch_2()|0;
  $147 = tempRet0;
  $47 = $146;
  $48 = $147;
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  $148 = $47;
  $149 = $48;
  ___resumeException($148|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN9ObjMaster6MtlLibC2EPcPKcRK12AssetLibrary($this,$fields,$assetPath,$assetLibrary) {
 $this = $this|0;
 $fields = $fields|0;
 $assetPath = $assetPath|0;
 $assetLibrary = $assetLibrary|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 188|0;
 $7 = sp + 176|0;
 $11 = sp + 160|0;
 $14 = sp + 148|0;
 $22 = sp + 116|0;
 $25 = sp + 104|0;
 $29 = sp + 88|0;
 $32 = sp + 76|0;
 $39 = sp + 48|0;
 $42 = sp + 36|0;
 $46 = $this;
 $47 = $fields;
 $48 = $assetPath;
 $49 = $assetLibrary;
 $52 = $46;
 $45 = $52;
 $53 = $45;
 $44 = $53;
 $54 = $44;
 $43 = $54;
 HEAP32[$54>>2] = 0;
 $55 = ((($54)) + 4|0);
 HEAP32[$55>>2] = 0;
 $56 = ((($54)) + 8|0);
 $41 = $56;
 HEAP32[$42>>2] = 0;
 $57 = $41;
 $40 = $42;
 $58 = $40;
 $59 = HEAP32[$58>>2]|0;
 $38 = $57;
 HEAP32[$39>>2] = $59;
 $60 = $38;
 $37 = $60;
 $36 = $39;
 $61 = $36;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$60>>2] = $62;
 $63 = ((($52)) + 12|0);
 $35 = $63;
 $64 = $35;
 $34 = $64;
 $65 = $34;
 $33 = $65;
 $66 = $33;
 $31 = $66;
 HEAP32[$32>>2] = 0;
 $67 = $31;
 $30 = $32;
 $68 = $30;
 $69 = HEAP32[$68>>2]|0;
 $28 = $67;
 HEAP32[$29>>2] = $69;
 $70 = $28;
 $27 = $29;
 $71 = $27;
 $72 = HEAP32[$71>>2]|0;
 HEAP32[$70>>2] = $72;
 $73 = ((($70)) + 4|0);
 $26 = $73;
 $74 = $26;
 $24 = $74;
 HEAP32[$25>>2] = 0;
 $75 = $24;
 $23 = $25;
 $76 = $23;
 $77 = HEAP32[$76>>2]|0;
 $21 = $75;
 HEAP32[$22>>2] = $77;
 $78 = $21;
 $20 = $78;
 $19 = $22;
 $79 = $19;
 $80 = HEAP32[$79>>2]|0;
 HEAP32[$78>>2] = $80;
 $81 = ((($65)) + 8|0);
 $18 = $81;
 $82 = $18;
 $17 = $82;
 $83 = $17;
 $16 = $83;
 $15 = $83;
 $84 = $15;
 HEAP32[$84>>2] = 0;
 $85 = ((($65)) + 12|0);
 $13 = $85;
 HEAP32[$14>>2] = 0;
 $86 = $13;
 $12 = $14;
 $87 = $12;
 $88 = HEAP32[$87>>2]|0;
 $10 = $86;
 HEAP32[$11>>2] = $88;
 $89 = $10;
 $9 = $89;
 $8 = $11;
 $90 = $8;
 $91 = HEAP32[$90>>2]|0;
 HEAP32[$89>>2] = $91;
 $92 = ((($65)) + 16|0);
 $6 = $92;
 HEAPF32[$7>>2] = 1.0;
 $93 = $6;
 $5 = $7;
 $94 = $5;
 $95 = +HEAPF32[$94>>2];
 $3 = $93;
 HEAPF32[$4>>2] = $95;
 $96 = $3;
 $2 = $96;
 $1 = $4;
 $97 = $1;
 $98 = +HEAPF32[$97>>2];
 HEAPF32[$96>>2] = $98;
 $99 = $47;
 $100 = $48;
 $101 = $49;
 $0 = $101;
 $102 = $0;
 __THREW__ = 0;
 invoke_viiii(431,($52|0),($99|0),($100|0),($102|0));
 $103 = __THREW__; __THREW__ = 0;
 $104 = $103&1;
 if ($104) {
  $105 = ___cxa_find_matching_catch_2()|0;
  $106 = tempRet0;
  $50 = $105;
  $51 = $106;
  __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($63);
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($52);
  $107 = $50;
  $108 = $51;
  ___resumeException($107|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN9ObjMaster6MtlLib23getNonLoadedMaterialForENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$this,$materialName) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $materialName = $materialName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = (__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSE_($2,$materialName)|0);
 __ZN9ObjMaster26TextureDataHoldingMaterialC2ERKS0_($agg$result,$3);
 STACKTOP = sp;return;
}
function __ZN9ObjMaster6MtlLib16getMaterialCountEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $4;
 $6 = ((($5)) + 12|0);
 $3 = $6;
 $7 = $3;
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 12|0);
 $1 = $9;
 $10 = $1;
 $0 = $10;
 $11 = $0;
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNK9ObjMaster16FileAssetLibrary14getAssetStreamEPKcS2_($this,$path,$assetFileName) {
 $this = $this|0;
 $path = $path|0;
 $assetFileName = $assetFileName|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0;
 var $__i$i$i$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i4 = 0, $eh$lpad$body3$index2Z2D = 0, $eh$lpad$body3$indexZ2D = 0, $fullPath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 644|0;
 $31 = sp + 16|0;
 $34 = sp + 632|0;
 $35 = sp + 778|0;
 $36 = sp + 8|0;
 $47 = sp + 777|0;
 $48 = sp;
 $68 = sp + 508|0;
 $71 = sp + 496|0;
 $74 = sp + 484|0;
 $76 = sp + 476|0;
 $128 = sp + 260|0;
 $fullPath = sp + 236|0;
 $132 = sp + 224|0;
 $135 = sp + 776|0;
 $136 = sp + 212|0;
 $137 = sp + 24|0;
 $138 = sp + 20|0;
 $129 = $this;
 $130 = $path;
 $131 = $assetFileName;
 $139 = $130;
 $126 = $132;
 $127 = $139;
 $140 = $126;
 $125 = $140;
 $141 = $125;
 $124 = $141;
 $142 = $124;
 $123 = $142;
 $143 = $127;
 $144 = $127;
 $145 = (__ZNSt3__111char_traitsIcE6lengthEPKc($144)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($140,$143,$145);
 $146 = $131;
 $121 = $132;
 $122 = $146;
 $147 = $121;
 $148 = $122;
 __THREW__ = 0;
 $149 = (invoke_iii(432,($147|0),($148|0))|0);
 $150 = __THREW__; __THREW__ = 0;
 $151 = $150&1;
 if ($151) {
  $391 = ___cxa_find_matching_catch_2()|0;
  $392 = tempRet0;
  $133 = $391;
  $134 = $392;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($132);
  $414 = $133;
  $415 = $134;
  ___resumeException($414|0);
  // unreachable;
 }
 $120 = $149;
 $152 = $120;
 $118 = $fullPath;
 $119 = $152;
 $153 = $118;
 $154 = $119;
 $117 = $154;
 $155 = $117;
 ;HEAP32[$153>>2]=HEAP32[$155>>2]|0;HEAP32[$153+4>>2]=HEAP32[$155+4>>2]|0;HEAP32[$153+8>>2]=HEAP32[$155+8>>2]|0;
 $156 = $119;
 $116 = $156;
 $157 = $116;
 $115 = $157;
 $158 = $115;
 $114 = $158;
 $159 = $114;
 $__a$i$i$i = $159;
 $__i$i$i$i = 0;
 while(1) {
  $160 = $__i$i$i$i;
  $161 = ($160>>>0)<(3);
  if (!($161)) {
   break;
  }
  $162 = $__i$i$i$i;
  $163 = $__a$i$i$i;
  $164 = (($163) + ($162<<2)|0);
  HEAP32[$164>>2] = 0;
  $165 = $__i$i$i$i;
  $166 = (($165) + 1)|0;
  $__i$i$i$i = $166;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($132);
 $$expand_i1_val = 0;
 HEAP8[$135>>0] = $$expand_i1_val;
 $109 = $137;
 $110 = $fullPath;
 $111 = 8;
 $167 = $109;
 $168 = ((($167)) + 108|0);
 $108 = $168;
 $169 = $108;
 $107 = $169;
 $170 = $107;
 $171 = 5976;
 HEAP32[$170>>2] = $171;
 $172 = 5960;
 HEAP32[$169>>2] = $172;
 $173 = 1752;
 HEAP32[$167>>2] = $173;
 $174 = ((($167)) + 108|0);
 $175 = 1772;
 HEAP32[$174>>2] = $175;
 $176 = ((($167)) + 8|0);
 $104 = $167;
 $177 = 1784;
 $105 = $177;
 $106 = $176;
 $178 = $104;
 $179 = $105;
 $180 = HEAP32[$179>>2]|0;
 HEAP32[$178>>2] = $180;
 $181 = ((($179)) + 4|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = HEAP32[$178>>2]|0;
 $184 = ((($183)) + -12|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = (($178) + ($185)|0);
 HEAP32[$186>>2] = $182;
 $187 = ((($178)) + 4|0);
 HEAP32[$187>>2] = 0;
 $188 = HEAP32[$178>>2]|0;
 $189 = ((($188)) + -12|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = (($178) + ($190)|0);
 $192 = $106;
 $102 = $191;
 $103 = $192;
 $193 = $102;
 $194 = $103;
 __THREW__ = 0;
 invoke_vii(433,($193|0),($194|0));
 $195 = __THREW__; __THREW__ = 0;
 $196 = $195&1;
 L9: do {
  if ($196) {
   $253 = ___cxa_find_matching_catch_2()|0;
   $254 = tempRet0;
   $112 = $253;
   $113 = $254;
   label = 17;
  } else {
   $197 = ((($193)) + 72|0);
   HEAP32[$197>>2] = 0;
   $198 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $199 = ((($193)) + 76|0);
   HEAP32[$199>>2] = $198;
   $200 = 1752;
   HEAP32[$167>>2] = $200;
   $201 = ((($167)) + 108|0);
   $202 = 1772;
   HEAP32[$201>>2] = $202;
   $203 = ((($167)) + 8|0);
   __THREW__ = 0;
   invoke_vi(434,($203|0));
   $204 = __THREW__; __THREW__ = 0;
   $205 = $204&1;
   if ($205) {
    $255 = ___cxa_find_matching_catch_2()|0;
    $256 = tempRet0;
    $112 = $255;
    $113 = $256;
   } else {
    $206 = ((($167)) + 8|0);
    $207 = $110;
    $208 = $111;
    $209 = $208 | 8;
    $99 = $206;
    $100 = $207;
    $101 = $209;
    $210 = $99;
    $211 = $100;
    $98 = $211;
    $212 = $98;
    $97 = $212;
    $213 = $97;
    $96 = $213;
    $214 = $96;
    $95 = $214;
    $215 = $95;
    $94 = $215;
    $216 = $94;
    $93 = $216;
    $217 = $93;
    $218 = HEAP8[$217>>0]|0;
    $219 = $218&255;
    $220 = $219 & 1;
    $221 = ($220|0)!=(0);
    if ($221) {
     $87 = $214;
     $222 = $87;
     $86 = $222;
     $223 = $86;
     $85 = $223;
     $224 = $85;
     $225 = ((($224)) + 8|0);
     $226 = HEAP32[$225>>2]|0;
     $233 = $226;
    } else {
     $92 = $214;
     $227 = $92;
     $91 = $227;
     $228 = $91;
     $90 = $228;
     $229 = $90;
     $230 = ((($229)) + 1|0);
     $89 = $230;
     $231 = $89;
     $88 = $231;
     $232 = $88;
     $233 = $232;
    }
    $84 = $233;
    $234 = $84;
    $235 = $101;
    __THREW__ = 0;
    $236 = (invoke_iiii(435,($210|0),($234|0),($235|0))|0);
    $237 = __THREW__; __THREW__ = 0;
    $238 = $237&1;
    do {
     if (!($238)) {
      $239 = ($236|0)==(0|0);
      if ($239) {
       $240 = HEAP32[$167>>2]|0;
       $241 = ((($240)) + -12|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = (($167) + ($242)|0);
       $82 = $243;
       $83 = 4;
       $244 = $82;
       $245 = $83;
       $80 = $244;
       $81 = $245;
       $246 = $80;
       $247 = ((($246)) + 16|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = $81;
       $250 = $248 | $249;
       __THREW__ = 0;
       invoke_vii(436,($246|0),($250|0));
       $251 = __THREW__; __THREW__ = 0;
       $252 = $251&1;
       if ($252) {
        break;
       }
      }
      $77 = $137;
      __THREW__ = 0;
      $262 = (invoke_ii(437,188)|0);
      $263 = __THREW__; __THREW__ = 0;
      $264 = $263&1;
      if ($264) {
       $393 = ___cxa_find_matching_catch_2()|0;
       $394 = tempRet0;
       $eh$lpad$body3$index2Z2D = $394;$eh$lpad$body3$indexZ2D = $393;
      } else {
       $265 = $77;
       $75 = $265;
       $266 = $75;
       $62 = $262;
       $63 = $266;
       $267 = $62;
       $268 = ((($267)) + 108|0);
       $61 = $268;
       $269 = $61;
       $60 = $269;
       $270 = $60;
       $271 = 5976;
       HEAP32[$270>>2] = $271;
       $272 = 5960;
       HEAP32[$269>>2] = $272;
       $273 = $63;
       $59 = $273;
       $274 = $59;
       $52 = $267;
       $275 = 1784;
       $53 = $275;
       $54 = $274;
       $276 = $52;
       $277 = $53;
       $278 = HEAP32[$277>>2]|0;
       HEAP32[$276>>2] = $278;
       $279 = ((($277)) + 4|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = HEAP32[$276>>2]|0;
       $282 = ((($281)) + -12|0);
       $283 = HEAP32[$282>>2]|0;
       $284 = (($276) + ($283)|0);
       HEAP32[$284>>2] = $280;
       $285 = ((($276)) + 4|0);
       $286 = $54;
       $287 = ((($286)) + 4|0);
       $288 = HEAP32[$287>>2]|0;
       HEAP32[$285>>2] = $288;
       $289 = $54;
       $290 = ((($289)) + 4|0);
       HEAP32[$290>>2] = 0;
       $291 = HEAP32[$276>>2]|0;
       $292 = ((($291)) + -12|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = (($276) + ($293)|0);
       $295 = $54;
       $296 = HEAP32[$295>>2]|0;
       $297 = ((($296)) + -12|0);
       $298 = HEAP32[$297>>2]|0;
       $299 = (($295) + ($298)|0);
       $50 = $294;
       $51 = $299;
       $300 = $50;
       $301 = $51;
       __THREW__ = 0;
       invoke_vii(438,($300|0),($301|0));
       $302 = __THREW__; __THREW__ = 0;
       $303 = $302&1;
       do {
        if ($303) {
         $323 = ___cxa_find_matching_catch_2()|0;
         $324 = tempRet0;
         $64 = $323;
         $65 = $324;
        } else {
         $304 = $51;
         $305 = ((($304)) + 72|0);
         $306 = HEAP32[$305>>2]|0;
         $307 = ((($300)) + 72|0);
         HEAP32[$307>>2] = $306;
         $308 = $51;
         $309 = ((($308)) + 72|0);
         HEAP32[$309>>2] = 0;
         $310 = $51;
         $311 = ((($310)) + 76|0);
         $312 = HEAP32[$311>>2]|0;
         $313 = ((($300)) + 76|0);
         HEAP32[$313>>2] = $312;
         $314 = 1752;
         HEAP32[$267>>2] = $314;
         $315 = ((($267)) + 108|0);
         $316 = 1772;
         HEAP32[$315>>2] = $316;
         $317 = ((($267)) + 8|0);
         $318 = $63;
         $319 = ((($318)) + 8|0);
         $49 = $319;
         $320 = $49;
         __THREW__ = 0;
         invoke_vii(439,($317|0),($320|0));
         $321 = __THREW__; __THREW__ = 0;
         $322 = $321&1;
         if ($322) {
          $325 = ___cxa_find_matching_catch_2()|0;
          $326 = tempRet0;
          $64 = $325;
          $65 = $326;
          break;
         }
         $332 = HEAP32[$267>>2]|0;
         $333 = ((($332)) + -12|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = (($267) + ($334)|0);
         $336 = ((($267)) + 8|0);
         $57 = $335;
         $58 = $336;
         $337 = $57;
         $338 = $58;
         $55 = $337;
         $56 = $338;
         $339 = $55;
         $340 = $56;
         $341 = ((($339)) + 24|0);
         HEAP32[$341>>2] = $340;
         $73 = $76;
         HEAP32[$74>>2] = $262;
         $342 = $73;
         $72 = $74;
         $343 = $72;
         $344 = HEAP32[$343>>2]|0;
         $70 = $342;
         HEAP32[$71>>2] = $344;
         $345 = $70;
         $69 = $71;
         $346 = $69;
         $347 = HEAP32[$346>>2]|0;
         $67 = $345;
         HEAP32[$68>>2] = $347;
         $348 = $67;
         $66 = $68;
         $349 = $66;
         $350 = HEAP32[$349>>2]|0;
         HEAP32[$348>>2] = $350;
         $351 = HEAP32[$76>>2]|0;
         HEAP32[$136>>2] = $351;
         ;HEAP32[$138>>2]=0|0;
         ;HEAP8[$48>>0]=HEAP8[$138>>0]|0;HEAP8[$48+1>>0]=HEAP8[$138+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$138+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$138+3>>0]|0;
         $45 = $128;
         $46 = $136;
         $352 = $45;
         $353 = $46;
         $44 = $353;
         $354 = $44;
         $43 = $354;
         $355 = $43;
         $42 = $355;
         $356 = $42;
         $357 = HEAP32[$356>>2]|0;
         $__t$i$i = $357;
         $41 = $354;
         $358 = $41;
         $40 = $358;
         $359 = $40;
         HEAP32[$359>>2] = 0;
         $360 = $__t$i$i;
         $361 = $46;
         $39 = $361;
         $362 = $39;
         $38 = $362;
         $363 = $38;
         $37 = $363;
         $364 = $37;
         $22 = $364;
         $365 = $22;
         $23 = $47;
         $24 = $365;
         $25 = 0;
         ;HEAP8[$36>>0]=HEAP8[$47>>0]|0;
         $33 = $352;
         HEAP32[$34>>2] = $360;
         $366 = $33;
         $32 = $34;
         $367 = $32;
         $368 = HEAP32[$367>>2]|0;
         $26 = $36;
         ;HEAP8[$31>>0]=HEAP8[$35>>0]|0;
         $29 = $366;
         HEAP32[$30>>2] = $368;
         $369 = $29;
         $28 = $31;
         $27 = $30;
         $370 = $27;
         $371 = HEAP32[$370>>2]|0;
         HEAP32[$369>>2] = $371;
         $21 = $136;
         $372 = $21;
         $19 = $372;
         $20 = 0;
         $373 = $19;
         $18 = $373;
         $374 = $18;
         $17 = $374;
         $375 = $17;
         $376 = HEAP32[$375>>2]|0;
         $__tmp$i$i = $376;
         $377 = $20;
         $14 = $373;
         $378 = $14;
         $13 = $378;
         $379 = $13;
         HEAP32[$379>>2] = $377;
         $380 = $__tmp$i$i;
         $381 = ($380|0)!=(0|0);
         if ($381) {
          $12 = $373;
          $382 = $12;
          $11 = $382;
          $383 = $11;
          $384 = $__tmp$i$i;
          $15 = $383;
          $16 = $384;
          $385 = $16;
          $386 = ($385|0)==(0|0);
          if (!($386)) {
           $387 = HEAP32[$385>>2]|0;
           $388 = ((($387)) + 4|0);
           $389 = HEAP32[$388>>2]|0;
           FUNCTION_TABLE_vi[$389 & 1023]($385);
          }
         }
         __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($137);
         $$expand_i1_val7 = 1;
         HEAP8[$135>>0] = $$expand_i1_val7;
         $$pre_trunc = HEAP8[$135>>0]|0;
         $390 = $$pre_trunc&1;
         if ($390) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($fullPath);
          $413 = HEAP32[$128>>2]|0;
          STACKTOP = sp;return ($413|0);
         }
         $10 = $128;
         $395 = $10;
         $8 = $395;
         $9 = 0;
         $396 = $8;
         $7 = $396;
         $397 = $7;
         $6 = $397;
         $398 = $6;
         $399 = HEAP32[$398>>2]|0;
         $__tmp$i$i4 = $399;
         $400 = $9;
         $3 = $396;
         $401 = $3;
         $2 = $401;
         $402 = $2;
         HEAP32[$402>>2] = $400;
         $403 = $__tmp$i$i4;
         $404 = ($403|0)!=(0|0);
         if (!($404)) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($fullPath);
          $413 = HEAP32[$128>>2]|0;
          STACKTOP = sp;return ($413|0);
         }
         $1 = $396;
         $405 = $1;
         $0 = $405;
         $406 = $0;
         $407 = $__tmp$i$i4;
         $4 = $406;
         $5 = $407;
         $408 = $5;
         $409 = ($408|0)==(0|0);
         if ($409) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($fullPath);
          $413 = HEAP32[$128>>2]|0;
          STACKTOP = sp;return ($413|0);
         }
         $410 = HEAP32[$408>>2]|0;
         $411 = ((($410)) + 4|0);
         $412 = HEAP32[$411>>2]|0;
         FUNCTION_TABLE_vi[$412 & 1023]($408);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($fullPath);
         $413 = HEAP32[$128>>2]|0;
         STACKTOP = sp;return ($413|0);
        }
       } while(0);
       $327 = ((($267)) + 108|0);
       __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($327);
       $328 = $64;
       $329 = $65;
       $78 = $328;
       $79 = $329;
       __ZdlPv($262);
       $330 = $78;
       $331 = $79;
       $eh$lpad$body3$index2Z2D = $331;$eh$lpad$body3$indexZ2D = $330;
      }
      $133 = $eh$lpad$body3$indexZ2D;
      $134 = $eh$lpad$body3$index2Z2D;
      __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($137);
      break L9;
     }
    } while(0);
    $257 = ___cxa_find_matching_catch_2()|0;
    $258 = tempRet0;
    $112 = $257;
    $113 = $258;
    __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($203);
   }
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $259 = ((($167)) + 108|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($259);
  $260 = $112;
  $261 = $113;
  $133 = $260;
  $134 = $261;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($fullPath);
 $414 = $133;
 $415 = $134;
 ___resumeException($414|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($1,1780);
 $2 = ((($1)) + 108|0);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($3)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($2) + ($9)|0);
 HEAP32[$10>>2] = $6;
 $11 = ((($2)) + 8|0);
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($11);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 1844;
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 (invoke_ii(440,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_3(0|0)|0;
  $8 = tempRet0;
  $1 = $7;
  $2 = $8;
  $9 = $1;
  (___cxa_begin_catch(($9|0))|0);
  __THREW__ = 0;
  invoke_v(441);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $18 = ___cxa_find_matching_catch_3(0|0)|0;
   $19 = tempRet0;
   $1 = $18;
   $2 = $19;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
   $20 = $1;
   ___clang_call_terminate($20);
   // unreachable;
  }
 }
 $12 = ((($3)) + 96|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 if ($14) {
  $15 = ((($3)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __ZdaPv($16);
  }
 }
 $21 = ((($3)) + 97|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&1;
 if (!($23)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $24 = ((($3)) + 56|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 __ZdaPv($25);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__old_anc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__loc;
 $11 = $9;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $15 = $10;
 $8 = $15;
 $16 = $8;
 $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($16,20612)|0);
 $18 = ((($11)) + 68|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($11)) + 98|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 $22 = $21&1;
 $__old_anc = $22;
 $23 = ((($11)) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
 $30 = ((($11)) + 98|0);
 $31 = $29&1;
 HEAP8[$30>>0] = $31;
 $32 = $__old_anc;
 $33 = $32&1;
 $34 = $33&1;
 $35 = ((($11)) + 98|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 $38 = $37&1;
 $39 = ($34|0)!=($38|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $3 = $11;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $40 = $3;
 $41 = $4;
 $42 = ((($40)) + 8|0);
 HEAP32[$42>>2] = $41;
 $43 = $5;
 $44 = ((($40)) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = $6;
 $46 = ((($40)) + 16|0);
 HEAP32[$46>>2] = $45;
 $0 = $11;
 $1 = 0;
 $2 = 0;
 $47 = $0;
 $48 = $1;
 $49 = ((($47)) + 24|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($47)) + 20|0);
 HEAP32[$50>>2] = $48;
 $51 = $2;
 $52 = ((($47)) + 28|0);
 HEAP32[$52>>2] = $51;
 $53 = ((($11)) + 98|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&1;
 $56 = ((($11)) + 96|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&1;
 if ($55) {
  if ($58) {
   $59 = ((($11)) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0|0);
   if (!($61)) {
    __ZdaPv($60);
   }
  }
  $62 = ((($11)) + 97|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&1;
  $65 = ((($11)) + 96|0);
  $66 = $64&1;
  HEAP8[$65>>0] = $66;
  $67 = ((($11)) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($11)) + 52|0);
  HEAP32[$69>>2] = $68;
  $70 = ((($11)) + 56|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($11)) + 32|0);
  HEAP32[$72>>2] = $71;
  $73 = ((($11)) + 60|0);
  HEAP32[$73>>2] = 0;
  $74 = ((($11)) + 56|0);
  HEAP32[$74>>2] = 0;
  $75 = ((($11)) + 97|0);
  HEAP8[$75>>0] = 0;
  STACKTOP = sp;return;
 }
 if (!($58)) {
  $76 = ((($11)) + 32|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($11)) + 44|0);
  $79 = ($77|0)!=($78|0);
  if ($79) {
   $80 = ((($11)) + 52|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($11)) + 60|0);
   HEAP32[$82>>2] = $81;
   $83 = ((($11)) + 32|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($11)) + 56|0);
   HEAP32[$85>>2] = $84;
   $86 = ((($11)) + 97|0);
   HEAP8[$86>>0] = 0;
   $87 = ((($11)) + 52|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (__Znaj($88)|0);
   $90 = ((($11)) + 32|0);
   HEAP32[$90>>2] = $89;
   $91 = ((($11)) + 96|0);
   HEAP8[$91>>0] = 1;
   STACKTOP = sp;return;
  }
 }
 $92 = ((($11)) + 52|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($11)) + 60|0);
 HEAP32[$94>>2] = $93;
 $95 = ((($11)) + 60|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (__Znaj($96)|0);
 $98 = ((($11)) + 56|0);
 HEAP32[$98>>2] = $97;
 $99 = ((($11)) + 97|0);
 HEAP8[$99>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $11 = sp + 76|0;
 $18 = sp + 8|0;
 $19 = sp + 4|0;
 $16 = $this;
 $17 = $__s;
 HEAP32[$18>>2] = $__n;
 $20 = $16;
 $12 = $20;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $21 = $12;
 $22 = $13;
 $23 = ((($21)) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = $14;
 $25 = ((($21)) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = $15;
 $27 = ((($21)) + 16|0);
 HEAP32[$27>>2] = $26;
 $0 = $20;
 $1 = 0;
 $2 = 0;
 $28 = $0;
 $29 = $1;
 $30 = ((($28)) + 24|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($28)) + 20|0);
 HEAP32[$31>>2] = $29;
 $32 = $2;
 $33 = ((($28)) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($20)) + 96|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&1;
 if ($36) {
  $37 = ((($20)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   __ZdaPv($38);
  }
 }
 $40 = ((($20)) + 97|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = ((($20)) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   __ZdaPv($44);
  }
 }
 $46 = HEAP32[$18>>2]|0;
 $47 = ((($20)) + 52|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($20)) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49>>>0)>(8);
 do {
  if ($50) {
   $51 = ((($20)) + 98|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&1;
   $54 = $17;
   $55 = ($54|0)!=(0|0);
   $or$cond = $53 & $55;
   if ($or$cond) {
    $56 = $17;
    $57 = ((($20)) + 32|0);
    HEAP32[$57>>2] = $56;
    $58 = ((($20)) + 96|0);
    HEAP8[$58>>0] = 0;
    break;
   } else {
    $59 = ((($20)) + 52|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (__Znaj($60)|0);
    $62 = ((($20)) + 32|0);
    HEAP32[$62>>2] = $61;
    $63 = ((($20)) + 96|0);
    HEAP8[$63>>0] = 1;
    break;
   }
  } else {
   $64 = ((($20)) + 44|0);
   $65 = ((($20)) + 32|0);
   HEAP32[$65>>2] = $64;
   $66 = ((($20)) + 52|0);
   HEAP32[$66>>2] = 8;
   $67 = ((($20)) + 96|0);
   HEAP8[$67>>0] = 0;
  }
 } while(0);
 $68 = ((($20)) + 98|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 if ($70) {
  $98 = ((($20)) + 60|0);
  HEAP32[$98>>2] = 0;
  $99 = ((($20)) + 56|0);
  HEAP32[$99>>2] = 0;
  $100 = ((($20)) + 97|0);
  HEAP8[$100>>0] = 0;
  STACKTOP = sp;return ($20|0);
 }
 HEAP32[$19>>2] = 8;
 $9 = $18;
 $10 = $19;
 $71 = $9;
 $72 = $10;
 ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
 $6 = $71;
 $7 = $72;
 $73 = $6;
 $74 = $7;
 $3 = $8;
 $4 = $73;
 $5 = $74;
 $75 = $4;
 $76 = HEAP32[$75>>2]|0;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = ($76|0)<($78|0);
 $80 = $7;
 $81 = $6;
 $82 = $79 ? $80 : $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($20)) + 60|0);
 HEAP32[$84>>2] = $83;
 $85 = $17;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = ((($20)) + 60|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88>>>0)>=(8);
  if ($89) {
   $90 = $17;
   $91 = ((($20)) + 56|0);
   HEAP32[$91>>2] = $90;
   $92 = ((($20)) + 97|0);
   HEAP8[$92>>0] = 0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $93 = ((($20)) + 60|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (__Znaj($94)|0);
 $96 = ((($20)) + 56|0);
 HEAP32[$96>>2] = $95;
 $97 = ((($20)) + 97|0);
 HEAP8[$97>>0] = 1;
 STACKTOP = sp;return ($20|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__whence = 0, $__width = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 56|0;
 $6 = sp + 48|0;
 $8 = sp + 40|0;
 $10 = sp + 32|0;
 $12 = sp + 24|0;
 $15 = sp + 16|0;
 $__r = sp;
 $18 = sp + 64|0;
 $14 = $this;
 $19 = $15;
 $20 = $19;
 HEAP32[$20>>2] = $0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $1;
 $16 = $__way;
 $17 = $2;
 $23 = $14;
 $24 = ((($23)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $27 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($27);
  ___cxa_throw(($27|0),(1496|0),(321|0));
  // unreachable;
 }
 $28 = ((($23)) + 68|0);
 $29 = HEAP32[$28>>2]|0;
 $13 = $29;
 $30 = $13;
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_ii[$33 & 1023]($30)|0);
 $__width = $34;
 $35 = ((($23)) + 64|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = $__width;
  $39 = ($38|0)<=(0);
  $40 = $15;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)!=(0);
  $47 = ($45|0)!=(0);
  $48 = $46 | $47;
  $or$cond = $39 & $48;
  if (!($or$cond)) {
   $49 = HEAP32[$23>>2]|0;
   $50 = ((($49)) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_ii[$51 & 1023]($23)|0);
   $53 = ($52|0)!=(0);
   if (!($53)) {
    $70 = $16;
    switch ($70|0) {
    case 0:  {
     $__whence = 0;
     break;
    }
    case 1:  {
     $__whence = 1;
     break;
    }
    case 2:  {
     $__whence = 2;
     break;
    }
    default: {
     $3 = $agg$result;
     $71 = $4;
     $72 = $71;
     HEAP32[$72>>2] = -1;
     $73 = (($71) + 4)|0;
     $74 = $73;
     HEAP32[$74>>2] = -1;
     $75 = $3;
     ;HEAP32[$75>>2]=0|0;HEAP32[$75+4>>2]=0|0;
     $76 = ((($75)) + 8|0);
     $77 = $4;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (($77) + 4)|0;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = $76;
     $84 = $83;
     HEAP32[$84>>2] = $79;
     $85 = (($83) + 4)|0;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     STACKTOP = sp;return;
    }
    }
    $87 = ((($23)) + 64|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $__width;
    $90 = ($89|0)>(0);
    if ($90) {
     $91 = $__width;
     $92 = ($91|0)<(0);
     $93 = $92 << 31 >> 31;
     $94 = $15;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($94) + 4)|0;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = (___muldi3(($91|0),($93|0),($96|0),($99|0))|0);
     $101 = tempRet0;
     $103 = $100;$145 = $101;
    } else {
     $103 = 0;$145 = 0;
    }
    $102 = $__whence;
    $104 = (___fseeko($88,$103,$102)|0);
    $105 = ($104|0)!=(0);
    if ($105) {
     $5 = $agg$result;
     $106 = $6;
     $107 = $106;
     HEAP32[$107>>2] = -1;
     $108 = (($106) + 4)|0;
     $109 = $108;
     HEAP32[$109>>2] = -1;
     $110 = $5;
     ;HEAP32[$110>>2]=0|0;HEAP32[$110+4>>2]=0|0;
     $111 = ((($110)) + 8|0);
     $112 = $6;
     $113 = $112;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($112) + 4)|0;
     $116 = $115;
     $117 = HEAP32[$116>>2]|0;
     $118 = $111;
     $119 = $118;
     HEAP32[$119>>2] = $114;
     $120 = (($118) + 4)|0;
     $121 = $120;
     HEAP32[$121>>2] = $117;
     STACKTOP = sp;return;
    } else {
     $122 = ((($23)) + 64|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (___ftello($123)|0);
     $125 = ($124|0)<(0);
     $126 = $125 << 31 >> 31;
     $7 = $__r;
     $127 = $8;
     $128 = $127;
     HEAP32[$128>>2] = $124;
     $129 = (($127) + 4)|0;
     $130 = $129;
     HEAP32[$130>>2] = $126;
     $131 = $7;
     ;HEAP32[$131>>2]=0|0;HEAP32[$131+4>>2]=0|0;
     $132 = ((($131)) + 8|0);
     $133 = $8;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $136 = (($133) + 4)|0;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $139 = $132;
     $140 = $139;
     HEAP32[$140>>2] = $135;
     $141 = (($139) + 4)|0;
     $142 = $141;
     HEAP32[$142>>2] = $138;
     $143 = ((($23)) + 72|0);
     ;HEAP32[$18>>2]=HEAP32[$143>>2]|0;HEAP32[$18+4>>2]=HEAP32[$143+4>>2]|0;
     ;HEAP8[$10>>0]=HEAP8[$18>>0]|0;HEAP8[$10+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$18+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$18+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[$18+5>>0]|0;HEAP8[$10+6>>0]=HEAP8[$18+6>>0]|0;HEAP8[$10+7>>0]=HEAP8[$18+7>>0]|0;
     $9 = $__r;
     $144 = $9;
     ;HEAP32[$144>>2]=HEAP32[$10>>2]|0;HEAP32[$144+4>>2]=HEAP32[$10+4>>2]|0;
     ;HEAP32[$agg$result>>2]=HEAP32[$__r>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__r+12>>2]|0;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $11 = $agg$result;
 $54 = $12;
 $55 = $54;
 HEAP32[$55>>2] = -1;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = -1;
 $58 = $11;
 ;HEAP32[$58>>2]=0|0;HEAP32[$58+4>>2]=0|0;
 $59 = ((($58)) + 8|0);
 $60 = $12;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = $59;
 $67 = $66;
 HEAP32[$67>>2] = $62;
 $68 = (($66) + 4)|0;
 $69 = $68;
 HEAP32[$69>>2] = $65;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $6 = sp;
 $9 = sp + 16|0;
 $7 = $this;
 $8 = $0;
 $10 = $7;
 $11 = ((($10)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = HEAP32[$10>>2]|0;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_ii[$16 & 1023]($10)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $35 = ((($10)) + 64|0);
   $36 = HEAP32[$35>>2]|0;
   $1 = $__sp;
   $37 = $1;
   $38 = ((($37)) + 8|0);
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (___fseeko($36,$41,0)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    $2 = $agg$result;
    $47 = $3;
    $48 = $47;
    HEAP32[$48>>2] = -1;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = -1;
    $51 = $2;
    ;HEAP32[$51>>2]=0|0;HEAP32[$51+4>>2]=0|0;
    $52 = ((($51)) + 8|0);
    $53 = $3;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = $52;
    $60 = $59;
    HEAP32[$60>>2] = $55;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    STACKTOP = sp;return;
   } else {
    $63 = ((($10)) + 72|0);
    $4 = $__sp;
    $64 = $4;
    ;HEAP32[$9>>2]=HEAP32[$64>>2]|0;HEAP32[$9+4>>2]=HEAP32[$64+4>>2]|0;
    ;HEAP32[$63>>2]=HEAP32[$9>>2]|0;HEAP32[$63+4>>2]=HEAP32[$9+4>>2]|0;
    ;HEAP32[$agg$result>>2]=HEAP32[$__sp>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__sp+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__sp+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__sp+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $5 = $agg$result;
 $19 = $6;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = -1;
 $23 = $5;
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;
 $24 = ((($23)) + 8|0);
 $25 = $6;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $24;
 $32 = $31;
 HEAP32[$32>>2] = $27;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__extbe = 0, $__nmemb = 0, $__off = 0, $__r = 0, $__state = 0, $__update_st = 0, $__width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbe = sp + 28|0;
 $__c = sp;
 $__state = sp + 16|0;
 $26 = $this;
 $27 = $26;
 $28 = ((($27)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $25 = 0;
  $245 = $25;
  STACKTOP = sp;return ($245|0);
 }
 $31 = ((($27)) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $34 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw(($34|0),(1496|0),(321|0));
  // unreachable;
 }
 $35 = ((($27)) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 16;
 $38 = ($37|0)!=(0);
 if ($38) {
  $24 = $27;
  $39 = $24;
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $14 = $27;
  $42 = $14;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)!=($44|0);
  if ($45) {
   $46 = HEAP32[$27>>2]|0;
   $47 = ((($46)) + 52|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $50 = (FUNCTION_TABLE_iii[$48 & 511]($27,$49)|0);
   $51 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $52 = ($50|0)==($51|0);
   if ($52) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
  }
  while(1) {
   $53 = ((($27)) + 68|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($27)) + 72|0);
   $56 = ((($27)) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($27)) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($27)) + 52|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + ($61)|0);
   $2 = $54;
   $3 = $55;
   $4 = $57;
   $5 = $62;
   $6 = $__extbe;
   $63 = $2;
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 20|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $3;
   $68 = $4;
   $69 = $5;
   $70 = $6;
   $71 = (FUNCTION_TABLE_iiiiii[$66 & 1023]($63,$67,$68,$69,$70)|0);
   $__r = $71;
   $72 = HEAP32[$__extbe>>2]|0;
   $73 = ((($27)) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $72;
   $76 = $74;
   $77 = (($75) - ($76))|0;
   $__nmemb = $77;
   $78 = ((($27)) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $__nmemb;
   $81 = ((($27)) + 64|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (_fwrite($79,1,$80,$82)|0);
   $84 = $__nmemb;
   $85 = ($83|0)!=($84|0);
   if ($85) {
    label = 10;
    break;
   }
   $86 = $__r;
   $87 = ($86|0)==(1);
   if (!($87)) {
    break;
   }
  }
  if ((label|0) == 10) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
  $88 = $__r;
  $89 = ($88|0)==(2);
  if ($89) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
  $90 = ((($27)) + 64|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (_fflush($91)|0);
  $93 = ($92|0)!=(0);
  if ($93) {
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  }
 } else {
  $94 = ((($27)) + 92|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 & 8;
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = ((($27)) + 80|0);
   ;HEAP32[$__state>>2]=HEAP32[$98>>2]|0;HEAP32[$__state+4>>2]=HEAP32[$98+4>>2]|0;
   $__update_st = 0;
   $99 = ((($27)) + 98|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&1;
   do {
    if ($101) {
     $1 = $27;
     $102 = $1;
     $103 = ((($102)) + 16|0);
     $104 = HEAP32[$103>>2]|0;
     $0 = $27;
     $105 = $0;
     $106 = ((($105)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $104;
     $109 = $107;
     $110 = (($108) - ($109))|0;
     $111 = ($110|0)<(0);
     $112 = $111 << 31 >> 31;
     $113 = $__c;
     $114 = $113;
     HEAP32[$114>>2] = $110;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = $112;
    } else {
     $117 = ((($27)) + 68|0);
     $118 = HEAP32[$117>>2]|0;
     $7 = $118;
     $119 = $7;
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($120)) + 24|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (FUNCTION_TABLE_ii[$122 & 1023]($119)|0);
     $__width = $123;
     $124 = ((($27)) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ((($27)) + 36|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $125;
     $129 = $127;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(0);
     $132 = $131 << 31 >> 31;
     $133 = $__c;
     $134 = $133;
     HEAP32[$134>>2] = $130;
     $135 = (($133) + 4)|0;
     $136 = $135;
     HEAP32[$136>>2] = $132;
     $137 = $__width;
     $138 = ($137|0)>(0);
     if ($138) {
      $139 = $__width;
      $8 = $27;
      $140 = $8;
      $141 = ((($140)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $9 = $27;
      $143 = $9;
      $144 = ((($143)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $142;
      $147 = $145;
      $148 = (($146) - ($147))|0;
      $149 = Math_imul($139, $148)|0;
      $150 = ($149|0)<(0);
      $151 = $150 << 31 >> 31;
      $152 = $__c;
      $153 = $152;
      $154 = HEAP32[$153>>2]|0;
      $155 = (($152) + 4)|0;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (_i64Add(($154|0),($157|0),($149|0),($151|0))|0);
      $159 = tempRet0;
      $160 = $__c;
      $161 = $160;
      HEAP32[$161>>2] = $158;
      $162 = (($160) + 4)|0;
      $163 = $162;
      HEAP32[$163>>2] = $159;
      break;
     }
     $10 = $27;
     $164 = $10;
     $165 = ((($164)) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     $11 = $27;
     $167 = $11;
     $168 = ((($167)) + 16|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ($166|0)!=($169|0);
     if ($170) {
      $171 = ((($27)) + 68|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ((($27)) + 32|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ((($27)) + 36|0);
      $176 = HEAP32[$175>>2]|0;
      $12 = $27;
      $177 = $12;
      $178 = ((($177)) + 12|0);
      $179 = HEAP32[$178>>2]|0;
      $13 = $27;
      $180 = $13;
      $181 = ((($180)) + 8|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $179;
      $184 = $182;
      $185 = (($183) - ($184))|0;
      $15 = $172;
      $16 = $__state;
      $17 = $174;
      $18 = $176;
      $19 = $185;
      $186 = $15;
      $187 = HEAP32[$186>>2]|0;
      $188 = ((($187)) + 32|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $16;
      $191 = $17;
      $192 = $18;
      $193 = $19;
      $194 = (FUNCTION_TABLE_iiiiii[$189 & 1023]($186,$190,$191,$192,$193)|0);
      $__off = $194;
      $195 = ((($27)) + 36|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ((($27)) + 32|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = $196;
      $200 = $198;
      $201 = (($199) - ($200))|0;
      $202 = $__off;
      $203 = (($201) - ($202))|0;
      $204 = ($203|0)<(0);
      $205 = $204 << 31 >> 31;
      $206 = $__c;
      $207 = $206;
      $208 = HEAP32[$207>>2]|0;
      $209 = (($206) + 4)|0;
      $210 = $209;
      $211 = HEAP32[$210>>2]|0;
      $212 = (_i64Add(($208|0),($211|0),($203|0),($205|0))|0);
      $213 = tempRet0;
      $214 = $__c;
      $215 = $214;
      HEAP32[$215>>2] = $212;
      $216 = (($214) + 4)|0;
      $217 = $216;
      HEAP32[$217>>2] = $213;
      $__update_st = 1;
     }
    }
   } while(0);
   $218 = ((($27)) + 64|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $__c;
   $221 = $220;
   $222 = HEAP32[$221>>2]|0;
   $223 = (($220) + 4)|0;
   $224 = $223;
   $225 = HEAP32[$224>>2]|0;
   $226 = (_i64Subtract(0,0,($222|0),($225|0))|0);
   $227 = tempRet0;
   $228 = (___fseeko($219,$226,1)|0);
   $229 = ($228|0)!=(0);
   if ($229) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
   $230 = $__update_st;
   $231 = $230&1;
   if ($231) {
    $232 = ((($27)) + 72|0);
    ;HEAP32[$232>>2]=HEAP32[$__state>>2]|0;HEAP32[$232+4>>2]=HEAP32[$__state+4>>2]|0;
   }
   $233 = ((($27)) + 32|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ((($27)) + 40|0);
   HEAP32[$235>>2] = $234;
   $236 = ((($27)) + 36|0);
   HEAP32[$236>>2] = $234;
   $20 = $27;
   $21 = 0;
   $22 = 0;
   $23 = 0;
   $237 = $20;
   $238 = $21;
   $239 = ((($237)) + 8|0);
   HEAP32[$239>>2] = $238;
   $240 = $22;
   $241 = ((($237)) + 12|0);
   HEAP32[$241>>2] = $240;
   $242 = $23;
   $243 = ((($237)) + 16|0);
   HEAP32[$243>>2] = $242;
   $244 = ((($27)) + 92|0);
   HEAP32[$244>>2] = 0;
  }
 }
 $25 = 0;
 $245 = $25;
 STACKTOP = sp;return ($245|0);
}
function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c = 0, $__inext = 0, $__initial = 0, $__nmemb = 0, $__nmemb1 = 0, $__nr = 0, $__r = 0, $__unget_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = sp + 8|0;
 $23 = sp + 327|0;
 $31 = sp;
 $34 = sp + 326|0;
 $__1buf = sp + 324|0;
 $71 = sp + 48|0;
 $72 = sp + 44|0;
 $73 = sp + 28|0;
 $74 = sp + 24|0;
 $__inext = sp + 12|0;
 $70 = $this;
 $75 = $70;
 $76 = ((($75)) + 64|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0|0);
 if ($78) {
  $79 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $69 = $79;
  $364 = $69;
  STACKTOP = sp;return ($364|0);
 }
 $80 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($75)|0);
 $81 = $80&1;
 $__initial = $81;
 $68 = $75;
 $82 = $68;
 $83 = ((($82)) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0|0);
 if ($85) {
  $86 = ((($__1buf)) + 1|0);
  $87 = ((($__1buf)) + 1|0);
  $59 = $75;
  $60 = $__1buf;
  $61 = $86;
  $62 = $87;
  $88 = $59;
  $89 = $60;
  $90 = ((($88)) + 8|0);
  HEAP32[$90>>2] = $89;
  $91 = $61;
  $92 = ((($88)) + 12|0);
  HEAP32[$92>>2] = $91;
  $93 = $62;
  $94 = ((($88)) + 16|0);
  HEAP32[$94>>2] = $93;
 }
 $95 = $__initial;
 $96 = $95&1;
 if ($96) {
  $120 = 0;
 } else {
  $57 = $75;
  $97 = $57;
  $98 = ((($97)) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $48 = $75;
  $100 = $48;
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $99;
  $104 = $102;
  $105 = (($103) - ($104))|0;
  $106 = (($105|0) / 2)&-1;
  HEAP32[$71>>2] = $106;
  HEAP32[$72>>2] = 4;
  $32 = $71;
  $33 = $72;
  $107 = $32;
  $108 = $33;
  ;HEAP8[$31>>0]=HEAP8[$34>>0]|0;
  $29 = $107;
  $30 = $108;
  $109 = $30;
  $110 = $29;
  $26 = $31;
  $27 = $109;
  $28 = $110;
  $111 = $27;
  $112 = HEAP32[$111>>2]|0;
  $113 = $28;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($112>>>0)<($114>>>0);
  $116 = $30;
  $117 = $29;
  $118 = $115 ? $116 : $117;
  $119 = HEAP32[$118>>2]|0;
  $120 = $119;
 }
 $__unget_sz = $120;
 $121 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $__c = $121;
 $14 = $75;
 $122 = $14;
 $123 = ((($122)) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 $0 = $75;
 $125 = $0;
 $126 = ((($125)) + 16|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($124|0)==($127|0);
 do {
  if ($128) {
   $1 = $75;
   $129 = $1;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $2 = $75;
   $132 = $2;
   $133 = ((($132)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $__unget_sz;
   $136 = (0 - ($135))|0;
   $137 = (($134) + ($136)|0);
   $138 = $__unget_sz;
   $139 = $138;
   _memmove(($131|0),($137|0),($139|0))|0;
   $140 = ((($75)) + 98|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&1;
   if ($142) {
    $3 = $75;
    $143 = $3;
    $144 = ((($143)) + 16|0);
    $145 = HEAP32[$144>>2]|0;
    $4 = $75;
    $146 = $4;
    $147 = ((($146)) + 8|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $145;
    $150 = $148;
    $151 = (($149) - ($150))|0;
    $152 = $__unget_sz;
    $153 = (($151) - ($152))|0;
    $__nmemb = $153;
    $5 = $75;
    $154 = $5;
    $155 = ((($154)) + 8|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $__unget_sz;
    $158 = (($156) + ($157)|0);
    $159 = $__nmemb;
    $160 = ((($75)) + 64|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (_fread($158,1,$159,$161)|0);
    $__nmemb = $162;
    $163 = $__nmemb;
    $164 = ($163|0)!=(0);
    if (!($164)) {
     break;
    }
    $6 = $75;
    $165 = $6;
    $166 = ((($165)) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    $7 = $75;
    $168 = $7;
    $169 = ((($168)) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $__unget_sz;
    $172 = (($170) + ($171)|0);
    $8 = $75;
    $173 = $8;
    $174 = ((($173)) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $__unget_sz;
    $177 = (($175) + ($176)|0);
    $178 = $__nmemb;
    $179 = (($177) + ($178)|0);
    $9 = $75;
    $10 = $167;
    $11 = $172;
    $12 = $179;
    $180 = $9;
    $181 = $10;
    $182 = ((($180)) + 8|0);
    HEAP32[$182>>2] = $181;
    $183 = $11;
    $184 = ((($180)) + 12|0);
    HEAP32[$184>>2] = $183;
    $185 = $12;
    $186 = ((($180)) + 16|0);
    HEAP32[$186>>2] = $185;
    $13 = $75;
    $187 = $13;
    $188 = ((($187)) + 12|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = HEAP8[$189>>0]|0;
    $191 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($190)|0);
    $__c = $191;
    break;
   }
   $192 = ((($75)) + 32|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ((($75)) + 36|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ((($75)) + 40|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = ((($75)) + 36|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $197;
   $201 = $199;
   $202 = (($200) - ($201))|0;
   _memmove(($193|0),($195|0),($202|0))|0;
   $203 = ((($75)) + 32|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ((($75)) + 40|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ((($75)) + 36|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $206;
   $210 = $208;
   $211 = (($209) - ($210))|0;
   $212 = (($204) + ($211)|0);
   $213 = ((($75)) + 36|0);
   HEAP32[$213>>2] = $212;
   $214 = ((($75)) + 32|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = ((($75)) + 32|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = ((($75)) + 44|0);
   $219 = ($217|0)==($218|0);
   if ($219) {
    $223 = 8;
   } else {
    $220 = ((($75)) + 52|0);
    $221 = HEAP32[$220>>2]|0;
    $223 = $221;
   }
   $222 = (($215) + ($223)|0);
   $224 = ((($75)) + 40|0);
   HEAP32[$224>>2] = $222;
   $225 = ((($75)) + 60|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $__unget_sz;
   $228 = (($226) - ($227))|0;
   HEAP32[$73>>2] = $228;
   $229 = ((($75)) + 40|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = ((($75)) + 36|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $230;
   $234 = $232;
   $235 = (($233) - ($234))|0;
   HEAP32[$74>>2] = $235;
   $21 = $73;
   $22 = $74;
   $236 = $21;
   $237 = $22;
   ;HEAP8[$20>>0]=HEAP8[$23>>0]|0;
   $18 = $236;
   $19 = $237;
   $238 = $19;
   $239 = $18;
   $15 = $20;
   $16 = $238;
   $17 = $239;
   $240 = $16;
   $241 = HEAP32[$240>>2]|0;
   $242 = $17;
   $243 = HEAP32[$242>>2]|0;
   $244 = ($241>>>0)<($243>>>0);
   $245 = $19;
   $246 = $18;
   $247 = $244 ? $245 : $246;
   $248 = HEAP32[$247>>2]|0;
   $__nmemb1 = $248;
   $249 = ((($75)) + 80|0);
   $250 = ((($75)) + 72|0);
   ;HEAP32[$249>>2]=HEAP32[$250>>2]|0;HEAP32[$249+4>>2]=HEAP32[$250+4>>2]|0;
   $251 = ((($75)) + 36|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $__nmemb1;
   $254 = ((($75)) + 64|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (_fread($252,1,$253,$255)|0);
   $__nr = $256;
   $257 = $__nr;
   $258 = ($257|0)!=(0);
   if ($258) {
    $259 = ((($75)) + 68|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = ($260|0)!=(0|0);
    if (!($261)) {
     $262 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($262);
     ___cxa_throw(($262|0),(1496|0),(321|0));
     // unreachable;
    }
    $263 = ((($75)) + 36|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = $__nr;
    $266 = (($264) + ($265)|0);
    $267 = ((($75)) + 40|0);
    HEAP32[$267>>2] = $266;
    $268 = ((($75)) + 68|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ((($75)) + 72|0);
    $271 = ((($75)) + 32|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = ((($75)) + 40|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = ((($75)) + 36|0);
    $24 = $75;
    $276 = $24;
    $277 = ((($276)) + 8|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $__unget_sz;
    $280 = (($278) + ($279)|0);
    $25 = $75;
    $281 = $25;
    $282 = ((($281)) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ((($75)) + 60|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + ($285)|0);
    $35 = $269;
    $36 = $270;
    $37 = $272;
    $38 = $274;
    $39 = $275;
    $40 = $280;
    $41 = $286;
    $42 = $__inext;
    $287 = $35;
    $288 = HEAP32[$287>>2]|0;
    $289 = ((($288)) + 16|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $36;
    $292 = $37;
    $293 = $38;
    $294 = $39;
    $295 = $40;
    $296 = $41;
    $297 = $42;
    $298 = (FUNCTION_TABLE_iiiiiiiii[$290 & 511]($287,$291,$292,$293,$294,$295,$296,$297)|0);
    $__r = $298;
    $299 = $__r;
    $300 = ($299|0)==(3);
    if ($300) {
     $301 = ((($75)) + 32|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = ((($75)) + 32|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = ((($75)) + 40|0);
     $306 = HEAP32[$305>>2]|0;
     $43 = $75;
     $44 = $302;
     $45 = $304;
     $46 = $306;
     $307 = $43;
     $308 = $44;
     $309 = ((($307)) + 8|0);
     HEAP32[$309>>2] = $308;
     $310 = $45;
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $310;
     $312 = $46;
     $313 = ((($307)) + 16|0);
     HEAP32[$313>>2] = $312;
     $47 = $75;
     $314 = $47;
     $315 = ((($314)) + 12|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = HEAP8[$316>>0]|0;
     $318 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($317)|0);
     $__c = $318;
     break;
    }
    $319 = HEAP32[$__inext>>2]|0;
    $49 = $75;
    $320 = $49;
    $321 = ((($320)) + 8|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $__unget_sz;
    $324 = (($322) + ($323)|0);
    $325 = ($319|0)!=($324|0);
    if ($325) {
     $50 = $75;
     $326 = $50;
     $327 = ((($326)) + 8|0);
     $328 = HEAP32[$327>>2]|0;
     $51 = $75;
     $329 = $51;
     $330 = ((($329)) + 8|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = $__unget_sz;
     $333 = (($331) + ($332)|0);
     $334 = HEAP32[$__inext>>2]|0;
     $52 = $75;
     $53 = $328;
     $54 = $333;
     $55 = $334;
     $335 = $52;
     $336 = $53;
     $337 = ((($335)) + 8|0);
     HEAP32[$337>>2] = $336;
     $338 = $54;
     $339 = ((($335)) + 12|0);
     HEAP32[$339>>2] = $338;
     $340 = $55;
     $341 = ((($335)) + 16|0);
     HEAP32[$341>>2] = $340;
     $56 = $75;
     $342 = $56;
     $343 = ((($342)) + 12|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = HEAP8[$344>>0]|0;
     $346 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($345)|0);
     $__c = $346;
    }
   }
  } else {
   $58 = $75;
   $347 = $58;
   $348 = ((($347)) + 12|0);
   $349 = HEAP32[$348>>2]|0;
   $350 = HEAP8[$349>>0]|0;
   $351 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($350)|0);
   $__c = $351;
  }
 } while(0);
 $63 = $75;
 $352 = $63;
 $353 = ((($352)) + 8|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = ($354|0)==($__1buf|0);
 if ($355) {
  $64 = $75;
  $65 = 0;
  $66 = 0;
  $67 = 0;
  $356 = $64;
  $357 = $65;
  $358 = ((($356)) + 8|0);
  HEAP32[$358>>2] = $357;
  $359 = $66;
  $360 = ((($356)) + 12|0);
  HEAP32[$360>>2] = $359;
  $361 = $67;
  $362 = ((($356)) + 16|0);
  HEAP32[$362>>2] = $361;
 }
 $363 = $__c;
 $69 = $363;
 $364 = $69;
 STACKTOP = sp;return ($364|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 48|0;
 $12 = $this;
 $13 = $12;
 $14 = ((($13)) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 8;
 $17 = ($16|0)!=(0);
 if ($17) {
  $$expand_i1_val2 = 0;
  HEAP8[$11>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$11>>0]|0;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 $8 = $13;
 $9 = 0;
 $10 = 0;
 $18 = $8;
 $19 = $9;
 $20 = ((($18)) + 24|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($18)) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $10;
 $23 = ((($18)) + 28|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($13)) + 98|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 if ($26) {
  $27 = ((($13)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($13)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($13)) + 52|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + ($32)|0);
  $34 = ((($13)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($13)) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + ($37)|0);
  $0 = $13;
  $1 = $28;
  $2 = $33;
  $3 = $38;
  $39 = $0;
  $40 = $1;
  $41 = ((($39)) + 8|0);
  HEAP32[$41>>2] = $40;
  $42 = $2;
  $43 = ((($39)) + 12|0);
  HEAP32[$43>>2] = $42;
  $44 = $3;
  $45 = ((($39)) + 16|0);
  HEAP32[$45>>2] = $44;
 } else {
  $46 = ((($13)) + 56|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($13)) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($13)) + 60|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51)|0);
  $53 = ((($13)) + 56|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($13)) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + ($56)|0);
  $4 = $13;
  $5 = $47;
  $6 = $52;
  $7 = $57;
  $58 = $4;
  $59 = $5;
  $60 = ((($58)) + 8|0);
  HEAP32[$60>>2] = $59;
  $61 = $6;
  $62 = ((($58)) + 12|0);
  HEAP32[$62>>2] = $61;
  $63 = $7;
  $64 = ((($58)) + 16|0);
  HEAP32[$64>>2] = $63;
 }
 $65 = ((($13)) + 92|0);
 HEAP32[$65>>2] = 8;
 $$expand_i1_val = 1;
 HEAP8[$11>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$11>>0]|0;
 $66 = $$pre_trunc&1;
 STACKTOP = sp;return ($66|0);
}
function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__c;
 $11 = $9;
 $12 = ((($11)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $7 = $11;
   $15 = $7;
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $6 = $11;
   $18 = $6;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17>>>0)<($20>>>0);
   if ($21) {
    $22 = $10;
    $23 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $24 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($22,$23)|0);
    if ($24) {
     $3 = $11;
     $4 = -1;
     $25 = $3;
     $26 = $4;
     $27 = ((($25)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($26)|0);
     HEAP32[$27>>2] = $29;
     $30 = $10;
     $31 = (__ZNSt3__111char_traitsIcE7not_eofEi($30)|0);
     $8 = $31;
     $56 = $8;
     STACKTOP = sp;return ($56|0);
    }
    $32 = ((($11)) + 88|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 & 16;
    $35 = ($34|0)!=(0);
    if (!($35)) {
     $36 = $10;
     $37 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($36)|0);
     $0 = $11;
     $38 = $0;
     $39 = ((($38)) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($40)) + -1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = (__ZNSt3__111char_traitsIcE2eqEcc($37,$42)|0);
     if (!($43)) {
      break;
     }
    }
    $1 = $11;
    $2 = -1;
    $44 = $1;
    $45 = $2;
    $46 = ((($44)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + ($45)|0);
    HEAP32[$46>>2] = $48;
    $49 = $10;
    $50 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($49)|0);
    $5 = $11;
    $51 = $5;
    $52 = ((($51)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP8[$53>>0] = $50;
    $54 = $10;
    $8 = $54;
    $56 = $8;
    STACKTOP = sp;return ($56|0);
   }
  }
 } while(0);
 $55 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $8 = $55;
 $56 = $8;
 STACKTOP = sp;return ($56|0);
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $3 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($1,$2)|0);
 if ($3) {
  $4 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $5 = $4 ^ -1;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 } else {
  $6 = $0;
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__e = 0, $__epb_save = 0, $__extbe = 0, $__nmemb = 0, $__nmemb1 = 0, $__nmemb2 = 0, $__pb_save = 0, $__r = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__1buf = sp + 200|0;
 $__extbe = sp + 16|0;
 $__e = sp + 8|0;
 $40 = $this;
 $41 = $__c;
 $42 = $40;
 $43 = ((($42)) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  $46 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $39 = $46;
  $225 = $39;
  STACKTOP = sp;return ($225|0);
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($42);
 $38 = $42;
 $47 = $38;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $__pb_save = $49;
 $37 = $42;
 $50 = $37;
 $51 = ((($50)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $__epb_save = $52;
 $53 = $41;
 $54 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $55 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($53,$54)|0);
 if (!($55)) {
  $33 = $42;
  $56 = $33;
  $57 = ((($56)) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if ($59) {
   $60 = ((($__1buf)) + 1|0);
   $22 = $42;
   $23 = $__1buf;
   $24 = $60;
   $61 = $22;
   $62 = $23;
   $63 = ((($61)) + 24|0);
   HEAP32[$63>>2] = $62;
   $64 = ((($61)) + 20|0);
   HEAP32[$64>>2] = $62;
   $65 = $24;
   $66 = ((($61)) + 28|0);
   HEAP32[$66>>2] = $65;
  }
  $67 = $41;
  $68 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($67)|0);
  $21 = $42;
  $69 = $21;
  $70 = ((($69)) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP8[$71>>0] = $68;
  $16 = $42;
  $17 = 1;
  $72 = $16;
  $73 = $17;
  $74 = ((($72)) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($73)|0);
  HEAP32[$74>>2] = $76;
 }
 $6 = $42;
 $77 = $6;
 $78 = ((($77)) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 $3 = $42;
 $80 = $3;
 $81 = ((($80)) + 20|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($79|0)!=($82|0);
 if ($83) {
  $84 = ((($42)) + 98|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&1;
  L13: do {
   if ($86) {
    $0 = $42;
    $87 = $0;
    $88 = ((($87)) + 24|0);
    $89 = HEAP32[$88>>2]|0;
    $1 = $42;
    $90 = $1;
    $91 = ((($90)) + 20|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $89;
    $94 = $92;
    $95 = (($93) - ($94))|0;
    $__nmemb = $95;
    $2 = $42;
    $96 = $2;
    $97 = ((($96)) + 20|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $__nmemb;
    $100 = ((($42)) + 64|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (_fwrite($98,1,$99,$101)|0);
    $103 = $__nmemb;
    $104 = ($102|0)!=($103|0);
    if ($104) {
     $105 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $105;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
   } else {
    $106 = ((($42)) + 32|0);
    $107 = HEAP32[$106>>2]|0;
    HEAP32[$__extbe>>2] = $107;
    while(1) {
     $108 = ((($42)) + 68|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)!=(0|0);
     if (!($110)) {
      label = 13;
      break;
     }
     $112 = ((($42)) + 68|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ((($42)) + 72|0);
     $4 = $42;
     $115 = $4;
     $116 = ((($115)) + 20|0);
     $117 = HEAP32[$116>>2]|0;
     $5 = $42;
     $118 = $5;
     $119 = ((($118)) + 24|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($42)) + 32|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ((($42)) + 32|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($42)) + 52|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($124) + ($126)|0);
     $7 = $113;
     $8 = $114;
     $9 = $117;
     $10 = $120;
     $11 = $__e;
     $12 = $122;
     $13 = $127;
     $14 = $__extbe;
     $128 = $7;
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($129)) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $8;
     $133 = $9;
     $134 = $10;
     $135 = $11;
     $136 = $12;
     $137 = $13;
     $138 = $14;
     $139 = (FUNCTION_TABLE_iiiiiiiii[$131 & 511]($128,$132,$133,$134,$135,$136,$137,$138)|0);
     $__r = $139;
     $140 = HEAP32[$__e>>2]|0;
     $15 = $42;
     $141 = $15;
     $142 = ((($141)) + 20|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)==($143|0);
     if ($144) {
      label = 15;
      break;
     }
     $146 = $__r;
     $147 = ($146|0)==(3);
     if ($147) {
      $18 = $42;
      $148 = $18;
      $149 = ((($148)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $19 = $42;
      $151 = $19;
      $152 = ((($151)) + 20|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $150;
      $155 = $153;
      $156 = (($154) - ($155))|0;
      $__nmemb1 = $156;
      $20 = $42;
      $157 = $20;
      $158 = ((($157)) + 20|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $__nmemb1;
      $161 = ((($42)) + 64|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (_fwrite($159,1,$160,$162)|0);
      $164 = $__nmemb1;
      $165 = ($163|0)!=($164|0);
      if ($165) {
       label = 18;
       break;
      }
     } else {
      $167 = $__r;
      $168 = ($167|0)==(0);
      $169 = $__r;
      $170 = ($169|0)==(1);
      $or$cond = $168 | $170;
      if (!($or$cond)) {
       label = 24;
       break;
      }
      $171 = HEAP32[$__extbe>>2]|0;
      $172 = ((($42)) + 32|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $171;
      $175 = $173;
      $176 = (($174) - ($175))|0;
      $__nmemb2 = $176;
      $177 = ((($42)) + 32|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $__nmemb2;
      $180 = ((($42)) + 64|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (_fwrite($178,1,$179,$181)|0);
      $183 = $__nmemb2;
      $184 = ($182|0)!=($183|0);
      if ($184) {
       label = 21;
       break;
      }
      $186 = $__r;
      $187 = ($186|0)==(1);
      if ($187) {
       $188 = HEAP32[$__e>>2]|0;
       $25 = $42;
       $189 = $25;
       $190 = ((($189)) + 24|0);
       $191 = HEAP32[$190>>2]|0;
       $26 = $42;
       $27 = $188;
       $28 = $191;
       $192 = $26;
       $193 = $27;
       $194 = ((($192)) + 24|0);
       HEAP32[$194>>2] = $193;
       $195 = ((($192)) + 20|0);
       HEAP32[$195>>2] = $193;
       $196 = $28;
       $197 = ((($192)) + 28|0);
       HEAP32[$197>>2] = $196;
       $29 = $42;
       $198 = $29;
       $199 = ((($198)) + 28|0);
       $200 = HEAP32[$199>>2]|0;
       $30 = $42;
       $201 = $30;
       $202 = ((($201)) + 20|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $200;
       $205 = $203;
       $206 = (($204) - ($205))|0;
       $31 = $42;
       $32 = $206;
       $207 = $31;
       $208 = $32;
       $209 = ((($207)) + 24|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + ($208)|0);
       HEAP32[$209>>2] = $211;
      }
     }
     $213 = $__r;
     $214 = ($213|0)==(1);
     if (!($214)) {
      break L13;
     }
    }
    if ((label|0) == 13) {
     $111 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($111);
     ___cxa_throw(($111|0),(1496|0),(321|0));
     // unreachable;
    }
    else if ((label|0) == 15) {
     $145 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $145;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 18) {
     $166 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $166;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 21) {
     $185 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $185;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 24) {
     $212 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $212;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
   }
  } while(0);
  $215 = $__pb_save;
  $216 = $__epb_save;
  $34 = $42;
  $35 = $215;
  $36 = $216;
  $217 = $34;
  $218 = $35;
  $219 = ((($217)) + 24|0);
  HEAP32[$219>>2] = $218;
  $220 = ((($217)) + 20|0);
  HEAP32[$220>>2] = $218;
  $221 = $36;
  $222 = ((($217)) + 28|0);
  HEAP32[$222>>2] = $221;
 }
 $223 = $41;
 $224 = (__ZNSt3__111char_traitsIcE7not_eofEi($223)|0);
 $39 = $224;
 $225 = $39;
 STACKTOP = sp;return ($225|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = ((($14)) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 16;
 $18 = ($17|0)!=(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $9 = $14;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $19 = $9;
 $20 = $10;
 $21 = ((($19)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = $11;
 $23 = ((($19)) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = $12;
 $25 = ((($19)) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($14)) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>(8);
 do {
  if ($28) {
   $29 = ((($14)) + 98|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&1;
   if ($31) {
    $32 = ((($14)) + 32|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($14)) + 32|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($14)) + 52|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) - 1)|0;
    $39 = (($35) + ($38)|0);
    $0 = $14;
    $1 = $33;
    $2 = $39;
    $40 = $0;
    $41 = $1;
    $42 = ((($40)) + 24|0);
    HEAP32[$42>>2] = $41;
    $43 = ((($40)) + 20|0);
    HEAP32[$43>>2] = $41;
    $44 = $2;
    $45 = ((($40)) + 28|0);
    HEAP32[$45>>2] = $44;
    break;
   } else {
    $46 = ((($14)) + 56|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($14)) + 56|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($14)) + 60|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) - 1)|0;
    $53 = (($49) + ($52)|0);
    $3 = $14;
    $4 = $47;
    $5 = $53;
    $54 = $3;
    $55 = $4;
    $56 = ((($54)) + 24|0);
    HEAP32[$56>>2] = $55;
    $57 = ((($54)) + 20|0);
    HEAP32[$57>>2] = $55;
    $58 = $5;
    $59 = ((($54)) + 28|0);
    HEAP32[$59>>2] = $58;
    break;
   }
  } else {
   $6 = $14;
   $7 = 0;
   $8 = 0;
   $60 = $6;
   $61 = $7;
   $62 = ((($60)) + 24|0);
   HEAP32[$62>>2] = $61;
   $63 = ((($60)) + 20|0);
   HEAP32[$63>>2] = $61;
   $64 = $8;
   $65 = ((($60)) + 28|0);
   HEAP32[$65>>2] = $64;
  }
 } while(0);
 $66 = ((($14)) + 92|0);
 HEAP32[$66>>2] = 16;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__rt = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $27 = sp + 68|0;
 $28 = sp + 64|0;
 $31 = sp + 52|0;
 $32 = sp + 48|0;
 $__h = sp + 16|0;
 $38 = sp + 8|0;
 $37 = $this;
 $41 = $37;
 $__rt = 0;
 $42 = ((($41)) + 64|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  $122 = $__rt;
  STACKTOP = sp;return ($122|0);
 }
 $__rt = $41;
 $45 = ((($41)) + 64|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$38>>2] = 442;
 $34 = $__h;
 $35 = $46;
 $36 = $38;
 $47 = $34;
 $48 = $35;
 $49 = $36;
 $33 = $49;
 $50 = $33;
 $51 = HEAP32[$50>>2]|0;
 $30 = $47;
 HEAP32[$31>>2] = $48;
 HEAP32[$32>>2] = $51;
 $52 = $30;
 $29 = $31;
 $53 = $29;
 $54 = HEAP32[$53>>2]|0;
 $23 = $32;
 $55 = $23;
 $56 = HEAP32[$55>>2]|0;
 $26 = $52;
 HEAP32[$27>>2] = $54;
 HEAP32[$28>>2] = $56;
 $57 = $26;
 $25 = $27;
 $58 = $25;
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$57>>2] = $59;
 $60 = ((($57)) + 4|0);
 $24 = $28;
 $61 = $24;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$60>>2] = $62;
 $63 = HEAP32[$41>>2]|0;
 $64 = ((($63)) + 24|0);
 $65 = HEAP32[$64>>2]|0;
 __THREW__ = 0;
 $66 = (invoke_ii($65|0,($41|0))|0);
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if (!($68)) {
  $69 = ($66|0)!=(0);
  if ($69) {
   $__rt = 0;
  }
  $4 = $__h;
  $91 = $4;
  $3 = $91;
  $92 = $3;
  $2 = $92;
  $93 = $2;
  $94 = HEAP32[$93>>2]|0;
  $__t$i = $94;
  $1 = $91;
  $95 = $1;
  $0 = $95;
  $96 = $0;
  HEAP32[$96>>2] = 0;
  $97 = $__t$i;
  __THREW__ = 0;
  $98 = (invoke_ii(442,($97|0))|0);
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if (!($100)) {
   $101 = ($98|0)==(0);
   if ($101) {
    $102 = ((($41)) + 64|0);
    HEAP32[$102>>2] = 0;
   } else {
    $__rt = 0;
   }
   $22 = $__h;
   $103 = $22;
   $20 = $103;
   $21 = 0;
   $104 = $20;
   $19 = $104;
   $105 = $19;
   $18 = $105;
   $106 = $18;
   $107 = HEAP32[$106>>2]|0;
   $__tmp$i$i = $107;
   $108 = $21;
   $17 = $104;
   $109 = $17;
   $16 = $109;
   $110 = $16;
   HEAP32[$110>>2] = $108;
   $111 = $__tmp$i$i;
   $112 = ($111|0)!=(0|0);
   if (!($112)) {
    $122 = $__rt;
    STACKTOP = sp;return ($122|0);
   }
   $15 = $104;
   $113 = $15;
   $14 = $113;
   $114 = $14;
   $115 = ((($114)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $__tmp$i$i;
   __THREW__ = 0;
   (invoke_ii($116|0,($117|0))|0);
   $118 = __THREW__; __THREW__ = 0;
   $119 = $118&1;
   if ($119) {
    $120 = ___cxa_find_matching_catch_3(0|0)|0;
    $121 = tempRet0;
    ___clang_call_terminate($120);
    // unreachable;
   } else {
    $122 = $__rt;
    STACKTOP = sp;return ($122|0);
   }
  }
 }
 $70 = ___cxa_find_matching_catch_2()|0;
 $71 = tempRet0;
 $39 = $70;
 $40 = $71;
 $13 = $__h;
 $72 = $13;
 $11 = $72;
 $12 = 0;
 $73 = $11;
 $10 = $73;
 $74 = $10;
 $9 = $74;
 $75 = $9;
 $76 = HEAP32[$75>>2]|0;
 $__tmp$i$i1 = $76;
 $77 = $12;
 $8 = $73;
 $78 = $8;
 $7 = $78;
 $79 = $7;
 HEAP32[$79>>2] = $77;
 $80 = $__tmp$i$i1;
 $81 = ($80|0)!=(0|0);
 if (!($81)) {
  $123 = $39;
  $124 = $40;
  ___resumeException($123|0);
  // unreachable;
 }
 $6 = $73;
 $82 = $6;
 $5 = $82;
 $83 = $5;
 $84 = ((($83)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $__tmp$i$i1;
 __THREW__ = 0;
 (invoke_ii($85|0,($86|0))|0);
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $89 = ___cxa_find_matching_catch_3(0|0)|0;
  $90 = tempRet0;
  ___clang_call_terminate($89);
  // unreachable;
 } else {
  $123 = $39;
  $124 = $40;
  ___resumeException($123|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 36|0;
 $5 = sp + 24|0;
 $8 = sp + 12|0;
 $11 = sp;
 $7 = $this;
 $12 = $7;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($12);
 $13 = 1844;
 HEAP32[$12>>2] = $13;
 $14 = ((($12)) + 32|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($12)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($12)) + 40|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($12)) + 52|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($12)) + 56|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($12)) + 60|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($12)) + 64|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($12)) + 68|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($12)) + 72|0);
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;
 $23 = ((($12)) + 80|0);
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;
 $24 = ((($12)) + 88|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($12)) + 92|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($12)) + 96|0);
 HEAP8[$26>>0] = 0;
 $27 = ((($12)) + 97|0);
 HEAP8[$27>>0] = 0;
 $28 = ((($12)) + 98|0);
 HEAP8[$28>>0] = 0;
 $6 = $12;
 $29 = $6;
 $30 = ((($29)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($5,$30);
 $31 = HEAP32[$5>>2]|0;
 HEAP32[$8>>2] = $31;
 $4 = $8;
 $32 = $4;
 __THREW__ = 0;
 $33 = (invoke_iii(443,($32|0),(20612|0))|0);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($8);
 do {
  if ($33) {
   $3 = $12;
   $38 = $3;
   $39 = ((($38)) + 4|0);
   __ZNSt3__16localeC2ERKS0_($2,$39);
   $40 = HEAP32[$2>>2]|0;
   HEAP32[$11>>2] = $40;
   $1 = $11;
   $41 = $1;
   __THREW__ = 0;
   $42 = (invoke_iii(346,($41|0),(20612|0))|0);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if (!($44)) {
    $45 = ((($12)) + 68|0);
    HEAP32[$45>>2] = $42;
    __ZNSt3__16localeD2Ev($11);
    $46 = ((($12)) + 68|0);
    $47 = HEAP32[$46>>2]|0;
    $0 = $47;
    $48 = $0;
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($49)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (FUNCTION_TABLE_ii[$51 & 1023]($48)|0);
    $53 = ((($12)) + 98|0);
    $54 = $52&1;
    HEAP8[$53>>0] = $54;
    break;
   }
   $57 = ___cxa_find_matching_catch_2()|0;
   $58 = tempRet0;
   $9 = $57;
   $10 = $58;
   __ZNSt3__16localeD2Ev($11);
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($12);
   $64 = $9;
   $65 = $10;
   ___resumeException($64|0);
   // unreachable;
  }
 } while(0);
 $59 = HEAP32[$12>>2]|0;
 $60 = ((($59)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 __THREW__ = 0;
 (invoke_iiii($61|0,($12|0),(0|0),4096)|0);
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if (!($63)) {
  STACKTOP = sp;return;
 }
 $55 = ___cxa_find_matching_catch_2()|0;
 $56 = tempRet0;
 $9 = $55;
 $10 = $56;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($12);
 $64 = $9;
 $65 = $10;
 ___resumeException($64|0);
 // unreachable;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr = 0, $__rt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__s;
 $2 = $__mode;
 $3 = $0;
 $__rt = 0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $__rt = $3;
   $7 = $2;
   $8 = $7 & -3;
   do {
    switch ($8|0) {
    case 48: case 16:  {
     $__mdstr = 11298;
     break;
    }
    case 1: case 17:  {
     $__mdstr = 11300;
     break;
    }
    case 8:  {
     $__mdstr = 11302;
     break;
    }
    case 24:  {
     $__mdstr = 11304;
     break;
    }
    case 56:  {
     $__mdstr = 11307;
     break;
    }
    case 9: case 25:  {
     $__mdstr = 11310;
     break;
    }
    case 52: case 20:  {
     $__mdstr = 11313;
     break;
    }
    case 5: case 21:  {
     $__mdstr = 11316;
     break;
    }
    case 12:  {
     $__mdstr = 11319;
     break;
    }
    case 28:  {
     $__mdstr = 11322;
     break;
    }
    case 60:  {
     $__mdstr = 11326;
     break;
    }
    case 13: case 29:  {
     $__mdstr = 11330;
     break;
    }
    default: {
     $__rt = 0;
    }
    }
   } while(0);
   $9 = $__rt;
   $10 = ($9|0)!=(0|0);
   if ($10) {
    $11 = $1;
    $12 = $__mdstr;
    $13 = (_fopen($11,$12)|0);
    $14 = ((($3)) + 64|0);
    HEAP32[$14>>2] = $13;
    $15 = ((($3)) + 64|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    if (!($17)) {
     $__rt = 0;
     break;
    }
    $18 = $2;
    $19 = ((($3)) + 88|0);
    HEAP32[$19>>2] = $18;
    $20 = $2;
    $21 = $20 & 2;
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = ((($3)) + 64|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (_fseek($24,0,2)|0);
     $26 = ($25|0)!=(0);
     if ($26) {
      $27 = ((($3)) + 64|0);
      $28 = HEAP32[$27>>2]|0;
      (_fclose($28)|0);
      $29 = ((($3)) + 64|0);
      HEAP32[$29>>2] = 0;
      $__rt = 0;
     }
    }
   }
  }
 } while(0);
 $30 = $__rt;
 STACKTOP = sp;return ($30|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2EOS3_($this,$__rhs) {
 $this = $this|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $43 = sp + 8|0;
 $44 = sp;
 $41 = $this;
 $42 = $__rhs;
 $45 = $41;
 $46 = $42;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2ERKS3_($45,$46);
 $47 = 1844;
 HEAP32[$45>>2] = $47;
 $48 = $42;
 $49 = ((($48)) + 32|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $42;
 $52 = ((($51)) + 44|0);
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = ((($45)) + 44|0);
  $55 = ((($45)) + 32|0);
  HEAP32[$55>>2] = $54;
  $56 = ((($45)) + 32|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $42;
  $59 = ((($58)) + 36|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $42;
  $62 = ((($61)) + 32|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $60;
  $65 = $63;
  $66 = (($64) - ($65))|0;
  $67 = (($57) + ($66)|0);
  $68 = ((($45)) + 36|0);
  HEAP32[$68>>2] = $67;
  $69 = ((($45)) + 32|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $42;
  $72 = ((($71)) + 40|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $42;
  $75 = ((($74)) + 32|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $73;
  $78 = $76;
  $79 = (($77) - ($78))|0;
  $80 = (($70) + ($79)|0);
  $81 = ((($45)) + 40|0);
  HEAP32[$81>>2] = $80;
 } else {
  $82 = $42;
  $83 = ((($82)) + 32|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ((($45)) + 32|0);
  HEAP32[$85>>2] = $84;
  $86 = $42;
  $87 = ((($86)) + 36|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($45)) + 36|0);
  HEAP32[$89>>2] = $88;
  $90 = $42;
  $91 = ((($90)) + 40|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($45)) + 40|0);
  HEAP32[$93>>2] = $92;
 }
 $94 = $42;
 $95 = ((($94)) + 52|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($45)) + 52|0);
 HEAP32[$97>>2] = $96;
 $98 = $42;
 $99 = ((($98)) + 56|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($45)) + 56|0);
 HEAP32[$101>>2] = $100;
 $102 = $42;
 $103 = ((($102)) + 60|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($45)) + 60|0);
 HEAP32[$105>>2] = $104;
 $106 = $42;
 $107 = ((($106)) + 64|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($45)) + 64|0);
 HEAP32[$109>>2] = $108;
 $110 = $42;
 $111 = ((($110)) + 68|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ((($45)) + 68|0);
 HEAP32[$113>>2] = $112;
 $114 = ((($45)) + 72|0);
 $115 = $42;
 $116 = ((($115)) + 72|0);
 ;HEAP32[$114>>2]=HEAP32[$116>>2]|0;HEAP32[$114+4>>2]=HEAP32[$116+4>>2]|0;
 $117 = ((($45)) + 80|0);
 $118 = $42;
 $119 = ((($118)) + 80|0);
 ;HEAP32[$117>>2]=HEAP32[$119>>2]|0;HEAP32[$117+4>>2]=HEAP32[$119+4>>2]|0;
 $120 = $42;
 $121 = ((($120)) + 88|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($45)) + 88|0);
 HEAP32[$123>>2] = $122;
 $124 = $42;
 $125 = ((($124)) + 92|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ((($45)) + 92|0);
 HEAP32[$127>>2] = $126;
 $128 = $42;
 $129 = ((($128)) + 96|0);
 $130 = HEAP8[$129>>0]|0;
 $131 = $130&1;
 $132 = ((($45)) + 96|0);
 $133 = $131&1;
 HEAP8[$132>>0] = $133;
 $134 = $42;
 $135 = ((($134)) + 97|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $136&1;
 $138 = ((($45)) + 97|0);
 $139 = $137&1;
 HEAP8[$138>>0] = $139;
 $140 = $42;
 $141 = ((($140)) + 98|0);
 $142 = HEAP8[$141>>0]|0;
 $143 = $142&1;
 $144 = ((($45)) + 98|0);
 $145 = $143&1;
 HEAP8[$144>>0] = $145;
 $146 = $42;
 $40 = $146;
 $147 = $40;
 $148 = ((($147)) + 20|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)!=(0|0);
 $151 = $42;
 do {
  if ($150) {
   $0 = $151;
   $152 = $0;
   $153 = ((($152)) + 20|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $42;
   $156 = ((($155)) + 56|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($154|0)==($157|0);
   if ($158) {
    $159 = ((($45)) + 56|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = ((($45)) + 56|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = $42;
    $1 = $163;
    $164 = $1;
    $165 = ((($164)) + 28|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $42;
    $2 = $167;
    $168 = $2;
    $169 = ((($168)) + 20|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $166;
    $172 = $170;
    $173 = (($171) - ($172))|0;
    $174 = (($162) + ($173)|0);
    $3 = $45;
    $4 = $160;
    $5 = $174;
    $175 = $3;
    $176 = $4;
    $177 = ((($175)) + 24|0);
    HEAP32[$177>>2] = $176;
    $178 = ((($175)) + 20|0);
    HEAP32[$178>>2] = $176;
    $179 = $5;
    $180 = ((($175)) + 28|0);
    HEAP32[$180>>2] = $179;
   } else {
    $181 = ((($45)) + 32|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = ((($45)) + 32|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $42;
    $6 = $185;
    $186 = $6;
    $187 = ((($186)) + 28|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = $42;
    $7 = $189;
    $190 = $7;
    $191 = ((($190)) + 20|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $188;
    $194 = $192;
    $195 = (($193) - ($194))|0;
    $196 = (($184) + ($195)|0);
    $8 = $45;
    $9 = $182;
    $10 = $196;
    $197 = $8;
    $198 = $9;
    $199 = ((($197)) + 24|0);
    HEAP32[$199>>2] = $198;
    $200 = ((($197)) + 20|0);
    HEAP32[$200>>2] = $198;
    $201 = $10;
    $202 = ((($197)) + 28|0);
    HEAP32[$202>>2] = $201;
   }
   $203 = $42;
   $11 = $203;
   $204 = $11;
   $205 = ((($204)) + 24|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = $42;
   $12 = $207;
   $208 = $12;
   $209 = ((($208)) + 20|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = $206;
   $212 = $210;
   $213 = (($211) - ($212))|0;
   $13 = $45;
   $14 = $213;
   $214 = $13;
   $215 = $14;
   $216 = ((($214)) + 24|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = (($217) + ($215)|0);
   HEAP32[$216>>2] = $218;
  } else {
   $15 = $151;
   $219 = $15;
   $220 = ((($219)) + 8|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = ($221|0)!=(0|0);
   if ($222) {
    $223 = $42;
    $16 = $223;
    $224 = $16;
    $225 = ((($224)) + 8|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = $42;
    $228 = ((($227)) + 56|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = ($226|0)==($229|0);
    if ($230) {
     $231 = ((($45)) + 56|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = ((($45)) + 56|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = $42;
     $17 = $235;
     $236 = $17;
     $237 = ((($236)) + 12|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = $42;
     $18 = $239;
     $240 = $18;
     $241 = ((($240)) + 8|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = $238;
     $244 = $242;
     $245 = (($243) - ($244))|0;
     $246 = (($234) + ($245)|0);
     $247 = ((($45)) + 56|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = $42;
     $19 = $249;
     $250 = $19;
     $251 = ((($250)) + 16|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = $42;
     $20 = $253;
     $254 = $20;
     $255 = ((($254)) + 8|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = $252;
     $258 = $256;
     $259 = (($257) - ($258))|0;
     $260 = (($248) + ($259)|0);
     $21 = $45;
     $22 = $232;
     $23 = $246;
     $24 = $260;
     $261 = $21;
     $262 = $22;
     $263 = ((($261)) + 8|0);
     HEAP32[$263>>2] = $262;
     $264 = $23;
     $265 = ((($261)) + 12|0);
     HEAP32[$265>>2] = $264;
     $266 = $24;
     $267 = ((($261)) + 16|0);
     HEAP32[$267>>2] = $266;
     break;
    } else {
     $268 = ((($45)) + 32|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = ((($45)) + 32|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = $42;
     $25 = $272;
     $273 = $25;
     $274 = ((($273)) + 12|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = $42;
     $26 = $276;
     $277 = $26;
     $278 = ((($277)) + 8|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = $275;
     $281 = $279;
     $282 = (($280) - ($281))|0;
     $283 = (($271) + ($282)|0);
     $284 = ((($45)) + 32|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = $42;
     $27 = $286;
     $287 = $27;
     $288 = ((($287)) + 16|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = $42;
     $28 = $290;
     $291 = $28;
     $292 = ((($291)) + 8|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = $289;
     $295 = $293;
     $296 = (($294) - ($295))|0;
     $297 = (($285) + ($296)|0);
     $29 = $45;
     $30 = $269;
     $31 = $283;
     $32 = $297;
     $298 = $29;
     $299 = $30;
     $300 = ((($298)) + 8|0);
     HEAP32[$300>>2] = $299;
     $301 = $31;
     $302 = ((($298)) + 12|0);
     HEAP32[$302>>2] = $301;
     $303 = $32;
     $304 = ((($298)) + 16|0);
     HEAP32[$304>>2] = $303;
     break;
    }
   }
  }
 } while(0);
 $305 = $42;
 $306 = ((($305)) + 32|0);
 HEAP32[$306>>2] = 0;
 $307 = $42;
 $308 = ((($307)) + 36|0);
 HEAP32[$308>>2] = 0;
 $309 = $42;
 $310 = ((($309)) + 40|0);
 HEAP32[$310>>2] = 0;
 $311 = $42;
 $312 = ((($311)) + 52|0);
 HEAP32[$312>>2] = 0;
 $313 = $42;
 $314 = ((($313)) + 56|0);
 HEAP32[$314>>2] = 0;
 $315 = $42;
 $316 = ((($315)) + 60|0);
 HEAP32[$316>>2] = 0;
 $317 = $42;
 $318 = ((($317)) + 64|0);
 HEAP32[$318>>2] = 0;
 $319 = $42;
 $320 = ((($319)) + 72|0);
 ;HEAP32[$43>>2]=0|0;HEAP32[$43+4>>2]=0|0;
 ;HEAP32[$320>>2]=HEAP32[$43>>2]|0;HEAP32[$320+4>>2]=HEAP32[$43+4>>2]|0;
 $321 = $42;
 $322 = ((($321)) + 80|0);
 ;HEAP32[$44>>2]=0|0;HEAP32[$44+4>>2]=0|0;
 ;HEAP32[$322>>2]=HEAP32[$44>>2]|0;HEAP32[$322+4>>2]=HEAP32[$44+4>>2]|0;
 $323 = $42;
 $324 = ((($323)) + 88|0);
 HEAP32[$324>>2] = 0;
 $325 = $42;
 $326 = ((($325)) + 92|0);
 HEAP32[$326>>2] = 0;
 $327 = $42;
 $328 = ((($327)) + 96|0);
 HEAP8[$328>>0] = 0;
 $329 = $42;
 $330 = ((($329)) + 97|0);
 HEAP8[$330>>0] = 0;
 $331 = $42;
 $33 = $331;
 $34 = 0;
 $35 = 0;
 $36 = 0;
 $332 = $33;
 $333 = $34;
 $334 = ((($332)) + 8|0);
 HEAP32[$334>>2] = $333;
 $335 = $35;
 $336 = ((($332)) + 12|0);
 HEAP32[$336>>2] = $335;
 $337 = $36;
 $338 = ((($332)) + 16|0);
 HEAP32[$338>>2] = $337;
 $339 = $42;
 $37 = $339;
 $38 = 0;
 $39 = 0;
 $340 = $37;
 $341 = $38;
 $342 = ((($340)) + 24|0);
 HEAP32[$342>>2] = $341;
 $343 = ((($340)) + 20|0);
 HEAP32[$343>>2] = $341;
 $344 = $39;
 $345 = ((($340)) + 28|0);
 HEAP32[$345>>2] = $344;
 STACKTOP = sp;return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4562]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 18292;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[4562]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((444|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_562($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[4562]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((445|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_530($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 26;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $dummy$wc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($src|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = ($n|0)==(0);
   do {
    if (!($1)) {
     $2 = ($wc|0)==(0|0);
     $dummy$wc = $2 ? $dummy : $wc;
     $3 = HEAP8[$src>>0]|0;
     $4 = $3&255;
     $5 = ($3<<24>>24)>(-1);
     if ($5) {
      HEAP32[$dummy$wc>>2] = $4;
      $6 = ($3<<24>>24)!=(0);
      $7 = $6&1;
      $$0 = $7;
      break L1;
     }
     $8 = (($4) + -194)|0;
     $9 = ($8>>>0)>(50);
     if (!($9)) {
      $10 = ((($src)) + 1|0);
      $11 = (2136 + ($8<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ($n>>>0)<(4);
      if ($13) {
       $14 = ($n*6)|0;
       $15 = (($14) + -6)|0;
       $16 = -2147483648 >>> $15;
       $17 = $12 & $16;
       $18 = ($17|0)==(0);
       if (!($18)) {
        break;
       }
      }
      $19 = HEAP8[$10>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $12 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if (!($26)) {
       $27 = $12 << 6;
       $28 = (($20) + -128)|0;
       $29 = $28 | $27;
       $30 = ($29|0)<(0);
       if (!($30)) {
        HEAP32[$dummy$wc>>2] = $29;
        $$0 = 2;
        break L1;
       }
       $31 = ((($src)) + 2|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if ($35) {
        $36 = $29 << 6;
        $37 = (($33) + -128)|0;
        $38 = $37 | $36;
        $39 = ($38|0)<(0);
        if (!($39)) {
         HEAP32[$dummy$wc>>2] = $38;
         $$0 = 3;
         break L1;
        }
        $40 = ((($src)) + 3|0);
        $41 = HEAP8[$40>>0]|0;
        $42 = $41&255;
        $43 = $42 & 192;
        $44 = ($43|0)==(128);
        if ($44) {
         $45 = $38 << 6;
         $46 = (($42) + -128)|0;
         $47 = $46 | $45;
         HEAP32[$dummy$wc>>2] = $47;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $48 = (___errno_location()|0);
   HEAP32[$48>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa29>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa30>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strtox_83($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = (($13) + ($12))|0;
  $16 = (($15) - ($14))|0;
  $17 = (($s) + ($16)|0);
  HEAP32[$p>>2] = $17;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($f)) + 108|0);
 HEAP32[$6>>2] = $5;
 $7 = ($lim|0)!=(0);
 $8 = ($5|0)>($lim|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = (($9) + ($lim)|0);
  $11 = ((($f)) + 100|0);
  HEAP32[$11>>2] = $10;
 } else {
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $2;
 }
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0;
 var $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa113 = $13;
     break;
    }
   }
   $16 = ($$lcssa113|0)==(45);
   L11: do {
    switch ($$lcssa113|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa113;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base | 16;
   $27 = ($26|0)==(16);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$116 = 8;$c$117 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $47 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $47 = $45;
     }
     $46 = ((11335) + ($47)|0);
     $48 = HEAP8[$46>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$116 = 16;$c$117 = $47;
      label = 46;
     }
    } else {
     $$base14 = $25 ? 10 : $base;
     $57 = ((11335) + ($c$0)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base14>>>0);
     if ($60) {
      $$1 = $$base14;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$070 = 0;
      while(1) {
       $69 = ($x$070*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$070 = $70;
       } else {
        $$lcssa112 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa112;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$359 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$359;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$359 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$115 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$116 = $$1;$c$117 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$116) + -1)|0;
     $117 = $116 & $$116;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$116*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (11591 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((11335) + ($c$117)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$116>>>0);
      if ($132) {
       $135 = $131;$x$136 = 0;
       while(1) {
        $133 = $x$136 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $143 = ((11335) + ($c$4$be)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$116>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$136 = $134;
        } else {
         $$lcssa108 = $134;$$lcssa109 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa109;$154 = 0;$156 = $$lcssa108;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$117;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$116>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond31 = $153 | $160;
      if ($or$cond31) {
       $$115 = $$116;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $175 = ((11335) + ($c$5$be)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$116>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$115 = $$116;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $119 = ((11335) + ($c$117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$116>>>0);
     if ($122) {
      $186 = $121;$x$254 = 0;
      while(1) {
       $184 = Math_imul($x$254, $$116)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $194 = ((11335) + ($c$6$be)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$116>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$254 = $185;
       } else {
        $$lcssa110 = $185;$$lcssa111 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa111;$294 = $$lcssa110;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$117;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$116>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$116|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$742 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$116|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $231 = ((11335) + ($c$7$be)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$116>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$742 = $c$7$be;
       } else {
        $$115 = $$116;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$115 = $$116;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $235 = ((11335) + ($c$8)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$115>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $246 = ((11335) + ($c$9$be)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$115>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = ($15|0)<($18|0);
    $20 = $$pre;
    if ($19) {
     $41 = $20;
     label = 9;
    } else {
     $21 = (($18) + -1)|0;
     $22 = (($13) + ($21)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $25 = $20;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $25 = $41;
   }
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   if ($26) {
    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3>>2]|0;
    $28 = $25;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=2340; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 1023]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0;
 var $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
 var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
 var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0;
 var $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
 var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
 var $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0;
 var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$s$0>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;$s$1 = $s$0;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$s$1 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($s$292)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L12;
     }
     $29 = ((($z$093)) + 1|0);
     $30 = ((($s$292)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $s$292 = $30;$z$093 = $29;
      label = 9;
     } else {
      $s$2$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $s$0;
  $35 = (($33) - ($34))|0;
  if ($0) {
   $36 = HEAP32[$f>>2]|0;
   $37 = $36 & 32;
   $38 = ($37|0)==(0);
   if ($38) {
    (___fwritex($s$0,$35,$f)|0);
   }
  }
  $39 = ($z$0$lcssa|0)==($s$0|0);
  if (!($39)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $40 = ((($s$2$lcssa)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $isdigittmp = (($42) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $43 = ((($s$2$lcssa)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = ((($s$2$lcssa)) + 3|0);
   $$43 = $45 ? $46 : $40;
   $$l10n$0 = $45 ? 1 : $l10n$0;
   $isdigittmp$ = $45 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  $49 = $47 & -32;
  $50 = ($49|0)==(32);
  L25: do {
   if ($50) {
    $52 = $47;$57 = $48;$fl$0100 = 0;$storemerge899 = $storemerge;
    while(1) {
     $51 = (($52) + -32)|0;
     $53 = 1 << $51;
     $54 = $53 & 75913;
     $55 = ($54|0)==(0);
     if ($55) {
      $66 = $57;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
      break L25;
     }
     $56 = $57 << 24 >> 24;
     $58 = (($56) + -32)|0;
     $59 = 1 << $58;
     $60 = $59 | $fl$0100;
     $61 = ((($storemerge899)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 & -32;
     $65 = ($64|0)==(32);
     if ($65) {
      $52 = $63;$57 = $62;$fl$0100 = $60;$storemerge899 = $61;
     } else {
      $66 = $62;$fl$053 = $60;$storemerge851 = $61;
      break;
     }
    }
   } else {
    $66 = $48;$fl$053 = 0;$storemerge851 = $storemerge;
   }
  } while(0);
  $67 = ($66<<24>>24)==(42);
  do {
   if ($67) {
    $68 = ((($storemerge851)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $isdigittmp11 = (($70) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $71 = ((($storemerge851)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(36);
     if ($73) {
      $74 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$74>>2] = 10;
      $75 = HEAP8[$68>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = (($76) + -48)|0;
      $78 = (($nl_arg) + ($77<<3)|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($storemerge851)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $85;$w$0 = $81;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $86 = ($l10n$1|0)==(0);
     if (!($86)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $87 = $arglist_current;
     $88 = ((0) + 4|0);
     $expanded4 = $88;
     $expanded = (($expanded4) - 1)|0;
     $89 = (($87) + ($expanded))|0;
     $90 = ((0) + 4|0);
     $expanded8 = $90;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $91 = $89 & $expanded6;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next = ((($92)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $68;$w$0 = $93;
    }
    $94 = ($w$0|0)<(0);
    if ($94) {
     $95 = $fl$053 | 8192;
     $96 = (0 - ($w$0))|0;
     $fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $96;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
    }
   } else {
    $97 = $66 << 24 >> 24;
    $isdigittmp1$i = (($97) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $101 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $98 = ($i$03$i*10)|0;
      $99 = (($98) + ($isdigittmp4$i))|0;
      $100 = ((($101)) + 1|0);
      $102 = HEAP8[$100>>0]|0;
      $103 = $102 << 24 >> 24;
      $isdigittmp$i = (($103) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $99;$$lcssa295 = $100;
       break;
      }
     }
     $104 = ($$lcssa|0)<(0);
     if ($104) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa295;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
    }
   }
  } while(0);
  $105 = HEAP8[$s$4>>0]|0;
  $106 = ($105<<24>>24)==(46);
  L46: do {
   if ($106) {
    $107 = ((($s$4)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i22 = (($136) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $140 = $107;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $p$0 = 0;$s$6 = $107;
      break;
     }
     while(1) {
      $137 = ($i$03$i25*10)|0;
      $138 = (($137) + ($isdigittmp4$i24))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i26 = (($142) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $140 = $139;$i$03$i25 = $138;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $p$0 = $138;$s$6 = $139;
       break L46;
      }
     }
    }
    $110 = ((($s$4)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($s$4)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($s$4)) + 4|0);
      $p$0 = $123;$s$6 = $127;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded11 = $130;
     $expanded10 = (($expanded11) - 1)|0;
     $131 = (($129) + ($expanded10))|0;
     $132 = ((0) + 4|0);
     $expanded15 = $132;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $133 = $131 & $expanded13;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $135;$s$6 = $110;
    } else {
     $p$0 = 0;$s$6 = $110;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$s$7>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = (($144) + -65)|0;
   $146 = ($145>>>0)>(57);
   if ($146) {
    $$0 = -1;
    break L1;
   }
   $147 = ((($s$7)) + 1|0);
   $148 = ((11600 + (($st$0*58)|0)|0) + ($145)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($150) + -1)|0;
   $152 = ($151>>>0)<(8);
   if ($152) {
    $s$7 = $147;$st$0 = $150;
   } else {
    $$lcssa300 = $147;$$lcssa301 = $149;$$lcssa302 = $150;$s$7$lcssa298 = $s$7;$st$0$lcssa299 = $st$0;
    break;
   }
  }
  $153 = ($$lcssa301<<24>>24)==(0);
  if ($153) {
   $$0 = -1;
   break;
  }
  $154 = ($$lcssa301<<24>>24)==(19);
  $155 = ($argpos$0|0)>(-1);
  do {
   if ($154) {
    if ($155) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($155) {
     $156 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$156>>2] = $$lcssa302;
     $157 = (($nl_arg) + ($argpos$0<<3)|0);
     $158 = $157;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($158) + 4)|0;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = $arg;
     $165 = $164;
     HEAP32[$165>>2] = $160;
     $166 = (($164) + 4)|0;
     $167 = $166;
     HEAP32[$167>>2] = $163;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa302,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue;
   }
  }
  $168 = HEAP8[$s$7$lcssa298>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = ($st$0$lcssa299|0)!=(0);
  $171 = $169 & 15;
  $172 = ($171|0)==(3);
  $or$cond15 = $170 & $172;
  $173 = $169 & -33;
  $t$0 = $or$cond15 ? $173 : $169;
  $174 = $fl$1 & 8192;
  $175 = ($174|0)==(0);
  $176 = $fl$1 & -65537;
  $fl$1$ = $175 ? $fl$1 : $176;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa299|0) {
    case 0:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 1:  {
     $184 = HEAP32[$arg>>2]|0;
     HEAP32[$184>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 2:  {
     $185 = ($cnt$1|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$arg>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $cnt$1;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 3:  {
     $192 = $cnt$1&65535;
     $193 = HEAP32[$arg>>2]|0;
     HEAP16[$193>>1] = $192;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 4:  {
     $194 = $cnt$1&255;
     $195 = HEAP32[$arg>>2]|0;
     HEAP8[$195>>0] = $194;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 6:  {
     $196 = HEAP32[$arg>>2]|0;
     HEAP32[$196>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 7:  {
     $197 = ($cnt$1|0)<(0);
     $198 = $197 << 31 >> 31;
     $199 = HEAP32[$arg>>2]|0;
     $200 = $199;
     $201 = $200;
     HEAP32[$201>>2] = $cnt$1;
     $202 = (($200) + 4)|0;
     $203 = $202;
     HEAP32[$203>>2] = $198;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $204 = ($p$0>>>0)>(8);
    $205 = $204 ? $p$0 : 8;
    $206 = $fl$1$ | 8;
    $fl$3 = $206;$p$1 = $205;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $244 = $arg;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)==(0);
    $251 = ($249|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$254 = $246;$258 = $249;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = ((($$03$i33)) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i33 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 12080;
     label = 77;
    } else {
     $266 = $$0$lcssa$i;
     $267 = (($2) - ($266))|0;
     $268 = ($p$0|0)>($267|0);
     $269 = (($267) + 1)|0;
     $p$0$ = $268 ? $p$0 : $269;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 12080;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $270 = $arg;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)<(0);
    if ($276) {
     $277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
     $278 = tempRet0;
     $279 = $arg;
     $280 = $279;
     HEAP32[$280>>2] = $277;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 12080;
     label = 76;
     break L75;
    }
    $283 = $fl$1$ & 2048;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $fl$1$ & 1;
     $286 = ($285|0)==(0);
     $$ = $286 ? 12080 : (12082);
     $287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
     label = 76;
    } else {
     $287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (12081);
     label = 76;
    }
    break;
   }
   case 117:  {
    $177 = $arg;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 12080;
    label = 76;
    break;
   }
   case 99:  {
    $308 = $arg;
    $309 = $308;
    $310 = HEAP32[$309>>2]|0;
    $311 = (($308) + 4)|0;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = $310&255;
    HEAP8[$3>>0] = $314;
    $a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 12080;$z$2 = $1;
    break;
   }
   case 109:  {
    $315 = (___errno_location()|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_strerror($316)|0);
    $a$1 = $317;
    label = 82;
    break;
   }
   case 115:  {
    $318 = HEAP32[$arg>>2]|0;
    $319 = ($318|0)!=(0|0);
    $320 = $319 ? $318 : 13982;
    $a$1 = $320;
    label = 82;
    break;
   }
   case 67:  {
    $327 = $arg;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    HEAP32[$wc>>2] = $329;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $798 = $wc;$p$4176 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $333 = ($p$0|0)==(0);
    if ($333) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;$p$4176 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $358 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
    $360 = HEAP32[tempDoublePtr+4>>2]|0;
    $361 = ($360|0)<(0);
    if ($361) {
     $362 = -$358;
     $$07$i = $362;$pl$0$i = 1;$prefix$0$i = 13989;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? (13990) : (13995);
      $$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$07$i = $358;$pl$0$i = 1;$prefix$0$i = (13992);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    do {
     if ($374) {
      $390 = (+_frexpl($$07$i,$e2$i));
      $391 = $390 * 2.0;
      $392 = $391 != 0.0;
      if ($392) {
       $393 = HEAP32[$e2$i>>2]|0;
       $394 = (($393) + -1)|0;
       HEAP32[$e2$i>>2] = $394;
      }
      $395 = $t$0 | 32;
      $396 = ($395|0)==(97);
      if ($396) {
       $397 = $t$0 & 32;
       $398 = ($397|0)==(0);
       $399 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $398 ? $prefix$0$i : $399;
       $400 = $pl$0$i | 2;
       $401 = ($p$0>>>0)>(11);
       $402 = (12 - ($p$0))|0;
       $403 = ($402|0)==(0);
       $404 = $401 | $403;
       do {
        if ($404) {
         $$1$i = $391;
        } else {
         $re$171$i = $402;$round$070$i = 8.0;
         while(1) {
          $405 = (($re$171$i) + -1)|0;
          $406 = $round$070$i * 16.0;
          $407 = ($405|0)==(0);
          if ($407) {
           $$lcssa319 = $406;
           break;
          } else {
           $re$171$i = $405;$round$070$i = $406;
          }
         }
         $408 = HEAP8[$prefix$0$$i>>0]|0;
         $409 = ($408<<24>>24)==(45);
         if ($409) {
          $410 = -$391;
          $411 = $410 - $$lcssa319;
          $412 = $$lcssa319 + $411;
          $413 = -$412;
          $$1$i = $413;
          break;
         } else {
          $414 = $391 + $$lcssa319;
          $415 = $414 - $$lcssa319;
          $$1$i = $415;
          break;
         }
        }
       } while(0);
       $416 = HEAP32[$e2$i>>2]|0;
       $417 = ($416|0)<(0);
       $418 = (0 - ($416))|0;
       $419 = $417 ? $418 : $416;
       $420 = ($419|0)<(0);
       $421 = $420 << 31 >> 31;
       $422 = (_fmt_u($419,$421,$7)|0);
       $423 = ($422|0)==($7|0);
       if ($423) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $422;
       }
       $424 = $416 >> 31;
       $425 = $424 & 2;
       $426 = (($425) + 43)|0;
       $427 = $426&255;
       $428 = ((($estr$0$i)) + -1|0);
       HEAP8[$428>>0] = $427;
       $429 = (($t$0) + 15)|0;
       $430 = $429&255;
       $431 = ((($estr$0$i)) + -2|0);
       HEAP8[$431>>0] = $430;
       $notrhs$i = ($p$0|0)<(1);
       $432 = $fl$1$ & 8;
       $433 = ($432|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $434 = (~~(($$2$i)));
        $435 = (12064 + ($434)|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $436&255;
        $438 = $437 | $397;
        $439 = $438&255;
        $440 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $439;
        $441 = (+($434|0));
        $442 = $$2$i - $441;
        $443 = $442 * 16.0;
        $444 = $440;
        $445 = (($444) - ($5))|0;
        $446 = ($445|0)==(1);
        do {
         if ($446) {
          $notlhs$i = $443 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $433 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $440;
           break;
          }
          $447 = ((($s$0$i)) + 2|0);
          HEAP8[$440>>0] = 46;
          $s$1$i = $447;
         } else {
          $s$1$i = $440;
         }
        } while(0);
        $448 = $443 != 0.0;
        if ($448) {
         $$2$i = $443;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $449 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i$lcssa;
       $450 = (($11) + ($$pre188$i))|0;
       $451 = ($450|0)<($p$0|0);
       $or$cond122 = $449 & $451;
       $452 = $431;
       $453 = (($12) + ($p$0))|0;
       $454 = (($453) - ($452))|0;
       $455 = (($10) - ($452))|0;
       $456 = (($455) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $454 : $456;
       $457 = (($l$0$i) + ($400))|0;
       _pad($f,32,$w$1,$457,$fl$1$);
       $458 = HEAP32[$f>>2]|0;
       $459 = $458 & 32;
       $460 = ($459|0)==(0);
       if ($460) {
        (___fwritex($prefix$0$$i,$400,$f)|0);
       }
       $461 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$457,$461);
       $462 = (($$pre188$i) - ($5))|0;
       $463 = HEAP32[$f>>2]|0;
       $464 = $463 & 32;
       $465 = ($464|0)==(0);
       if ($465) {
        (___fwritex($buf$i,$462,$f)|0);
       }
       $466 = (($9) - ($452))|0;
       $sum = (($462) + ($466))|0;
       $467 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$467,0,0);
       $468 = HEAP32[$f>>2]|0;
       $469 = $468 & 32;
       $470 = ($469|0)==(0);
       if ($470) {
        (___fwritex($431,$466,$f)|0);
       }
       $471 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$457,$471);
       $472 = ($457|0)<($w$1|0);
       $w$$i = $472 ? $w$1 : $457;
       $$0$i = $w$$i;
       break;
      }
      $473 = ($p$0|0)<(0);
      $$p$i = $473 ? 6 : $p$0;
      if ($392) {
       $474 = $391 * 268435456.0;
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -28)|0;
       HEAP32[$e2$i>>2] = $476;
       $$3$i = $474;$477 = $476;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $391;$477 = $$pre185$i;
      }
      $478 = ($477|0)<(0);
      $$33$i = $478 ? $big$i : $13;
      $479 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $480 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $480;
       $481 = ((($z$0$i)) + 4|0);
       $482 = (+($480>>>0));
       $483 = $$4$i - $482;
       $484 = $483 * 1.0E+9;
       $485 = $484 != 0.0;
       if ($485) {
        $$4$i = $484;$z$0$i = $481;
       } else {
        $$lcssa303 = $481;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $486 = ($$pr$i|0)>(0);
      if ($486) {
       $487 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa303;
       while(1) {
        $488 = ($487|0)>(29);
        $489 = $488 ? 29 : $487;
        $d$0141$i = ((($z$1148$i)) + -4|0);
        $490 = ($d$0141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($490) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0141$i;
          while(1) {
           $491 = HEAP32[$d$0143$i>>2]|0;
           $492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
           $493 = tempRet0;
           $494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
           $495 = tempRet0;
           $496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
           $497 = tempRet0;
           HEAP32[$d$0143$i>>2] = $496;
           $498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
           $499 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $500 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($500) {
            $$lcssa304 = $498;
            break;
           } else {
            $carry$0142$i = $498;$d$0143$i = $d$0$i;
           }
          }
          $501 = ($$lcssa304|0)==(0);
          if ($501) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $502 = ((($a$1149$i)) + -4|0);
          HEAP32[$502>>2] = $$lcssa304;
          $a$2$ph$i = $502;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($503)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $504 = ((($z$2$i)) + -4|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($505|0)==(0);
         if ($506) {
          $z$2$i = $504;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $507 = HEAP32[$e2$i>>2]|0;
        $508 = (($507) - ($489))|0;
        HEAP32[$e2$i>>2] = $508;
        $509 = ($508|0)>(0);
        if ($509) {
         $487 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa303;
      }
      $510 = ($$pr50$i|0)<(0);
      if ($510) {
       $511 = (($$p$i) + 25)|0;
       $512 = (($511|0) / 9)&-1;
       $513 = (($512) + 1)|0;
       $514 = ($395|0)==(102);
       $516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $515 = (0 - ($516))|0;
        $517 = ($515|0)>(9);
        $518 = $517 ? 9 : $515;
        $519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($519) {
          $523 = 1 << $518;
          $524 = (($523) + -1)|0;
          $525 = 1000000000 >>> $518;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $526 = HEAP32[$d$1129$i>>2]|0;
           $527 = $526 & $524;
           $528 = $526 >>> $518;
           $529 = (($528) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $529;
           $530 = Math_imul($527, $525)|0;
           $531 = ((($d$1129$i)) + 4|0);
           $532 = ($531>>>0)<($z$3135$i>>>0);
           if ($532) {
            $carry3$0130$i = $530;$d$1129$i = $531;
           } else {
            $$lcssa306 = $530;
            break;
           }
          }
          $533 = HEAP32[$a$3136$i>>2]|0;
          $534 = ($533|0)==(0);
          $535 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $534 ? $535 : $a$3136$i;
          $536 = ($$lcssa306|0)==(0);
          if ($536) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $537 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $$lcssa306;
          $$a$3192$i = $$a$3$i;$z$4$i = $537;
         } else {
          $520 = HEAP32[$a$3136$i>>2]|0;
          $521 = ($520|0)==(0);
          $522 = ((($a$3136$i)) + 4|0);
          $$a$3191$i = $521 ? $522 : $a$3136$i;
          $$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $538 = $514 ? $$33$i : $$a$3192$i;
        $539 = $z$4$i;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = $541 >> 2;
        $543 = ($542|0)>($513|0);
        $544 = (($538) + ($513<<2)|0);
        $$z$4$i = $543 ? $544 : $z$4$i;
        $545 = HEAP32[$e2$i>>2]|0;
        $546 = (($545) + ($518))|0;
        HEAP32[$e2$i>>2] = $546;
        $547 = ($546|0)<(0);
        if ($547) {
         $516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($548) {
        $549 = $a$3$lcssa$i;
        $550 = (($479) - ($549))|0;
        $551 = $550 >> 2;
        $552 = ($551*9)|0;
        $553 = HEAP32[$a$3$lcssa$i>>2]|0;
        $554 = ($553>>>0)<(10);
        if ($554) {
         $e$1$i = $552;
         break;
        } else {
         $e$0125$i = $552;$i$0124$i = 10;
        }
        while(1) {
         $555 = ($i$0124$i*10)|0;
         $556 = (($e$0125$i) + 1)|0;
         $557 = ($553>>>0)<($555>>>0);
         if ($557) {
          $e$1$i = $556;
          break;
         } else {
          $e$0125$i = $556;$i$0124$i = $555;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $558 = ($395|0)!=(102);
      $559 = $558 ? $e$1$i : 0;
      $560 = (($$p$i) - ($559))|0;
      $561 = ($395|0)==(103);
      $562 = ($$p$i|0)!=(0);
      $563 = $562 & $561;
      $$neg55$i = $563 << 31 >> 31;
      $564 = (($560) + ($$neg55$i))|0;
      $565 = $z$3$lcssa$i;
      $566 = (($565) - ($479))|0;
      $567 = $566 >> 2;
      $568 = ($567*9)|0;
      $569 = (($568) + -9)|0;
      $570 = ($564|0)<($569|0);
      if ($570) {
       $571 = ((($$33$i)) + 4|0);
       $572 = (($564) + 9216)|0;
       $573 = (($572|0) / 9)&-1;
       $574 = (($573) + -1024)|0;
       $575 = (($571) + ($574<<2)|0);
       $576 = (($572|0) % 9)&-1;
       $j$0117$i = (($576) + 1)|0;
       $577 = ($j$0117$i|0)<(9);
       if ($577) {
        $i$1118$i = 10;$j$0119$i = $j$0117$i;
        while(1) {
         $578 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $578;
          break;
         } else {
          $i$1118$i = $578;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $579 = HEAP32[$575>>2]|0;
       $580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $581 = ($580|0)==(0);
       $582 = ((($575)) + 4|0);
       $583 = ($582|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $583 & $581;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
        } else {
         $584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $585 = $584 & 1;
         $586 = ($585|0)==(0);
         $$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
         $587 = (($i$1$lcssa$i|0) / 2)&-1;
         $588 = ($580>>>0)<($587>>>0);
         if ($588) {
          $small$0$i = 0.5;
         } else {
          $589 = ($580|0)==($587|0);
          $or$cond22$i = $583 & $589;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $590 = ($pl$0$i|0)==(0);
         do {
          if ($590) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $591 = HEAP8[$prefix$0$i>>0]|0;
           $592 = ($591<<24>>24)==(45);
           if (!($592)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $593 = -$$20$i;
           $594 = -$small$0$i;
           $round6$1$i = $593;$small$1$i = $594;
          }
         } while(0);
         $595 = (($579) - ($580))|0;
         HEAP32[$575>>2] = $595;
         $596 = $round6$1$i + $small$1$i;
         $597 = $596 != $round6$1$i;
         if (!($597)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
          break;
         }
         $598 = (($595) + ($i$1$lcssa$i))|0;
         HEAP32[$575>>2] = $598;
         $599 = ($598>>>0)>(999999999);
         if ($599) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
          while(1) {
           $600 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $601 = ($600>>>0)<($a$5111$i>>>0);
           if ($601) {
            $602 = ((($a$5111$i)) + -4|0);
            HEAP32[$602>>2] = 0;
            $a$6$i = $602;
           } else {
            $a$6$i = $a$5111$i;
           }
           $603 = HEAP32[$600>>2]|0;
           $604 = (($603) + 1)|0;
           HEAP32[$600>>2] = $604;
           $605 = ($604>>>0)>(999999999);
           if ($605) {
            $a$5111$i = $a$6$i;$d$2110$i = $600;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
         }
         $606 = $a$5$lcssa$i;
         $607 = (($479) - ($606))|0;
         $608 = $607 >> 2;
         $609 = ($608*9)|0;
         $610 = HEAP32[$a$5$lcssa$i>>2]|0;
         $611 = ($610>>>0)<(10);
         if ($611) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
          break;
         } else {
          $e$2106$i = $609;$i$2105$i = 10;
         }
         while(1) {
          $612 = ($i$2105$i*10)|0;
          $613 = (($e$2106$i) + 1)|0;
          $614 = ($610>>>0)<($612>>>0);
          if ($614) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
           break;
          } else {
           $e$2106$i = $613;$i$2105$i = $612;
          }
         }
        }
       } while(0);
       $615 = ((($d$4$i)) + 4|0);
       $616 = ($z$3$lcssa$i>>>0)>($615>>>0);
       $$z$3$i = $616 ? $615 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $617 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($618)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $619 = ((($z$7$i)) + -4|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = ($620|0)==(0);
       if ($621) {
        $z$7$i = $619;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($561) {
        $622 = $562&1;
        $623 = $622 ^ 1;
        $$p$$i = (($623) + ($$p$i))|0;
        $624 = ($$p$$i|0)>($e$5$ph$i|0);
        $625 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $624 & $625;
        if ($or$cond6$i) {
         $626 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $627 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $626;$$210$i = $627;
        } else {
         $628 = (($t$0) + -2)|0;
         $629 = (($$p$$i) + -1)|0;
         $$013$i = $628;$$210$i = $629;
        }
        $630 = $fl$1$ & 8;
        $631 = ($630|0)==(0);
        if (!($631)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $632 = ((($z$7$i$lcssa)) + -4|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($633|0)==(0);
          if ($634) {
           $j$2$i = 9;
           break;
          }
          $635 = (($633>>>0) % 10)&-1;
          $636 = ($635|0)==(0);
          if ($636) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $637 = ($i$3101$i*10)|0;
           $638 = (($j$1102$i) + 1)|0;
           $639 = (($633>>>0) % ($637>>>0))&-1;
           $640 = ($639|0)==(0);
           if ($640) {
            $i$3101$i = $637;$j$1102$i = $638;
           } else {
            $j$2$i = $638;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $641 = $$013$i | 32;
        $642 = ($641|0)==(102);
        $643 = $z$7$i$lcssa;
        $644 = (($643) - ($479))|0;
        $645 = $644 >> 2;
        $646 = ($645*9)|0;
        $647 = (($646) + -9)|0;
        if ($642) {
         $648 = (($647) - ($j$2$i))|0;
         $649 = ($648|0)<(0);
         $$23$i = $649 ? 0 : $648;
         $650 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $650 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $651 = (($647) + ($e$5$ph$i))|0;
         $652 = (($651) - ($j$2$i))|0;
         $653 = ($652|0)<(0);
         $$25$i = $653 ? 0 : $652;
         $654 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $654 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $655 = $$311$i | $$pre$phi190$iZ2D;
      $656 = ($655|0)!=(0);
      $657 = $656&1;
      $658 = $$114$i | 32;
      $659 = ($658|0)==(102);
      if ($659) {
       $660 = ($e$5$ph$i|0)>(0);
       $661 = $660 ? $e$5$ph$i : 0;
       $$pn$i = $661;$estr$2$i = 0;
      } else {
       $662 = ($e$5$ph$i|0)<(0);
       $663 = $662 ? $617 : $e$5$ph$i;
       $664 = ($663|0)<(0);
       $665 = $664 << 31 >> 31;
       $666 = (_fmt_u($663,$665,$7)|0);
       $667 = $666;
       $668 = (($9) - ($667))|0;
       $669 = ($668|0)<(2);
       if ($669) {
        $estr$195$i = $666;
        while(1) {
         $670 = ((($estr$195$i)) + -1|0);
         HEAP8[$670>>0] = 48;
         $671 = $670;
         $672 = (($9) - ($671))|0;
         $673 = ($672|0)<(2);
         if ($673) {
          $estr$195$i = $670;
         } else {
          $estr$1$lcssa$i = $670;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $666;
       }
       $674 = $e$5$ph$i >> 31;
       $675 = $674 & 2;
       $676 = (($675) + 43)|0;
       $677 = $676&255;
       $678 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$678>>0] = $677;
       $679 = $$114$i&255;
       $680 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$680>>0] = $679;
       $681 = $680;
       $682 = (($9) - ($681))|0;
       $$pn$i = $682;$estr$2$i = $680;
      }
      $683 = (($pl$0$i) + 1)|0;
      $684 = (($683) + ($$311$i))|0;
      $l$1$i = (($684) + ($657))|0;
      $685 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$685,$fl$1$);
      $686 = HEAP32[$f>>2]|0;
      $687 = $686 & 32;
      $688 = ($687|0)==(0);
      if ($688) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $689 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$685,$689);
      do {
       if ($659) {
        $690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $691 = HEAP32[$d$584$i>>2]|0;
         $692 = (_fmt_u($691,0,$14)|0);
         $693 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($693) {
           $699 = ($692|0)==($14|0);
           if (!($699)) {
            $s7$1$i = $692;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $694 = ($692>>>0)>($buf$i>>>0);
           if (!($694)) {
            $s7$1$i = $692;
            break;
           }
           $695 = $692;
           $696 = (($695) - ($5))|0;
           _memset(($buf$i|0),48,($696|0))|0;
           $s7$081$i = $692;
           while(1) {
            $697 = ((($s7$081$i)) + -1|0);
            $698 = ($697>>>0)>($buf$i>>>0);
            if ($698) {
             $s7$081$i = $697;
            } else {
             $s7$1$i = $697;
             break;
            }
           }
          }
         } while(0);
         $700 = HEAP32[$f>>2]|0;
         $701 = $700 & 32;
         $702 = ($701|0)==(0);
         if ($702) {
          $703 = $s7$1$i;
          $704 = (($15) - ($703))|0;
          (___fwritex($s7$1$i,$704,$f)|0);
         }
         $705 = ((($d$584$i)) + 4|0);
         $706 = ($705>>>0)>($$33$i>>>0);
         if ($706) {
          $$lcssa316 = $705;
          break;
         } else {
          $d$584$i = $705;
         }
        }
        $707 = ($655|0)==(0);
        do {
         if (!($707)) {
          $708 = HEAP32[$f>>2]|0;
          $709 = $708 & 32;
          $710 = ($709|0)==(0);
          if (!($710)) {
           break;
          }
          (___fwritex(14020,1,$f)|0);
         }
        } while(0);
        $711 = ($$lcssa316>>>0)<($z$7$i$lcssa>>>0);
        $712 = ($$311$i|0)>(0);
        $713 = $712 & $711;
        if ($713) {
         $$41278$i = $$311$i;$d$677$i = $$lcssa316;
         while(1) {
          $714 = HEAP32[$d$677$i>>2]|0;
          $715 = (_fmt_u($714,0,$14)|0);
          $716 = ($715>>>0)>($buf$i>>>0);
          if ($716) {
           $717 = $715;
           $718 = (($717) - ($5))|0;
           _memset(($buf$i|0),48,($718|0))|0;
           $s8$072$i = $715;
           while(1) {
            $719 = ((($s8$072$i)) + -1|0);
            $720 = ($719>>>0)>($buf$i>>>0);
            if ($720) {
             $s8$072$i = $719;
            } else {
             $s8$0$lcssa$i = $719;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $715;
          }
          $721 = HEAP32[$f>>2]|0;
          $722 = $721 & 32;
          $723 = ($722|0)==(0);
          if ($723) {
           $724 = ($$41278$i|0)>(9);
           $725 = $724 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$725,$f)|0);
          }
          $726 = ((($d$677$i)) + 4|0);
          $727 = (($$41278$i) + -9)|0;
          $728 = ($726>>>0)<($z$7$i$lcssa>>>0);
          $729 = ($$41278$i|0)>(9);
          $730 = $729 & $728;
          if ($730) {
           $$41278$i = $727;$d$677$i = $726;
          } else {
           $$412$lcssa$i = $727;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $731 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$731,9,0);
       } else {
        $732 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
        $733 = ($$311$i|0)>(-1);
        if ($733) {
         $734 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $735 = HEAP32[$d$788$i>>2]|0;
          $736 = (_fmt_u($735,0,$14)|0);
          $737 = ($736|0)==($14|0);
          if ($737) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $736;
          }
          $738 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($738) {
            $742 = ((($s9$0$i)) + 1|0);
            $743 = HEAP32[$f>>2]|0;
            $744 = $743 & 32;
            $745 = ($744|0)==(0);
            if ($745) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $746 = ($$589$i|0)<(1);
            $or$cond31$i = $734 & $746;
            if ($or$cond31$i) {
             $s9$2$i = $742;
             break;
            }
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if (!($749)) {
             $s9$2$i = $742;
             break;
            }
            (___fwritex(14020,1,$f)|0);
            $s9$2$i = $742;
           } else {
            $739 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($739)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $740 = ((($s9$185$i)) + -1|0);
             $741 = ($740>>>0)>($buf$i>>>0);
             if ($741) {
              $s9$185$i = $740;
             } else {
              $s9$2$i = $740;
              break;
             }
            }
           }
          } while(0);
          $750 = $s9$2$i;
          $751 = (($15) - ($750))|0;
          $752 = HEAP32[$f>>2]|0;
          $753 = $752 & 32;
          $754 = ($753|0)==(0);
          if ($754) {
           $755 = ($$589$i|0)>($751|0);
           $756 = $755 ? $751 : $$589$i;
           (___fwritex($s9$2$i,$756,$f)|0);
          }
          $757 = (($$589$i) - ($751))|0;
          $758 = ((($d$788$i)) + 4|0);
          $759 = ($758>>>0)<($z$7$$i>>>0);
          $760 = ($757|0)>(-1);
          $761 = $759 & $760;
          if ($761) {
           $$589$i = $757;$d$788$i = $758;
          } else {
           $$5$lcssa$i = $757;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $762 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$762,18,0);
        $763 = HEAP32[$f>>2]|0;
        $764 = $763 & 32;
        $765 = ($764|0)==(0);
        if (!($765)) {
         break;
        }
        $766 = $estr$2$i;
        $767 = (($9) - ($766))|0;
        (___fwritex($estr$2$i,$767,$f)|0);
       }
      } while(0);
      $768 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$685,$768);
      $769 = ($685|0)<($w$1|0);
      $w$32$i = $769 ? $w$1 : $685;
      $$0$i = $w$32$i;
     } else {
      $375 = $t$0 & 32;
      $376 = ($375|0)!=(0);
      $377 = $376 ? 14008 : 14012;
      $378 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $379 = $376 ? 14035 : 14016;
      $pl$1$i = $378 ? 0 : $pl$0$i;
      $s1$0$i = $378 ? $379 : $377;
      $380 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$380,$176);
      $381 = HEAP32[$f>>2]|0;
      $382 = $381 & 32;
      $383 = ($382|0)==(0);
      if ($383) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $385 = $$pre$i;
      } else {
       $385 = $381;
      }
      $384 = $385 & 32;
      $386 = ($384|0)==(0);
      if ($386) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $387 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$380,$387);
      $388 = ($380|0)<($w$1|0);
      $389 = $388 ? $w$1 : $380;
      $$0$i = $389;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 12080;$z$2 = $1;
   }
   }
  } while(0);
  L311: do {
   if ((label|0) == 64) {
    label = 0;
    $207 = $arg;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $t$1 & 32;
    $214 = ($209|0)==(0);
    $215 = ($212|0)==(0);
    $216 = $214 & $215;
    if ($216) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 12080;
     label = 77;
    } else {
     $$012$i = $1;$218 = $209;$225 = $212;
     while(1) {
      $217 = $218 & 15;
      $219 = (12064 + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $221 | $213;
      $223 = $222&255;
      $224 = ((($$012$i)) + -1|0);
      HEAP8[$224>>0] = $223;
      $226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
      $227 = tempRet0;
      $228 = ($226|0)==(0);
      $229 = ($227|0)==(0);
      $230 = $228 & $229;
      if ($230) {
       $$lcssa321 = $224;
       break;
      } else {
       $$012$i = $224;$218 = $226;$225 = $227;
      }
     }
     $231 = $arg;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233|0)==(0);
     $238 = ($236|0)==(0);
     $239 = $237 & $238;
     $240 = $fl$3 & 8;
     $241 = ($240|0)==(0);
     $or$cond17 = $241 | $239;
     if ($or$cond17) {
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 12080;
      label = 77;
     } else {
      $242 = $t$1 >> 4;
      $243 = (12080 + ($242)|0);
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $289 = (_fmt_u($287,$288,$1)|0);
    $a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $321 = (_memchr($a$1,0,$p$0)|0);
    $322 = ($321|0)==(0|0);
    $323 = $321;
    $324 = $a$1;
    $325 = (($323) - ($324))|0;
    $326 = (($a$1) + ($p$0)|0);
    $z$1 = $322 ? $326 : $321;
    $p$3 = $322 ? $p$0 : $325;
    $a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 12080;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
    while(1) {
     $334 = HEAP32[$ws$0106>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4176) - ($i$0105))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0106)) + 4|0);
     $341 = (($336) + ($i$0105))|0;
     $342 = ($p$4176>>>0)>($341>>>0);
     if ($342) {
      $i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $i$1116 = 0;$ws$1117 = $798;
     while(1) {
      $345 = HEAP32[$ws$1117>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $347 = ((($ws$1117)) + 4|0);
      $348 = (_wctomb($mb,$345)|0);
      $349 = (($348) + ($i$1116))|0;
      $350 = ($349|0)>($i$0$lcssa|0);
      if ($350) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $351 = HEAP32[$f>>2]|0;
      $352 = $351 & 32;
      $353 = ($352|0)==(0);
      if ($353) {
       (___fwritex($mb,$348,$f)|0);
      }
      $354 = ($349>>>0)<($i$0$lcssa>>>0);
      if ($354) {
       $i$1116 = $349;$ws$1117 = $347;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 97) {
   label = 0;
   $355 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa178,$355);
   $356 = ($w$1|0)>($i$0$lcssa178|0);
   $357 = $356 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = $arg;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)!=(0);
   $299 = ($297|0)!=(0);
   $300 = $298 | $299;
   $301 = ($p$2|0)!=(0);
   $or$cond = $301 | $300;
   if ($or$cond) {
    $302 = $a$0;
    $303 = (($2) - ($302))|0;
    $304 = $300&1;
    $305 = $304 ^ 1;
    $306 = (($305) + ($303))|0;
    $307 = ($p$2|0)>($306|0);
    $p$2$ = $307 ? $p$2 : $306;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $770 = $z$2;
  $771 = $a$2;
  $772 = (($770) - ($771))|0;
  $773 = ($p$5|0)<($772|0);
  $$p$5 = $773 ? $772 : $p$5;
  $774 = (($pl$2) + ($$p$5))|0;
  $775 = ($w$1|0)<($774|0);
  $w$2 = $775 ? $774 : $w$1;
  _pad($f,32,$w$2,$774,$fl$6);
  $776 = HEAP32[$f>>2]|0;
  $777 = $776 & 32;
  $778 = ($777|0)==(0);
  if ($778) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $779 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$774,$779);
  _pad($f,48,$$p$5,$772,0);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($a$2,$772,$f)|0);
  }
  $783 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$774,$783);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
 }
 L345: do {
  if ((label|0) == 244) {
   $784 = ($f|0)==(0|0);
   if ($784) {
    $785 = ($l10n$0$lcssa|0)==(0);
    if ($785) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $786 = (($nl_type) + ($i$291<<2)|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(0);
      if ($788) {
       $i$291$lcssa = $i$291;
       break;
      }
      $790 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg($790,$787,$ap);
      $791 = (($i$291) + 1)|0;
      $792 = ($791|0)<(10);
      if ($792) {
       $i$291 = $791;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     $789 = ($i$291$lcssa|0)<(10);
     if ($789) {
      $i$389 = $i$291$lcssa;
      while(1) {
       $795 = (($nl_type) + ($i$389<<2)|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($796|0)==(0);
       $793 = (($i$389) + 1)|0;
       if (!($797)) {
        $$0 = -1;
        break L345;
       }
       $794 = ($793|0)<(10);
       if ($794) {
        $i$389 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa19 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (12090 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 12178;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 12178;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 12178;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(14022,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 446;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 26;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 27;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 25;
   $34 = HEAP32[(18252)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((18276)|0));
   $37 = HEAP32[(18272)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(18272)>>2] = $4;
   ___unlock(((18276)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((18276)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(18272)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(18272)>>2] = $14;
  }
  ___unlock(((18276)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 1023]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[533]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[533]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((18276)|0));
   $$012 = HEAP32[(18272)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((18276)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 1023]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(14022,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$lcssa = 0, $$lcssa386 = 0, $$lcssa40 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi184Z2D = 0, $$pre173 = 0, $$pre175 = 0, $$pre177 = 0, $$pre179 = 0, $$pre180 = 0, $$pre181 = 0, $$pre182 = 0, $$pre183 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0402 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0;
 var $c$0102 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor18 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph22 = 0, $i$0$ph22$lcssa = 0, $i$1 = 0;
 var $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit8 = 0, $isdigit897 = 0, $isdigittmp = 0, $isdigittmp7 = 0, $isdigittmp796 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0107 = 0, $matches$0107$lcssa = 0, $matches$0107371 = 0, $matches$1 = 0, $matches$2 = 0;
 var $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond5 = 0, $p$0110 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$398 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0;
 var $p$9 = 0, $pos$0111 = 0, $pos$1 = 0, $pos$2 = 0, $s$0105 = 0, $s$0105$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0106 = 0;
 var $wcs$0106$lcssa = 0, $wcs$1 = 0, $wcs$10 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$099 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $326 = $4;
 } else {
  $326 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0107 = 0;$p$0110 = $fmt;$pos$0111 = 0;$s$0105 = 0;$wcs$0106 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0110>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0110)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0110)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0110)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0110)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp796 = (($93) + -48)|0;
        $isdigit897 = ($isdigittmp796>>>0)<(10);
        if ($isdigit897) {
         $97 = $93;$p$398 = $p$2;$width$099 = 0;
         while(1) {
          $94 = ($width$099*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$398)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp7 = (($100) + -48)|0;
          $isdigit8 = ($isdigittmp7>>>0)<(10);
          if ($isdigit8) {
           $97 = $100;$p$398 = $98;$width$099 = $96;
          } else {
           $$lcssa40 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa40 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa40<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre173 = HEAP8[$104>>0]|0;
         $107 = $$pre173;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa40;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0105;$wcs$1 = $wcs$0106;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$11 = $109 ? $110 : $105;
         $$12 = $109 ? -2 : -1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$13 = $112 ? $113 : $105;
         $$14 = $112 ? 3 : 1;
         $p$5 = $$13;$size$0 = $$14;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
         label = 154;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0111;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0111;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0111|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0111&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0111&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0111;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0111;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0107;$p$11 = $p$5;$pos$2 = $pos$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         if ($140) {
          $$pre175 = HEAP32[$7>>2]|0;
          $148 = $$pre175;
         } else {
          $141 = HEAP32[$7>>2]|0;
          $142 = ((($141)) + -1|0);
          HEAP32[$7>>2] = $142;
          $143 = $142;
          $148 = $143;
         }
         $144 = HEAP32[$9>>2]|0;
         $145 = HEAP32[$10>>2]|0;
         $146 = (($144) + ($pos$0111))|0;
         $147 = (($146) + ($148))|0;
         $149 = (($147) - ($145))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
          label = 154;
          break L6;
         }
         $$pre177 = HEAP32[$8>>2]|0;
         $156 = $$pre177;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L68: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ | 16;
          $162 = ($161|0)==(115);
          L70: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $p$6 = $166 ? $167 : $164;
            $168 = $166&1;
            _memset(($scanset|0),($168|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $169 = HEAP8[$p$6>>0]|0;
            switch ($169<<24>>24) {
            case 45:  {
             $170 = ((($p$6)) + 1|0);
             $171 = $invert$0 ^ 1;
             $172 = $171&255;
             HEAP8[$14>>0] = $172;
             $$pre$phi184Z2D = $172;$p$7$ph = $170;
             break;
            }
            case 93:  {
             $173 = ((($p$6)) + 1|0);
             $174 = $invert$0 ^ 1;
             $175 = $174&255;
             HEAP8[$15>>0] = $175;
             $$pre$phi184Z2D = $175;$p$7$ph = $173;
             break;
            }
            default: {
             $$pre182 = $invert$0 ^ 1;
             $$pre183 = $$pre182&255;
             $$pre$phi184Z2D = $$pre183;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $176 = HEAP8[$p$7>>0]|0;
             L81: do {
              switch ($176<<24>>24) {
              case 0:  {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$1;$wcs$8 = $wcs$1;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L70;
               break;
              }
              case 45:  {
               $177 = ((($p$7)) + 1|0);
               $178 = HEAP8[$177>>0]|0;
               switch ($178<<24>>24) {
               case 93: case 0:  {
                $189 = 45;$p$8 = $p$7;
                break L81;
                break;
               }
               default: {
               }
               }
               $179 = ((($p$7)) + -1|0);
               $180 = HEAP8[$179>>0]|0;
               $181 = ($180&255)<($178&255);
               if ($181) {
                $182 = $180&255;
                $c$0102 = $182;
                while(1) {
                 $183 = (($c$0102) + 1)|0;
                 $184 = (($scanset) + ($183)|0);
                 HEAP8[$184>>0] = $$pre$phi184Z2D;
                 $185 = HEAP8[$177>>0]|0;
                 $186 = $185&255;
                 $187 = ($183|0)<($186|0);
                 if ($187) {
                  $c$0102 = $183;
                 } else {
                  $189 = $185;$p$8 = $177;
                  break;
                 }
                }
               } else {
                $189 = $178;$p$8 = $177;
               }
               break;
              }
              default: {
               $189 = $176;$p$8 = $p$7;
              }
              }
             } while(0);
             $188 = $189&255;
             $190 = (($188) + 1)|0;
             $191 = (($scanset) + ($190)|0);
             HEAP8[$191>>0] = $$pre$phi184Z2D;
             $192 = ((($p$8)) + 1|0);
             $p$7 = $192;
            }
           }
          } while(0);
          $193 = (($width$1) + 1)|0;
          $194 = $160 ? $193 : 31;
          $195 = ($$size$0|0)==(1);
          $196 = ($alloc$0|0)!=(0);
          L89: do {
           if ($195) {
            if ($196) {
             $197 = $194 << 2;
             $198 = (_malloc($197)|0);
             $199 = ($198|0)==(0|0);
             if ($199) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $198;
              label = 154;
              break L6;
             } else {
              $wcs$2 = $198;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $194;$wcs$3$ph = $wcs$2;
            L95: while(1) {
             $200 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph22 = $i$0$ph;
             while(1) {
              L99: while(1) {
               $201 = HEAP32[$7>>2]|0;
               $202 = HEAP32[$8>>2]|0;
               $203 = ($201>>>0)<($202>>>0);
               if ($203) {
                $204 = ((($201)) + 1|0);
                HEAP32[$7>>2] = $204;
                $205 = HEAP8[$201>>0]|0;
                $206 = $205&255;
                $209 = $206;
               } else {
                $207 = (___shgetc($f)|0);
                $209 = $207;
               }
               $208 = (($209) + 1)|0;
               $210 = (($scanset) + ($208)|0);
               $211 = HEAP8[$210>>0]|0;
               $212 = ($211<<24>>24)==(0);
               if ($212) {
                $i$0$ph22$lcssa = $i$0$ph22;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L95;
               }
               $213 = $209&255;
               HEAP8[$0>>0] = $213;
               $214 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($214|0) {
               case -1:  {
                $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($200) {
               $i$1 = $i$0$ph22;
              } else {
               $215 = HEAP32[$wc>>2]|0;
               $216 = (($i$0$ph22) + 1)|0;
               $217 = (($wcs$3$ph) + ($i$0$ph22<<2)|0);
               HEAP32[$217>>2] = $215;
               $i$1 = $216;
              }
              $218 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $196 & $218;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph22 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $219 = $factor | 1;
             $220 = $219 << 2;
             $221 = (_realloc($wcs$3$ph,$220)|0);
             $222 = ($221|0)==(0|0);
             if ($222) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph;
              label = 154;
              break L6;
             } else {
              $i$0$ph$phi = $k$0$ph;$k$0$ph = $219;$wcs$3$ph = $221;$i$0$ph = $i$0$ph$phi;
             }
            }
            $223 = (_mbsinit($st)|0);
            $224 = ($223|0)==(0);
            if ($224) {
             $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = $wcs$3$ph$lcssa;
             label = 154;
             break L6;
            } else {
             $i$4 = $i$0$ph22$lcssa;$s$4 = 0;$wcs$5 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($196) {
             $225 = (_malloc($194)|0);
             $226 = ($225|0)==(0|0);
             if ($226) {
              $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = 0;$wcs$8 = 0;
              label = 154;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $194;$s$2$ph = $225;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $227 = HEAP32[$7>>2]|0;
               $228 = HEAP32[$8>>2]|0;
               $229 = ($227>>>0)<($228>>>0);
               if ($229) {
                $230 = ((($227)) + 1|0);
                HEAP32[$7>>2] = $230;
                $231 = HEAP8[$227>>0]|0;
                $232 = $231&255;
                $235 = $232;
               } else {
                $233 = (___shgetc($f)|0);
                $235 = $233;
               }
               $234 = (($235) + 1)|0;
               $236 = (($scanset) + ($234)|0);
               $237 = HEAP8[$236>>0]|0;
               $238 = ($237<<24>>24)==(0);
               if ($238) {
                $i$4 = $i$2;$s$4 = $s$2$ph;$wcs$5 = 0;
                break L89;
               }
               $239 = $235&255;
               $240 = (($i$2) + 1)|0;
               $241 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$241>>0] = $239;
               $242 = ($240|0)==($k$1$ph|0);
               if ($242) {
                break;
               } else {
                $i$2 = $240;
               }
              }
              $factor18 = $k$1$ph << 1;
              $243 = $factor18 | 1;
              $244 = (_realloc($s$2$ph,$243)|0);
              $245 = ($244|0)==(0|0);
              if ($245) {
               $alloc$0402 = $alloc$0;$matches$0107371 = $matches$0107;$s$7 = $s$2$ph;$wcs$8 = 0;
               label = 154;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $243;$s$2$ph = $244;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $246 = ($dest$0|0)==(0|0);
            if ($246) {
             $264 = $156;
             while(1) {
              $262 = HEAP32[$7>>2]|0;
              $263 = ($262>>>0)<($264>>>0);
              if ($263) {
               $265 = ((($262)) + 1|0);
               HEAP32[$7>>2] = $265;
               $266 = HEAP8[$262>>0]|0;
               $267 = $266&255;
               $270 = $267;
              } else {
               $268 = (___shgetc($f)|0);
               $270 = $268;
              }
              $269 = (($270) + 1)|0;
              $271 = (($scanset) + ($269)|0);
              $272 = HEAP8[$271>>0]|0;
              $273 = ($272<<24>>24)==(0);
              if ($273) {
               $i$4 = 0;$s$4 = 0;$wcs$5 = 0;
               break L89;
              }
              $$pre180 = HEAP32[$8>>2]|0;
              $264 = $$pre180;
             }
            } else {
             $249 = $156;$i$3 = 0;
             while(1) {
              $247 = HEAP32[$7>>2]|0;
              $248 = ($247>>>0)<($249>>>0);
              if ($248) {
               $250 = ((($247)) + 1|0);
               HEAP32[$7>>2] = $250;
               $251 = HEAP8[$247>>0]|0;
               $252 = $251&255;
               $255 = $252;
              } else {
               $253 = (___shgetc($f)|0);
               $255 = $253;
              }
              $254 = (($255) + 1)|0;
              $256 = (($scanset) + ($254)|0);
              $257 = HEAP8[$256>>0]|0;
              $258 = ($257<<24>>24)==(0);
              if ($258) {
               $i$4 = $i$3;$s$4 = $dest$0;$wcs$5 = 0;
               break L89;
              }
              $259 = $255&255;
              $260 = (($i$3) + 1)|0;
              $261 = (($dest$0) + ($i$3)|0);
              HEAP8[$261>>0] = $259;
              $$pre179 = HEAP32[$8>>2]|0;
              $249 = $$pre179;$i$3 = $260;
             }
            }
           }
          } while(0);
          $274 = HEAP32[$8>>2]|0;
          $275 = ($274|0)==(0|0);
          if ($275) {
           $$pre181 = HEAP32[$7>>2]|0;
           $282 = $$pre181;
          } else {
           $276 = HEAP32[$7>>2]|0;
           $277 = ((($276)) + -1|0);
           HEAP32[$7>>2] = $277;
           $278 = $277;
           $282 = $278;
          }
          $279 = HEAP32[$9>>2]|0;
          $280 = HEAP32[$10>>2]|0;
          $281 = (($282) - ($280))|0;
          $283 = (($281) + ($279))|0;
          $284 = ($283|0)==(0);
          if ($284) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          $$not = $160 ^ 1;
          $285 = ($283|0)==($width$1|0);
          $or$cond10 = $285 | $$not;
          if (!($or$cond10)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$4;$wcs$10 = $wcs$5;
           break L6;
          }
          do {
           if ($196) {
            if ($195) {
             HEAP32[$dest$0>>2] = $wcs$5;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$4;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          } else {
           $286 = ($wcs$5|0)==(0|0);
           if (!($286)) {
            $287 = (($wcs$5) + ($i$4<<2)|0);
            HEAP32[$287>>2] = 0;
           }
           $288 = ($s$4|0)==(0|0);
           if ($288) {
            $p$10 = $p$9;$s$5 = 0;$wcs$6 = $wcs$5;
            break L68;
           }
           $289 = (($s$4) + ($i$4)|0);
           HEAP8[$289>>0] = 0;
           $p$10 = $p$9;$s$5 = $s$4;$wcs$6 = $wcs$5;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $307 = (+___floatscan($f,$$size$0,0));
          $308 = HEAP32[$9>>2]|0;
          $309 = HEAP32[$7>>2]|0;
          $310 = HEAP32[$10>>2]|0;
          $311 = (($310) - ($309))|0;
          $312 = ($308|0)==($311|0);
          if ($312) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $313 = ($dest$0|0)==(0|0);
          if ($313) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $314 = $307;
            HEAPF32[$dest$0>>2] = $314;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $307;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $307;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $290 = (___intscan($f,$base$0,0,-1,-1)|0);
          $291 = tempRet0;
          $292 = HEAP32[$9>>2]|0;
          $293 = HEAP32[$7>>2]|0;
          $294 = HEAP32[$10>>2]|0;
          $295 = (($294) - ($293))|0;
          $296 = ($292|0)==($295|0);
          if ($296) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0107;$s$9 = $s$1;$wcs$10 = $wcs$1;
           break L6;
          }
          $297 = ($$|0)==(112);
          $298 = ($dest$0|0)!=(0|0);
          $or$cond3 = $298 & $297;
          if ($or$cond3) {
           $299 = $290;
           HEAP32[$dest$0>>2] = $299;
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
           break;
          }
          $300 = ($dest$0|0)==(0|0);
          if ($300) {
           $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $301 = $290&255;
            HEAP8[$dest$0>>0] = $301;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case -1:  {
            $302 = $290&65535;
            HEAP16[$dest$0>>1] = $302;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $290;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $290;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           case 3:  {
            $303 = $dest$0;
            $304 = $303;
            HEAP32[$304>>2] = $290;
            $305 = (($303) + 4)|0;
            $306 = $305;
            HEAP32[$306>>2] = $291;
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
            break;
           }
           default: {
            $p$10 = $p$5;$s$5 = $s$1;$wcs$6 = $wcs$1;
            break L169;
           }
           }
          }
         }
        } while(0);
        $315 = HEAP32[$9>>2]|0;
        $316 = HEAP32[$7>>2]|0;
        $317 = HEAP32[$10>>2]|0;
        $318 = (($315) + ($pos$1))|0;
        $319 = (($318) + ($316))|0;
        $320 = (($319) - ($317))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $321 = $not$&1;
        $matches$0$ = (($321) + ($matches$0107))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $320;$s$6 = $s$5;$wcs$7 = $wcs$6;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0110) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa386 = $61;$matches$0107$lcssa = $matches$0107;$s$0105$lcssa = $s$0105;$wcs$0106$lcssa = $wcs$0106;
       label = 22;
       break L6;
      }
      $69 = (($pos$0111) + 1)|0;
      $matches$1 = $matches$0107;$p$11 = $51;$pos$2 = $69;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     } else {
      $p$1 = $p$0110;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      if ($36) {
       $$pre = HEAP32[$7>>2]|0;
       $44 = $$pre;
      } else {
       $37 = HEAP32[$7>>2]|0;
       $38 = ((($37)) + -1|0);
       HEAP32[$7>>2] = $38;
       $39 = $38;
       $44 = $39;
      }
      $40 = HEAP32[$9>>2]|0;
      $41 = HEAP32[$10>>2]|0;
      $42 = (($40) + ($pos$0111))|0;
      $43 = (($42) + ($44))|0;
      $45 = (($43) - ($41))|0;
      $matches$1 = $matches$0107;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$6 = $s$0105;$wcs$7 = $wcs$0106;
     }
    } while(0);
    $322 = ((($p$11)) + 1|0);
    $323 = HEAP8[$322>>0]|0;
    $324 = ($323<<24>>24)==(0);
    if ($324) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $323;$matches$0107 = $matches$1;$p$0110 = $322;$pos$0111 = $pos$2;$s$0105 = $s$6;$wcs$0106 = $wcs$7;
    }
   }
   if ((label|0) == 22) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa386|0)>(-1);
    $68 = ($matches$0107$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0107$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$8 = $s$0105$lcssa;$wcs$9 = $wcs$0106$lcssa;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($matches$0107371|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0402;$s$8 = $s$7;$wcs$9 = $wcs$8;
     label = 155;
    } else {
     $alloc$2 = $alloc$0402;$matches$2 = $matches$0107371;$s$9 = $s$7;$wcs$10 = $wcs$8;
    }
   }
   if ((label|0) == 155) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$9 = $s$8;$wcs$10 = $wcs$9;
   }
   $325 = ($alloc$2|0)==(0);
   if ($325) {
    $matches$3 = $matches$2;
   } else {
    _free($s$9);
    _free($wcs$10);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $327 = ($326|0)==(0);
 if (!($327)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 18296 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (2136 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$16$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3112$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa258 = 0;
 var $$lcssa258$lcssa = 0, $$lcssa259 = 0, $$lcssa259$lcssa = 0, $$lcssa265 = 0, $$lcssa266 = 0, $$lcssa267 = 0, $$lcssa277 = 0, $$lnz$0$i = 0, $$neg$i = 0, $$neg40$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi43$iZ2D = 0.0, $$pre42$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0.0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0, $645 = 0.0, $646 = 0.0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0;
 var $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa250 = 0, $a$4$i251 = 0, $a$4$ph$i = 0, $a$4$ph167$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i248 = 0, $e2$1$ph$i = 0, $e2$1$ph166$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $exitcond151$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa244 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa275 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3108$i = 0, $gotdig$3108$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1109$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0111$i = 0, $j$0111$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0110$i = 0, $k$0110$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0107$i = 0, $lnz$0107$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond18$i = 0, $or$cond192$i = 0, $or$cond20$i = 0, $or$cond21$i = 0;
 var $or$cond22$i = 0, $or$cond25$i = 0, $or$cond26$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0, $or$cond9$i27 = 0, $rp$0$lcssa162$i = 0, $rp$092$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0;
 var $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa277 = $9;
     break;
    }
   }
   $12 = ($$lcssa277|0)==(45);
   L13: do {
    switch ($$lcssa277|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa277;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (14026 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (14035 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa244 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$693 = 0;$694 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$693 = $156;$694 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$693 = 0;$694 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa244;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $693;$213 = $170;$215 = $694;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $695 = $170;$696 = $168;$697 = $170;$698 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $693;$213 = $170;$215 = $694;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $695 = $693;$696 = $694;$697 = $190;$698 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $698;$170 = $697;$693 = $695;$694 = $696;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $698;$170 = $697;$693 = $695;$694 = $696;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre42$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi43$iZ2D = $$pre42$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi43$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi43$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi43$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$010$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$010$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa275 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$010$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$010$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$010$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$111$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$111$ph$i = $344;
       }
       $345 = ($$111$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$111$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$111$be$i = $356;
         }
         $357 = ($$111$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$111$be$i;$699 = $348;$700 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;$699 = 0;$700 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa275;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3112$i = $$2$i;$365 = 0;$366 = 0;$701 = $360;$702 = $358;$703 = $699;$704 = $700;$gotdig$3108$i = $gotdig$2$i13;$gotrad$1109$i = $gotrad$0$i14;$j$0111$i = 0;$k$0110$i = 0;$lnz$0107$i = 0;
        L205: while(1) {
         do {
          if ($701) {
           $cond$i = ($gotrad$1109$i|0)==(0);
           if ($cond$i) {
            $705 = $365;$706 = $366;$707 = $365;$708 = $366;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = 1;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
           } else {
            $709 = $703;$710 = $704;$711 = $365;$712 = $366;$gotdig$3108$i$lcssa = $gotdig$3108$i;$j$0111$i$lcssa = $j$0111$i;$k$0110$i$lcssa = $k$0110$i;$lnz$0107$i$lcssa = $lnz$0107$i;
            break L205;
           }
          } else {
           $364 = ($k$0110$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3112$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0107$i;
           $370 = ($j$0111$i|0)==(0);
           $371 = (($x$i) + ($k$0110$i<<2)|0);
           if ($370) {
            $storemerge$i = $702;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3112$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0111$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0110$i))|0;
           $$16$i = $377 ? 0 : $376;
           $705 = $703;$706 = $704;$707 = $367;$708 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $$16$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3112$i = $$3$be$i;$365 = $707;$366 = $708;$701 = $390;$702 = $388;$703 = $705;$704 = $706;$gotdig$3108$i = $gotdig$4$i;$gotrad$1109$i = $gotrad$2$i;$j$0111$i = $j$2$i;$k$0110$i = $k$2$i;$lnz$0107$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $705;$394 = $707;$396 = $706;$397 = $708;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3108$i$lcssa|0)!=(0);
        $713 = $711;$714 = $712;$715 = $709;$716 = $710;$717 = $363;$j$077$i = $j$0111$i$lcssa;$k$073$i = $k$0110$i$lcssa;$lnz$067$i = $lnz$0107$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $699;$394 = 0;$396 = $700;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond18$i = $401 & $399;
        if (!($or$cond18$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $713 = $394;$714 = $397;$715 = $395;$716 = $398;$717 = $399;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $718 = $394;$719 = $397;$720 = $399;$721 = $395;$722 = $398;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$1$i = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$075$i = $j$0$lcssa$i;$k$071$i = $k$0$lcssa$i;$lnz$065$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $718 = $713;$719 = $714;$720 = $717;$721 = $715;$722 = $716;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($717) {
         $426 = $715;$428 = $713;$429 = $716;$431 = $714;$j$075$i = $j$077$i;$k$071$i = $k$073$i;$lnz$065$i = $lnz$067$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($720) {
        $426 = $721;$428 = $718;$429 = $722;$431 = $719;$j$075$i = $j$076$i;$k$071$i = $k$072$i;$lnz$065$i = $lnz$066$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$1$i = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond20$i = $438 | $440;
         if ($or$cond20$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$1$i = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$1$i = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$1$i = $467;
         break;
        }
        $468 = ($j$075$i|0)==(0);
        if ($468) {
         $k$3$i = $k$071$i;
        } else {
         $469 = ($j$075$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$071$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$3102$i = $j$075$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$3102$i) + 1)|0;
           $exitcond151$i = ($473|0)==(9);
           if ($exitcond151$i) {
            $$lcssa267 = $471;
            break;
           } else {
            $472 = $471;$j$3102$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa267;
         }
         $474 = (($k$071$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$065$i|0)<(9);
        if ($475) {
         $476 = ($lnz$065$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$1$i = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (2452 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$1$i = $492;
           break;
          }
          $$neg$i = Math_imul($426, -3)|0;
          $$neg40$i = (($bits$0$ph) + 27)|0;
          $493 = (($$neg40$i) + ($$neg$i))|0;
          $494 = ($493|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $495 = $$pre$i17 >>> $493;
          $496 = ($495|0)==(0);
          $or$cond192$i = $494 | $496;
          if ($or$cond192$i) {
           $497 = (+($sign$0|0));
           $498 = (+($$pre$i17>>>0));
           $499 = $497 * $498;
           $500 = (($426) + -10)|0;
           $501 = (2452 + ($500<<2)|0);
           $502 = HEAP32[$501>>2]|0;
           $503 = (+($502|0));
           $504 = $499 * $503;
           $$1$i = $504;
           break;
          }
         }
        }
        $505 = (($426|0) % 9)&-1;
        $506 = ($505|0)==(0);
        if ($506) {
         $a$2$ph46$i = 0;$e2$0$ph$i = 0;$rp$2$ph44$i = $426;$z$1$ph45$i = $k$3$i;
        } else {
         $507 = ($426|0)>(-1);
         $508 = (($505) + 9)|0;
         $509 = $507 ? $505 : $508;
         $510 = (8 - ($509))|0;
         $511 = (2452 + ($510<<2)|0);
         $512 = HEAP32[$511>>2]|0;
         $513 = ($k$3$i|0)==(0);
         if ($513) {
          $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $426;$z$0$i = 0;
         } else {
          $514 = (1000000000 / ($512|0))&-1;
          $a$093$i = 0;$carry$095$i = 0;$k$494$i = 0;$rp$092$i = $426;
          while(1) {
           $515 = (($x$i) + ($k$494$i<<2)|0);
           $516 = HEAP32[$515>>2]|0;
           $517 = (($516>>>0) % ($512>>>0))&-1;
           $518 = (($516>>>0) / ($512>>>0))&-1;
           $519 = (($518) + ($carry$095$i))|0;
           HEAP32[$515>>2] = $519;
           $520 = Math_imul($517, $514)|0;
           $521 = ($k$494$i|0)==($a$093$i|0);
           $522 = ($519|0)==(0);
           $or$cond21$i = $521 & $522;
           $523 = (($k$494$i) + 1)|0;
           $524 = $523 & 127;
           $525 = (($rp$092$i) + -9)|0;
           $rp$1$i18 = $or$cond21$i ? $525 : $rp$092$i;
           $a$1$i = $or$cond21$i ? $524 : $a$093$i;
           $526 = ($523|0)==($k$3$i|0);
           if ($526) {
            $$lcssa266 = $520;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$093$i = $a$1$i;$carry$095$i = $520;$k$494$i = $523;$rp$092$i = $rp$1$i18;
           }
          }
          $527 = ($$lcssa266|0)==(0);
          if ($527) {
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $528 = (($k$3$i) + 1)|0;
           $529 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$529>>2] = $$lcssa266;
           $a$0$lcssa161$i = $a$1$i$lcssa;$rp$0$lcssa162$i = $rp$1$i18$lcssa;$z$0$i = $528;
          }
         }
         $530 = (9 - ($509))|0;
         $531 = (($530) + ($rp$0$lcssa162$i))|0;
         $a$2$ph46$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph44$i = $531;$z$1$ph45$i = $z$0$i;
        }
        L284: while(1) {
         $532 = ($rp$2$ph44$i|0)<(18);
         $533 = ($rp$2$ph44$i|0)==(18);
         $534 = (($x$i) + ($a$2$ph46$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph45$i;
         while(1) {
          if (!($532)) {
           if (!($533)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = $rp$2$ph44$i;$z$6$ph$i = $z$1$i;
            break L284;
           }
           $535 = HEAP32[$534>>2]|0;
           $536 = ($535>>>0)<(9007199);
           if (!($536)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = 18;$z$6$ph$i = $z$1$i;
            break L284;
           }
          }
          $537 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $537;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $538 = (($x$i) + ($k$5$i<<2)|0);
           $539 = HEAP32[$538>>2]|0;
           $540 = (_bitshift64Shl(($539|0),0,29)|0);
           $541 = tempRet0;
           $542 = (_i64Add(($540|0),($541|0),($carry1$0$i|0),0)|0);
           $543 = tempRet0;
           $544 = ($543>>>0)>(0);
           $545 = ($542>>>0)>(1000000000);
           $546 = ($543|0)==(0);
           $547 = $546 & $545;
           $548 = $544 | $547;
           if ($548) {
            $549 = (___udivdi3(($542|0),($543|0),1000000000,0)|0);
            $550 = tempRet0;
            $551 = (___uremdi3(($542|0),($543|0),1000000000,0)|0);
            $552 = tempRet0;
            $$sink$off0$i = $551;$carry1$1$i = $549;
           } else {
            $$sink$off0$i = $542;$carry1$1$i = 0;
           }
           HEAP32[$538>>2] = $$sink$off0$i;
           $553 = (($z$2$i) + 127)|0;
           $554 = $553 & 127;
           $555 = ($k$5$i|0)!=($554|0);
           $556 = ($k$5$i|0)==($a$2$ph46$i|0);
           $or$cond22$i = $555 | $556;
           $557 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $557 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond22$i ? $z$2$i : $k$5$z$2$i;
           $558 = (($k$5$i) + -1)|0;
           if ($556) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $558;$z$2$i = $z$3$i;
           }
          }
          $559 = (($e2$0$i19) + -29)|0;
          $560 = ($carry1$1$i$lcssa|0)==(0);
          if ($560) {
           $e2$0$i19 = $559;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa265 = $559;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $561 = (($rp$2$ph44$i) + 9)|0;
         $562 = (($a$2$ph46$i) + 127)|0;
         $563 = $562 & 127;
         $564 = ($563|0)==($z$3$i$lcssa$lcssa|0);
         if ($564) {
          $565 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $566 = $565 & 127;
          $567 = (($x$i) + ($566<<2)|0);
          $568 = HEAP32[$567>>2]|0;
          $569 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $570 = $569 & 127;
          $571 = (($x$i) + ($570<<2)|0);
          $572 = HEAP32[$571>>2]|0;
          $573 = $572 | $568;
          HEAP32[$571>>2] = $573;
          $z$4$i = $566;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $574 = (($x$i) + ($563<<2)|0);
         HEAP32[$574>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph46$i = $563;$e2$0$ph$i = $$lcssa265;$rp$2$ph44$i = $561;$z$1$ph45$i = $z$4$i;
        }
        L302: while(1) {
         $605 = (($z$6$ph$i) + 1)|0;
         $602 = $605 & 127;
         $606 = (($z$6$ph$i) + 127)|0;
         $607 = $606 & 127;
         $608 = (($x$i) + ($607<<2)|0);
         $a$4$ph167$i = $a$4$ph$i;$e2$1$ph166$i = $e2$1$ph$i;$rp$4$ph$i = $rp$4$ph42$i;
         while(1) {
          $609 = ($rp$4$ph$i|0)==(18);
          $610 = ($rp$4$ph$i|0)>(27);
          $$24$i = $610 ? 9 : 1;
          $$not$i = $609 ^ 1;
          $a$4$i = $a$4$ph167$i;$e2$1$i = $e2$1$ph166$i;
          while(1) {
           $575 = $a$4$i & 127;
           $576 = ($575|0)==($z$6$ph$i|0);
           do {
            if ($576) {
             label = 219;
            } else {
             $577 = (($x$i) + ($575<<2)|0);
             $578 = HEAP32[$577>>2]|0;
             $579 = ($578>>>0)<(9007199);
             if ($579) {
              label = 219;
              break;
             }
             $580 = ($578>>>0)>(9007199);
             if ($580) {
              break;
             }
             $581 = (($a$4$i) + 1)|0;
             $582 = $581 & 127;
             $583 = ($582|0)==($z$6$ph$i|0);
             if ($583) {
              label = 219;
              break;
             }
             $689 = (($x$i) + ($582<<2)|0);
             $690 = HEAP32[$689>>2]|0;
             $691 = ($690>>>0)<(254740991);
             if ($691) {
              label = 219;
              break;
             }
             $692 = ($690>>>0)>(254740991);
             $brmerge$i28 = $692 | $$not$i;
             if (!($brmerge$i28)) {
              $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($609) {
             label = 220;
             break L302;
            }
           }
           $584 = (($e2$1$i) + ($$24$i))|0;
           $585 = ($a$4$i|0)==($z$6$ph$i|0);
           if ($585) {
            $a$4$i = $z$6$ph$i;$e2$1$i = $584;
           } else {
            $$lcssa258 = $584;$a$4$i$lcssa250 = $a$4$i;
            break;
           }
          }
          $586 = 1 << $$24$i;
          $587 = (($586) + -1)|0;
          $588 = 1000000000 >>> $$24$i;
          $a$586$i = $a$4$i$lcssa250;$carry4$089$i = 0;$k$687$i = $a$4$i$lcssa250;$rp$585$i = $rp$4$ph$i;
          while(1) {
           $589 = (($x$i) + ($k$687$i<<2)|0);
           $590 = HEAP32[$589>>2]|0;
           $591 = $590 & $587;
           $592 = $590 >>> $$24$i;
           $593 = (($592) + ($carry4$089$i))|0;
           HEAP32[$589>>2] = $593;
           $594 = Math_imul($591, $588)|0;
           $595 = ($k$687$i|0)==($a$586$i|0);
           $596 = ($593|0)==(0);
           $or$cond25$i = $595 & $596;
           $597 = (($k$687$i) + 1)|0;
           $598 = $597 & 127;
           $599 = (($rp$585$i) + -9)|0;
           $rp$6$i = $or$cond25$i ? $599 : $rp$585$i;
           $a$6$i = $or$cond25$i ? $598 : $a$586$i;
           $600 = ($598|0)==($z$6$ph$i|0);
           if ($600) {
            $$lcssa259 = $594;$a$6$i$lcssa = $a$6$i;$rp$6$i$lcssa = $rp$6$i;
            break;
           } else {
            $a$586$i = $a$6$i;$carry4$089$i = $594;$k$687$i = $598;$rp$585$i = $rp$6$i;
           }
          }
          $601 = ($$lcssa259|0)==(0);
          if ($601) {
           $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
           continue;
          }
          $603 = ($602|0)==($a$6$i$lcssa|0);
          if (!($603)) {
           $$lcssa258$lcssa = $$lcssa258;$$lcssa259$lcssa = $$lcssa259;$a$6$i$lcssa$lcssa = $a$6$i$lcssa;$rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
           break;
          }
          $611 = HEAP32[$608>>2]|0;
          $612 = $611 | 1;
          HEAP32[$608>>2] = $612;
          $a$4$ph167$i = $a$6$i$lcssa;$e2$1$ph166$i = $$lcssa258;$rp$4$ph$i = $rp$6$i$lcssa;
         }
         $604 = (($x$i) + ($z$6$ph$i<<2)|0);
         HEAP32[$604>>2] = $$lcssa259$lcssa;
         $a$4$ph$i = $a$6$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa258$lcssa;$rp$4$ph42$i = $rp$6$i$lcssa$lcssa;$z$6$ph$i = $602;
        }
        if ((label|0) == 220) {
         if ($576) {
          $613 = (($602) + -1)|0;
          $614 = (($x$i) + ($613<<2)|0);
          HEAP32[$614>>2] = 0;
          $616 = $z$6$ph$i;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $602;
         } else {
          $616 = $575;$a$4$i251 = $a$4$i;$e2$1$i248 = $e2$1$i;$z$10$i = $z$6$ph$i;
         }
        }
        $615 = (($x$i) + ($616<<2)|0);
        $617 = HEAP32[$615>>2]|0;
        $618 = (+($617>>>0));
        $619 = (($a$4$i251) + 1)|0;
        $620 = $619 & 127;
        $621 = ($620|0)==($z$10$i|0);
        if ($621) {
         $678 = (($a$4$i251) + 2)|0;
         $679 = $678 & 127;
         $680 = (($679) + -1)|0;
         $681 = (($x$i) + ($680<<2)|0);
         HEAP32[$681>>2] = 0;
         $z$10$1$i = $679;
        } else {
         $z$10$1$i = $z$10$i;
        }
        $682 = $618 * 1.0E+9;
        $683 = (($x$i) + ($620<<2)|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (+($684>>>0));
        $686 = $682 + $685;
        $642 = (+($sign$0|0));
        $624 = $642 * $686;
        $662 = (($e2$1$i248) + 53)|0;
        $668 = (($662) - ($emin$0$ph))|0;
        $669 = ($668|0)<($bits$0$ph|0);
        $687 = ($668|0)<(0);
        $$$i = $687 ? 0 : $668;
        $denormal$0$i = $669&1;
        $$012$i = $669 ? $$$i : $bits$0$ph;
        $688 = ($$012$i|0)<(53);
        if ($688) {
         $622 = (105 - ($$012$i))|0;
         $623 = (+_scalbn(1.0,$622));
         $625 = (+_copysignl($623,$624));
         $626 = (53 - ($$012$i))|0;
         $627 = (+_scalbn(1.0,$626));
         $628 = (+_fmodl($624,$627));
         $629 = $624 - $628;
         $630 = $625 + $629;
         $bias$0$i25 = $625;$frac$0$i = $628;$y$1$i24 = $630;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $624;
        }
        $631 = (($a$4$i251) + 2)|0;
        $632 = $631 & 127;
        $633 = ($632|0)==($z$10$1$i|0);
        do {
         if ($633) {
          $frac$3$i = $frac$0$i;
         } else {
          $634 = (($x$i) + ($632<<2)|0);
          $635 = HEAP32[$634>>2]|0;
          $636 = ($635>>>0)<(500000000);
          do {
           if ($636) {
            $637 = ($635|0)==(0);
            if ($637) {
             $638 = (($a$4$i251) + 3)|0;
             $639 = $638 & 127;
             $640 = ($639|0)==($z$10$1$i|0);
             if ($640) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $641 = $642 * 0.25;
            $643 = $641 + $frac$0$i;
            $frac$1$i = $643;
           } else {
            $644 = ($635>>>0)>(500000000);
            if ($644) {
             $645 = $642 * 0.75;
             $646 = $645 + $frac$0$i;
             $frac$1$i = $646;
             break;
            }
            $647 = (($a$4$i251) + 3)|0;
            $648 = $647 & 127;
            $649 = ($648|0)==($z$10$1$i|0);
            if ($649) {
             $650 = $642 * 0.5;
             $651 = $650 + $frac$0$i;
             $frac$1$i = $651;
             break;
            } else {
             $652 = $642 * 0.75;
             $653 = $652 + $frac$0$i;
             $frac$1$i = $653;
             break;
            }
           }
          } while(0);
          $654 = (53 - ($$012$i))|0;
          $655 = ($654|0)>(1);
          if (!($655)) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $656 = (+_fmodl($frac$1$i,1.0));
          $657 = $656 != 0.0;
          if ($657) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $658 = $frac$1$i + 1.0;
          $frac$3$i = $658;
         }
        } while(0);
        $659 = $y$1$i24 + $frac$3$i;
        $660 = $659 - $bias$0$i25;
        $661 = $662 & 2147483647;
        $663 = (-2 - ($sum$i))|0;
        $664 = ($661|0)>($663|0);
        do {
         if ($664) {
          $665 = (+Math_abs((+$660)));
          $666 = !($665 >= 9007199254740992.0);
          if ($666) {
           $denormal$2$i = $denormal$0$i;$e2$3$i = $e2$1$i248;$y$2$i26 = $660;
          } else {
           $667 = ($$012$i|0)==($668|0);
           $or$cond26$i = $669 & $667;
           $denormal$1$i = $or$cond26$i ? 0 : $denormal$0$i;
           $670 = $660 * 0.5;
           $671 = (($e2$1$i248) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$3$i = $671;$y$2$i26 = $670;
          }
          $672 = (($e2$3$i) + 50)|0;
          $673 = ($672|0)>($330|0);
          if (!($673)) {
           $674 = ($denormal$2$i|0)!=(0);
           $675 = $frac$3$i != 0.0;
           $or$cond9$i27 = $675 & $674;
           if (!($or$cond9$i27)) {
            $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $676 = (___errno_location()|0);
          HEAP32[$676>>2] = 34;
          $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
         } else {
          $e2$4$i = $e2$1$i248;$y$3$i = $660;
         }
        } while(0);
        $677 = (+_scalbnl($y$3$i,$e2$4$i));
        $$1$i = $677;
       }
      } while(0);
      $$0 = $$1$i;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $fabs = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $y;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $fabs = (+Math_abs((+$x)));
 HEAPF64[tempDoublePtr>>3] = $fabs;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & -2147483648;
 $5 = $4 | $3;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $5;$6 = +HEAPF64[tempDoublePtr>>3];
 return (+$6);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $fabs = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $fabs = (+Math_abs((+$y)));
   HEAPF64[tempDoublePtr>>3] = $fabs;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = ($17>>>0)>(2146435072);
   $19 = ($16>>>0)>(0);
   $20 = ($17|0)==(2146435072);
   $21 = $20 & $19;
   $22 = $18 | $21;
   $23 = ($6|0)==(2047);
   $or$cond = $22 | $23;
   if ($or$cond) {
    label = 3;
   } else {
    $26 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $27 = tempRet0;
    $28 = ($27>>>0)>($12>>>0);
    $29 = ($26>>>0)>($11>>>0);
    $30 = ($27|0)==($12|0);
    $31 = $30 & $29;
    $32 = $28 | $31;
    if (!($32)) {
     $33 = ($26|0)==($11|0);
     $34 = ($27|0)==($12|0);
     $35 = $33 & $34;
     $36 = $x * 0.0;
     $$x = $35 ? $36 : $x;
     return (+$$x);
    }
    $37 = ($6|0)==(0);
    if ($37) {
     $38 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $39 = tempRet0;
     $40 = ($39|0)>(-1);
     $41 = ($38>>>0)>(4294967295);
     $42 = ($39|0)==(-1);
     $43 = $42 & $41;
     $44 = $40 | $43;
     if ($44) {
      $46 = $38;$47 = $39;$ex$026 = 0;
      while(1) {
       $45 = (($ex$026) + -1)|0;
       $48 = (_bitshift64Shl(($46|0),($47|0),1)|0);
       $49 = tempRet0;
       $50 = ($49|0)>(-1);
       $51 = ($48>>>0)>(4294967295);
       $52 = ($49|0)==(-1);
       $53 = $52 & $51;
       $54 = $50 | $53;
       if ($54) {
        $46 = $48;$47 = $49;$ex$026 = $45;
       } else {
        $ex$0$lcssa = $45;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $55 = (1 - ($ex$0$lcssa))|0;
     $56 = (_bitshift64Shl(($0|0),($1|0),($55|0))|0);
     $57 = tempRet0;
     $84 = $56;$85 = $57;$ex$1 = $ex$0$lcssa;
    } else {
     $58 = $1 & 1048575;
     $59 = $58 | 1048576;
     $84 = $0;$85 = $59;$ex$1 = $6;
    }
    $60 = ($9|0)==(0);
    if ($60) {
     $61 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $62 = tempRet0;
     $63 = ($62|0)>(-1);
     $64 = ($61>>>0)>(4294967295);
     $65 = ($62|0)==(-1);
     $66 = $65 & $64;
     $67 = $63 | $66;
     if ($67) {
      $69 = $61;$70 = $62;$ey$020 = 0;
      while(1) {
       $68 = (($ey$020) + -1)|0;
       $71 = (_bitshift64Shl(($69|0),($70|0),1)|0);
       $72 = tempRet0;
       $73 = ($72|0)>(-1);
       $74 = ($71>>>0)>(4294967295);
       $75 = ($72|0)==(-1);
       $76 = $75 & $74;
       $77 = $73 | $76;
       if ($77) {
        $69 = $71;$70 = $72;$ey$020 = $68;
       } else {
        $ey$0$lcssa = $68;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $78 = (1 - ($ey$0$lcssa))|0;
     $79 = (_bitshift64Shl(($2|0),($3|0),($78|0))|0);
     $80 = tempRet0;
     $86 = $79;$87 = $80;$ey$1$ph = $ey$0$lcssa;
    } else {
     $81 = $3 & 1048575;
     $82 = $81 | 1048576;
     $86 = $2;$87 = $82;$ey$1$ph = $9;
    }
    $83 = ($ex$1|0)>($ey$1$ph|0);
    $88 = (_i64Subtract(($84|0),($85|0),($86|0),($87|0))|0);
    $89 = tempRet0;
    $90 = ($89|0)>(-1);
    $91 = ($88>>>0)>(4294967295);
    $92 = ($89|0)==(-1);
    $93 = $92 & $91;
    $94 = $90 | $93;
    L23: do {
     if ($83) {
      $153 = $94;$154 = $88;$155 = $89;$95 = $84;$97 = $85;$ex$212 = $ex$1;
      while(1) {
       if ($153) {
        $96 = ($95|0)==($86|0);
        $98 = ($97|0)==($87|0);
        $99 = $96 & $98;
        if ($99) {
         break;
        } else {
         $101 = $154;$102 = $155;
        }
       } else {
        $101 = $95;$102 = $97;
       }
       $103 = (_bitshift64Shl(($101|0),($102|0),1)|0);
       $104 = tempRet0;
       $105 = (($ex$212) + -1)|0;
       $106 = ($105|0)>($ey$1$ph|0);
       $107 = (_i64Subtract(($103|0),($104|0),($86|0),($87|0))|0);
       $108 = tempRet0;
       $109 = ($108|0)>(-1);
       $110 = ($107>>>0)>(4294967295);
       $111 = ($108|0)==(-1);
       $112 = $111 & $110;
       $113 = $109 | $112;
       if ($106) {
        $153 = $113;$154 = $107;$155 = $108;$95 = $103;$97 = $104;$ex$212 = $105;
       } else {
        $$lcssa7 = $113;$114 = $103;$116 = $104;$156 = $107;$157 = $108;$ex$2$lcssa = $105;
        break L23;
       }
      }
      $100 = $x * 0.0;
      $$0 = $100;
      break L1;
     } else {
      $$lcssa7 = $94;$114 = $84;$116 = $85;$156 = $88;$157 = $89;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $115 = ($114|0)==($86|0);
     $117 = ($116|0)==($87|0);
     $118 = $115 & $117;
     if ($118) {
      $126 = $x * 0.0;
      $$0 = $126;
      break;
     } else {
      $119 = $157;$121 = $156;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $120 = ($119>>>0)<(1048576);
    $122 = ($121>>>0)<(0);
    $123 = ($119|0)==(1048576);
    $124 = $123 & $122;
    $125 = $120 | $124;
    if ($125) {
     $127 = $121;$128 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $129 = (_bitshift64Shl(($127|0),($128|0),1)|0);
      $130 = tempRet0;
      $131 = (($ex$39) + -1)|0;
      $132 = ($130>>>0)<(1048576);
      $133 = ($129>>>0)<(0);
      $134 = ($130|0)==(1048576);
      $135 = $134 & $133;
      $136 = $132 | $135;
      if ($136) {
       $127 = $129;$128 = $130;$ex$39 = $131;
      } else {
       $138 = $129;$139 = $130;$ex$3$lcssa = $131;
       break;
      }
     }
    } else {
     $138 = $121;$139 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $137 = ($ex$3$lcssa|0)>(0);
    if ($137) {
     $140 = (_i64Add(($138|0),($139|0),0,-1048576)|0);
     $141 = tempRet0;
     $142 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $143 = tempRet0;
     $144 = $140 | $142;
     $145 = $141 | $143;
     $150 = $145;$152 = $144;
    } else {
     $146 = (1 - ($ex$3$lcssa))|0;
     $147 = (_bitshift64Lshr(($138|0),($139|0),($146|0))|0);
     $148 = tempRet0;
     $150 = $148;$152 = $147;
    }
    $149 = $150 | $10;
    HEAP32[tempDoublePtr>>2] = $152;HEAP32[tempDoublePtr+4>>2] = $149;$151 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $151;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $24 = $x * $y;
  $25 = $24 / $24;
  $$0 = $25;
 }
 return (+$$0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 447;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read_517($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($off) - ($2))|0;
  $6 = (($5) + ($4))|0;
  $$01 = $6;
 } else {
  $$01 = $off;
 }
 $7 = ((($f)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($f)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 1023]($f,0,0)|0);
  $14 = HEAP32[$7>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $16 = ((($f)) + 16|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  HEAP32[$7>>2] = 0;
  $17 = ((($f)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iiii[$18 & 1023]($f,$$01,$whence)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = ((($f)) + 8|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($f)) + 4|0);
   HEAP32[$22>>2] = 0;
   $23 = HEAP32[$f>>2]|0;
   $24 = $23 & -17;
   HEAP32[$f>>2] = $24;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _catopen($name,$oflag) {
 $name = $name|0;
 $oflag = $oflag|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _newlocale($mask,$name,$base) {
 $mask = $mask|0;
 $name = $name|0;
 $base = $base|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$name>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = (_strcmp($name,14563)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 4;
  } else {
   $4 = (_strcmp($name,14039)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    label = 4;
   } else {
    $$01 = 0;
   }
  }
 }
 if ((label|0) == 4) {
  $6 = ($base|0)==(0|0);
  if ($6) {
   $7 = (_calloc(1,4)|0);
   $$01 = $7;
  } else {
   $$01 = $base;
  }
 }
 return ($$01|0);
}
function _uselocale($l) {
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 180|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($l|0)==(0|0);
 if (!($3)) {
  HEAP32[$1>>2] = $l;
 }
 return ($2|0);
}
function _freelocale($l) {
 $l = $l|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($l);
 return;
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 return ($0|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _catclose($catd) {
 $catd = $catd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$014 = $n;$$023 = $s;$$05 = $d;
  while(1) {
   $1 = (($$014) + -1)|0;
   $2 = ((($$023)) + 4|0);
   $3 = HEAP32[$$023>>2]|0;
   $4 = ((($$05)) + 4|0);
   HEAP32[$$05>>2] = $3;
   $5 = ($1|0)==(0);
   if ($5) {
    break;
   } else {
    $$014 = $1;$$023 = $2;$$05 = $4;
   }
  }
 }
 return ($d|0);
}
function _catgets($catd,$set_id,$msg_id,$s) {
 $catd = $catd|0;
 $set_id = $set_id|0;
 $msg_id = $msg_id|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($s|0);
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = (($9) + ($6))|0;
 $11 = ($p|0)==(0|0);
 if (!($11)) {
  $12 = ($10|0)!=(0);
  $13 = (($s) + ($10)|0);
  $14 = $12 ? $13 : $s;
  HEAP32[$p>>2] = $14;
 }
 STACKTOP = sp;return (+$4);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _strtold_l($s,$p,$l) {
 $s = $s|0;
 $p = $p|0;
 $l = $l|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,2));
 return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_83($s,$p,$base,-1,-1)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_83($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 return (+$0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = ((($c)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $$03 = $s;
    while(1) {
     $5 = HEAP8[$$03>>0]|0;
     $6 = ($5<<24>>24)==($0<<24>>24);
     $7 = ((($$03)) + 1|0);
     if ($6) {
      $$03 = $7;
     } else {
      $$03$lcssa = $$03;
      break;
     }
    }
    $8 = $$03$lcssa;
    $9 = $s;
    $10 = (($8) - ($9))|0;
    $$0 = $10;
    break;
   } else {
    $$028 = $c;$14 = $0;
   }
   while(1) {
    $13 = $14 & 31;
    $15 = $13&255;
    $16 = 1 << $15;
    $div4 = ($14&255) >>> 5;
    $17 = $div4&255;
    $18 = (($byteset) + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 | $16;
    HEAP32[$18>>2] = $20;
    $21 = ((($$028)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     break;
    } else {
     $$028 = $21;$14 = $22;
    }
   }
   $11 = HEAP8[$s>>0]|0;
   $12 = ($11<<24>>24)==(0);
   L10: do {
    if ($12) {
     $$1$lcssa = $s;
    } else {
     $$16 = $s;$24 = $11;
     while(1) {
      $div = ($24&255) >>> 5;
      $25 = $div&255;
      $26 = (($byteset) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $24 & 31;
      $29 = $28&255;
      $30 = 1 << $29;
      $31 = $27 & $30;
      $32 = ($31|0)==(0);
      if ($32) {
       $$1$lcssa = $$16;
       break L10;
      }
      $33 = ((($$16)) + 1|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(0);
      if ($35) {
       $$1$lcssa = $33;
       break;
      } else {
       $$16 = $33;$24 = $34;
      }
     }
    }
   } while(0);
   $36 = $$1$lcssa;
   $37 = $s;
   $38 = (($36) - ($37))|0;
   $$0 = $38;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$035 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 3;
 } else {
  $2 = ((($c)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   label = 3;
  } else {
   ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$027 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div4 = ($13&255) >>> 5;
    $16 = $div4&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = ((($$027)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$027 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$035 = $s;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($byteset) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$03$lcssa = $$035;
       break L7;
      }
      $32 = ((($$035)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$03$lcssa = $32;
       break;
      } else {
       $$035 = $32;$23 = $33;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
  }
 }
 if ((label|0) == 3) {
  $5 = $0 << 24 >> 24;
  $6 = (___strchrnul($s,$5)|0);
  $7 = $6;
  $8 = $s;
  $9 = (($7) - ($8))|0;
  $$0 = $9;
 }
 STACKTOP = sp;return ($$0|0);
}
function _strtok_r($s,$sep,$p) {
 $s = $s|0;
 $sep = $sep|0;
 $p = $p|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[$p>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
  } else {
   $$01 = $1;
   label = 3;
  }
 } else {
  $$01 = $s;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $3 = (_strspn($$01,$sep)|0);
   $4 = (($$01) + ($3)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    HEAP32[$p>>2] = 0;
    $$0 = 0;
    break;
   }
   $7 = (_strcspn($4,$sep)|0);
   $8 = (($4) + ($7)|0);
   HEAP32[$p>>2] = $8;
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    HEAP32[$p>>2] = 0;
    $$0 = $4;
    break;
   } else {
    $11 = ((($8)) + 1|0);
    HEAP32[$p>>2] = $11;
    HEAP8[$8>>0] = 0;
    $$0 = $4;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = ((($$03)) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = ((($$025)) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = ((($$07)) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 return ($d|0);
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2484|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4024|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5564|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 1023]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) - ($14))|0;
 $16 = ($15|0)>(0);
 $17 = $14;
 if ($16) {
  $18 = ($15>>>0)<($0>>>0);
  $$ = $18 ? $15 : $0;
  _memcpy(($destv|0),($17|0),($$|0))|0;
  $19 = (($17) + ($$)|0);
  HEAP32[$13>>2] = $19;
  $20 = (($destv) + ($$)|0);
  $21 = (($0) - ($$))|0;
  $dest$0$ph = $20;$l$0$ph = $21;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $22 = ($l$0$ph|0)==(0);
 L7: do {
  if ($22) {
   label = 13;
  } else {
   $23 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $24 = (___toread($f)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $26 = HEAP32[$23>>2]|0;
    $27 = (FUNCTION_TABLE_iiii[$26 & 1023]($f,$dest$02,$l$03)|0);
    $28 = (($27) + 1)|0;
    $29 = ($28>>>0)<(2);
    if ($29) {
     $l$03$lcssa = $l$03;
     break;
    }
    $34 = (($l$03) - ($27))|0;
    $35 = (($dest$02) + ($27)|0);
    $36 = ($l$03|0)==($27|0);
    if ($36) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $35;$l$03 = $34;
    }
   }
   $31 = ($30|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $32 = (($0) - ($l$03$lcssa))|0;
   $33 = (($32>>>0) / ($size>>>0))&-1;
   $$0 = $33;
  }
 } while(0);
 if ((label|0) == 13) {
  $37 = ($30|0)==(0);
  if ($37) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa83 = 0, $$5 = 0, $$pn = 0, $$pre = 0;
 var $$pre44 = 0, $$pre45 = 0, $$pre46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 L1: do {
  if ($0) {
   $2 = HEAP32[$ws>>2]|0;
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
   } else {
    $$0218 = 0;$5 = $3;$ws2$019 = $2;
    while(1) {
     $6 = ($5>>>0)>(127);
     if ($6) {
      $7 = (_wcrtomb($buf,$5,0)|0);
      $8 = ($7|0)==(-1);
      if ($8) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $7;
      }
     } else {
      $$pn = 1;
     }
     $$13 = (($$pn) + ($$0218))|0;
     $9 = ((($ws2$019)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0);
     if ($11) {
      $$0 = $$13;
      break;
     } else {
      $$0218 = $$13;$5 = $10;$ws2$019 = $9;
     }
    }
   }
  } else {
   $1 = ($n>>>0)>(3);
   L9: do {
    if ($1) {
     $$pre = HEAP32[$ws>>2]|0;
     $$0129 = $s;$$2428 = $n;$14 = $$pre;
     while(1) {
      $13 = HEAP32[$14>>2]|0;
      $15 = (($13) + -1)|0;
      $16 = ($15>>>0)>(126);
      if ($16) {
       $17 = ($13|0)==(0);
       if ($17) {
        $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
        break;
       }
       $19 = (_wcrtomb($$0129,$13,0)|0);
       $20 = ($19|0)==(-1);
       if ($20) {
        $$0 = -1;
        break L1;
       }
       $21 = (($$0129) + ($19)|0);
       $22 = (($$2428) - ($19))|0;
       $$1 = $21;$$35 = $22;$27 = $14;
      } else {
       $23 = $13&255;
       $24 = ((($$0129)) + 1|0);
       HEAP8[$$0129>>0] = $23;
       $25 = (($$2428) + -1)|0;
       $$pre44 = HEAP32[$ws>>2]|0;
       $$1 = $24;$$35 = $25;$27 = $$pre44;
      }
      $26 = ((($27)) + 4|0);
      HEAP32[$ws>>2] = $26;
      $28 = ($$35>>>0)>(3);
      if ($28) {
       $$0129 = $$1;$$2428 = $$35;$14 = $26;
      } else {
       $$01$lcssa = $$1;$$24$lcssa = $$35;
       break L9;
      }
     }
     HEAP8[$$0129$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $18 = (($n) - ($$2428$lcssa))|0;
     $$0 = $18;
     break L1;
    } else {
     $$01$lcssa = $s;$$24$lcssa = $n;
    }
   } while(0);
   $12 = ($$24$lcssa|0)==(0);
   if ($12) {
    $$0 = $n;
   } else {
    $$pre45 = HEAP32[$ws>>2]|0;
    $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre45;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (($29) + -1)|0;
     $32 = ($31>>>0)>(126);
     if ($32) {
      $33 = ($29|0)==(0);
      if ($33) {
       $$223$lcssa = $$223;$$422$lcssa = $$422;
       label = 19;
       break;
      }
      $35 = (_wcrtomb($buf,$29,0)|0);
      $36 = ($35|0)==(-1);
      if ($36) {
       $$0 = -1;
       break L1;
      }
      $37 = ($$422>>>0)<($35>>>0);
      if ($37) {
       $$422$lcssa83 = $$422;
       label = 22;
       break;
      }
      $39 = HEAP32[$30>>2]|0;
      (_wcrtomb($$223,$39,0)|0);
      $40 = (($$223) + ($35)|0);
      $41 = (($$422) - ($35))|0;
      $$3 = $40;$$5 = $41;$46 = $30;
     } else {
      $42 = $29&255;
      $43 = ((($$223)) + 1|0);
      HEAP8[$$223>>0] = $42;
      $44 = (($$422) + -1)|0;
      $$pre46 = HEAP32[$ws>>2]|0;
      $$3 = $43;$$5 = $44;$46 = $$pre46;
     }
     $45 = ((($46)) + 4|0);
     HEAP32[$ws>>2] = $45;
     $47 = ($$5|0)==(0);
     if ($47) {
      $$0 = $n;
      break L1;
     } else {
      $$223 = $$3;$$422 = $$5;$30 = $45;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$223$lcssa>>0] = 0;
     HEAP32[$ws>>2] = 0;
     $34 = (($n) - ($$422$lcssa))|0;
     $$0 = $34;
     break;
    }
    else if ((label|0) == 22) {
     $38 = (($n) - ($$422$lcssa83))|0;
     $$0 = $38;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 1023]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($f)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($f)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($11) - ($14))|0;
  $22 = (($21) + ($16))|0;
  $23 = (($22) + ($18))|0;
  $24 = (($23) - ($20))|0;
  $$0 = $24;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$019 = 0, $$02$ = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$214 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$020 = 0, $cnt$1 = 0, $cnt$215 = 0, $cnt$215$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond17 = 0, $s = 0, $wbuf = 0, $wcs$ = 0;
 var $wn$ = 0, $ws$010 = 0, $ws$021 = 0, $ws$021$lcssa56 = 0, $ws$1 = 0, $ws$216 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($wn$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$019 = $n;$$0218 = $wn$;$37 = $$cast;$cnt$020 = 0;$ws$021 = $wcs$;
   while(1) {
    $4 = $$019 >>> 2;
    $5 = ($4>>>0)>=($$0218>>>0);
    $6 = ($$019>>>0)>(131);
    $7 = $6 | $5;
    if (!($7)) {
     $$1 = $$019;$$24 = $$0218;$18 = $37;$cnt$1 = $cnt$020;$ws$010 = $ws$021;
     break L1;
    }
    $$02$ = $5 ? $$0218 : $4;
    $8 = (($$019) - ($$02$))|0;
    $9 = (_mbsrtowcs($ws$021,$s,$$02$,$st)|0);
    $10 = ($9|0)==(-1);
    if ($10) {
     $$lcssa57 = $8;$ws$021$lcssa56 = $ws$021;
     break;
    }
    $11 = ($ws$021|0)==($wbuf|0);
    $12 = (($ws$021) + ($9<<2)|0);
    $13 = $11 ? 0 : $9;
    $$13 = (($$0218) - ($13))|0;
    $ws$1 = $11 ? $ws$021 : $12;
    $14 = (($9) + ($cnt$020))|0;
    $15 = HEAP32[$s>>2]|0;
    $16 = ($15|0)!=(0|0);
    $17 = ($$0218|0)!=($13|0);
    $or$cond = $17 & $16;
    if ($or$cond) {
     $$019 = $8;$$0218 = $$13;$37 = $15;$cnt$020 = $14;$ws$021 = $ws$1;
    } else {
     $$1 = $8;$$24 = $$13;$18 = $15;$cnt$1 = $14;$ws$010 = $ws$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$010 = $ws$021$lcssa56;
  } else {
   $$1 = $n;$$24 = $wn$;$18 = $$cast;$cnt$1 = 0;$ws$010 = $wcs$;
  }
 } while(0);
 $19 = ($18|0)==(0|0);
 L8: do {
  if ($19) {
   $cnt$3 = $cnt$1;
  } else {
   $20 = ($$24|0)!=(0);
   $21 = ($$1|0)!=(0);
   $22 = $20 & $21;
   if ($22) {
    $$214 = $$1;$$313 = $$24;$23 = $18;$cnt$215 = $cnt$1;$ws$216 = $ws$010;
    while(1) {
     $24 = (_mbrtowc($ws$216,$23,$$214,$st)|0);
     $25 = (($24) + 2)|0;
     $26 = ($25>>>0)<(3);
     if ($26) {
      $$lcssa = $24;$cnt$215$lcssa = $cnt$215;
      break;
     }
     $27 = HEAP32[$s>>2]|0;
     $28 = (($27) + ($24)|0);
     HEAP32[$s>>2] = $28;
     $29 = (($$214) - ($24))|0;
     $30 = ((($ws$216)) + 4|0);
     $31 = (($$313) + -1)|0;
     $32 = (($cnt$215) + 1)|0;
     $33 = ($31|0)!=(0);
     $34 = ($$214|0)!=($24|0);
     $35 = $33 & $34;
     if ($35) {
      $$214 = $29;$$313 = $31;$23 = $28;$cnt$215 = $32;$ws$216 = $30;
     } else {
      $cnt$3 = $32;
      break L8;
     }
    }
    switch ($$lcssa|0) {
    case -1:  {
     $cnt$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$215$lcssa;
     break L8;
     break;
    }
    default: {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$215$lcssa;
     break L8;
    }
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $36 = HEAP32[$s>>2]|0;
  HEAP32[$src>>2] = $36;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0, $$5$lcssa = 0;
 var $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$lcssa = 0, $$lcssa102 = 0, $$lcssa88 = 0, $$lcssa89 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0;
 var $s$5$ph = 0, $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0219 = $$02$ph;$$4718 = $$47$ph;$s$520 = $s$5$ph;
   }
   while(1) {
    $64 = HEAP8[$s$520>>0]|0;
    $65 = $64&255;
    $66 = (($65) + -1)|0;
    $67 = ($66>>>0)<(127);
    do {
     if ($67) {
      $68 = $s$520;
      $69 = $68 & 3;
      $70 = ($69|0)==(0);
      $71 = ($$4718>>>0)>(4);
      $or$cond = $71 & $70;
      if ($or$cond) {
       $$1 = $$0219;$$5 = $$4718;$s$6 = $s$520;
       while(1) {
        $72 = HEAP32[$s$6>>2]|0;
        $73 = (($72) + -16843009)|0;
        $74 = $73 | $72;
        $75 = $74 & -2139062144;
        $76 = ($75|0)==(0);
        if (!($76)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa94 = $72;$s$6$lcssa = $s$6;
         label = 32;
         break;
        }
        $77 = ((($s$6)) + 1|0);
        $78 = $72 & 255;
        $79 = ((($$1)) + 4|0);
        HEAP32[$$1>>2] = $78;
        $80 = ((($s$6)) + 2|0);
        $81 = HEAP8[$77>>0]|0;
        $82 = $81&255;
        $83 = ((($$1)) + 8|0);
        HEAP32[$79>>2] = $82;
        $84 = ((($s$6)) + 3|0);
        $85 = HEAP8[$80>>0]|0;
        $86 = $85&255;
        $87 = ((($$1)) + 12|0);
        HEAP32[$83>>2] = $86;
        $88 = ((($s$6)) + 4|0);
        $89 = HEAP8[$84>>0]|0;
        $90 = $89&255;
        $91 = ((($$1)) + 16|0);
        HEAP32[$87>>2] = $90;
        $92 = (($$5) + -4)|0;
        $$old1 = ($92>>>0)>(4);
        if ($$old1) {
         $$1 = $91;$$5 = $92;$s$6 = $88;
        } else {
         $$lcssa96 = $88;$$lcssa97 = $91;$$lcssa98 = $92;
         label = 31;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa96>>0]|0;
        $$2 = $$lcssa97;$$6 = $$lcssa98;$95 = $$pre$pre;$s$7 = $$lcssa96;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $93 = $$lcssa94&255;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$95 = $93;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0219;$$6 = $$4718;$95 = $64;$s$7 = $s$520;
      }
     } else {
      $$2 = $$0219;$$6 = $$4718;$95 = $64;$s$7 = $s$520;
     }
    } while(0);
    $94 = $95&255;
    $96 = (($94) + -1)|0;
    $97 = ($96>>>0)<(127);
    if (!($97)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa102 = $94;$s$7$lcssa = $s$7;
     break;
    }
    $98 = ((($s$7)) + 1|0);
    $99 = ((($$2)) + 4|0);
    HEAP32[$$2>>2] = $94;
    $100 = (($$6) + -1)|0;
    $101 = ($100|0)==(0);
    if ($101) {
     $s$5$lcssa = $98;
     label = 26;
     break L7;
    } else {
     $$0219 = $99;$$4718 = $100;$s$520 = $98;
    }
   }
   $102 = (($$lcssa102) + -194)|0;
   $103 = ($102>>>0)>(50);
   if ($103) {
    $$434 = $$2$lcssa;$$833 = $$6$lcssa;$s$1035 = $s$7$lcssa;
    label = 48;
    break;
   }
   $104 = ((($s$7$lcssa)) + 1|0);
   $105 = (2136 + ($102<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $106;$s$8 = $104;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     $19 = $14&255;
     if ($18) {
      $$1415 = $$03;$s$116 = $s$0;
      while(1) {
       $20 = ((($s$116)) + 4|0);
       $21 = (($$1415) + -4)|0;
       $22 = HEAP32[$20>>2]|0;
       $23 = (($22) + -16843009)|0;
       $24 = $23 | $22;
       $25 = $24 & -2139062144;
       $26 = ($25|0)==(0);
       if ($26) {
        $$1415 = $21;$s$116 = $20;
       } else {
        $$lcssa = $20;$$lcssa88 = $21;$$lcssa89 = $22;
        break;
       }
      }
      $27 = $$lcssa89&255;
      $$25 = $$lcssa88;$29 = $27;$s$2 = $$lcssa;
     } else {
      $$25 = $$03;$29 = $19;$s$2 = $s$0;
     }
    } else {
     $$25 = $$03;$29 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$29 = $7;$s$2 = $s$0;
   }
   $28 = $29&255;
   $30 = (($28) + -1)|0;
   $31 = ($30>>>0)<(127);
   if ($31) {
    $32 = ((($s$2)) + 1|0);
    $33 = (($$25) + -1)|0;
    $$03 = $33;$s$0 = $32;
    label = 7;
    continue;
   } else {
    $$25$lcssa = $$25;$$lcssa90 = $28;$s$2$lcssa = $s$2;
   }
   $34 = (($$lcssa90) + -194)|0;
   $35 = ($34>>>0)>(50);
   if ($35) {
    $$434 = $ws;$$833 = $$25$lcssa;$s$1035 = $s$2$lcssa;
    label = 48;
    break;
   }
   $36 = ((($s$2$lcssa)) + 1|0);
   $37 = (2136 + ($34<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $38;$s$3 = $36;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $39 = HEAP8[$s$3>>0]|0;
   $40 = $39&255;
   $41 = $40 >>> 3;
   $42 = (($41) + -16)|0;
   $43 = $c$2 >> 26;
   $44 = (($41) + ($43))|0;
   $45 = $42 | $44;
   $46 = ($45>>>0)>(7);
   if ($46) {
    label = 17;
    break;
   }
   $48 = ((($s$3)) + 1|0);
   $49 = $c$2 & 33554432;
   $50 = ($49|0)==(0);
   if ($50) {
    $s$4 = $48;
   } else {
    $51 = HEAP8[$48>>0]|0;
    $52 = $51 & -64;
    $53 = ($52<<24>>24)==(-128);
    if (!($53)) {
     label = 20;
     break;
    }
    $55 = ((($s$3)) + 2|0);
    $56 = $c$2 & 524288;
    $57 = ($56|0)==(0);
    if ($57) {
     $s$4 = $55;
    } else {
     $58 = HEAP8[$55>>0]|0;
     $59 = $58 & -64;
     $60 = ($59<<24>>24)==(-128);
     if (!($60)) {
      label = 23;
      break;
     }
     $62 = ((($s$3)) + 3|0);
     $s$4 = $62;
    }
   }
   $63 = (($$36) + -1)|0;
   $$03 = $63;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $107 = HEAP8[$s$8>>0]|0;
   $108 = $107&255;
   $109 = $108 >>> 3;
   $110 = (($109) + -16)|0;
   $111 = $c$4 >> 26;
   $112 = (($109) + ($111))|0;
   $113 = $110 | $112;
   $114 = ($113>>>0)>(7);
   if ($114) {
    label = 38;
    break;
   }
   $116 = $c$4 << 6;
   $117 = ((($s$8)) + 1|0);
   $118 = (($108) + -128)|0;
   $119 = $118 | $116;
   $120 = ($119|0)<(0);
   if ($120) {
    $121 = HEAP8[$117>>0]|0;
    $122 = $121&255;
    $123 = $122 & 192;
    $124 = ($123|0)==(128);
    if (!($124)) {
     label = 41;
     break;
    }
    $126 = $119 << 6;
    $127 = ((($s$8)) + 2|0);
    $128 = (($122) + -128)|0;
    $129 = $128 | $126;
    $130 = ($129|0)<(0);
    if ($130) {
     $131 = HEAP8[$127>>0]|0;
     $132 = $131&255;
     $133 = $132 & 192;
     $134 = ($133|0)==(128);
     if (!($134)) {
      label = 44;
      break;
     }
     $136 = $129 << 6;
     $137 = ((($s$8)) + 3|0);
     $138 = (($132) + -128)|0;
     $139 = $138 | $136;
     $c$5 = $139;$s$9 = $137;
    } else {
     $c$5 = $129;$s$9 = $127;
    }
   } else {
    $c$5 = $119;$s$9 = $117;
   }
   $140 = ((($$3)) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $141 = (($$7) + -1)|0;
   $$02$ph = $140;$$47$ph = $141;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $47 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $47;
  label = 47;
 }
 else if ((label|0) == 20) {
  $54 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $54;
  label = 47;
 }
 else if ((label|0) == 23) {
  $61 = ((($s$3)) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $61;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
 }
 else if ((label|0) == 38) {
  $115 = ((($s$8)) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $115;
  label = 47;
 }
 else if ((label|0) == 41) {
  $125 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $125;
  label = 52;
 }
 else if ((label|0) == 44) {
  $135 = ((($s$8)) + -1|0);
  $$48 = $$3;$s$109 = $135;
  label = 52;
 }
 if ((label|0) == 47) {
  $142 = ($c$6|0)==(0);
  if ($142) {
   $$434 = $$4;$$833 = $$8;$s$1035 = $s$10;
   label = 48;
  } else {
   $$48 = $$4;$s$109 = $s$10;
   label = 52;
  }
 }
 if ((label|0) == 48) {
  $143 = HEAP8[$s$1035>>0]|0;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $145 = ($$434|0)==(0|0);
   if (!($145)) {
    HEAP32[$$434>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $146 = (($wn) - ($$833))|0;
   $$0 = $146;
  } else {
   $$48 = $$434;$s$109 = $s$1035;
   label = 52;
  }
 }
 if ((label|0) == 52) {
  $147 = (___errno_location()|0);
  HEAP32[$147>>2] = 84;
  $148 = ($$48|0)==(0|0);
  if ($148) {
   $$0 = -1;
  } else {
   HEAP32[$src>>2] = $s$109;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[504]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 18300;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 return ($2|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$019 = 0, $$02$$0 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$214 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$020 = 0, $cnt$1 = 0, $cnt$215 = 0, $cnt$215$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0;
 var $or$cond17 = 0, $s$010 = 0, $s$021 = 0, $s$021$lcssa56 = 0, $s$1 = 0, $s$216 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $$cast = $0;
 $2 = ($0|0)!=(0);
 $3 = ($n$|0)!=(0);
 $or$cond17 = $3 & $2;
 L1: do {
  if ($or$cond17) {
   $$019 = $wn;$$0218 = $n$;$38 = $$cast;$cnt$020 = 0;$s$021 = $dst$;
   while(1) {
    $4 = ($$019>>>0)>=($$0218>>>0);
    $5 = ($$019>>>0)>(32);
    $6 = $4 | $5;
    if (!($6)) {
     $$1 = $$019;$$24 = $$0218;$17 = $38;$cnt$1 = $cnt$020;$s$010 = $s$021;
     break L1;
    }
    $$02$$0 = $4 ? $$0218 : $$019;
    $7 = (($$019) - ($$02$$0))|0;
    $8 = (_wcsrtombs($s$021,$ws,$$02$$0,0)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $$lcssa57 = $7;$s$021$lcssa56 = $s$021;
     break;
    }
    $10 = ($s$021|0)==($buf|0);
    $11 = (($s$021) + ($8)|0);
    $12 = $10 ? 0 : $8;
    $$13 = (($$0218) - ($12))|0;
    $s$1 = $10 ? $s$021 : $11;
    $13 = (($8) + ($cnt$020))|0;
    $14 = HEAP32[$ws>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$0218|0)!=($12|0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$019 = $7;$$0218 = $$13;$38 = $14;$cnt$020 = $13;$s$021 = $s$1;
    } else {
     $$1 = $7;$$24 = $$13;$17 = $14;$cnt$1 = $13;$s$010 = $s$1;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $$lcssa57;$$24 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$010 = $s$021$lcssa56;
  } else {
   $$1 = $wn;$$24 = $n$;$17 = $$cast;$cnt$1 = 0;$s$010 = $dst$;
  }
 } while(0);
 $18 = ($17|0)==(0|0);
 L8: do {
  if ($18) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$24|0)!=(0);
   $20 = ($$1|0)!=(0);
   $21 = $19 & $20;
   if ($21) {
    $$214 = $$1;$$313 = $$24;$23 = $17;$cnt$215 = $cnt$1;$s$216 = $s$010;
    while(1) {
     $22 = HEAP32[$23>>2]|0;
     $24 = (_wcrtomb($s$216,$22,0)|0);
     $25 = (($24) + 1)|0;
     $26 = ($25>>>0)<(2);
     if ($26) {
      $$lcssa = $24;$cnt$215$lcssa = $cnt$215;
      break;
     }
     $28 = HEAP32[$ws>>2]|0;
     $29 = ((($28)) + 4|0);
     HEAP32[$ws>>2] = $29;
     $30 = (($$214) + -1)|0;
     $31 = (($s$216) + ($24)|0);
     $32 = (($$313) - ($24))|0;
     $33 = (($cnt$215) + 1)|0;
     $34 = ($$313|0)!=($24|0);
     $35 = ($30|0)!=(0);
     $36 = $34 & $35;
     if ($36) {
      $$214 = $30;$$313 = $32;$23 = $29;$cnt$215 = $33;$s$216 = $31;
     } else {
      $cnt$3 = $33;
      break L8;
     }
    }
    $27 = ($$lcssa|0)==(0);
    if ($27) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$215$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$1;
   }
  }
 } while(0);
 if ($1) {
  $37 = HEAP32[$ws>>2]|0;
  HEAP32[$wcs>>2] = $37;
 }
 STACKTOP = sp;return ($cnt$3|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0;
 var $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0;
 var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[4576]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (18344 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[4576] = $22;
     } else {
      $23 = HEAP32[(18320)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(18312)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (18344 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[4576] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(18320)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(18312)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(18324)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (18344 + ($93<<2)|0);
      $95 = HEAP32[4576]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[4576] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(18320)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(18312)>>2] = $82;
     HEAP32[(18324)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(18308)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (18608 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(18320)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (18608 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(18308)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(18308)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(18320)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(18320)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(18320)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(18312)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(18324)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (18344 + ($231<<2)|0);
       $233 = HEAP32[4576]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[4576] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(18320)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(18312)>>2] = $rsize$0$i$lcssa;
      HEAP32[(18324)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(18308)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (18608 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (18608 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(18312)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(18320)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8$lcssa>>2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (18608 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(18308)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(18308)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(18320)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(18320)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(18320)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (18344 + ($428<<2)|0);
          $430 = HEAP32[4576]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[4576] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(18320)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (18608 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(18308)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(18308)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(18320)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(18320)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(18312)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(18324)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(18324)>>2] = $514;
   HEAP32[(18312)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(18312)>>2] = 0;
   HEAP32[(18324)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(18316)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(18316)>>2] = $529;
  $530 = HEAP32[(18328)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(18328)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[4694]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(18784)>>2] = $539;
    HEAP32[(18780)>>2] = $539;
    HEAP32[(18788)>>2] = -1;
    HEAP32[(18792)>>2] = -1;
    HEAP32[(18796)>>2] = 0;
    HEAP32[(18748)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[4694] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(18784)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(18744)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(18736)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i16 = $557 | $558;
  if ($or$cond1$i16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(18748)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(18328)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (18752);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(18316)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$746$i = $599;$tsize$745$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(18780)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(18736)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $587 & $588;
      if ($or$cond$i17) {
       $589 = HEAP32[(18744)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(18784)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(18748)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(18748)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$746$i = $622;$tsize$745$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(18736)>>2]|0;
  $632 = (($631) + ($tsize$745$i))|0;
  HEAP32[(18736)>>2] = $632;
  $633 = HEAP32[(18740)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(18740)>>2] = $632;
  }
  $635 = HEAP32[(18328)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(18320)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$746$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(18320)>>2] = $tbase$746$i;
    }
    HEAP32[(18752)>>2] = $tbase$746$i;
    HEAP32[(18756)>>2] = $tsize$745$i;
    HEAP32[(18764)>>2] = 0;
    $640 = HEAP32[4694]|0;
    HEAP32[(18340)>>2] = $640;
    HEAP32[(18336)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (18344 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$745$i) + -40)|0;
    $647 = ((($tbase$746$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$746$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(18328)>>2] = $654;
    HEAP32[(18316)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(18792)>>2]|0;
    HEAP32[(18332)>>2] = $660;
   } else {
    $sp$068$i = (18752);
    while(1) {
     $661 = HEAP32[$sp$068$i>>2]|0;
     $662 = ((($sp$068$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$746$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$068$i$lcssa = $sp$068$i;
      label = 203;
      break;
     }
     $666 = ((($sp$068$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$068$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$068$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $674 & $673;
      if ($or$cond48$i) {
       $675 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(18316)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$745$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(18328)>>2] = $684;
       HEAP32[(18316)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(18792)>>2]|0;
       HEAP32[(18332)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(18320)>>2]|0;
    $693 = ($tbase$746$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(18320)>>2] = $tbase$746$i;
     $757 = $tbase$746$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (18752);
    while(1) {
     $695 = HEAP32[$sp$167$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 211;
      break;
     }
     $697 = ((($sp$167$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (18752);
      break;
     } else {
      $sp$167$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$167$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $704 = ((($sp$167$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$745$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$746$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$746$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(18316)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(18316)>>2] = $732;
        HEAP32[(18328)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(18324)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(18312)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(18312)>>2] = $738;
         HEAP32[(18324)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (18344 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[4576]|0;
            $765 = $764 & $763;
            HEAP32[4576] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (18608 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(18308)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(18308)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(18320)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(18320)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(18320)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (18344 + ($842<<2)|0);
         $844 = HEAP32[4576]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[4576] = $848;
           $$pre$i16$i = ((($843)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(18320)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (18608 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(18308)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(18308)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i18$i = $893;
        while(1) {
         $899 = ((($T$0$i18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(18320)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(18320)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (18752);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$745$i) + -40)|0;
    $945 = ((($tbase$746$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$746$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(18328)>>2] = $952;
    HEAP32[(18316)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(18792)>>2]|0;
    HEAP32[(18332)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(18752)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(18752)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(18752)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(18752)+12>>2]|0;
    HEAP32[(18752)>>2] = $tbase$746$i;
    HEAP32[(18756)>>2] = $tsize$745$i;
    HEAP32[(18764)>>2] = 0;
    HEAP32[(18760)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (18344 + ($973<<2)|0);
      $975 = HEAP32[4576]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[4576] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(18320)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (18608 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(18308)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(18308)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(18320)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(18320)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(18316)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(18316)>>2] = $1055;
   $1056 = HEAP32[(18328)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(18328)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(18320)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(18324)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(18312)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (18344 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[4576]|0;
     $37 = $36 & $35;
     HEAP32[4576] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (18608 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(18308)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(18308)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(18320)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(18320)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(18320)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(18328)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(18316)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(18316)>>2] = $122;
   HEAP32[(18328)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(18324)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(18324)>>2] = 0;
   HEAP32[(18312)>>2] = 0;
   return;
  }
  $127 = HEAP32[(18324)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(18312)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(18312)>>2] = $130;
   HEAP32[(18324)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (18344 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(18320)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[4576]|0;
     $154 = $153 & $152;
     HEAP32[4576] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(18320)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(18320)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(18320)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (18608 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(18308)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(18308)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(18320)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(18320)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(18320)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(18324)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(18312)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (18344 + ($235<<2)|0);
  $237 = HEAP32[4576]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[4576] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(18320)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (18608 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(18308)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(18308)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(18320)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(18320)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(18336)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(18336)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (18760);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(18336)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(18320)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(18784)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(18328)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(18316)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(18328)>>2] = $38;
  HEAP32[(18316)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(18324)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(18312)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(18312)>>2] = $storemerge1;
  HEAP32[(18324)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (18344 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[4576]|0;
    $91 = $90 & $89;
    HEAP32[4576] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (18608 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(18308)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(18308)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(18320)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(18320)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(18320)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(18320)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(18324)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(18312)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (18344 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[4576]|0;
     $32 = $31 & $30;
     HEAP32[4576] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (18608 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(18308)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(18308)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(18320)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(18320)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(18320)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(18320)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(18328)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(18316)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(18316)>>2] = $116;
   HEAP32[(18328)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(18324)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(18324)>>2] = 0;
   HEAP32[(18312)>>2] = 0;
   return;
  }
  $121 = HEAP32[(18324)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(18312)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(18312)>>2] = $124;
   HEAP32[(18324)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (18344 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[4576]|0;
     $147 = $146 & $145;
     HEAP32[4576] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (18608 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(18308)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(18308)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(18320)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(18320)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(18320)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(18324)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(18312)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (18344 + ($225<<2)|0);
  $227 = HEAP32[4576]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[4576] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(18320)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (18608 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(18308)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(18308)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(18320)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(18320)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function __ZNSt3__112__next_primeEj($n) {
 $n = $n|0;
 var $$0$ph$i = 0, $$0$ph$i$lcssa = 0, $$0$ph$i13 = 0, $$0$ph$i13$lcssa = 0, $$8 = 0, $$9 = 0, $$k0$0 = 0, $$lcssa = 0, $$lcssa73 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$neg1$i = 0, $$neg1$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__len$0$i = 0;
 var $__len$0$i$lcssa72 = 0, $__len$0$i15 = 0, $__len$0$i15$lcssa75 = 0, $__len$0$ph$i = 0, $__len$0$ph$i12 = 0, $i$0 = 0, $in$0 = 0, $j$0 = 0, $k0$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n>>>0)<(212);
 L1: do {
  if ($0) {
   $$0$ph$i = 5568;$__len$0$ph$i = 48;
   L2: while(1) {
    $__len$0$i = $__len$0$ph$i;
    while(1) {
     $1 = ($__len$0$i|0)==(0);
     if ($1) {
      $$0$ph$i$lcssa = $$0$ph$i;
      break L2;
     }
     $2 = (($__len$0$i|0) / 2)&-1;
     $3 = (($$0$ph$i) + ($2<<2)|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = ($4>>>0)<($n>>>0);
     if ($5) {
      $$lcssa = $2;$$lcssa73 = $3;$__len$0$i$lcssa72 = $__len$0$i;
      break;
     } else {
      $__len$0$i = $2;
     }
    }
    $6 = ((($$lcssa73)) + 4|0);
    $$neg1$i = (($__len$0$i$lcssa72) + -1)|0;
    $7 = (($$neg1$i) - ($$lcssa))|0;
    $$0$ph$i = $6;$__len$0$ph$i = $7;
   }
   $8 = HEAP32[$$0$ph$i$lcssa>>2]|0;
   $$8 = $8;
  } else {
   $9 = ($n>>>0)>(4294967291);
   if ($9) {
    $10 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(448,($10|0),(14045|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     $13 = ___cxa_find_matching_catch_2()|0;
     $14 = tempRet0;
     ___cxa_free_exception(($10|0));
     ___resumeException($13|0);
     // unreachable;
    } else {
     HEAP32[$10>>2] = (9084);
     ___cxa_throw(($10|0),(1480|0),(316|0));
     // unreachable;
    }
   }
   $15 = (($n>>>0) / 210)&-1;
   $16 = ($15*210)|0;
   $17 = (($n) - ($16))|0;
   $$0$ph$i13 = 5760;$__len$0$ph$i12 = 48;
   L16: while(1) {
    $__len$0$i15 = $__len$0$ph$i12;
    while(1) {
     $18 = ($__len$0$i15|0)==(0);
     if ($18) {
      $$0$ph$i13$lcssa = $$0$ph$i13;
      break L16;
     }
     $19 = (($__len$0$i15|0) / 2)&-1;
     $20 = (($$0$ph$i13) + ($19<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21>>>0)<($17>>>0);
     if ($22) {
      $$lcssa76 = $19;$$lcssa77 = $20;$__len$0$i15$lcssa75 = $__len$0$i15;
      break;
     } else {
      $__len$0$i15 = $19;
     }
    }
    $23 = ((($$lcssa77)) + 4|0);
    $$neg1$i16 = (($__len$0$i15$lcssa75) + -1)|0;
    $24 = (($$neg1$i16) - ($$lcssa76))|0;
    $$0$ph$i13 = $23;$__len$0$ph$i12 = $24;
   }
   $25 = $$0$ph$i13$lcssa;
   $26 = (($25) - (5760))|0;
   $27 = $26 >> 2;
   $28 = (5760 + ($27<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($16))|0;
   $in$0 = $27;$k0$0 = $15;$storemerge = $30;
   while(1) {
    $j$0 = 5;
    while(1) {
     $31 = ($j$0>>>0)<(47);
     if (!($31)) {
      $i$0 = 211;
      label = 21;
      break;
     }
     $32 = (5568 + ($j$0<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (($storemerge>>>0) / ($33>>>0))&-1;
     $35 = ($34>>>0)<($33>>>0);
     if ($35) {
      $$8 = $storemerge;
      break L1;
     }
     $36 = Math_imul($34, $33)|0;
     $37 = ($storemerge|0)==($36|0);
     $38 = (($j$0) + 1)|0;
     if ($37) {
      break;
     } else {
      $j$0 = $38;
     }
    }
    L29: do {
     if ((label|0) == 21) {
      while(1) {
       label = 0;
       $39 = (($storemerge>>>0) / ($i$0>>>0))&-1;
       $40 = ($39>>>0)<($i$0>>>0);
       if ($40) {
        $$8 = $storemerge;
        break L1;
       }
       $41 = Math_imul($39, $i$0)|0;
       $42 = ($storemerge|0)==($41|0);
       if ($42) {
        break L29;
       }
       $43 = (($i$0) + 10)|0;
       $44 = (($storemerge>>>0) / ($43>>>0))&-1;
       $45 = ($44>>>0)<($43>>>0);
       if ($45) {
        $$8 = $storemerge;
        break L1;
       }
       $46 = Math_imul($44, $43)|0;
       $47 = ($storemerge|0)==($46|0);
       if ($47) {
        break L29;
       }
       $48 = (($i$0) + 12)|0;
       $49 = (($storemerge>>>0) / ($48>>>0))&-1;
       $50 = ($49>>>0)<($48>>>0);
       if ($50) {
        $$8 = $storemerge;
        break L1;
       }
       $51 = Math_imul($49, $48)|0;
       $52 = ($storemerge|0)==($51|0);
       if ($52) {
        break L29;
       }
       $53 = (($i$0) + 16)|0;
       $54 = (($storemerge>>>0) / ($53>>>0))&-1;
       $55 = ($54>>>0)<($53>>>0);
       if ($55) {
        $$8 = $storemerge;
        break L1;
       }
       $56 = Math_imul($54, $53)|0;
       $57 = ($storemerge|0)==($56|0);
       if ($57) {
        break L29;
       }
       $58 = (($i$0) + 18)|0;
       $59 = (($storemerge>>>0) / ($58>>>0))&-1;
       $60 = ($59>>>0)<($58>>>0);
       if ($60) {
        $$8 = $storemerge;
        break L1;
       }
       $61 = Math_imul($59, $58)|0;
       $62 = ($storemerge|0)==($61|0);
       if ($62) {
        break L29;
       }
       $63 = (($i$0) + 22)|0;
       $64 = (($storemerge>>>0) / ($63>>>0))&-1;
       $65 = ($64>>>0)<($63>>>0);
       if ($65) {
        $$8 = $storemerge;
        break L1;
       }
       $66 = Math_imul($64, $63)|0;
       $67 = ($storemerge|0)==($66|0);
       if ($67) {
        break L29;
       }
       $68 = (($i$0) + 28)|0;
       $69 = (($storemerge>>>0) / ($68>>>0))&-1;
       $70 = ($69>>>0)<($68>>>0);
       if ($70) {
        $$8 = $storemerge;
        break L1;
       }
       $71 = Math_imul($69, $68)|0;
       $72 = ($storemerge|0)==($71|0);
       if ($72) {
        break L29;
       }
       $73 = (($i$0) + 30)|0;
       $74 = (($storemerge>>>0) / ($73>>>0))&-1;
       $75 = ($74>>>0)<($73>>>0);
       if ($75) {
        $$8 = $storemerge;
        break L1;
       }
       $76 = Math_imul($74, $73)|0;
       $77 = ($storemerge|0)==($76|0);
       if ($77) {
        break L29;
       }
       $78 = (($i$0) + 36)|0;
       $79 = (($storemerge>>>0) / ($78>>>0))&-1;
       $80 = ($79>>>0)<($78>>>0);
       if ($80) {
        $$8 = $storemerge;
        break L1;
       }
       $81 = Math_imul($79, $78)|0;
       $82 = ($storemerge|0)==($81|0);
       if ($82) {
        break L29;
       }
       $83 = (($i$0) + 40)|0;
       $84 = (($storemerge>>>0) / ($83>>>0))&-1;
       $85 = ($84>>>0)<($83>>>0);
       if ($85) {
        $$8 = $storemerge;
        break L1;
       }
       $86 = Math_imul($84, $83)|0;
       $87 = ($storemerge|0)==($86|0);
       if ($87) {
        break L29;
       }
       $88 = (($i$0) + 42)|0;
       $89 = (($storemerge>>>0) / ($88>>>0))&-1;
       $90 = ($89>>>0)<($88>>>0);
       if ($90) {
        $$8 = $storemerge;
        break L1;
       }
       $91 = Math_imul($89, $88)|0;
       $92 = ($storemerge|0)==($91|0);
       if ($92) {
        break L29;
       }
       $93 = (($i$0) + 46)|0;
       $94 = (($storemerge>>>0) / ($93>>>0))&-1;
       $95 = ($94>>>0)<($93>>>0);
       if ($95) {
        $$8 = $storemerge;
        break L1;
       }
       $96 = Math_imul($94, $93)|0;
       $97 = ($storemerge|0)==($96|0);
       if ($97) {
        break L29;
       }
       $98 = (($i$0) + 52)|0;
       $99 = (($storemerge>>>0) / ($98>>>0))&-1;
       $100 = ($99>>>0)<($98>>>0);
       if ($100) {
        $$8 = $storemerge;
        break L1;
       }
       $101 = Math_imul($99, $98)|0;
       $102 = ($storemerge|0)==($101|0);
       if ($102) {
        break L29;
       }
       $103 = (($i$0) + 58)|0;
       $104 = (($storemerge>>>0) / ($103>>>0))&-1;
       $105 = ($104>>>0)<($103>>>0);
       if ($105) {
        $$8 = $storemerge;
        break L1;
       }
       $106 = Math_imul($104, $103)|0;
       $107 = ($storemerge|0)==($106|0);
       if ($107) {
        break L29;
       }
       $108 = (($i$0) + 60)|0;
       $109 = (($storemerge>>>0) / ($108>>>0))&-1;
       $110 = ($109>>>0)<($108>>>0);
       if ($110) {
        $$8 = $storemerge;
        break L1;
       }
       $111 = Math_imul($109, $108)|0;
       $112 = ($storemerge|0)==($111|0);
       if ($112) {
        break L29;
       }
       $113 = (($i$0) + 66)|0;
       $114 = (($storemerge>>>0) / ($113>>>0))&-1;
       $115 = ($114>>>0)<($113>>>0);
       if ($115) {
        $$8 = $storemerge;
        break L1;
       }
       $116 = Math_imul($114, $113)|0;
       $117 = ($storemerge|0)==($116|0);
       if ($117) {
        break L29;
       }
       $118 = (($i$0) + 70)|0;
       $119 = (($storemerge>>>0) / ($118>>>0))&-1;
       $120 = ($119>>>0)<($118>>>0);
       if ($120) {
        $$8 = $storemerge;
        break L1;
       }
       $121 = Math_imul($119, $118)|0;
       $122 = ($storemerge|0)==($121|0);
       if ($122) {
        break L29;
       }
       $123 = (($i$0) + 72)|0;
       $124 = (($storemerge>>>0) / ($123>>>0))&-1;
       $125 = ($124>>>0)<($123>>>0);
       if ($125) {
        $$8 = $storemerge;
        break L1;
       }
       $126 = Math_imul($124, $123)|0;
       $127 = ($storemerge|0)==($126|0);
       if ($127) {
        break L29;
       }
       $128 = (($i$0) + 78)|0;
       $129 = (($storemerge>>>0) / ($128>>>0))&-1;
       $130 = ($129>>>0)<($128>>>0);
       if ($130) {
        $$8 = $storemerge;
        break L1;
       }
       $131 = Math_imul($129, $128)|0;
       $132 = ($storemerge|0)==($131|0);
       if ($132) {
        break L29;
       }
       $133 = (($i$0) + 82)|0;
       $134 = (($storemerge>>>0) / ($133>>>0))&-1;
       $135 = ($134>>>0)<($133>>>0);
       if ($135) {
        $$8 = $storemerge;
        break L1;
       }
       $136 = Math_imul($134, $133)|0;
       $137 = ($storemerge|0)==($136|0);
       if ($137) {
        break L29;
       }
       $138 = (($i$0) + 88)|0;
       $139 = (($storemerge>>>0) / ($138>>>0))&-1;
       $140 = ($139>>>0)<($138>>>0);
       if ($140) {
        $$8 = $storemerge;
        break L1;
       }
       $141 = Math_imul($139, $138)|0;
       $142 = ($storemerge|0)==($141|0);
       if ($142) {
        break L29;
       }
       $143 = (($i$0) + 96)|0;
       $144 = (($storemerge>>>0) / ($143>>>0))&-1;
       $145 = ($144>>>0)<($143>>>0);
       if ($145) {
        $$8 = $storemerge;
        break L1;
       }
       $146 = Math_imul($144, $143)|0;
       $147 = ($storemerge|0)==($146|0);
       if ($147) {
        break L29;
       }
       $148 = (($i$0) + 100)|0;
       $149 = (($storemerge>>>0) / ($148>>>0))&-1;
       $150 = ($149>>>0)<($148>>>0);
       if ($150) {
        $$8 = $storemerge;
        break L1;
       }
       $151 = Math_imul($149, $148)|0;
       $152 = ($storemerge|0)==($151|0);
       if ($152) {
        break L29;
       }
       $153 = (($i$0) + 102)|0;
       $154 = (($storemerge>>>0) / ($153>>>0))&-1;
       $155 = ($154>>>0)<($153>>>0);
       if ($155) {
        $$8 = $storemerge;
        break L1;
       }
       $156 = Math_imul($154, $153)|0;
       $157 = ($storemerge|0)==($156|0);
       if ($157) {
        break L29;
       }
       $158 = (($i$0) + 106)|0;
       $159 = (($storemerge>>>0) / ($158>>>0))&-1;
       $160 = ($159>>>0)<($158>>>0);
       if ($160) {
        $$8 = $storemerge;
        break L1;
       }
       $161 = Math_imul($159, $158)|0;
       $162 = ($storemerge|0)==($161|0);
       if ($162) {
        break L29;
       }
       $163 = (($i$0) + 108)|0;
       $164 = (($storemerge>>>0) / ($163>>>0))&-1;
       $165 = ($164>>>0)<($163>>>0);
       if ($165) {
        $$8 = $storemerge;
        break L1;
       }
       $166 = Math_imul($164, $163)|0;
       $167 = ($storemerge|0)==($166|0);
       if ($167) {
        break L29;
       }
       $168 = (($i$0) + 112)|0;
       $169 = (($storemerge>>>0) / ($168>>>0))&-1;
       $170 = ($169>>>0)<($168>>>0);
       if ($170) {
        $$8 = $storemerge;
        break L1;
       }
       $171 = Math_imul($169, $168)|0;
       $172 = ($storemerge|0)==($171|0);
       if ($172) {
        break L29;
       }
       $173 = (($i$0) + 120)|0;
       $174 = (($storemerge>>>0) / ($173>>>0))&-1;
       $175 = ($174>>>0)<($173>>>0);
       if ($175) {
        $$8 = $storemerge;
        break L1;
       }
       $176 = Math_imul($174, $173)|0;
       $177 = ($storemerge|0)==($176|0);
       if ($177) {
        break L29;
       }
       $178 = (($i$0) + 126)|0;
       $179 = (($storemerge>>>0) / ($178>>>0))&-1;
       $180 = ($179>>>0)<($178>>>0);
       if ($180) {
        $$8 = $storemerge;
        break L1;
       }
       $181 = Math_imul($179, $178)|0;
       $182 = ($storemerge|0)==($181|0);
       if ($182) {
        break L29;
       }
       $183 = (($i$0) + 130)|0;
       $184 = (($storemerge>>>0) / ($183>>>0))&-1;
       $185 = ($184>>>0)<($183>>>0);
       if ($185) {
        $$8 = $storemerge;
        break L1;
       }
       $186 = Math_imul($184, $183)|0;
       $187 = ($storemerge|0)==($186|0);
       if ($187) {
        break L29;
       }
       $188 = (($i$0) + 136)|0;
       $189 = (($storemerge>>>0) / ($188>>>0))&-1;
       $190 = ($189>>>0)<($188>>>0);
       if ($190) {
        $$8 = $storemerge;
        break L1;
       }
       $191 = Math_imul($189, $188)|0;
       $192 = ($storemerge|0)==($191|0);
       if ($192) {
        break L29;
       }
       $193 = (($i$0) + 138)|0;
       $194 = (($storemerge>>>0) / ($193>>>0))&-1;
       $195 = ($194>>>0)<($193>>>0);
       if ($195) {
        $$8 = $storemerge;
        break L1;
       }
       $196 = Math_imul($194, $193)|0;
       $197 = ($storemerge|0)==($196|0);
       if ($197) {
        break L29;
       }
       $198 = (($i$0) + 142)|0;
       $199 = (($storemerge>>>0) / ($198>>>0))&-1;
       $200 = ($199>>>0)<($198>>>0);
       if ($200) {
        $$8 = $storemerge;
        break L1;
       }
       $201 = Math_imul($199, $198)|0;
       $202 = ($storemerge|0)==($201|0);
       if ($202) {
        break L29;
       }
       $203 = (($i$0) + 148)|0;
       $204 = (($storemerge>>>0) / ($203>>>0))&-1;
       $205 = ($204>>>0)<($203>>>0);
       if ($205) {
        $$8 = $storemerge;
        break L1;
       }
       $206 = Math_imul($204, $203)|0;
       $207 = ($storemerge|0)==($206|0);
       if ($207) {
        break L29;
       }
       $208 = (($i$0) + 150)|0;
       $209 = (($storemerge>>>0) / ($208>>>0))&-1;
       $210 = ($209>>>0)<($208>>>0);
       if ($210) {
        $$8 = $storemerge;
        break L1;
       }
       $211 = Math_imul($209, $208)|0;
       $212 = ($storemerge|0)==($211|0);
       if ($212) {
        break L29;
       }
       $213 = (($i$0) + 156)|0;
       $214 = (($storemerge>>>0) / ($213>>>0))&-1;
       $215 = ($214>>>0)<($213>>>0);
       if ($215) {
        $$8 = $storemerge;
        break L1;
       }
       $216 = Math_imul($214, $213)|0;
       $217 = ($storemerge|0)==($216|0);
       if ($217) {
        break L29;
       }
       $218 = (($i$0) + 162)|0;
       $219 = (($storemerge>>>0) / ($218>>>0))&-1;
       $220 = ($219>>>0)<($218>>>0);
       if ($220) {
        $$8 = $storemerge;
        break L1;
       }
       $221 = Math_imul($219, $218)|0;
       $222 = ($storemerge|0)==($221|0);
       if ($222) {
        break L29;
       }
       $223 = (($i$0) + 166)|0;
       $224 = (($storemerge>>>0) / ($223>>>0))&-1;
       $225 = ($224>>>0)<($223>>>0);
       if ($225) {
        $$8 = $storemerge;
        break L1;
       }
       $226 = Math_imul($224, $223)|0;
       $227 = ($storemerge|0)==($226|0);
       if ($227) {
        break L29;
       }
       $228 = (($i$0) + 168)|0;
       $229 = (($storemerge>>>0) / ($228>>>0))&-1;
       $230 = ($229>>>0)<($228>>>0);
       if ($230) {
        $$8 = $storemerge;
        break L1;
       }
       $231 = Math_imul($229, $228)|0;
       $232 = ($storemerge|0)==($231|0);
       if ($232) {
        break L29;
       }
       $233 = (($i$0) + 172)|0;
       $234 = (($storemerge>>>0) / ($233>>>0))&-1;
       $235 = ($234>>>0)<($233>>>0);
       if ($235) {
        $$8 = $storemerge;
        break L1;
       }
       $236 = Math_imul($234, $233)|0;
       $237 = ($storemerge|0)==($236|0);
       if ($237) {
        break L29;
       }
       $238 = (($i$0) + 178)|0;
       $239 = (($storemerge>>>0) / ($238>>>0))&-1;
       $240 = ($239>>>0)<($238>>>0);
       if ($240) {
        $$8 = $storemerge;
        break L1;
       }
       $241 = Math_imul($239, $238)|0;
       $242 = ($storemerge|0)==($241|0);
       if ($242) {
        break L29;
       }
       $243 = (($i$0) + 180)|0;
       $244 = (($storemerge>>>0) / ($243>>>0))&-1;
       $245 = ($244>>>0)<($243>>>0);
       if ($245) {
        $$8 = $storemerge;
        break L1;
       }
       $246 = Math_imul($244, $243)|0;
       $247 = ($storemerge|0)==($246|0);
       if ($247) {
        break L29;
       }
       $248 = (($i$0) + 186)|0;
       $249 = (($storemerge>>>0) / ($248>>>0))&-1;
       $250 = ($249>>>0)<($248>>>0);
       if ($250) {
        $$8 = $storemerge;
        break L1;
       }
       $251 = Math_imul($249, $248)|0;
       $252 = ($storemerge|0)==($251|0);
       if ($252) {
        break L29;
       }
       $253 = (($i$0) + 190)|0;
       $254 = (($storemerge>>>0) / ($253>>>0))&-1;
       $255 = ($254>>>0)<($253>>>0);
       if ($255) {
        $$8 = $storemerge;
        break L1;
       }
       $256 = Math_imul($254, $253)|0;
       $257 = ($storemerge|0)==($256|0);
       if ($257) {
        break L29;
       }
       $258 = (($i$0) + 192)|0;
       $259 = (($storemerge>>>0) / ($258>>>0))&-1;
       $260 = ($259>>>0)<($258>>>0);
       if ($260) {
        $$8 = $storemerge;
        break L1;
       }
       $261 = Math_imul($259, $258)|0;
       $262 = ($storemerge|0)==($261|0);
       if ($262) {
        break L29;
       }
       $263 = (($i$0) + 196)|0;
       $264 = (($storemerge>>>0) / ($263>>>0))&-1;
       $265 = ($264>>>0)<($263>>>0);
       if ($265) {
        $$8 = $storemerge;
        break L1;
       }
       $266 = Math_imul($264, $263)|0;
       $267 = ($storemerge|0)==($266|0);
       if ($267) {
        break L29;
       }
       $268 = (($i$0) + 198)|0;
       $269 = (($storemerge>>>0) / ($268>>>0))&-1;
       $270 = ($269>>>0)<($268>>>0);
       if ($270) {
        $$8 = $storemerge;
        break L1;
       }
       $271 = Math_imul($269, $268)|0;
       $272 = ($storemerge|0)==($271|0);
       if ($272) {
        break L29;
       }
       $273 = (($i$0) + 208)|0;
       $274 = (($storemerge>>>0) / ($273>>>0))&-1;
       $275 = ($274>>>0)<($273>>>0);
       if ($275) {
        $$8 = $storemerge;
        break L1;
       }
       $276 = Math_imul($274, $273)|0;
       $277 = ($storemerge|0)==($276|0);
       $278 = (($i$0) + 210)|0;
       if ($277) {
        break;
       } else {
        $i$0 = $278;
        label = 21;
       }
      }
     }
    } while(0);
    $279 = (($in$0) + 1)|0;
    $280 = ($279|0)==(48);
    $281 = $280&1;
    $$k0$0 = (($281) + ($k0$0))|0;
    $$9 = $280 ? 0 : $279;
    $282 = ($$k0$0*210)|0;
    $283 = (5760 + ($$9<<2)|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = (($284) + ($282))|0;
    $in$0 = $$9;$k0$0 = $$k0$0;$storemerge = $285;
   }
  }
 } while(0);
 return ($$8|0);
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(449,($0|0),(14067|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (9044);
  ___cxa_throw(($0|0),(1448|0),(313|0));
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(449,($0|0),(14067|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (9064);
  ___cxa_throw(($0|0),(1464|0),(313|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__str)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 } else {
  $9 = ((($__str)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($__str)) + 1|0);
  $12 = $2 ? $11 : $10;
  $13 = (($12) + ($__pos)|0);
  $14 = (($7) - ($__pos))|0;
  $15 = ($14>>>0)<($__n>>>0);
  $16 = $15 ? $14 : $__n;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$13,$16);
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if (!($0)) {
  $1 = HEAP8[$__str>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  $4 = ((($__str)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($__str)) + 1|0);
  $7 = $3 ? $6 : $5;
  $8 = ((($__str)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1&255;
  $11 = $10 >>> 1;
  $12 = $3 ? $11 : $9;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$7,$12)|0);
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $26 = (($18) + ($__n_copy)|0);
  $27 = (($26) + ($__n_add)|0);
  $28 = (($20) + ($__n_copy)|0);
  $29 = (($28) + ($__n_del)|0);
  _memcpy(($27|0),($29|0),($25|0))|0;
 }
 $30 = ($__old_cap|0)==(10);
 if (!($30)) {
  __ZdlPv($20);
 }
 $31 = ((($this)) + 8|0);
 HEAP32[$31>>2] = $18;
 $32 = $17 | 1;
 HEAP32[$this>>2] = $32;
 $33 = (($23) + ($__n_add))|0;
 $34 = ((($this)) + 4|0);
 HEAP32[$34>>2] = $33;
 $35 = (($18) + ($33)|0);
 HEAP8[$35>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(10);
   do {
    if ($23) {
     $24 = ((($this)) + 1|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = (($20) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(437,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch_3(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = ((($this)) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = ((($this)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = ((($this)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($20) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = ((($this)) + 4|0);
    HEAP32[$50>>2] = $14;
    $51 = ((($this)) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $14 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__n>>>0);
 do {
  if ($8) {
   $9 = (($__n) - ($7))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = (((($this)) + 1|0) + ($__n)|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = ((($this)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = ((($this)) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $16 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $16 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $15 = $13;
  } else {
   $10 = ((($this)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $15 = $11;
  }
  $14 = (($16) - ($15))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($16))|0;
   $19 = (($18) + ($15))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = ((($this)) + 1|0);
   $27 = $25;
  } else {
   $23 = ((($this)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($15)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($15) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = ((($this)) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $24 = (($18) + ($__n_copy)|0);
  $25 = (($24) + ($__n_add)|0);
  $26 = (($20) + ($__n_copy)|0);
  $27 = (($26) + ($__n_del)|0);
  _memcpy(($25|0),($27|0),($23|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $15 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $15 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($15))|0;
  $34 = (($33) + ($14))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$15,$34,$14,$14,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($14)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($14) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pn = $14;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = ((($__p$0)) + 1|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($this,$__pos1,$__n1,$__s,$__n2) {
 $this = $this|0;
 $__pos1 = $__pos1|0;
 $__n1 = $__n1|0;
 $__s = $__s|0;
 $__n2 = $__n2|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__pos1>>>0);
 $9 = ($__n2|0)==(-1);
 $or$cond = $9 | $8;
 if ($or$cond) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 $10 = (($7) - ($__pos1))|0;
 $11 = ($10>>>0)<($__n1>>>0);
 $12 = $11 ? $10 : $__n1;
 if ($2) {
  $15 = ((($this)) + 1|0);
  $17 = $15;
 } else {
  $13 = ((($this)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $16 = (($17) + ($__pos1)|0);
 $18 = ($12>>>0)>($__n2>>>0);
 $19 = $18 ? $__n2 : $12;
 $20 = (_memcmp($16,$__s,$19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ($12>>>0)<($__n2>>>0);
  $$ = $18&1;
  $$$ = $22 ? -1 : $$;
  return ($$$|0);
 } else {
  return ($20|0);
 }
 return (0)|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__reserve>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__reserve>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__reserve) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = ((($this)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = ((($this)) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $__p$0$ph = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = ((($this)) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = ((($this)) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = ((($this)) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = $__last;
 $17 = (($16) - ($0))|0;
 $18 = $17 >>> 2;
 $$0 = $__first;$__p$0 = $__p$0$ph;
 while(1) {
  $19 = ($$0|0)==($__last|0);
  if ($19) {
   break;
  }
  $20 = HEAP32[$$0>>2]|0;
  HEAP32[$__p$0>>2] = $20;
  $21 = ((($$0)) + 4|0);
  $22 = ((($__p$0)) + 4|0);
  $$0 = $21;$__p$0 = $22;
 }
 $scevgep = (($__p$0$ph) + ($18<<2)|0);
 HEAP32[$scevgep>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 4|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   (_wmemmove($14,$__s,$__n)|0);
   $15 = (($14) + ($__n<<2)|0);
   HEAP32[$15>>2] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = ($__n_add|0)==(0);
 if (!($22)) {
  $23 = (($19) + ($__n_copy<<2)|0);
  (_wmemcpy($23,$__p_new_stuff,$__n_add)|0);
 }
 $24 = (($__old_sz) - ($__n_del))|0;
 $25 = ($24|0)==($__n_copy|0);
 if (!($25)) {
  $26 = (($24) - ($__n_copy))|0;
  $27 = (($19) + ($__n_copy<<2)|0);
  $28 = (($27) + ($__n_add<<2)|0);
  $29 = (($21) + ($__n_copy<<2)|0);
  $30 = (($29) + ($__n_del<<2)|0);
  (_wmemcpy($28,$30,$26)|0);
 }
 $31 = ($__old_cap|0)==(1);
 if (!($31)) {
  __ZdlPv($21);
 }
 $32 = ((($this)) + 8|0);
 HEAP32[$32>>2] = $19;
 $33 = $18 | 1;
 HEAP32[$this>>2] = $33;
 $34 = (($24) + ($__n_add))|0;
 $35 = ((($this)) + 4|0);
 HEAP32[$35>>2] = $34;
 $36 = (($19) + ($34<<2)|0);
 HEAP32[$36>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $20 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(1);
   do {
    if ($23) {
     $24 = ((($this)) + 4|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = $20 << 2;
     $29 = (($28) + 4)|0;
     if ($27) {
      $30 = (__Znwj($29)|0);
      $$sink = $30;
     } else {
      __THREW__ = 0;
      $31 = (invoke_ii(437,($29|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $34 = ___cxa_find_matching_catch_3(0|0)|0;
       $35 = tempRet0;
       (___cxa_begin_catch(($34|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $$sink = $31;
      }
     }
     $36 = $8 & 1;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      $40 = ((($this)) + 4|0);
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
      break;
     } else {
      $38 = ((($this)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $41 = $8 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $45 = $8&255;
    $46 = $45 >>> 1;
    $48 = $46;
   } else {
    $43 = ((($this)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $48 = $44;
   }
   $47 = (($48) + 1)|0;
   (_wmemcpy($__new_data$1,$__p$0,$47)|0);
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $49 = (($20) + 1)|0;
    $50 = $49 | 1;
    HEAP32[$this>>2] = $50;
    $51 = ((($this)) + 4|0);
    HEAP32[$51>>2] = $14;
    $52 = ((($this)) + 8|0);
    HEAP32[$52>>2] = $__new_data$1;
    break;
   } else {
    $53 = $14 << 1;
    $54 = $53&255;
    HEAP8[$this>>0] = $54;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $25 = (($19) + ($__n_copy<<2)|0);
  $26 = (($25) + ($__n_add<<2)|0);
  $27 = (($21) + ($__n_copy<<2)|0);
  $28 = (($27) + ($__n_del<<2)|0);
  (_wmemcpy($26,$28,$24)|0);
 }
 $29 = ($__old_cap|0)==(1);
 if (!($29)) {
  __ZdlPv($21);
 }
 $30 = ((($this)) + 8|0);
 HEAP32[$30>>2] = $19;
 $31 = $18 | 1;
 HEAP32[$this>>2] = $31;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pn = $14;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $__p$0 = (($$pn) + ($__sz$0<<2)|0);
 HEAP32[$__p$0>>2] = $__c;
 $22 = ((($__p$0)) + 4|0);
 HEAP32[$22>>2] = 0;
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5976);
 __THREW__ = 0;
 invoke_vii(450,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = ((($this)) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = ((($this)) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = ((($this)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = ((($this)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = ((($this)) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  return;
 }
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 32|0);
 $3 = ((($this)) + 36|0);
 $i$0 = $1;
 while(1) {
  $4 = ($i$0|0)==(0);
  if ($4) {
   break;
  }
  $5 = (($i$0) + -1)|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($5<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
  $i$0 = $5;
 }
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5992);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5992);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($agg$result)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($agg$result)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0 = 0, $__i$0$lcssa = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = ((($this)) + 16|0);
 $$0 = $__s;$__i$0 = 0;
 while(1) {
  $2 = ($__i$0|0)<($__n|0);
  if (!($2)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = ((($3)) + 1|0);
   HEAP32[$0>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = ((($8)) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$0;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$0>>0] = $storemerge;
  $14 = (($__i$0) + 1)|0;
  $15 = ((($$0)) + 1|0);
  $$0 = $15;$__i$0 = $14;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = ((($this)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0 = 0, $__i$0$lcssa = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 $1 = ((($this)) + 28|0);
 $$0 = $__s;$__i$0 = 0;
 while(1) {
  $2 = ($__i$0|0)<($__n|0);
  if (!($2)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$0>>0]|0;
   $7 = ((($3)) + 1|0);
   HEAP32[$0>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = ((($8)) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$0>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 511]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$0;
    break;
   }
  }
  $15 = ((($$0)) + 1|0);
  $16 = (($__i$0) + 1)|0;
  $$0 = $15;$__i$0 = $16;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $4 = ((($3)) + 8|0);
 __ZNSt3__18ios_baseD2Ev($4);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14292|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,14301,35);
 }
 return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$state = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = $3&1;
 $$state = $4 | $state;
 $5 = ((($this)) + 16|0);
 HEAP32[$5>>2] = $$state;
 $6 = $3&1;
 $7 = $6 | $state;
 $8 = ((($this)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7 & $9;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 HEAP32[$0>>2] = 1;
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = (18800);
 __THREW__ = 0;
 invoke_viii(451,($12|0),(14337|0),($0|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  ___cxa_free_exception(($12|0));
  ___resumeException($16|0);
  // unreachable;
 } else {
  ___cxa_throw(($12|0),(136|0),(44|0));
  // unreachable;
 }
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17472]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((17472|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[4700] = (6076);
   (___cxa_atexit((47|0),(18800|0),(___dso_handle|0))|0);
   ___cxa_guard_release((17472|0));
  }
 }
 return (18800|0);
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = (6056);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = ((($this)) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($this)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($this)) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = ((($this)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($this)) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = ((($this)) + 32|0);
 $8 = ((($this)) + 28|0);
 dest=$7; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 return;
}
function __ZNKSt3__18ios_base6getlocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($this)) + 28|0);
 __ZNSt3__16localeC2ERKS0_($0,$1);
 $2 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__18ios_base4moveERS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rhs)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($rhs)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($this)) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($rhs)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 12|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($rhs)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($rhs)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($this)) + 20|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($this)) + 24|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($rhs)) + 28|0);
 $17 = ((($this)) + 28|0);
 __ZNSt3__16localeC2ERKS0_($17,$16);
 $18 = ((($rhs)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($this)) + 32|0);
 HEAP32[$20>>2] = $19;
 HEAP32[$18>>2] = 0;
 $21 = ((($rhs)) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($this)) + 36|0);
 HEAP32[$23>>2] = $22;
 HEAP32[$21>>2] = 0;
 $24 = ((($rhs)) + 40|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($this)) + 40|0);
 HEAP32[$26>>2] = $25;
 HEAP32[$24>>2] = 0;
 $27 = ((($rhs)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($this)) + 44|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$27>>2] = 0;
 $30 = ((($rhs)) + 48|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($this)) + 48|0);
 HEAP32[$32>>2] = $31;
 HEAP32[$30>>2] = 0;
 $33 = ((($rhs)) + 52|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($this)) + 52|0);
 HEAP32[$35>>2] = $34;
 HEAP32[$33>>2] = 0;
 $36 = ((($rhs)) + 56|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($this)) + 56|0);
 HEAP32[$38>>2] = $37;
 HEAP32[$36>>2] = 0;
 $39 = ((($rhs)) + 60|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($this)) + 60|0);
 HEAP32[$41>>2] = $40;
 HEAP32[$39>>2] = 0;
 $42 = ((($rhs)) + 64|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($this)) + 64|0);
 HEAP32[$44>>2] = $43;
 HEAP32[$42>>2] = 0;
 $45 = ((($rhs)) + 68|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($this)) + 68|0);
 HEAP32[$47>>2] = $46;
 HEAP32[$45>>2] = 0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5992);
 $0 = ((($this)) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = ((($this)) + 8|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2ERKS3_($this,$__sb) {
 $this = $this|0;
 $__sb = $__sb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (5992);
 $0 = ((($this)) + 4|0);
 $1 = ((($__sb)) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$1);
 $2 = ((($this)) + 8|0);
 $3 = ((($__sb)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($this)) + 12|0);
 $6 = ((($__sb)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$5>>2] = $7;
 $8 = ((($this)) + 16|0);
 $9 = ((($__sb)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$8>>2] = $10;
 $11 = ((($this)) + 20|0);
 $12 = ((($__sb)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$11>>2] = $13;
 $14 = ((($this)) + 24|0);
 $15 = ((($__sb)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$14>>2] = $16;
 $17 = ((($this)) + 28|0);
 $18 = ((($__sb)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $19;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var $$0$i$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__i$sroa$0$113 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP8[$this>>0] = 0;
 $1 = HEAP32[$__is>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($__is) + ($3)|0);
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($4)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9)|0);
  }
  do {
   if (!($__noskipws)) {
    $11 = HEAP32[$__is>>2]|0;
    $12 = ((($11)) + -12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($__is) + ($13)|0);
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 4096;
    $18 = ($17|0)==(0);
    if (!($18)) {
     $19 = (__ZNKSt3__18ios_base6getlocEv($14)|0);
     HEAP32[$0>>2] = $19;
     __THREW__ = 0;
     $20 = (invoke_iii(346,($0|0),(18820|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      $64 = ___cxa_find_matching_catch_2()|0;
      $65 = tempRet0;
      __ZNSt3__16localeD2Ev($0);
      ___resumeException($64|0);
      // unreachable;
     }
     __ZNSt3__16localeD2Ev($0);
     $23 = HEAP32[$__is>>2]|0;
     $24 = ((($23)) + -12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($__is) + ($25)|0);
     $27 = ((($26)) + 24|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($20)) + 8|0);
     $30 = $28;
     $31 = ($28|0)==(0);
     $32 = ((($30)) + 12|0);
     $33 = ((($30)) + 16|0);
     $34 = $28;
     $35 = $28;
     $36 = ((($35)) + 12|0);
     $37 = ((($35)) + 16|0);
     $38 = $28;
     $39 = $28;
     while(1) {
      if ($31) {
       $$pre$phiZ2D = 0;$__i$sroa$0$113 = 0;
       break;
      }
      $40 = HEAP32[$32>>2]|0;
      $41 = HEAP32[$33>>2]|0;
      $42 = ($40|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$34>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (FUNCTION_TABLE_ii[$45 & 1023]($30)|0);
       $47 = ($46|0)==(-1);
       if ($47) {
        $$pre$phiZ2D = 0;$__i$sroa$0$113 = 0;
        break;
       }
      }
      $48 = HEAP32[$36>>2]|0;
      $49 = HEAP32[$37>>2]|0;
      $50 = ($48|0)==($49|0);
      if ($50) {
       $51 = HEAP32[$38>>2]|0;
       $52 = ((($51)) + 36|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (FUNCTION_TABLE_ii[$53 & 1023]($35)|0);
       $$0$i$i = $54;
      } else {
       $55 = HEAP8[$48>>0]|0;
       $56 = $55&255;
       $$0$i$i = $56;
      }
      $57 = $$0$i$i&255;
      $isascii1$i = ($57<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $$pre$phiZ2D = $35;$__i$sroa$0$113 = $28;
       break;
      }
      $sext = $$0$i$i << 24;
      $58 = $sext >> 24;
      $59 = HEAP32[$29>>2]|0;
      $60 = (($59) + ($58<<1)|0);
      $61 = HEAP16[$60>>1]|0;
      $62 = $61 & 8192;
      $63 = ($62<<16>>16)==(0);
      if ($63) {
       $$pre$phiZ2D = $35;$__i$sroa$0$113 = $28;
       break;
      }
      $66 = HEAP32[$36>>2]|0;
      $67 = HEAP32[$37>>2]|0;
      $68 = ($66|0)==($67|0);
      if ($68) {
       $69 = HEAP32[$39>>2]|0;
       $70 = ((($69)) + 40|0);
       $71 = HEAP32[$70>>2]|0;
       (FUNCTION_TABLE_ii[$71 & 1023]($35)|0);
       continue;
      } else {
       $72 = ((($66)) + 1|0);
       HEAP32[$36>>2] = $72;
       continue;
      }
     }
     $73 = ($__i$sroa$0$113|0)==(0);
     if (!($73)) {
      $74 = ((($$pre$phiZ2D)) + 12|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($$pre$phiZ2D)) + 16|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($75|0)==($77|0);
      if (!($78)) {
       break;
      }
      $79 = $__i$sroa$0$113;
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($80)) + 36|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (FUNCTION_TABLE_ii[$82 & 1023]($$pre$phiZ2D)|0);
      $84 = ($83|0)==(-1);
      if (!($84)) {
       break;
      }
     }
     $85 = HEAP32[$__is>>2]|0;
     $86 = ((($85)) + -12|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($__is) + ($87)|0);
     $89 = ((($88)) + 16|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $90 | 6;
     __ZNSt3__18ios_base5clearEj($88,$91);
    }
   }
  } while(0);
  $92 = HEAP32[$__is>>2]|0;
  $93 = ((($92)) + -12|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($__is) + ($94)|0);
  $96 = ((($95)) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)==(0);
  $99 = $98&1;
  HEAP8[$this>>0] = $99;
 } else {
  $100 = $6 | 4;
  __ZNSt3__18ios_base5clearEj($4,$100);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 L1: do {
  if (!($6)) {
   __THREW__ = 0;
   invoke_vii(452,($__s|0),($this|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   L3: do {
    if ($8) {
     $33 = ___cxa_find_matching_catch_3(0|0)|0;
     $34 = tempRet0;
     $$0 = $33;
    } else {
     $9 = HEAP8[$__s>>0]|0;
     $10 = ($9<<24>>24)==(0);
     do {
      if (!($10)) {
       $11 = HEAP32[$this>>2]|0;
       $12 = ((($11)) + -12|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (($this) + ($13)|0);
       $15 = ((($14)) + 24|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[$16>>2]|0;
       $18 = ((($17)) + 24|0);
       $19 = HEAP32[$18>>2]|0;
       __THREW__ = 0;
       $20 = (invoke_ii($19|0,($16|0))|0);
       $21 = __THREW__; __THREW__ = 0;
       $22 = $21&1;
       if (!($22)) {
        $23 = ($20|0)==(-1);
        if (!($23)) {
         break;
        }
        $24 = HEAP32[$this>>2]|0;
        $25 = ((($24)) + -12|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = (($this) + ($26)|0);
        $28 = ((($27)) + 16|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = $29 | 1;
        __THREW__ = 0;
        invoke_vii(436,($27|0),($30|0));
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if (!($32)) {
         break;
        }
       }
       $35 = ___cxa_find_matching_catch_3(0|0)|0;
       $36 = tempRet0;
       __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
       $$0 = $35;
       break L3;
      }
     } while(0);
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = ((($37)) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($this) + ($39)|0);
   __THREW__ = 0;
   invoke_vi(453,($40|0));
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if (!($42)) {
    ___cxa_end_catch();
    break;
   }
   $43 = ___cxa_find_matching_catch_2()|0;
   $44 = tempRet0;
   __THREW__ = 0;
   invoke_v(441);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    $47 = ___cxa_find_matching_catch_3(0|0)|0;
    $48 = tempRet0;
    ___clang_call_terminate($47);
    // unreachable;
   } else {
    ___resumeException($43|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($__os) + ($3)|0);
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($4)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($5)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 & 8192;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = (__ZSt18uncaught_exceptionv()|0);
     if (!($16)) {
      $17 = HEAP32[$0>>2]|0;
      $18 = HEAP32[$17>>2]|0;
      $19 = ((($18)) + -12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($17) + ($20)|0);
      $22 = ((($21)) + 24|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = HEAP32[$23>>2]|0;
      $25 = ((($24)) + 24|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      $27 = (invoke_ii($26|0,($23|0))|0);
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if (!($29)) {
       $30 = ($27|0)==(-1);
       if (!($30)) {
        break;
       }
       $31 = HEAP32[$0>>2]|0;
       $32 = HEAP32[$31>>2]|0;
       $33 = ((($32)) + -12|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($31) + ($34)|0);
       $36 = ((($35)) + 16|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = $37 | 1;
       __THREW__ = 0;
       invoke_vii(436,($35|0),($38|0));
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if (!($40)) {
        break;
       }
      }
      $41 = ___cxa_find_matching_catch_3(0|0)|0;
      $42 = tempRet0;
      (___cxa_begin_catch(($41|0))|0);
      __THREW__ = 0;
      invoke_v(441);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $45 = ___cxa_find_matching_catch_3(0|0)|0;
       $46 = tempRet0;
       ___clang_call_terminate($45);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = ((($this)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic($this,$__s,$__n,$__dlm) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 $__dlm = $__dlm|0;
 var $$0 = 0, $$0$i8 = 0, $$0$lcssa35 = 0, $$036 = 0, $$__err$2 = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $__err$2$ph = 0, $__sen = 0, $lpad$phi$index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sen = sp;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 __THREW__ = 0;
 invoke_viii(454,($__sen|0),($this|0),1);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   label = 9;
  } else {
   $3 = HEAP8[$__sen>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($__n) + -1)|0;
    $$0 = $__s;
    while(1) {
     $6 = HEAP32[$this>>2]|0;
     $7 = ((($6)) + -12|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($this) + ($8)|0);
     $10 = ((($9)) + 24|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($11)) + 12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($11)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($13|0)==($15|0);
     if ($16) {
      $17 = HEAP32[$11>>2]|0;
      $18 = ((($17)) + 36|0);
      $19 = HEAP32[$18>>2]|0;
      __THREW__ = 0;
      $20 = (invoke_ii($19|0,($11|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       label = 8;
       break;
      }
      $25 = ($20|0)==(-1);
      if ($25) {
       $$036 = $$0;$__err$2$ph = 2;
       break;
      } else {
       $$0$i8 = $20;
      }
     } else {
      $23 = HEAP8[$13>>0]|0;
      $24 = $23&255;
      $$0$i8 = $24;
     }
     $36 = $$0$i8&255;
     $37 = ($36<<24>>24)==($__dlm<<24>>24);
     if ($37) {
      $$0$lcssa35 = $$0;
      label = 14;
      break;
     }
     $57 = HEAP32[$0>>2]|0;
     $58 = ($57|0)<($5|0);
     if (!($58)) {
      $$036 = $$0;$__err$2$ph = 4;
      break;
     }
     $59 = ((($$0)) + 1|0);
     HEAP8[$$0>>0] = $36;
     $60 = HEAP32[$this>>2]|0;
     $61 = ((($60)) + -12|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($this) + ($62)|0);
     $64 = ((($63)) + 24|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ((($65)) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($65)) + 16|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($67|0)==($69|0);
     if ($70) {
      $71 = HEAP32[$65>>2]|0;
      $72 = ((($71)) + 40|0);
      $73 = HEAP32[$72>>2]|0;
      __THREW__ = 0;
      (invoke_ii($73|0,($65|0))|0);
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if ($75) {
       label = 8;
       break;
      }
     } else {
      $76 = ((($67)) + 1|0);
      HEAP32[$66>>2] = $76;
     }
     $77 = HEAP32[$0>>2]|0;
     $78 = (($77) + 1)|0;
     HEAP32[$0>>2] = $78;
     $$0 = $59;
    }
    if ((label|0) == 8) {
     $26 = ___cxa_find_matching_catch_3(0|0)|0;
     $27 = tempRet0;
     $$pre$phi24Z2D = $this;$$pre$phiZ2D = $this;$lpad$phi$index = $26;
     label = 10;
     break;
    }
    if ((label|0) == 14) {
     $38 = HEAP32[$this>>2]|0;
     $39 = ((($38)) + -12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (($this) + ($40)|0);
     $42 = ((($41)) + 24|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ((($43)) + 12|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ((($43)) + 16|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($45|0)==($47|0);
     if ($48) {
      $49 = HEAP32[$43>>2]|0;
      $50 = ((($49)) + 40|0);
      $51 = HEAP32[$50>>2]|0;
      __THREW__ = 0;
      (invoke_ii($51|0,($43|0))|0);
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       label = 9;
       break;
      }
     } else {
      $54 = ((($45)) + 1|0);
      HEAP32[$44>>2] = $54;
     }
     $55 = HEAP32[$0>>2]|0;
     $56 = (($55) + 1)|0;
     HEAP32[$0>>2] = $56;
     $$036 = $$0$lcssa35;$__err$2$ph = 0;
    }
    $79 = ($__n|0)>(0);
    if ($79) {
     HEAP8[$$036>>0] = 0;
    }
    $80 = HEAP32[$0>>2]|0;
    $81 = ($80|0)==(0);
    $82 = $__err$2$ph | 4;
    $$__err$2 = $81 ? $82 : $__err$2$ph;
    $83 = HEAP32[$this>>2]|0;
    $84 = ((($83)) + -12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($this) + ($85)|0);
    $87 = ((($86)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $88 | $$__err$2;
    __THREW__ = 0;
    invoke_vii(436,($86|0),($89|0));
    $90 = __THREW__; __THREW__ = 0;
    $91 = $90&1;
    if ($91) {
     label = 9;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $28 = ___cxa_find_matching_catch_3(0|0)|0;
  $29 = tempRet0;
  $$pre$phi24Z2D = $this;$$pre$phiZ2D = $this;$lpad$phi$index = $28;
  label = 10;
 }
 do {
  if ((label|0) == 10) {
   (___cxa_begin_catch(($lpad$phi$index|0))|0);
   $30 = HEAP32[$$pre$phiZ2D>>2]|0;
   $31 = ((($30)) + -12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($$pre$phi24Z2D) + ($32)|0);
   __THREW__ = 0;
   invoke_vi(453,($33|0));
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if (!($35)) {
    ___cxa_end_catch();
    break;
   }
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = tempRet0;
   __THREW__ = 0;
   invoke_v(441);
   $94 = __THREW__; __THREW__ = 0;
   $95 = $94&1;
   if ($95) {
    $96 = ___cxa_find_matching_catch_3(0|0)|0;
    $97 = tempRet0;
    ___clang_call_terminate($96);
    // unreachable;
   } else {
    ___resumeException($92|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$this>>2]|0;
  $2 = ((($1)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vi[$3 & 1023]($this);
 }
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $__lo2;$$02 = $__lo1;
 while(1) {
  $0 = ($$01|0)==($__hi2|0);
  if ($0) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  $1 = ($$02|0)==($__hi1|0);
  if ($1) {
   $$0 = -1;
   break;
  }
  $2 = HEAP8[$$02>>0]|0;
  $3 = HEAP8[$$01>>0]|0;
  $4 = ($2<<24>>24)<($3<<24>>24);
  if ($4) {
   $$0 = -1;
   break;
  }
  $5 = ($3<<24>>24)<($2<<24>>24);
  if ($5) {
   $$0 = 1;
   break;
  }
  $6 = ((($$02)) + 1|0);
  $7 = ((($$01)) + 1|0);
  $$01 = $7;$$02 = $6;
 }
 if ((label|0) == 7) {
  $8 = ($$02$lcssa|0)!=($__hi1|0);
  $9 = $8&1;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $0 = ($__p$0|0)==($__hi|0);
  if ($0) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $1 = $__h$0 << 4;
  $2 = HEAP8[$__p$0>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = ((($__p$0)) + 1|0);
  $__h$0 = $8;$__p$0 = $9;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $__lo2;$$02 = $__lo1;
 while(1) {
  $0 = ($$01|0)==($__hi2|0);
  if ($0) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  $1 = ($$02|0)==($__hi1|0);
  if ($1) {
   $$0 = -1;
   break;
  }
  $2 = HEAP32[$$02>>2]|0;
  $3 = HEAP32[$$01>>2]|0;
  $4 = ($2|0)<($3|0);
  if ($4) {
   $$0 = -1;
   break;
  }
  $5 = ($3|0)<($2|0);
  if ($5) {
   $$0 = 1;
   break;
  }
  $6 = ((($$02)) + 4|0);
  $7 = ((($$01)) + 4|0);
  $$01 = $7;$$02 = $6;
 }
 if ((label|0) == 7) {
  $8 = ($$02$lcssa|0)!=($__hi1|0);
  $9 = $8&1;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $0 = ($__p$0|0)==($__hi|0);
  if ($0) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $1 = $__h$0 << 4;
  $2 = HEAP32[$__p$0>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = ((($__p$0)) + 4|0);
  $__h$0 = $7;$__p$0 = $8;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   }
   $$sroa$01$0 = $14;
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(346,($2|0),(18820|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch_2()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$02 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(346,($3|0),(18832|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch_2()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$02 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$0 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$0 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(455,($__b|0),($$byval_copy2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch_2()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($56);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$02 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($43);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch_2()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$0|0);
     if ($50) {
      $$02 = $48;$$03 = $49;
     } else {
      $52 = $$0;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$02 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$02|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = ((($__p$i)) + 4|0);
  HEAP32[$2>>2] = (456);
  $3 = ((($__p$i)) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,457);
 }
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4707]|0;HEAP32[4707] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = ((($this)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$elt$i$i$i$i = 0, $$elt1$i$i$i$i = 0, $$unpack$i$i$i$i = 0, $$unpack2$i$i$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$elt$i$i$i$i = ((($__vp)) + 4|0);
 $$unpack$i$i$i$i = HEAP32[$$elt$i$i$i$i>>2]|0;
 $$elt1$i$i$i$i = ((($__vp)) + 8|0);
 $$unpack2$i$i$i$i = HEAP32[$$elt1$i$i$i$i>>2]|0;
 $0 = HEAP32[$__vp>>2]|0;
 $1 = $$unpack2$i$i$i$i >> 1;
 $2 = (($0) + ($1)|0);
 $3 = $$unpack2$i$i$i$i & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $8 = $$unpack$i$i$i$i;
  $9 = $8;
 } else {
  $5 = HEAP32[$2>>2]|0;
  $6 = (($5) + ($$unpack$i$i$i$i)|0);
  $7 = HEAP32[$6>>2]|0;
  $9 = $7;
 }
 FUNCTION_TABLE_vi[$9 & 1023]($2);
 return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = ((($this)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(1496|0),(321|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)>($id>>>0);
 if ($6) {
  $7 = $3;
  $8 = (($7) + ($id<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  $11 = $10;
 } else {
  $11 = 0;
 }
 return ($11|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0 = 0, $$0$i$i = 0, $$041 = 0, $$lcssa = 0, $$lcssa99 = 0, $$pre$i$i$i = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i11$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0;
 var $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__st$0 = 0, $__st$1 = 0;
 var $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__stat_hold$sroa$0$0$ph$ph = 0, $__stat_hold$sroa$0$1 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(458);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $__stat_hold$sroa$0$0$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $17 = $5;
   $__stat_hold$sroa$0$1 = $17;$__status$0 = $5;
   label = 11;
  } else {
   $__stat_hold$sroa$0$1 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $3;$__st$0 = $__status$0;
   while(1) {
    $18 = ($__ky$0|0)==($__ke|0);
    if ($18) {
     $__n_does_match$0$lcssa = $__n_does_match$0;$__n_might_match$0$lcssa = $__n_might_match$0;
     break;
    }
    $19 = HEAP8[$__ky$0>>0]|0;
    $20 = $19 & 1;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     $24 = $19&255;
     $25 = $24 >>> 1;
     $26 = $25;
    } else {
     $22 = ((($__ky$0)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $26 = $23;
    }
    $27 = ($26|0)==(0);
    if ($27) {
     HEAP8[$__st$0>>0] = 2;
     $28 = (($__n_might_match$0) + -1)|0;
     $29 = (($__n_does_match$0) + 1)|0;
     $__n_does_match$1 = $29;$__n_might_match$1 = $28;
    } else {
     HEAP8[$__st$0>>0] = 1;
     $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
    }
    $30 = ((($__ky$0)) + 12|0);
    $31 = ((($__st$0)) + 1|0);
    $__ky$0 = $30;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $31;
   }
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $32 = HEAP32[$__b>>2]|0;
    $33 = ($32|0)==(0|0);
    do {
     if ($33) {
      $46 = 0;
     } else {
      $34 = ((($32)) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($32)) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35|0)==($37|0);
      if ($38) {
       $39 = HEAP32[$32>>2]|0;
       $40 = ((($39)) + 36|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = (invoke_ii($41|0,($32|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        label = 5;
        break L20;
       }
       $45 = ($42|0)==(-1);
       if ($45) {
        HEAP32[$__b>>2] = 0;
        $46 = 0;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $46 = $$pre$i$i$i;
        break;
       }
      } else {
       $46 = $32;
      }
     }
    } while(0);
    $47 = ($46|0)==(0|0);
    $48 = HEAP32[$__e>>2]|0;
    $49 = ($48|0)==(0|0);
    if ($49) {
     $$pre$i2$i$i11 = 0;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       label = 5;
       break;
      }
      $61 = ($58|0)==(-1);
      if ($61) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i11 = 0;
      } else {
       $$pre$i2$i$i11 = $48;
      }
     } else {
      $$pre$i2$i$i11 = $48;
     }
    }
    $62 = ($$pre$i2$i$i11|0)==(0|0);
    $tmp$i$i = $47 ^ $62;
    $63 = ($__n_might_match$2|0)!=(0);
    $64 = $63 & $tmp$i$i;
    $65 = HEAP32[$__b>>2]|0;
    if (!($64)) {
     $$lcssa = $62;$$lcssa99 = $65;$$pre$i2$i$i11$lcssa = $$pre$i2$i$i11;
     label = 33;
     break;
    }
    $93 = ((($65)) + 12|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($65)) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($94|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$65>>2]|0;
     $99 = ((($98)) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($65|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 5;
      break;
     } else {
      $$0$i$i = $101;
     }
    } else {
     $104 = HEAP8[$94>>0]|0;
     $105 = $104&255;
     $$0$i$i = $105;
    }
    $106 = $$0$i$i&255;
    if ($__case_sensitive) {
     $__c$0 = $106;
    } else {
     $107 = HEAP32[$__ct>>2]|0;
     $108 = ((($107)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     $110 = (invoke_iii($109|0,($__ct|0),($106|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 5;
      break;
     } else {
      $__c$0 = $110;
     }
    }
    $113 = (($__indx$0) + 1)|0;
    $__consume$0$off0 = 0;$__ky1$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
    while(1) {
     $114 = ($__ky1$0|0)==($__ke|0);
     if ($114) {
      break;
     }
     $115 = HEAP8[$__st$1>>0]|0;
     $116 = ($115<<24>>24)==(1);
     do {
      if ($116) {
       $117 = HEAP8[$__ky1$0>>0]|0;
       $118 = $117 & 1;
       $119 = ($118<<24>>24)==(0);
       if ($119) {
        $122 = ((($__ky1$0)) + 1|0);
        $124 = $122;
       } else {
        $120 = ((($__ky1$0)) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $124 = $121;
       }
       $123 = (($124) + ($__indx$0)|0);
       $125 = HEAP8[$123>>0]|0;
       if ($__case_sensitive) {
        $__kc$0 = $125;
       } else {
        $126 = HEAP32[$__ct>>2]|0;
        $127 = ((($126)) + 12|0);
        $128 = HEAP32[$127>>2]|0;
        __THREW__ = 0;
        $129 = (invoke_iii($128|0,($__ct|0),($125|0))|0);
        $130 = __THREW__; __THREW__ = 0;
        $131 = $130&1;
        if ($131) {
         label = 4;
         break L20;
        } else {
         $__kc$0 = $129;
        }
       }
       $132 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
       if (!($132)) {
        HEAP8[$__st$1>>0] = 0;
        $144 = (($__n_might_match$3) + -1)|0;
        $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $144;
        break;
       }
       $133 = HEAP8[$__ky1$0>>0]|0;
       $134 = $133 & 1;
       $135 = ($134<<24>>24)==(0);
       if ($135) {
        $138 = $133&255;
        $139 = $138 >>> 1;
        $140 = $139;
       } else {
        $136 = ((($__ky1$0)) + 4|0);
        $137 = HEAP32[$136>>2]|0;
        $140 = $137;
       }
       $141 = ($140|0)==($113|0);
       if ($141) {
        HEAP8[$__st$1>>0] = 2;
        $142 = (($__n_might_match$3) + -1)|0;
        $143 = (($__n_does_match$3) + 1)|0;
        $__consume$2$off0 = 1;$__n_does_match$5 = $143;$__n_might_match$5 = $142;
       } else {
        $__consume$2$off0 = 1;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
       }
      } else {
       $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
      }
     } while(0);
     $145 = ((($__ky1$0)) + 12|0);
     $146 = ((($__st$1)) + 1|0);
     $__consume$0$off0 = $__consume$2$off0;$__ky1$0 = $145;$__n_does_match$3 = $__n_does_match$5;$__n_might_match$3 = $__n_might_match$5;$__st$1 = $146;
    }
    if (!($__consume$0$off0)) {
     $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    $147 = HEAP32[$__b>>2]|0;
    $148 = ((($147)) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ((($147)) + 16|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($149|0)==($151|0);
    if ($152) {
     $153 = HEAP32[$147>>2]|0;
     $154 = ((($153)) + 40|0);
     $155 = HEAP32[$154>>2]|0;
     __THREW__ = 0;
     (invoke_ii($155|0,($147|0))|0);
     $156 = __THREW__; __THREW__ = 0;
     $157 = $156&1;
     if ($157) {
      label = 5;
      break;
     }
    } else {
     $158 = ((($149)) + 1|0);
     HEAP32[$148>>2] = $158;
    }
    $159 = (($__n_does_match$3) + ($__n_might_match$3))|0;
    $160 = ($159>>>0)>(1);
    if ($160) {
     $__ky2$0 = $__kb;$__n_does_match$6 = $__n_does_match$3;$__st$2 = $__status$0;
    } else {
     $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    while(1) {
     $161 = ($__ky2$0|0)==($__ke|0);
     if ($161) {
      $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3;
      continue L20;
     }
     $162 = HEAP8[$__st$2>>0]|0;
     $163 = ($162<<24>>24)==(2);
     if ($163) {
      $164 = HEAP8[$__ky2$0>>0]|0;
      $165 = $164 & 1;
      $166 = ($165<<24>>24)==(0);
      if ($166) {
       $169 = $164&255;
       $170 = $169 >>> 1;
       $171 = $170;
      } else {
       $167 = ((($__ky2$0)) + 4|0);
       $168 = HEAP32[$167>>2]|0;
       $171 = $168;
      }
      $172 = ($171|0)==($113|0);
      if ($172) {
       $__n_does_match$7 = $__n_does_match$6;
      } else {
       HEAP8[$__st$2>>0] = 0;
       $173 = (($__n_does_match$6) + -1)|0;
       $__n_does_match$7 = $173;
      }
     } else {
      $__n_does_match$7 = $__n_does_match$6;
     }
     $174 = ((($__ky2$0)) + 12|0);
     $175 = ((($__st$2)) + 1|0);
     $__ky2$0 = $174;$__n_does_match$6 = $__n_does_match$7;$__st$2 = $175;
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$1;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch_2()|0;
    $12 = tempRet0;
    $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$1;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 33) {
    $66 = ($$lcssa99|0)==(0|0);
    do {
     if ($66) {
      $79 = 0;
     } else {
      $67 = ((($$lcssa99)) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ((($$lcssa99)) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$$lcssa99>>2]|0;
       $73 = ((($72)) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       $75 = (invoke_ii($74|0,($$lcssa99|0))|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        $__stat_hold$sroa$0$0$ph$ph = $__stat_hold$sroa$0$1;
        label = 6;
        break L6;
       }
       $78 = ($75|0)==(-1);
       if ($78) {
        HEAP32[$__b>>2] = 0;
        $79 = 0;
        break;
       } else {
        $$pre$i$i$i7 = HEAP32[$__b>>2]|0;
        $79 = $$pre$i$i$i7;
        break;
       }
      } else {
       $79 = $$lcssa99;
      }
     }
    } while(0);
    $80 = ($79|0)==(0|0);
    do {
     if ($$lcssa) {
      label = 79;
     } else {
      $81 = ((($$pre$i2$i$i11$lcssa)) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ((($$pre$i2$i$i11$lcssa)) + 16|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($82|0)==($84|0);
      if ($85) {
       $86 = HEAP32[$$pre$i2$i$i11$lcssa>>2]|0;
       $87 = ((($86)) + 36|0);
       $88 = HEAP32[$87>>2]|0;
       __THREW__ = 0;
       $89 = (invoke_ii($88|0,($$pre$i2$i$i11$lcssa|0))|0);
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       if ($91) {
        $__stat_hold$sroa$0$0$ph$ph = $__stat_hold$sroa$0$1;
        label = 6;
        break L6;
       }
       $92 = ($89|0)==(-1);
       if ($92) {
        HEAP32[$__e>>2] = 0;
        label = 79;
        break;
       }
      }
      if ($80) {
       $$0 = $__kb;$__st$3 = $__status$0;
      } else {
       label = 80;
      }
     }
    } while(0);
    if ((label|0) == 79) {
     if ($80) {
      label = 80;
     } else {
      $$0 = $__kb;$__st$3 = $__status$0;
     }
    }
    if ((label|0) == 80) {
     $176 = HEAP32[$__err>>2]|0;
     $177 = $176 | 2;
     HEAP32[$__err>>2] = $177;
     $$0 = $__kb;$__st$3 = $__status$0;
    }
    while(1) {
     $178 = ($$0|0)==($__ke|0);
     if ($178) {
      label = 84;
      break;
     }
     $179 = HEAP8[$__st$3>>0]|0;
     $180 = ($179<<24>>24)==(2);
     if ($180) {
      $$041 = $$0;
      break;
     }
     $181 = ((($$0)) + 12|0);
     $182 = ((($__st$3)) + 1|0);
     $$0 = $181;$__st$3 = $182;
    }
    if ((label|0) == 84) {
     $183 = HEAP32[$__err>>2]|0;
     $184 = $183 | 4;
     HEAP32[$__err>>2] = $184;
     $$041 = $__ke;
    }
    $185 = ($__stat_hold$sroa$0$1|0)==(0);
    if (!($185)) {
     $186 = $__stat_hold$sroa$0$1;
     _free($186);
    }
    STACKTOP = sp;return ($$041|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$0$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $15 = ($__stat_hold$sroa$0$0|0)==(0);
 if (!($15)) {
  $16 = $__stat_hold$sroa$0$0;
  _free($16);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(460,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 32;
   } else {
    HEAP32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 32;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 56;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 32;
        break L13;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($141)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($141) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(346,($__loc|0),(18820|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(14530|0),((14556)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(346,($__loc|0),(18832|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__thousands_sep>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = ((($__atoms)) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$1 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$1 = 0;
    break;
   }
   $27 = ((($__atoms)) + 26|0);
   $$0$i = $__atoms;
   while(1) {
    $28 = ($$0$i|0)==($27|0);
    if ($28) {
     $$0$lcssa$i = $27;
     break;
    }
    $29 = HEAP8[$$0$i>>0]|0;
    $30 = ($29<<24>>24)==($__ct<<24>>24);
    if ($30) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $31 = ((($$0$i)) + 1|0);
    $$0$i = $31;
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = ($34|0)>(23);
   if ($35) {
    $$1 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $36 = ($34|0)<($__base|0);
     if (!($36)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $37 = ($34|0)<(22);
     if (!($37)) {
      if ($1) {
       $$1 = -1;
       break L6;
      }
      $38 = $0;
      $39 = $__a;
      $40 = (($38) - ($39))|0;
      $41 = ($40|0)<(3);
      if (!($41)) {
       $$1 = -1;
       break L6;
      }
      $42 = ((($0)) + -1|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(48);
      if (!($44)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $45 = (14530 + ($34)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $47;
      HEAP8[$0>>0] = $46;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $48 = (14530 + ($34)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $50;
    HEAP8[$0>>0] = $49;
    $51 = HEAP32[$__dc>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[$__dc>>2] = $52;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
  $5 = tempRet0;
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   HEAP32[$1>>2] = $2;
  }
  $8 = HEAP32[$__p2>>2]|0;
  $9 = ($8|0)==($__a_end|0);
  L7: do {
   if ($9) {
    $10 = ($6|0)==(34);
    do {
     if ($10) {
      HEAP32[$__err>>2] = 4;
      $21 = ($5|0)>(0);
      $22 = ($4>>>0)>(0);
      $23 = ($5|0)==(0);
      $24 = $23 & $22;
      $25 = $21 | $24;
      if ($25) {
       $$0 = 2147483647;
       break L7;
      }
     } else {
      $11 = ($5|0)<(-1);
      $12 = ($4>>>0)<(2147483648);
      $13 = ($5|0)==(-1);
      $14 = $13 & $12;
      $15 = $11 | $14;
      if ($15) {
       HEAP32[$__err>>2] = 4;
       break;
      }
      $16 = ($5|0)>(0);
      $17 = ($4>>>0)>(2147483647);
      $18 = ($5|0)==(0);
      $19 = $18 & $17;
      $20 = $16 | $19;
      if ($20) {
       HEAP32[$__err>>2] = 4;
       $$0 = 2147483647;
       break L7;
      } else {
       $$0 = $4;
       break L7;
      }
     }
    } while(0);
    $$0 = -2147483648;
   } else {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
   }
  } while(0);
  $$1 = $$0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17480]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17480|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(461,2147483647,(14563|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((17480|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[4710] = $4;
     ___cxa_guard_release((17480|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[4710]|0;
 return ($7|0);
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$0$i$i = 0, $$01$i$i = 0, $$__ig$0 = 0, $$not = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$0 = 0, $__r$0 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__grouping)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7|0)==(0);
 do {
  if (!($8)) {
   $9 = ($__g|0)==($__g_end|0);
   if ($9) {
    $16 = $0;$24 = $4;
   } else {
    $$0$i$i = $__g_end;$$01$i$i = $__g;
    while(1) {
     $10 = ((($$0$i$i)) + -4|0);
     $11 = ($$01$i$i>>>0)<($10>>>0);
     if (!($11)) {
      break;
     }
     $12 = HEAP32[$$01$i$i>>2]|0;
     $13 = HEAP32[$10>>2]|0;
     HEAP32[$$01$i$i>>2] = $13;
     HEAP32[$10>>2] = $12;
     $14 = ((($$01$i$i)) + 4|0);
     $$0$i$i = $10;$$01$i$i = $14;
    }
    $$pre = HEAP8[$__grouping>>0]|0;
    $$pre11 = HEAP32[$3>>2]|0;
    $16 = $$pre;$24 = $$pre11;
   }
   $15 = $16 & 1;
   $17 = ($15<<24>>24)==(0);
   $18 = ((($__grouping)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($__grouping)) + 1|0);
   $21 = $17 ? $20 : $19;
   $22 = $16&255;
   $23 = $22 >>> 1;
   $25 = $17 ? $23 : $24;
   $26 = (($21) + ($25)|0);
   $27 = ((($__g_end)) + -4|0);
   $28 = $26;
   $__ig$0 = $21;$__r$0 = $__g;
   while(1) {
    $29 = ($__r$0>>>0)<($27>>>0);
    $30 = HEAP8[$__ig$0>>0]|0;
    $$not = ($30<<24>>24)<(1);
    $31 = ($30<<24>>24)==(127);
    $or$cond2 = $$not | $31;
    if (!($29)) {
     break;
    }
    if (!($or$cond2)) {
     $32 = $30 << 24 >> 24;
     $33 = HEAP32[$__r$0>>2]|0;
     $34 = ($32|0)==($33|0);
     if (!($34)) {
      label = 10;
      break;
     }
    }
    $35 = $__ig$0;
    $36 = (($28) - ($35))|0;
    $37 = ($36|0)>(1);
    $38 = ((($__ig$0)) + 1|0);
    $$__ig$0 = $37 ? $38 : $__ig$0;
    $39 = ((($__r$0)) + 4|0);
    $__ig$0 = $$__ig$0;$__r$0 = $39;
   }
   if ((label|0) == 10) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   if (!($or$cond2)) {
    $40 = $30 << 24 >> 24;
    $41 = HEAP32[$27>>2]|0;
    $42 = (($41) + -1)|0;
    $43 = ($42>>>0)<($40>>>0);
    if (!($43)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $163 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $163;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(462,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = tempRet0;
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    label = 32;
   } else {
    $127 = $__v;
    $128 = $127;
    HEAP32[$128>>2] = $123;
    $129 = (($127) + 4)|0;
    $130 = $129;
    HEAP32[$130>>2] = $124;
    $131 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$131,$__err);
    $132 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($132) {
     $145 = 0;
    } else {
     $133 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($134|0)==($136|0);
     if ($137) {
      $138 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $139 = ((($138)) + 36|0);
      $140 = HEAP32[$139>>2]|0;
      __THREW__ = 0;
      $141 = (invoke_ii($140|0,($$pre$i$i$i$lcssa|0))|0);
      $142 = __THREW__; __THREW__ = 0;
      $143 = $142&1;
      if ($143) {
       label = 32;
       break;
      }
      $144 = ($141|0)==(-1);
      if ($144) {
       HEAP32[$__b>>2] = 0;
       $145 = 0;
      } else {
       $145 = $$pre$i$i$i$lcssa;
      }
     } else {
      $145 = $$pre$i$i$i$lcssa;
     }
    }
    $146 = ($145|0)==(0|0);
    $147 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($147) {
      label = 56;
     } else {
      $148 = ((($$pre$i2$i$i)) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ((($$pre$i2$i$i)) + 16|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($149|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$$pre$i2$i$i>>2]|0;
       $154 = ((($153)) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($$pre$i2$i$i|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        label = 32;
        break L13;
       }
       $159 = ($156|0)==(-1);
       if ($159) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($146)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($146) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $160 = HEAP32[$__err>>2]|0;
     $161 = $160 | 2;
     HEAP32[$__err>>2] = $161;
    }
    $162 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($162|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
  $5 = tempRet0;
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   HEAP32[$1>>2] = $2;
  }
  $8 = HEAP32[$__p2>>2]|0;
  $9 = ($8|0)==($__a_end|0);
  if ($9) {
   $10 = ($6|0)==(34);
   if ($10) {
    HEAP32[$__err>>2] = 4;
    $11 = ($5|0)>(0);
    $12 = ($4>>>0)>(0);
    $13 = ($5|0)==(0);
    $14 = $13 & $12;
    $15 = $11 | $14;
    $16 = $15 ? -1 : 0;
    $17 = $15 ? 2147483647 : -2147483648;
    $20 = $16;$21 = $17;
   } else {
    $20 = $4;$21 = $5;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $20 = 0;$21 = 0;
  }
  $18 = $21;$19 = $20;
 }
 tempRet0 = ($18);
 STACKTOP = sp;return ($19|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(463,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 32;
   } else {
    HEAP16[$__v>>1] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 32;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 56;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 32;
        break L13;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($141)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($141) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$1 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$1 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   do {
    if ($11) {
     $12 = ($8|0)==(34);
     $13 = ($7>>>0)>(0);
     $14 = ($6>>>0)>(65535);
     $15 = ($7|0)==(0);
     $16 = $15 & $14;
     $17 = $13 | $16;
     $or$cond = $17 | $12;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $18 = $6&65535;
      $$0 = $18;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(464,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 32;
   } else {
    HEAP32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 32;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 56;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 32;
        break L13;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($141)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($141) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$1 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$1 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   do {
    if ($11) {
     $12 = ($8|0)==(34);
     $13 = ($7>>>0)>(0);
     $14 = ($6>>>0)>(4294967295);
     $15 = ($7|0)==(0);
     $16 = $15 & $14;
     $17 = $13 | $16;
     $or$cond = $17 | $12;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $6;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(465,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 32;
   } else {
    HEAP32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 32;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 56;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 32;
        break L13;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($141)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($141) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$1 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$1 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   do {
    if ($11) {
     $12 = ($8|0)==(34);
     $13 = ($7>>>0)>(0);
     $14 = ($6>>>0)>(4294967295);
     $15 = ($7|0)==(0);
     $16 = $15 & $14;
     $17 = $13 | $16;
     $or$cond = $17 | $12;
     if ($or$cond) {
      HEAP32[$__err>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $6;
      break;
     }
    } else {
     HEAP32[$__err>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 32;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;
    } else {
     $23 = ((($$pre$i$i$i4)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i4)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i4>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i4|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 31;
       break;
      }
      $34 = ($31|0)==(-1);
      if ($34) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i4;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i4;
     }
    }
    $35 = ($$pre$i$i$i|0)==(0|0);
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 23;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
      $43 = HEAP32[$36>>2]|0;
      $44 = ((($43)) + 36|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_ii($45|0,($36|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 31;
       break L15;
      }
      $49 = ($46|0)==(-1);
      if ($49) {
       HEAP32[$__e>>2] = 0;
       label = 23;
       break;
      } else {
       if ($35) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     if ($35) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $163 = 0;
     }
    }
    $50 = HEAP32[$__a_end>>2]|0;
    $51 = HEAP8[$__buf>>0]|0;
    $52 = $51 & 1;
    $53 = ($52<<24>>24)==(0);
    $54 = HEAP32[$20>>2]|0;
    $55 = $51&255;
    $56 = $55 >>> 1;
    $57 = $53 ? $56 : $54;
    $58 = (($__a$0) + ($57)|0);
    $59 = ($50|0)==($58|0);
    if ($59) {
     $60 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($60|0),0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 31;
      break;
     }
     $63 = HEAP8[$__buf>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19 = (($67) + -1)|0;
      $68 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($68|0),0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 31;
      break;
     }
     $71 = HEAP8[$__buf>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     $74 = HEAP32[$16>>2]|0;
     $75 = $73 ? $18 : $74;
     $76 = (($75) + ($57)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = ((($$pre$i$i$i)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($$pre$i$i$i)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$$pre$i$i$i>>2]|0;
     $87 = ((($86)) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($$pre$i$i$i|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 31;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82>>0]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($94,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $163;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$$pre$i$i$i>>2]|0;
     $101 = ((($100)) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($$pre$i$i$i|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = ((($97)) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 31) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    break;
   }
   $106 = HEAP8[$__grouping>>0]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   $109 = ((($__grouping)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $106&255;
   $112 = $111 >>> 1;
   $113 = $108 ? $112 : $110;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (invoke_iiiii(466,($__a$2|0),($122|0),($__err|0),($$0$i|0))|0);
   $124 = tempRet0;
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    label = 32;
   } else {
    $127 = $__v;
    $128 = $127;
    HEAP32[$128>>2] = $123;
    $129 = (($127) + 4)|0;
    $130 = $129;
    HEAP32[$130>>2] = $124;
    $131 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$131,$__err);
    $132 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($132) {
     $145 = 0;
    } else {
     $133 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($134|0)==($136|0);
     if ($137) {
      $138 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $139 = ((($138)) + 36|0);
      $140 = HEAP32[$139>>2]|0;
      __THREW__ = 0;
      $141 = (invoke_ii($140|0,($$pre$i$i$i$lcssa|0))|0);
      $142 = __THREW__; __THREW__ = 0;
      $143 = $142&1;
      if ($143) {
       label = 32;
       break;
      }
      $144 = ($141|0)==(-1);
      if ($144) {
       HEAP32[$__b>>2] = 0;
       $145 = 0;
      } else {
       $145 = $$pre$i$i$i$lcssa;
      }
     } else {
      $145 = $$pre$i$i$i$lcssa;
     }
    }
    $146 = ($145|0)==(0|0);
    $147 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($147) {
      label = 56;
     } else {
      $148 = ((($$pre$i2$i$i)) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ((($$pre$i2$i$i)) + 16|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($149|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$$pre$i2$i$i>>2]|0;
       $154 = ((($153)) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($$pre$i2$i$i|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        label = 32;
        break L13;
       }
       $159 = ($156|0)==(-1);
       if ($159) {
        HEAP32[$__e>>2] = 0;
        label = 56;
        break;
       }
      }
      if (!($146)) {
       label = 57;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     if ($146) {
      label = 57;
     }
    }
    if ((label|0) == 57) {
     $160 = HEAP32[$__err>>2]|0;
     $161 = $160 | 2;
     HEAP32[$__err>>2] = $161;
    }
    $162 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($162|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if ($11) {
    $12 = ($8|0)==(34);
    if ($12) {
     HEAP32[$__err>>2] = 4;
     $15 = -1;$16 = -1;
    } else {
     $15 = $6;$16 = $7;
    }
   } else {
    HEAP32[$__err>>2] = 4;
    $15 = 0;$16 = 0;
   }
   $13 = $16;$14 = $15;
  }
 } while(0);
 tempRet0 = ($13);
 STACKTOP = sp;return ($14|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 28;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch_2()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(467,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 28;
   } else {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 28;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 52;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
        break L8;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($141)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($141) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch_2()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(346,($__loc|0),(18820|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(14530|0),((14562)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(346,($__loc|0),(18832|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP8[$__decimal_point>>0] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP8[$__thousands_sep>>0] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch_2()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$2 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$2 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$2 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$2 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 32|0);
   $$0$i = $__atoms;
   while(1) {
    $41 = ($$0$i|0)==($40|0);
    if ($41) {
     $$0$lcssa$i = $40;
     break;
    }
    $42 = HEAP8[$$0$i>>0]|0;
    $43 = ($42<<24>>24)==($__ct<<24>>24);
    if ($43) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $44 = ((($$0$i)) + 1|0);
    $$0$i = $44;
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = ($47|0)>(31);
   if ($48) {
    $$2 = -1;
   } else {
    $49 = (14530 + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    switch ($47|0) {
    case 24: case 25:  {
     $51 = HEAP32[$__a_end>>2]|0;
     $52 = ($51|0)==($__a|0);
     if (!($52)) {
      $53 = ((($51)) + -1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = $55 & 95;
      $57 = HEAP8[$__exp>>0]|0;
      $58 = $57&255;
      $59 = $58 & 127;
      $60 = ($56|0)==($59|0);
      if (!($60)) {
       $$2 = -1;
       break L1;
      }
     }
     $61 = ((($51)) + 1|0);
     HEAP32[$__a_end>>2] = $61;
     HEAP8[$51>>0] = $50;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     $62 = HEAP32[$__a_end>>2]|0;
     $63 = ((($62)) + 1|0);
     HEAP32[$__a_end>>2] = $63;
     HEAP8[$62>>0] = $50;
     $$2 = 0;
     break L1;
     break;
    }
    default: {
     $64 = $50&255;
     $65 = $64 & 95;
     $66 = HEAP8[$__exp>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($65|0)==($67|0);
     if ($68) {
      $69 = $65 | 128;
      $70 = $69&255;
      HEAP8[$__exp>>0] = $70;
      $71 = HEAP8[$__in_units>>0]|0;
      $72 = ($71<<24>>24)==(0);
      if (!($72)) {
       HEAP8[$__in_units>>0] = 0;
       $73 = HEAP8[$__grouping>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       $76 = ((($__grouping)) + 4|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $73&255;
       $79 = $78 >>> 1;
       $80 = $75 ? $79 : $77;
       $81 = ($80|0)==(0);
       if (!($81)) {
        $82 = HEAP32[$__g_end>>2]|0;
        $83 = $82;
        $84 = $__g;
        $85 = (($83) - ($84))|0;
        $86 = ($85|0)<(160);
        if ($86) {
         $87 = HEAP32[$__dc>>2]|0;
         $88 = ((($82)) + 4|0);
         HEAP32[$__g_end>>2] = $88;
         HEAP32[$82>>2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end>>2]|0;
     $90 = ((($89)) + 1|0);
     HEAP32[$__a_end>>2] = $90;
     HEAP8[$89>>0] = $50;
     $91 = ($47|0)>(21);
     if ($91) {
      $$2 = 0;
      break L1;
     }
     $92 = HEAP32[$__dc>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$__dc>>2] = $93;
     $$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0.0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (+_strtold_l($__a,$__p2,$3));
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$1>>2] = $2;
  }
  $7 = HEAP32[$__p2>>2]|0;
  $8 = ($7|0)==($__a_end|0);
  if ($8) {
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
   }
   $10 = $4;
   $$0 = $10;
  } else {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 28;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch_2()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(468,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 28;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 28;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 52;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
        break L8;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($141)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($141) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch_2()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0.0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (+_strtold_l($__a,$__p2,$3));
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$1>>2] = $2;
  }
  $7 = HEAP32[$__p2>>2]|0;
  $8 = ($7|0)==($__a_end|0);
  if ($8) {
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0;
 var $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 28;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP8[$__decimal_point>>0]|0;
   $19 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i5|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;
    } else {
     $21 = ((($$pre$i$i$i5)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i5)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i5>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i5|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 27;
       break;
      }
      $32 = ($29|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i = 0;
      } else {
       $$pre$i$i$i = $$pre$i$i$i5;
      }
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;
     }
    }
    $33 = ($$pre$i$i$i|0)==(0|0);
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 19;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if (!($40)) {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       label = 27;
       break L10;
      }
      $47 = ($44|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 19;
       break;
      } else {
       if ($33) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($33) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $48 = HEAP32[$__a_end>>2]|0;
    $49 = HEAP8[$__buf>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    $52 = HEAP32[$17>>2]|0;
    $53 = $49&255;
    $54 = $53 >>> 1;
    $55 = $51 ? $54 : $52;
    $56 = (($__a$0) + ($55)|0);
    $57 = ($48|0)==($56|0);
    if ($57) {
     $58 = $55 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($58|0),0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 27;
      break;
     }
     $61 = HEAP8[$__buf>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf>>2]|0;
      $65 = $64 & -2;
      $phitmp$i20 = (($65) + -1)|0;
      $66 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($66|0),0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 27;
      break;
     }
     $69 = HEAP8[$__buf>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     $72 = HEAP32[$13>>2]|0;
     $73 = $71 ? $15 : $72;
     $74 = (($73) + ($55)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = ((($$pre$i$i$i)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($$pre$i$i$i)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$$pre$i$i$i>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($$pre$i$i$i|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 27;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$$pre$i$i$i>>2]|0;
     $99 = ((($98)) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($$pre$i$i$i|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 27;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = ((($95)) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 27) {
    $75 = ___cxa_find_matching_catch_2()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   $107 = ((($__grouping)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $104&255;
   $110 = $109 >>> 1;
   $111 = $106 ? $110 : $108;
   $112 = ($111|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $114 | $112;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = ((($115)) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(469,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 28;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($127) {
     $140 = 0;
    } else {
     $128 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$pre$i$i$i$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 28;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $140 = 0;
      } else {
       $140 = $$pre$i$i$i$lcssa;
      }
     } else {
      $140 = $$pre$i$i$i$lcssa;
     }
    }
    $141 = ($140|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 52;
     } else {
      $143 = ((($$pre$i2$i$i)) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$pre$i2$i$i)) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i>>2]|0;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        label = 28;
        break L8;
       }
       $154 = ($151|0)==(-1);
       if ($154) {
        HEAP32[$__e>>2] = 0;
        label = 52;
        break;
       }
      }
      if (!($141)) {
       label = 53;
      }
     }
    } while(0);
    if ((label|0) == 52) {
     if ($141) {
      label = 53;
     }
    }
    if ((label|0) == 53) {
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
    }
    $157 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($157|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $77 = ___cxa_find_matching_catch_2()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $$1 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$1 = 0.0;
 } else {
  $1 = (___errno_location()|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $3 = (__ZNSt3__16__clocEv()|0);
  $4 = (+_strtold_l($__a,$__p2,$3));
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$1>>2] = $2;
  }
  $7 = HEAP32[$__p2>>2]|0;
  $8 = ($7|0)==($__a_end|0);
  if ($8) {
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  } else {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i10 = 0, $$pre$i2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i5 = 0, $exitcond$i$i = 0, $exitcond$i$i6 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 __THREW__ = 0;
 $3 = (invoke_ii(345,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$0 = $87;$$01 = $88;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(346,($0|0),(18820|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(14530|0),((14556)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     $__i$0$i$i5 = 0;
     while(1) {
      $exitcond$i$i6 = ($__i$0$i$i5|0)==(3);
      if ($exitcond$i$i6) {
       break;
      }
      $14 = (($__buf) + ($__i$0$i$i5<<2)|0);
      HEAP32[$14>>2] = 0;
      $15 = (($__i$0$i$i5) + 1)|0;
      $__i$0$i$i5 = $15;
     }
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L18: do {
      if ($23) {
       label = 36;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i10 = $$pre;$__a$0 = $30;
       L20: while(1) {
        $32 = ($$pre$i$i$i10|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;
        } else {
         $33 = ((($$pre$i$i$i10)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i10)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i10>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i10|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 35;
           break;
          }
          $44 = ($41|0)==(-1);
          if ($44) {
           HEAP32[$__b>>2] = 0;
           $$pre$i$i$i = 0;
          } else {
           $$pre$i$i$i = $$pre$i$i$i10;
          }
         } else {
          $$pre$i$i$i = $$pre$i$i$i10;
         }
        }
        $45 = ($$pre$i$i$i|0)==(0|0);
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 25;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if (!($52)) {
           if ($45) {
            $168 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $46;$__a$2 = $__a$0;
            break L20;
           }
          }
          $53 = HEAP32[$46>>2]|0;
          $54 = ((($53)) + 36|0);
          $55 = HEAP32[$54>>2]|0;
          __THREW__ = 0;
          $56 = (invoke_ii($55|0,($46|0))|0);
          $57 = __THREW__; __THREW__ = 0;
          $58 = $57&1;
          if ($58) {
           label = 35;
           break L20;
          }
          $59 = ($56|0)==(-1);
          if ($59) {
           HEAP32[$__e>>2] = 0;
           label = 25;
           break;
          } else {
           if ($45) {
            $168 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $46;$__a$2 = $__a$0;
            break L20;
           }
          }
         }
        } while(0);
        if ((label|0) == 25) {
         label = 0;
         if ($45) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $168 = 0;
         }
        }
        $60 = HEAP32[$__a_end>>2]|0;
        $61 = HEAP8[$__buf>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        $64 = HEAP32[$31>>2]|0;
        $65 = $61&255;
        $66 = $65 >>> 1;
        $67 = $63 ? $66 : $64;
        $68 = (($__a$0) + ($67)|0);
        $69 = ($60|0)==($68|0);
        if ($69) {
         $70 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(459,($__buf|0),($70|0),0);
         $71 = __THREW__; __THREW__ = 0;
         $72 = $71&1;
         if ($72) {
          label = 35;
          break;
         }
         $73 = HEAP8[$__buf>>0]|0;
         $74 = $73 & 1;
         $75 = ($74<<24>>24)==(0);
         if ($75) {
          $78 = 10;
         } else {
          $76 = HEAP32[$__buf>>2]|0;
          $77 = $76 & -2;
          $phitmp$i26 = (($77) + -1)|0;
          $78 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_viii(459,($__buf|0),($78|0),0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if ($80) {
          label = 35;
          break;
         }
         $81 = HEAP8[$__buf>>0]|0;
         $82 = $81 & 1;
         $83 = ($82<<24>>24)==(0);
         $84 = HEAP32[$27>>2]|0;
         $85 = $83 ? $29 : $84;
         $86 = (($85) + ($67)|0);
         HEAP32[$__a_end>>2] = $86;
         $__a$1 = $85;
        } else {
         $__a$1 = $__a$0;
        }
        $95 = ((($$pre$i$i$i)) + 12|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ((($$pre$i$i$i)) + 16|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($96|0)==($98|0);
        if ($99) {
         $100 = HEAP32[$$pre$i$i$i>>2]|0;
         $101 = ((($100)) + 36|0);
         $102 = HEAP32[$101>>2]|0;
         __THREW__ = 0;
         $103 = (invoke_ii($102|0,($$pre$i$i$i|0))|0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 35;
          break;
         } else {
          $$0$i$i = $103;
         }
        } else {
         $106 = HEAP8[$96>>0]|0;
         $107 = $106&255;
         $$0$i$i = $107;
        }
        $108 = $$0$i$i&255;
        $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $110 = ($109|0)==(0);
        if (!($110)) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i2$i$i = $168;$__a$2 = $__a$1;
         break;
        }
        $111 = HEAP32[$95>>2]|0;
        $112 = HEAP32[$97>>2]|0;
        $113 = ($111|0)==($112|0);
        if ($113) {
         $114 = HEAP32[$$pre$i$i$i>>2]|0;
         $115 = ((($114)) + 40|0);
         $116 = HEAP32[$115>>2]|0;
         __THREW__ = 0;
         (invoke_ii($116|0,($$pre$i$i$i|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 35;
          break;
         } else {
          $$pre$i$i$i10 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $119 = ((($111)) + 1|0);
         HEAP32[$95>>2] = $119;
         $$pre$i$i$i10 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 35) {
        $91 = ___cxa_find_matching_catch_2()|0;
        $92 = tempRet0;
        $lpad$phi$index = $91;$lpad$phi$index2 = $92;
        break;
       }
       $120 = HEAP32[$__a_end>>2]|0;
       $121 = $__a$2;
       $122 = (($120) - ($121))|0;
       __THREW__ = 0;
       invoke_viii(459,($__buf|0),($122|0),0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 36;
       } else {
        $125 = HEAP8[$__buf>>0]|0;
        $126 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $127 = (invoke_i(470)|0);
        $128 = __THREW__; __THREW__ = 0;
        $129 = $128&1;
        if ($129) {
         label = 36;
        } else {
         $130 = $125 & 1;
         $131 = ($130<<24>>24)==(0);
         $132 = $131 ? $29 : $126;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $133 = (invoke_iiiii(471,($132|0),($127|0),(14565|0),($vararg_buffer|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 36;
         } else {
          $136 = ($133|0)==(1);
          if (!($136)) {
           HEAP32[$__err>>2] = 4;
          }
          $137 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($137) {
           $150 = 0;
          } else {
           $138 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $141 = HEAP32[$140>>2]|0;
           $142 = ($139|0)==($141|0);
           if ($142) {
            $143 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $144 = ((($143)) + 36|0);
            $145 = HEAP32[$144>>2]|0;
            __THREW__ = 0;
            $146 = (invoke_ii($145|0,($$pre$i$i$i$lcssa|0))|0);
            $147 = __THREW__; __THREW__ = 0;
            $148 = $147&1;
            if ($148) {
             label = 36;
             break;
            }
            $149 = ($146|0)==(-1);
            if ($149) {
             HEAP32[$__b>>2] = 0;
             $150 = 0;
            } else {
             $150 = $$pre$i$i$i$lcssa;
            }
           } else {
            $150 = $$pre$i$i$i$lcssa;
           }
          }
          $151 = ($150|0)==(0|0);
          $152 = ($$pre$i2$i$i|0)==(0|0);
          do {
           if ($152) {
            label = 61;
           } else {
            $153 = ((($$pre$i2$i$i)) + 12|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = ((($$pre$i2$i$i)) + 16|0);
            $156 = HEAP32[$155>>2]|0;
            $157 = ($154|0)==($156|0);
            if ($157) {
             $158 = HEAP32[$$pre$i2$i$i>>2]|0;
             $159 = ((($158)) + 36|0);
             $160 = HEAP32[$159>>2]|0;
             __THREW__ = 0;
             $161 = (invoke_ii($160|0,($$pre$i2$i$i|0))|0);
             $162 = __THREW__; __THREW__ = 0;
             $163 = $162&1;
             if ($163) {
              label = 36;
              break L18;
             }
             $164 = ($161|0)==(-1);
             if ($164) {
              HEAP32[$__e>>2] = 0;
              label = 61;
              break;
             }
            }
            if (!($151)) {
             label = 62;
            }
           }
          } while(0);
          if ((label|0) == 61) {
           if ($151) {
            label = 62;
           }
          }
          if ((label|0) == 62) {
           $165 = HEAP32[$__err>>2]|0;
           $166 = $165 | 2;
           HEAP32[$__err>>2] = $166;
          }
          $167 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($167|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 36) {
      $93 = ___cxa_find_matching_catch_2()|0;
      $94 = tempRet0;
      $lpad$phi$index = $93;$lpad$phi$index2 = $94;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $89;$$01 = $90;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(472,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch_3(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $__lv = sp + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $__names = sp + 8|0;
 $4 = sp;
 $5 = ((($__iob)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   HEAP32[$__lv>>2] = -1;
   $9 = HEAP32[$this>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$__b>>2]|0;
   HEAP32[$0>>2] = $12;
   $13 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $13;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
   $14 = (FUNCTION_TABLE_iiiiiii[$11 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv)|0);
   HEAP32[$__b>>2] = $14;
   $15 = HEAP32[$__lv>>2]|0;
   switch ($15|0) {
   case 0:  {
    HEAP8[$__v>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$__v>>0] = 1;
    break;
   }
   default: {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   }
   $$sroa$01$0 = $14;
  } else {
   $16 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$2>>2] = $16;
   __THREW__ = 0;
   $17 = (invoke_iii(346,($2|0),(18852|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $44 = ___cxa_find_matching_catch_2()|0;
     $45 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $$02 = $44;$$03 = $45;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
     $20 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
     HEAP32[$3>>2] = $20;
     __THREW__ = 0;
     $21 = (invoke_iii(346,($3|0),(18860|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $46 = ___cxa_find_matching_catch_2()|0;
      $47 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
      $$02 = $46;$$03 = $47;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 24|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     invoke_vii($26|0,($__names|0),($21|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$0 = $__names;
     } else {
      $29 = ((($__names)) + 12|0);
      $30 = HEAP32[$21>>2]|0;
      $31 = ((($30)) + 28|0);
      $32 = HEAP32[$31>>2]|0;
      __THREW__ = 0;
      invoke_vii($32|0,($29|0),($21|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       $$0 = $29;
      } else {
       $35 = HEAP32[$__e>>2]|0;
       HEAP32[$4>>2] = $35;
       $36 = ((($__names)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
       $37 = (invoke_iiiiiiii(473,($__b|0),($$byval_copy2|0),($__names|0),($36|0),($17|0),($__err|0),1)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $54 = ___cxa_find_matching_catch_2()|0;
        $55 = tempRet0;
        $56 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($56);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$02 = $54;$$03 = $55;
        break;
       } else {
        $40 = ($37|0)==($__names|0);
        $41 = $40&1;
        HEAP8[$__v>>0] = $41;
        $42 = HEAP32[$__b>>2]|0;
        $43 = ((($__names)) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($43);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
        $$sroa$01$0 = $42;
        break L1;
       }
      }
     }
     $48 = ___cxa_find_matching_catch_2()|0;
     $49 = tempRet0;
     $50 = ($__names|0)==($$0|0);
     if ($50) {
      $$02 = $48;$$03 = $49;
     } else {
      $52 = $$0;
      while(1) {
       $51 = ((($52)) + -12|0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($51);
       $53 = ($51|0)==($__names|0);
       if ($53) {
        $$02 = $48;$$03 = $49;
        break;
       } else {
        $52 = $51;
       }
      }
     }
    }
   } while(0);
   ___resumeException($$02|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$01$0|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i6 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i12 = 0, $$045 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i8 = 0, $$pre$i3$i$i14 = 0, $$pre$i3$i$i14$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0;
 var $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__stat_hold$sroa$0$0$ph$ph = 0, $__stat_hold$sroa$0$1 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i9 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 do {
  if ($4) {
   $5 = (_malloc($3)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    __THREW__ = 0;
    invoke_v(458);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $__stat_hold$sroa$0$0$ph$ph = 0;
     label = 6;
     break;
    }
   }
   $17 = $5;
   $__stat_hold$sroa$0$1 = $17;$__status$0 = $5;
   label = 11;
  } else {
   $__stat_hold$sroa$0$1 = 0;$__status$0 = $__statbuf;
   label = 11;
  }
 } while(0);
 L6: do {
  if ((label|0) == 11) {
   $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $3;$__st$0 = $__status$0;
   while(1) {
    $18 = ($__ky$0|0)==($__ke|0);
    if ($18) {
     $__n_does_match$0$lcssa = $__n_does_match$0;$__n_might_match$0$lcssa = $__n_might_match$0;
     break;
    }
    $19 = HEAP8[$__ky$0>>0]|0;
    $20 = $19 & 1;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     $24 = $19&255;
     $25 = $24 >>> 1;
     $26 = $25;
    } else {
     $22 = ((($__ky$0)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $26 = $23;
    }
    $27 = ($26|0)==(0);
    if ($27) {
     HEAP8[$__st$0>>0] = 2;
     $28 = (($__n_might_match$0) + -1)|0;
     $29 = (($__n_does_match$0) + 1)|0;
     $__n_does_match$1 = $29;$__n_might_match$1 = $28;
    } else {
     HEAP8[$__st$0>>0] = 1;
     $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
    }
    $30 = ((($__ky$0)) + 12|0);
    $31 = ((($__st$0)) + 1|0);
    $__ky$0 = $30;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $31;
   }
   $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
   L20: while(1) {
    $32 = HEAP32[$__b>>2]|0;
    $33 = ($32|0)==(0|0);
    do {
     if ($33) {
      $63 = 1;
     } else {
      $34 = ((($32)) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($32)) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35|0)==($37|0);
      if ($38) {
       $39 = HEAP32[$32>>2]|0;
       $40 = ((($39)) + 36|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = (invoke_ii($41|0,($32|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        label = 5;
        break L20;
       } else {
        $$0$i$i$i$i = $42;
       }
      } else {
       $45 = HEAP32[$35>>2]|0;
       $$0$i$i$i$i = $45;
      }
      $46 = ($$0$i$i$i$i|0)==(-1);
      if ($46) {
       HEAP32[$__b>>2] = 0;
       $63 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $63 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $47 = HEAP32[$__e>>2]|0;
    $48 = ($47|0)==(0|0);
    if ($48) {
     $$pre$i3$i$i14 = 0;$62 = 1;
    } else {
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ((($47)) + 16|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($50|0)==($52|0);
     if ($53) {
      $54 = HEAP32[$47>>2]|0;
      $55 = ((($54)) + 36|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_ii($56|0,($47|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break;
      } else {
       $$0$i$i1$i$i = $57;
      }
     } else {
      $60 = HEAP32[$50>>2]|0;
      $$0$i$i1$i$i = $60;
     }
     $61 = ($$0$i$i1$i$i|0)==(-1);
     if ($61) {
      HEAP32[$__e>>2] = 0;
      $$pre$i3$i$i14 = 0;$62 = 1;
     } else {
      $$pre$i3$i$i14 = $47;$62 = 0;
     }
    }
    $tmp$i$i = $63 ^ $62;
    $64 = ($__n_might_match$2|0)!=(0);
    $65 = $64 & $tmp$i$i;
    $66 = HEAP32[$__b>>2]|0;
    if (!($65)) {
     $$lcssa = $66;$$pre$i3$i$i14$lcssa = $$pre$i3$i$i14;
     label = 35;
     break;
    }
    $95 = ((($66)) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ((($66)) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$66>>2]|0;
     $101 = ((($100)) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = (invoke_ii($102|0,($66|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 5;
      break;
     } else {
      $$0$i$i = $103;
     }
    } else {
     $106 = HEAP32[$96>>2]|0;
     $$0$i$i = $106;
    }
    if ($__case_sensitive) {
     $__c$0 = $$0$i$i;
    } else {
     $107 = HEAP32[$__ct>>2]|0;
     $108 = ((($107)) + 28|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     $110 = (invoke_iii($109|0,($__ct|0),($$0$i$i|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 5;
      break;
     } else {
      $__c$0 = $110;
     }
    }
    $113 = (($__indx$0) + 1)|0;
    $__consume$0$off0 = 0;$__ky1$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
    while(1) {
     $114 = ($__ky1$0|0)==($__ke|0);
     if ($114) {
      break;
     }
     $115 = HEAP8[$__st$1>>0]|0;
     $116 = ($115<<24>>24)==(1);
     do {
      if ($116) {
       $117 = HEAP8[$__ky1$0>>0]|0;
       $118 = $117 & 1;
       $119 = ($118<<24>>24)==(0);
       if ($119) {
        $122 = ((($__ky1$0)) + 4|0);
        $124 = $122;
       } else {
        $120 = ((($__ky1$0)) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $124 = $121;
       }
       $123 = (($124) + ($__indx$0<<2)|0);
       $125 = HEAP32[$123>>2]|0;
       if ($__case_sensitive) {
        $__kc$0 = $125;
       } else {
        $126 = HEAP32[$__ct>>2]|0;
        $127 = ((($126)) + 28|0);
        $128 = HEAP32[$127>>2]|0;
        __THREW__ = 0;
        $129 = (invoke_iii($128|0,($__ct|0),($125|0))|0);
        $130 = __THREW__; __THREW__ = 0;
        $131 = $130&1;
        if ($131) {
         label = 4;
         break L20;
        } else {
         $__kc$0 = $129;
        }
       }
       $132 = ($__c$0|0)==($__kc$0|0);
       if (!($132)) {
        HEAP8[$__st$1>>0] = 0;
        $144 = (($__n_might_match$3) + -1)|0;
        $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $144;
        break;
       }
       $133 = HEAP8[$__ky1$0>>0]|0;
       $134 = $133 & 1;
       $135 = ($134<<24>>24)==(0);
       if ($135) {
        $138 = $133&255;
        $139 = $138 >>> 1;
        $140 = $139;
       } else {
        $136 = ((($__ky1$0)) + 4|0);
        $137 = HEAP32[$136>>2]|0;
        $140 = $137;
       }
       $141 = ($140|0)==($113|0);
       if ($141) {
        HEAP8[$__st$1>>0] = 2;
        $142 = (($__n_might_match$3) + -1)|0;
        $143 = (($__n_does_match$3) + 1)|0;
        $__consume$2$off0 = 1;$__n_does_match$5 = $143;$__n_might_match$5 = $142;
       } else {
        $__consume$2$off0 = 1;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
       }
      } else {
       $__consume$2$off0 = $__consume$0$off0;$__n_does_match$5 = $__n_does_match$3;$__n_might_match$5 = $__n_might_match$3;
      }
     } while(0);
     $145 = ((($__ky1$0)) + 12|0);
     $146 = ((($__st$1)) + 1|0);
     $__consume$0$off0 = $__consume$2$off0;$__ky1$0 = $145;$__n_does_match$3 = $__n_does_match$5;$__n_might_match$3 = $__n_might_match$5;$__st$1 = $146;
    }
    if (!($__consume$0$off0)) {
     $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    $147 = HEAP32[$__b>>2]|0;
    $148 = ((($147)) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ((($147)) + 16|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($149|0)==($151|0);
    if ($152) {
     $153 = HEAP32[$147>>2]|0;
     $154 = ((($153)) + 40|0);
     $155 = HEAP32[$154>>2]|0;
     __THREW__ = 0;
     (invoke_ii($155|0,($147|0))|0);
     $156 = __THREW__; __THREW__ = 0;
     $157 = $156&1;
     if ($157) {
      label = 5;
      break;
     }
    } else {
     $158 = ((($149)) + 4|0);
     HEAP32[$148>>2] = $158;
    }
    $159 = (($__n_does_match$3) + ($__n_might_match$3))|0;
    $160 = ($159>>>0)>(1);
    if ($160) {
     $__ky2$0 = $__kb;$__n_does_match$6 = $__n_does_match$3;$__st$2 = $__status$0;
    } else {
     $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
     continue;
    }
    while(1) {
     $161 = ($__ky2$0|0)==($__ke|0);
     if ($161) {
      $__indx$0 = $113;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3;
      continue L20;
     }
     $162 = HEAP8[$__st$2>>0]|0;
     $163 = ($162<<24>>24)==(2);
     if ($163) {
      $164 = HEAP8[$__ky2$0>>0]|0;
      $165 = $164 & 1;
      $166 = ($165<<24>>24)==(0);
      if ($166) {
       $169 = $164&255;
       $170 = $169 >>> 1;
       $171 = $170;
      } else {
       $167 = ((($__ky2$0)) + 4|0);
       $168 = HEAP32[$167>>2]|0;
       $171 = $168;
      }
      $172 = ($171|0)==($113|0);
      if ($172) {
       $__n_does_match$7 = $__n_does_match$6;
      } else {
       HEAP8[$__st$2>>0] = 0;
       $173 = (($__n_does_match$6) + -1)|0;
       $__n_does_match$7 = $173;
      }
     } else {
      $__n_does_match$7 = $__n_does_match$6;
     }
     $174 = ((($__ky2$0)) + 12|0);
     $175 = ((($__st$2)) + 1|0);
     $__ky2$0 = $174;$__n_does_match$6 = $__n_does_match$7;$__st$2 = $175;
    }
   }
   if ((label|0) == 4) {
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$1;$lpad$phi$index = $9;$lpad$phi$index3 = $10;
    break;
   }
   else if ((label|0) == 5) {
    $11 = ___cxa_find_matching_catch_2()|0;
    $12 = tempRet0;
    $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$1;$lpad$phi$index = $11;$lpad$phi$index3 = $12;
    break;
   }
   else if ((label|0) == 35) {
    $67 = ($$lcssa|0)==(0|0);
    do {
     if ($67) {
      $187 = 1;
     } else {
      $68 = ((($$lcssa)) + 12|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ((($$lcssa)) + 16|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($69|0)==($71|0);
      if ($72) {
       $73 = HEAP32[$$lcssa>>2]|0;
       $74 = ((($73)) + 36|0);
       $75 = HEAP32[$74>>2]|0;
       __THREW__ = 0;
       $76 = (invoke_ii($75|0,($$lcssa|0))|0);
       $77 = __THREW__; __THREW__ = 0;
       $78 = $77&1;
       if ($78) {
        $__stat_hold$sroa$0$0$ph$ph = $__stat_hold$sroa$0$1;
        label = 6;
        break L6;
       } else {
        $$0$i$i$i$i6 = $76;
       }
      } else {
       $79 = HEAP32[$69>>2]|0;
       $$0$i$i$i$i6 = $79;
      }
      $80 = ($$0$i$i$i$i6|0)==(-1);
      if ($80) {
       HEAP32[$__b>>2] = 0;
       $187 = 1;
       break;
      } else {
       $$pre$i$i$i8 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i9 = ($$pre$i$i$i8|0)==(0|0);
       $187 = $phitmp$i$i$i9;
       break;
      }
     }
    } while(0);
    $81 = ($$pre$i3$i$i14$lcssa|0)==(0|0);
    do {
     if ($81) {
      label = 82;
     } else {
      $82 = ((($$pre$i3$i$i14$lcssa)) + 12|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($$pre$i3$i$i14$lcssa)) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($83|0)==($85|0);
      if ($86) {
       $87 = HEAP32[$$pre$i3$i$i14$lcssa>>2]|0;
       $88 = ((($87)) + 36|0);
       $89 = HEAP32[$88>>2]|0;
       __THREW__ = 0;
       $90 = (invoke_ii($89|0,($$pre$i3$i$i14$lcssa|0))|0);
       $91 = __THREW__; __THREW__ = 0;
       $92 = $91&1;
       if ($92) {
        $__stat_hold$sroa$0$0$ph$ph = $__stat_hold$sroa$0$1;
        label = 6;
        break L6;
       } else {
        $$0$i$i1$i$i12 = $90;
       }
      } else {
       $93 = HEAP32[$83>>2]|0;
       $$0$i$i1$i$i12 = $93;
      }
      $94 = ($$0$i$i1$i$i12|0)==(-1);
      if ($94) {
       HEAP32[$__e>>2] = 0;
       label = 82;
       break;
      } else {
       if ($187) {
        $$0 = $__kb;$__st$3 = $__status$0;
        break;
       } else {
        label = 84;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 82) {
     if ($187) {
      label = 84;
     } else {
      $$0 = $__kb;$__st$3 = $__status$0;
     }
    }
    if ((label|0) == 84) {
     $176 = HEAP32[$__err>>2]|0;
     $177 = $176 | 2;
     HEAP32[$__err>>2] = $177;
     $$0 = $__kb;$__st$3 = $__status$0;
    }
    while(1) {
     $178 = ($$0|0)==($__ke|0);
     if ($178) {
      label = 88;
      break;
     }
     $179 = HEAP8[$__st$3>>0]|0;
     $180 = ($179<<24>>24)==(2);
     if ($180) {
      $$045 = $$0;
      break;
     }
     $181 = ((($$0)) + 12|0);
     $182 = ((($__st$3)) + 1|0);
     $$0 = $181;$__st$3 = $182;
    }
    if ((label|0) == 88) {
     $183 = HEAP32[$__err>>2]|0;
     $184 = $183 | 4;
     HEAP32[$__err>>2] = $184;
     $$045 = $__ke;
    }
    $185 = ($__stat_hold$sroa$0$1|0)==(0);
    if (!($185)) {
     $186 = $__stat_hold$sroa$0$1;
     _free($186);
    }
    STACKTOP = sp;return ($$045|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $__stat_hold$sroa$0$0 = $__stat_hold$sroa$0$0$ph$ph;$lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 $15 = ($__stat_hold$sroa$0$0|0)==(0);
 if (!($15)) {
  $16 = $__stat_hold$sroa$0$0;
  _free($16);
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$157 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($157) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(460,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 33;
   } else {
    HEAP32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 58;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($159) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(346,($__loc|0),(18852|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(14530|0),((14556)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(346,($__loc|0),(18860|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__thousands_sep>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     invoke_vii($20|0,($agg$result|0),($9|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = ((($__atoms)) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = ((($__atoms)) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = ((($__a)) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__grouping)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $10&255;
   $16 = $15 >>> 1;
   $17 = $12 ? $16 : $14;
   $18 = ($17|0)!=(0);
   $19 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$1 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = ((($20)) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$1 = 0;
    break;
   }
   $27 = ((($__atoms)) + 104|0);
   $$0$i = $__atoms;
   while(1) {
    $28 = ($$0$i|0)==($27|0);
    if ($28) {
     $$0$lcssa$i = $27;
     break;
    }
    $29 = HEAP32[$$0$i>>2]|0;
    $30 = ($29|0)==($__ct|0);
    if ($30) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $31 = ((($$0$i)) + 4|0);
    $$0$i = $31;
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = $34 >> 2;
   $36 = ($34|0)>(92);
   if ($36) {
    $$1 = -1;
   } else {
    switch ($__base|0) {
    case 10: case 8:  {
     $37 = ($35|0)<($__base|0);
     if (!($37)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $38 = ($34|0)<(88);
     if (!($38)) {
      if ($1) {
       $$1 = -1;
       break L6;
      }
      $39 = $0;
      $40 = $__a;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)<(3);
      if (!($42)) {
       $$1 = -1;
       break L6;
      }
      $43 = ((($0)) + -1|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = ($44<<24>>24)==(48);
      if (!($45)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$__dc>>2] = 0;
      $46 = (14530 + ($35)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ((($0)) + 1|0);
      HEAP32[$__a_end>>2] = $48;
      HEAP8[$0>>0] = $47;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $49 = (14530 + ($35)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = ((($0)) + 1|0);
    HEAP32[$__a_end>>2] = $51;
    HEAP8[$0>>0] = $50;
    $52 = HEAP32[$__dc>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$__dc>>2] = $53;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$162 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$162 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$162 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($162) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($162) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $163 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $163;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(462,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = tempRet0;
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 33;
   } else {
    $126 = $__v;
    $127 = $126;
    HEAP32[$127>>2] = $122;
    $128 = (($126) + 4)|0;
    $129 = $128;
    HEAP32[$129>>2] = $123;
    $130 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$130,$__err);
    $131 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($131) {
     $164 = 1;
    } else {
     $132 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($133|0)==($135|0);
     if ($136) {
      $137 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $138 = ((($137)) + 36|0);
      $139 = HEAP32[$138>>2]|0;
      __THREW__ = 0;
      $140 = (invoke_ii($139|0,($$pre$i$i$i$lcssa|0))|0);
      $141 = __THREW__; __THREW__ = 0;
      $142 = $141&1;
      if ($142) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $140;
      }
     } else {
      $143 = HEAP32[$133>>2]|0;
      $$0$i$i$i$i = $143;
     }
     $144 = ($$0$i$i$i$i|0)==(-1);
     if ($144) {
      HEAP32[$__b>>2] = 0;
      $164 = 1;
     } else {
      $164 = 0;
     }
    }
    $145 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 58;
     } else {
      $146 = ((($$pre$i3$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i3$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i3$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i3$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $154;
       }
      } else {
       $157 = HEAP32[$147>>2]|0;
       $$0$i$i1$i$i = $157;
      }
      $158 = ($$0$i$i1$i$i|0)==(-1);
      if ($158) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($164) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($164) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $159 = HEAP32[$__err>>2]|0;
     $160 = $159 | 2;
     HEAP32[$__err>>2] = $160;
    }
    $161 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($161|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$157 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($157) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(463,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 33;
   } else {
    HEAP16[$__v>>1] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 58;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($159) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$157 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($157) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(464,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 33;
   } else {
    HEAP32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 58;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($159) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$157 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($157) {
        $158 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(465,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 33;
   } else {
    HEAP32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 58;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($159) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 switch ($2|0) {
 case 64:  {
  $$0$i = 8;
  break;
 }
 case 8:  {
  $$0$i = 16;
  break;
 }
 case 0:  {
  $$0$i = 0;
  break;
 }
 default: {
  $$0$i = 10;
 }
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $5 = HEAP8[$__buf>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = 10;
 } else {
  $8 = HEAP32[$__buf>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($10|0),0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L13: do {
  if ($12) {
   label = 33;
  } else {
   $13 = HEAP8[$__buf>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($__buf)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($__buf)) + 1|0);
   $19 = $15 ? $18 : $17;
   HEAP32[$__a_end>>2] = $19;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $20 = ((($__buf)) + 4|0);
   $21 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $19;
   L15: while(1) {
    $22 = ($$pre$i$i$i5|0)==(0|0);
    if ($22) {
     $$pre$i$i$i = 0;$162 = 1;
    } else {
     $23 = ((($$pre$i$i$i5)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($$pre$i$i$i5)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($24|0)==($26|0);
     if ($27) {
      $28 = HEAP32[$$pre$i$i$i5>>2]|0;
      $29 = ((($28)) + 36|0);
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3 = $31;
      }
     } else {
      $34 = HEAP32[$24>>2]|0;
      $$0$i$i$i$i3 = $34;
     }
     $35 = ($$0$i$i$i$i3|0)==(-1);
     if ($35) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$162 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i5;$162 = 0;
     }
    }
    $36 = HEAP32[$__e>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 24;
     } else {
      $38 = ((($36)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($36)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = ((($43)) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 32;
        break L15;
       } else {
        $$0$i$i1$i$i9 = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i1$i$i9 = $49;
      }
      $50 = ($$0$i$i1$i$i9|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 24;
       break;
      } else {
       if ($162) {
        $163 = $36;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
        break L15;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     if ($162) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $163 = 0;
     }
    }
    $51 = HEAP32[$__a_end>>2]|0;
    $52 = HEAP8[$__buf>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    $55 = HEAP32[$20>>2]|0;
    $56 = $52&255;
    $57 = $56 >>> 1;
    $58 = $54 ? $57 : $55;
    $59 = (($__a$0) + ($58)|0);
    $60 = ($51|0)==($59|0);
    if ($60) {
     $61 = $58 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($61|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 32;
      break;
     }
     $64 = HEAP8[$__buf>>0]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 32;
      break;
     }
     $72 = HEAP8[$__buf>>0]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     $75 = HEAP32[$16>>2]|0;
     $76 = $74 ? $18 : $75;
     $77 = (($76) + ($58)|0);
     HEAP32[$__a_end>>2] = $77;
     $__a$1 = $76;
    } else {
     $__a$1 = $__a$0;
    }
    $82 = ((($$pre$i$i$i)) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($$pre$i$i$i)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$$pre$i$i$i>>2]|0;
     $88 = ((($87)) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($$pre$i$i$i|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 32;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$__g,$__g_end,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $163;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$82>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$$pre$i$i$i>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($$pre$i$i$i|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = ((($96)) + 4|0);
     HEAP32[$82>>2] = $104;
     $$pre$i$i$i5 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 32) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $lpad$phi$index = $78;$lpad$phi$index2 = $79;
    break;
   }
   $105 = HEAP8[$__grouping>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   $108 = ((($__grouping)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $105&255;
   $111 = $110 >>> 1;
   $112 = $107 ? $111 : $109;
   $113 = ($112|0)==(0);
   if (!($113)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (invoke_iiiii(466,($__a$2|0),($121|0),($__err|0),($$0$i|0))|0);
   $123 = tempRet0;
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 33;
   } else {
    $126 = $__v;
    $127 = $126;
    HEAP32[$127>>2] = $122;
    $128 = (($126) + 4)|0;
    $129 = $128;
    HEAP32[$129>>2] = $123;
    $130 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$130,$__err);
    $131 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($131) {
     $164 = 1;
    } else {
     $132 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($133|0)==($135|0);
     if ($136) {
      $137 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $138 = ((($137)) + 36|0);
      $139 = HEAP32[$138>>2]|0;
      __THREW__ = 0;
      $140 = (invoke_ii($139|0,($$pre$i$i$i$lcssa|0))|0);
      $141 = __THREW__; __THREW__ = 0;
      $142 = $141&1;
      if ($142) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i = $140;
      }
     } else {
      $143 = HEAP32[$133>>2]|0;
      $$0$i$i$i$i = $143;
     }
     $144 = ($$0$i$i$i$i|0)==(-1);
     if ($144) {
      HEAP32[$__b>>2] = 0;
      $164 = 1;
     } else {
      $164 = 0;
     }
    }
    $145 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 58;
     } else {
      $146 = ((($$pre$i3$i$i)) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($$pre$i3$i$i)) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$$pre$i3$i$i>>2]|0;
       $152 = ((($151)) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($$pre$i3$i$i|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 33;
        break L13;
       } else {
        $$0$i$i1$i$i = $154;
       }
      } else {
       $157 = HEAP32[$147>>2]|0;
       $$0$i$i1$i$i = $157;
      }
      $158 = ($$0$i$i1$i$i|0)==(-1);
      if ($158) {
       HEAP32[$__e>>2] = 0;
       label = 58;
       break;
      } else {
       if ($164) {
        break;
       } else {
        label = 60;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 58) {
     if ($164) {
      label = 60;
     }
    }
    if ((label|0) == 60) {
     $159 = HEAP32[$__err>>2]|0;
     $160 = $159 | 2;
     HEAP32[$__err>>2] = $160;
    }
    $161 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($161|0);
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $lpad$phi$index = $80;$lpad$phi$index2 = $81;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 29;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch_2()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(467,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 29;
   } else {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 54;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 29;
        break L8;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($159) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch_2()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 $0 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $0;
 __THREW__ = 0;
 $1 = (invoke_iii(346,($__loc|0),(18852|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($6|0,($1|0),(14530|0),((14562)|0),($__atoms|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __THREW__ = 0;
   $9 = (invoke_iii(346,($__loc|0),(18860|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $12 = HEAP32[$9>>2]|0;
    $13 = ((($12)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_ii($14|0,($9|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     HEAP32[$__decimal_point>>2] = $15;
     $18 = HEAP32[$9>>2]|0;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     $21 = (invoke_ii($20|0,($9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      HEAP32[$__thousands_sep>>2] = $21;
      $24 = HEAP32[$9>>2]|0;
      $25 = ((($24)) + 20|0);
      $26 = HEAP32[$25>>2]|0;
      __THREW__ = 0;
      invoke_vii($26|0,($agg$result|0),($9|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if (!($28)) {
       (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch_2()|0;
 $30 = tempRet0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 L1: do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$2 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = ((($3)) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    $8 = ((($__grouping)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $7 ? $11 : $9;
    $13 = ($12|0)==(0);
    if ($13) {
     $$2 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = ((($14)) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct|0)==($__thousands_sep|0);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    $25 = ((($__grouping)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $22&255;
    $28 = $27 >>> 1;
    $29 = $24 ? $28 : $26;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$2 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$2 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = ((($33)) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $40 = ((($__atoms)) + 128|0);
   $$0$i = $__atoms;
   while(1) {
    $41 = ($$0$i|0)==($40|0);
    if ($41) {
     $$0$lcssa$i = $40;
     break;
    }
    $42 = HEAP32[$$0$i>>2]|0;
    $43 = ($42|0)==($__ct|0);
    if ($43) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $44 = ((($$0$i)) + 4|0);
    $$0$i = $44;
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = $47 >> 2;
   $49 = ($47|0)>(124);
   if ($49) {
    $$2 = -1;
   } else {
    $50 = (14530 + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    switch ($48|0) {
    case 24: case 25:  {
     $52 = HEAP32[$__a_end>>2]|0;
     $53 = ($52|0)==($__a|0);
     if (!($53)) {
      $54 = ((($52)) + -1|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $56 & 95;
      $58 = HEAP8[$__exp>>0]|0;
      $59 = $58&255;
      $60 = $59 & 127;
      $61 = ($57|0)==($60|0);
      if (!($61)) {
       $$2 = -1;
       break L1;
      }
     }
     $62 = ((($52)) + 1|0);
     HEAP32[$__a_end>>2] = $62;
     HEAP8[$52>>0] = $51;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$__exp>>0] = 80;
     break;
    }
    default: {
     $63 = $51&255;
     $64 = $63 & 95;
     $65 = HEAP8[$__exp>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = $64 | 128;
      $69 = $68&255;
      HEAP8[$__exp>>0] = $69;
      $70 = HEAP8[$__in_units>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       HEAP8[$__in_units>>0] = 0;
       $72 = HEAP8[$__grouping>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__grouping)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = ($79|0)==(0);
       if (!($80)) {
        $81 = HEAP32[$__g_end>>2]|0;
        $82 = $81;
        $83 = $__g;
        $84 = (($82) - ($83))|0;
        $85 = ($84|0)<(160);
        if ($85) {
         $86 = HEAP32[$__dc>>2]|0;
         $87 = ((($81)) + 4|0);
         HEAP32[$__g_end>>2] = $87;
         HEAP32[$81>>2] = $86;
        }
       }
      }
     }
    }
    }
    $88 = HEAP32[$__a_end>>2]|0;
    $89 = ((($88)) + 1|0);
    HEAP32[$__a_end>>2] = $89;
    HEAP8[$88>>0] = $51;
    $90 = ($47|0)>(84);
    if ($90) {
     $$2 = 0;
    } else {
     $91 = HEAP32[$__dc>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$__dc>>2] = $92;
     $$2 = 0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 29;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch_2()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(468,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 29;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 54;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 29;
        break L8;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($159) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch_2()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __THREW__ = 0;
 invoke_viii(459,($__buf|0),($7|0),0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L8: do {
  if ($9) {
   label = 29;
  } else {
   $10 = HEAP8[$__buf>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($__buf)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($__buf)) + 1|0);
   $16 = $12 ? $15 : $14;
   HEAP32[$__a_end>>2] = $16;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $17 = ((($__buf)) + 4|0);
   $18 = HEAP32[$__decimal_point>>2]|0;
   $19 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $16;
   L10: while(1) {
    $20 = ($$pre$i$i$i6|0)==(0|0);
    if ($20) {
     $$pre$i$i$i = 0;$157 = 1;
    } else {
     $21 = ((($$pre$i$i$i6)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($$pre$i$i$i6)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)==($24|0);
     if ($25) {
      $26 = HEAP32[$$pre$i$i$i6>>2]|0;
      $27 = ((($26)) + 36|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      $29 = (invoke_ii($28|0,($$pre$i$i$i6|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 28;
       break;
      } else {
       $$0$i$i$i$i4 = $29;
      }
     } else {
      $32 = HEAP32[$22>>2]|0;
      $$0$i$i$i$i4 = $32;
     }
     $33 = ($$0$i$i$i$i4|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $$pre$i$i$i = 0;$157 = 1;
     } else {
      $$pre$i$i$i = $$pre$i$i$i6;$157 = 0;
     }
    }
    $34 = HEAP32[$__e>>2]|0;
    $35 = ($34|0)==(0|0);
    do {
     if ($35) {
      label = 20;
     } else {
      $36 = ((($34)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($34)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($37|0)==($39|0);
      if ($40) {
       $41 = HEAP32[$34>>2]|0;
       $42 = ((($41)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       $44 = (invoke_ii($43|0,($34|0))|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 28;
        break L10;
       } else {
        $$0$i$i1$i$i10 = $44;
       }
      } else {
       $47 = HEAP32[$37>>2]|0;
       $$0$i$i1$i$i10 = $47;
      }
      $48 = ($$0$i$i1$i$i10|0)==(-1);
      if ($48) {
       HEAP32[$__e>>2] = 0;
       label = 20;
       break;
      } else {
       if ($157) {
        $158 = $34;
        break;
       } else {
        $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $34;$__a$2 = $__a$0;
        break L10;
       }
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     if ($157) {
      $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $49 = HEAP32[$__a_end>>2]|0;
    $50 = HEAP8[$__buf>>0]|0;
    $51 = $50 & 1;
    $52 = ($51<<24>>24)==(0);
    $53 = HEAP32[$17>>2]|0;
    $54 = $50&255;
    $55 = $54 >>> 1;
    $56 = $52 ? $55 : $53;
    $57 = (($__a$0) + ($56)|0);
    $58 = ($49|0)==($57|0);
    if ($58) {
     $59 = $56 << 1;
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($59|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 28;
      break;
     }
     $62 = HEAP8[$__buf>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i24 = (($66) + -1)|0;
      $67 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 28;
      break;
     }
     $70 = HEAP8[$__buf>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     $73 = HEAP32[$13>>2]|0;
     $74 = $72 ? $15 : $73;
     $75 = (($74) + ($56)|0);
     HEAP32[$__a_end>>2] = $75;
     $__a$1 = $74;
    } else {
     $__a$1 = $__a$0;
    }
    $80 = ((($$pre$i$i$i)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($$pre$i$i$i)) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$$pre$i$i$i>>2]|0;
     $86 = ((($85)) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($$pre$i$i$i|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 28;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$80>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$$pre$i$i$i>>2]|0;
     $98 = ((($97)) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($$pre$i$i$i|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 28;
      break;
     } else {
      $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = ((($94)) + 4|0);
     HEAP32[$80>>2] = $102;
     $$pre$i$i$i6 = $$pre$i$i$i;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 28) {
    $76 = ___cxa_find_matching_catch_2()|0;
    $77 = tempRet0;
    $lpad$phi$index = $76;$lpad$phi$index2 = $77;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   $106 = ((($__grouping)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $103&255;
   $109 = $108 >>> 1;
   $110 = $105 ? $109 : $107;
   $111 = ($110|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $113 | $111;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = ((($114)) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(469,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 29;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$pre$i$i$i$lcssa|0)==(0|0);
    if ($126) {
     $159 = 1;
    } else {
     $127 = ((($$pre$i$i$i$lcssa)) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($$pre$i$i$i$lcssa)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$pre$i$i$i$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 29;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;
     } else {
      $159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 54;
     } else {
      $141 = ((($$pre$i3$i$i)) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($$pre$i3$i$i)) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = ((($146)) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 29;
        break L8;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 54;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 56;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 54) {
     if ($159) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    $156 = HEAP32[$__b>>2]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return ($156|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $78 = ___cxa_find_matching_catch_2()|0;
  $79 = tempRet0;
  $lpad$phi$index = $78;$lpad$phi$index2 = $79;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this,$__b,$__e,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i9 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i15 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i11 = 0, $$pre$i3$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i5 = 0, $exitcond$i$i = 0, $exitcond$i$i6 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i = 0, $phitmp$i30 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 __THREW__ = 0;
 $3 = (invoke_ii(345,($__iob|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $88 = ___cxa_find_matching_catch_2()|0;
   $89 = tempRet0;
   $$0 = $88;$$01 = $89;
  } else {
   HEAP32[$0>>2] = $3;
   __THREW__ = 0;
   $6 = (invoke_iii(346,($0|0),(18852|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = HEAP32[$6>>2]|0;
    $10 = ((($9)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($11|0,($6|0),(14530|0),((14556)|0),($__atoms|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
     $__i$0$i$i5 = 0;
     while(1) {
      $exitcond$i$i6 = ($__i$0$i$i5|0)==(3);
      if ($exitcond$i$i6) {
       break;
      }
      $14 = (($__buf) + ($__i$0$i$i5<<2)|0);
      HEAP32[$14>>2] = 0;
      $15 = (($__i$0$i$i5) + 1)|0;
      $__i$0$i$i5 = $15;
     }
     $16 = HEAP8[$__buf>>0]|0;
     $17 = $16 & 1;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $21 = 10;
     } else {
      $19 = HEAP32[$__buf>>2]|0;
      $20 = $19 & -2;
      $phitmp$i = (($20) + -1)|0;
      $21 = $phitmp$i;
     }
     __THREW__ = 0;
     invoke_viii(459,($__buf|0),($21|0),0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     L18: do {
      if ($23) {
       label = 37;
      } else {
       $24 = HEAP8[$__buf>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       $27 = ((($__buf)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($__buf)) + 1|0);
       $30 = $26 ? $29 : $28;
       HEAP32[$__a_end>>2] = $30;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $31 = ((($__buf)) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i11 = $$pre;$__a$0 = $30;
       L20: while(1) {
        $32 = ($$pre$i$i$i11|0)==(0|0);
        if ($32) {
         $$pre$i$i$i = 0;$167 = 1;
        } else {
         $33 = ((($$pre$i$i$i11)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($$pre$i$i$i11)) + 16|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34|0)==($36|0);
         if ($37) {
          $38 = HEAP32[$$pre$i$i$i11>>2]|0;
          $39 = ((($38)) + 36|0);
          $40 = HEAP32[$39>>2]|0;
          __THREW__ = 0;
          $41 = (invoke_ii($40|0,($$pre$i$i$i11|0))|0);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           label = 36;
           break;
          } else {
           $$0$i$i$i$i9 = $41;
          }
         } else {
          $44 = HEAP32[$34>>2]|0;
          $$0$i$i$i$i9 = $44;
         }
         $45 = ($$0$i$i$i$i9|0)==(-1);
         if ($45) {
          HEAP32[$__b>>2] = 0;
          $$pre$i$i$i = 0;$167 = 1;
         } else {
          $$pre$i$i$i = $$pre$i$i$i11;$167 = 0;
         }
        }
        $46 = HEAP32[$__e>>2]|0;
        $47 = ($46|0)==(0|0);
        do {
         if ($47) {
          label = 26;
         } else {
          $48 = ((($46)) + 12|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ((($46)) + 16|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = ($49|0)==($51|0);
          if ($52) {
           $53 = HEAP32[$46>>2]|0;
           $54 = ((($53)) + 36|0);
           $55 = HEAP32[$54>>2]|0;
           __THREW__ = 0;
           $56 = (invoke_ii($55|0,($46|0))|0);
           $57 = __THREW__; __THREW__ = 0;
           $58 = $57&1;
           if ($58) {
            label = 36;
            break L20;
           } else {
            $$0$i$i1$i$i15 = $56;
           }
          } else {
           $59 = HEAP32[$49>>2]|0;
           $$0$i$i1$i$i15 = $59;
          }
          $60 = ($$0$i$i1$i$i15|0)==(-1);
          if ($60) {
           HEAP32[$__e>>2] = 0;
           label = 26;
           break;
          } else {
           if ($167) {
            $168 = $46;
            break;
           } else {
            $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $46;$__a$2 = $__a$0;
            break L20;
           }
          }
         }
        } while(0);
        if ((label|0) == 26) {
         label = 0;
         if ($167) {
          $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $168 = 0;
         }
        }
        $61 = HEAP32[$__a_end>>2]|0;
        $62 = HEAP8[$__buf>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        $65 = HEAP32[$31>>2]|0;
        $66 = $62&255;
        $67 = $66 >>> 1;
        $68 = $64 ? $67 : $65;
        $69 = (($__a$0) + ($68)|0);
        $70 = ($61|0)==($69|0);
        if ($70) {
         $71 = $68 << 1;
         __THREW__ = 0;
         invoke_viii(459,($__buf|0),($71|0),0);
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 36;
          break;
         }
         $74 = HEAP8[$__buf>>0]|0;
         $75 = $74 & 1;
         $76 = ($75<<24>>24)==(0);
         if ($76) {
          $79 = 10;
         } else {
          $77 = HEAP32[$__buf>>2]|0;
          $78 = $77 & -2;
          $phitmp$i30 = (($78) + -1)|0;
          $79 = $phitmp$i30;
         }
         __THREW__ = 0;
         invoke_viii(459,($__buf|0),($79|0),0);
         $80 = __THREW__; __THREW__ = 0;
         $81 = $80&1;
         if ($81) {
          label = 36;
          break;
         }
         $82 = HEAP8[$__buf>>0]|0;
         $83 = $82 & 1;
         $84 = ($83<<24>>24)==(0);
         $85 = HEAP32[$27>>2]|0;
         $86 = $84 ? $29 : $85;
         $87 = (($86) + ($68)|0);
         HEAP32[$__a_end>>2] = $87;
         $__a$1 = $86;
        } else {
         $__a$1 = $__a$0;
        }
        $96 = ((($$pre$i$i$i)) + 12|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ((($$pre$i$i$i)) + 16|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ($97|0)==($99|0);
        if ($100) {
         $101 = HEAP32[$$pre$i$i$i>>2]|0;
         $102 = ((($101)) + 36|0);
         $103 = HEAP32[$102>>2]|0;
         __THREW__ = 0;
         $104 = (invoke_ii($103|0,($$pre$i$i$i|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          label = 36;
          break;
         } else {
          $$0$i$i = $104;
         }
        } else {
         $107 = HEAP32[$97>>2]|0;
         $$0$i$i = $107;
        }
        $108 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $109 = ($108|0)==(0);
        if (!($109)) {
         $$pre$i$i$i$lcssa = $$pre$i$i$i;$$pre$i3$i$i = $168;$__a$2 = $__a$1;
         break;
        }
        $110 = HEAP32[$96>>2]|0;
        $111 = HEAP32[$98>>2]|0;
        $112 = ($110|0)==($111|0);
        if ($112) {
         $113 = HEAP32[$$pre$i$i$i>>2]|0;
         $114 = ((($113)) + 40|0);
         $115 = HEAP32[$114>>2]|0;
         __THREW__ = 0;
         (invoke_ii($115|0,($$pre$i$i$i|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 36;
          break;
         } else {
          $$pre$i$i$i11 = $$pre$i$i$i;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $118 = ((($110)) + 4|0);
         HEAP32[$96>>2] = $118;
         $$pre$i$i$i11 = $$pre$i$i$i;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 36) {
        $92 = ___cxa_find_matching_catch_2()|0;
        $93 = tempRet0;
        $lpad$phi$index = $92;$lpad$phi$index2 = $93;
        break;
       }
       $119 = HEAP32[$__a_end>>2]|0;
       $120 = $__a$2;
       $121 = (($119) - ($120))|0;
       __THREW__ = 0;
       invoke_viii(459,($__buf|0),($121|0),0);
       $122 = __THREW__; __THREW__ = 0;
       $123 = $122&1;
       if ($123) {
        label = 37;
       } else {
        $124 = HEAP8[$__buf>>0]|0;
        $125 = HEAP32[$27>>2]|0;
        __THREW__ = 0;
        $126 = (invoke_i(470)|0);
        $127 = __THREW__; __THREW__ = 0;
        $128 = $127&1;
        if ($128) {
         label = 37;
        } else {
         $129 = $124 & 1;
         $130 = ($129<<24>>24)==(0);
         $131 = $130 ? $29 : $125;
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $132 = (invoke_iiiii(471,($131|0),($126|0),(14565|0),($vararg_buffer|0))|0);
         $133 = __THREW__; __THREW__ = 0;
         $134 = $133&1;
         if ($134) {
          label = 37;
         } else {
          $135 = ($132|0)==(1);
          if (!($135)) {
           HEAP32[$__err>>2] = 4;
          }
          $136 = ($$pre$i$i$i$lcssa|0)==(0|0);
          if ($136) {
           $169 = 1;
          } else {
           $137 = ((($$pre$i$i$i$lcssa)) + 12|0);
           $138 = HEAP32[$137>>2]|0;
           $139 = ((($$pre$i$i$i$lcssa)) + 16|0);
           $140 = HEAP32[$139>>2]|0;
           $141 = ($138|0)==($140|0);
           if ($141) {
            $142 = HEAP32[$$pre$i$i$i$lcssa>>2]|0;
            $143 = ((($142)) + 36|0);
            $144 = HEAP32[$143>>2]|0;
            __THREW__ = 0;
            $145 = (invoke_ii($144|0,($$pre$i$i$i$lcssa|0))|0);
            $146 = __THREW__; __THREW__ = 0;
            $147 = $146&1;
            if ($147) {
             label = 37;
             break;
            } else {
             $$0$i$i$i$i = $145;
            }
           } else {
            $148 = HEAP32[$138>>2]|0;
            $$0$i$i$i$i = $148;
           }
           $149 = ($$0$i$i$i$i|0)==(-1);
           if ($149) {
            HEAP32[$__b>>2] = 0;
            $169 = 1;
           } else {
            $169 = 0;
           }
          }
          $150 = ($$pre$i3$i$i|0)==(0|0);
          do {
           if ($150) {
            label = 63;
           } else {
            $151 = ((($$pre$i3$i$i)) + 12|0);
            $152 = HEAP32[$151>>2]|0;
            $153 = ((($$pre$i3$i$i)) + 16|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = ($152|0)==($154|0);
            if ($155) {
             $156 = HEAP32[$$pre$i3$i$i>>2]|0;
             $157 = ((($156)) + 36|0);
             $158 = HEAP32[$157>>2]|0;
             __THREW__ = 0;
             $159 = (invoke_ii($158|0,($$pre$i3$i$i|0))|0);
             $160 = __THREW__; __THREW__ = 0;
             $161 = $160&1;
             if ($161) {
              label = 37;
              break L18;
             } else {
              $$0$i$i1$i$i = $159;
             }
            } else {
             $162 = HEAP32[$152>>2]|0;
             $$0$i$i1$i$i = $162;
            }
            $163 = ($$0$i$i1$i$i|0)==(-1);
            if ($163) {
             HEAP32[$__e>>2] = 0;
             label = 63;
             break;
            } else {
             if ($169) {
              break;
             } else {
              label = 65;
              break;
             }
            }
           }
          } while(0);
          if ((label|0) == 63) {
           if ($169) {
            label = 65;
           }
          }
          if ((label|0) == 65) {
           $164 = HEAP32[$__err>>2]|0;
           $165 = $164 | 2;
           HEAP32[$__err>>2] = $165;
          }
          $166 = HEAP32[$__b>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
          STACKTOP = sp;return ($166|0);
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 37) {
      $94 = ___cxa_find_matching_catch_2()|0;
      $95 = tempRet0;
      $lpad$phi$index = $94;$lpad$phi$index2 = $95;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
   $$0 = $90;$$01 = $91;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$pre = 0, $$pre3 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$sroa$0$0 = 0, $__i$sroa$0$0$ph = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 1023]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(346,($1|0),(18832|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if ($15) {
     $40 = ___cxa_find_matching_catch_2()|0;
     $41 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $41;$$01 = $40;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 1|0);
     $25 = ((($__nm)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__i$sroa$0$0$ph = $23 ? $24 : $26;
     $27 = ((($__nm)) + 4|0);
     $29 = $21;$34 = $26;$__i$sroa$0$0 = $__i$sroa$0$0$ph;
     L11: while(1) {
      $28 = $29 & 1;
      $30 = ($28<<24>>24)==(0);
      $31 = HEAP32[$27>>2]|0;
      $32 = $29&255;
      $33 = $32 >>> 1;
      $35 = $30 ? $24 : $34;
      $36 = $30 ? $33 : $31;
      $37 = (($35) + ($36)|0);
      $38 = ($__i$sroa$0$0|0)==($37|0);
      if ($38) {
       label = 9;
       break;
      }
      $42 = HEAP8[$__i$sroa$0$0>>0]|0;
      $43 = HEAP32[$__s>>2]|0;
      $44 = ($43|0)==(0|0);
      do {
       if (!($44)) {
        $45 = ((($43)) + 24|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ((($43)) + 28|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($46|0)==($48|0);
        if (!($49)) {
         $50 = ((($46)) + 1|0);
         HEAP32[$45>>2] = $50;
         HEAP8[$46>>0] = $42;
         break;
        }
        $51 = HEAP32[$43>>2]|0;
        $52 = ((($51)) + 52|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = $42&255;
        __THREW__ = 0;
        $55 = (invoke_iii($53|0,($43|0),($54|0))|0);
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         label = 18;
         break L11;
        }
        $58 = ($55|0)==(-1);
        if ($58) {
         HEAP32[$__s>>2] = 0;
        }
       }
      } while(0);
      $59 = ((($__i$sroa$0$0)) + 1|0);
      $$pre = HEAP8[$__nm>>0]|0;
      $$pre3 = HEAP32[$25>>2]|0;
      $29 = $$pre;$34 = $$pre3;$__i$sroa$0$0 = $59;
     }
     if ((label|0) == 9) {
      $39 = HEAP32[$__s>>2]|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
      $$sroa$0$0 = $39;
      break L1;
     }
     else if ((label|0) == 18) {
      $60 = ___cxa_find_matching_catch_2()|0;
      $61 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
      $$0 = $61;$$01 = $60;
      break;
     }
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[14773>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[14773+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[14773+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[14773+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[14773+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[14773+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,14779,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(474,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$1$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$01 = $__len;$$1 = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$01 = $__len;$$1 = $5;
 }
 while(1) {
  $6 = HEAP8[$$01>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $$1$lcssa = $$1;
   break;
  }
  $8 = ((($$01)) + 1|0);
  $9 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = $6;
  $$01 = $8;$$1 = $9;
 }
 $10 = $__flags & 74;
 L10: do {
  switch ($10|0) {
  case 64:  {
   HEAP8[$$1$lcssa>>0] = 111;
   break;
  }
  case 8:  {
   $11 = $__flags & 16384;
   $12 = ($11|0)==(0);
   if ($12) {
    HEAP8[$$1$lcssa>>0] = 120;
    break L10;
   } else {
    HEAP8[$$1$lcssa>>0] = 88;
    break L10;
   }
   break;
  }
  default: {
   if ($__signd) {
    HEAP8[$$1$lcssa>>0] = 100;
    break L10;
   } else {
    HEAP8[$$1$lcssa>>0] = 117;
    break L10;
   }
  }
  }
 } while(0);
 return;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(472,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch_3(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__iob)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 L1: do {
  switch ($2|0) {
  case 16:  {
   $3 = HEAP8[$__nb>>0]|0;
   switch ($3<<24>>24) {
   case 43: case 45:  {
    $4 = ((($__nb)) + 1|0);
    $$0 = $4;
    break L1;
    break;
   }
   default: {
   }
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = ((($__nb)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    switch ($11<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $12 = ((($__nb)) + 2|0);
    $$0 = $12;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $__ne;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$01$i$i5 = 0, $$__dg$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0;
 var $__nf$1 = 0, $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18820)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18832)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$126 = $22;
    label = 30;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   L16: do {
    if (!($63)) {
     $$0$i$i = $__ne;$$01$i$i = $__nf$1;
     while(1) {
      $64 = ((($$0$i$i)) + -1|0);
      $65 = ($$01$i$i>>>0)<($64>>>0);
      if (!($65)) {
       break L16;
      }
      $66 = HEAP8[$$01$i$i>>0]|0;
      $67 = HEAP8[$64>>0]|0;
      HEAP8[$$01$i$i>>0] = $67;
      HEAP8[$64>>0] = $66;
      $68 = ((($$01$i$i)) + 1|0);
      $$0$i$i = $64;$$01$i$i = $68;
     }
    }
   } while(0);
   $69 = HEAP32[$1>>2]|0;
   $70 = ((($69)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   __THREW__ = 0;
   $72 = (invoke_ii($71|0,($1|0))|0);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    label = 5;
   } else {
    $75 = ((($__grouping)) + 8|0);
    $76 = ((($__grouping)) + 1|0);
    $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
    while(1) {
     $77 = ($__p$0>>>0)<($__ne>>>0);
     if (!($77)) {
      break;
     }
     $89 = HEAP8[$__grouping>>0]|0;
     $90 = $89 & 1;
     $91 = ($90<<24>>24)==(0);
     $92 = HEAP32[$75>>2]|0;
     $93 = $91 ? $76 : $92;
     $94 = (($93) + ($__dg$0)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = ($95<<24>>24)!=(0);
     $97 = $95 << 24 >> 24;
     $98 = ($__dc$0|0)==($97|0);
     $or$cond = $96 & $98;
     if ($or$cond) {
      $99 = HEAP32[$__oe>>2]|0;
      $100 = ((($99)) + 1|0);
      HEAP32[$__oe>>2] = $100;
      HEAP8[$99>>0] = $72;
      $101 = HEAP8[$__grouping>>0]|0;
      $102 = $101 & 1;
      $103 = ($102<<24>>24)==(0);
      $104 = HEAP32[$8>>2]|0;
      $105 = $101&255;
      $106 = $105 >>> 1;
      $107 = $103 ? $106 : $104;
      $108 = (($107) + -1)|0;
      $109 = ($__dg$0>>>0)<($108>>>0);
      $110 = $109&1;
      $$__dg$0 = (($110) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
     $111 = HEAP8[$__p$0>>0]|0;
     $112 = HEAP32[$0>>2]|0;
     $113 = ((($112)) + 28|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     $115 = (invoke_iii($114|0,($0|0),($111|0))|0);
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 4;
      break;
     }
     $118 = HEAP32[$__oe>>2]|0;
     $119 = ((($118)) + 1|0);
     HEAP32[$__oe>>2] = $119;
     HEAP8[$118>>0] = $115;
     $120 = (($__dc$1) + 1)|0;
     $121 = ((($__p$0)) + 1|0);
     $__dc$0 = $120;$__dg$0 = $__dg$1;$__p$0 = $121;
    }
    if ((label|0) == 4) {
     $23 = ___cxa_find_matching_catch_2()|0;
     $24 = tempRet0;
     $lpad$phi$index = $23;$lpad$phi$index2 = $24;
     break;
    }
    $78 = $__nf$1;
    $79 = $__nb;
    $80 = (($78) - ($79))|0;
    $81 = (($__ob) + ($80)|0);
    $82 = HEAP32[$__oe>>2]|0;
    $83 = ($81|0)==($82|0);
    if ($83) {
     $$pre$phiZ2D = $79;$126 = $81;
     label = 30;
    } else {
     $$0$i$i6 = $82;$$01$i$i5 = $81;
     while(1) {
      $84 = ((($$0$i$i6)) + -1|0);
      $85 = ($$01$i$i5>>>0)<($84>>>0);
      if (!($85)) {
       break;
      }
      $86 = HEAP8[$$01$i$i5>>0]|0;
      $87 = HEAP8[$84>>0]|0;
      HEAP8[$$01$i$i5>>0] = $87;
      HEAP8[$84>>0] = $86;
      $88 = ((($$01$i$i5)) + 1|0);
      $$0$i$i6 = $84;$$01$i$i5 = $88;
     }
     $$pre = HEAP32[$__oe>>2]|0;
     $$pre$phiZ2D = $79;$126 = $$pre;
     label = 30;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 30) {
  $122 = ($__np|0)==($__ne|0);
  $123 = $__np;
  $124 = (($123) - ($$pre$phiZ2D))|0;
  $125 = (($__ob) + ($124)|0);
  $storemerge = $122 ? $126 : $125;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$sroa$0$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$sroa$0$2 = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = ((($__iob)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>($4|0);
   $8 = (($6) - ($4))|0;
   $__ns$0 = $7 ? $8 : 0;
   $9 = $__op;
   $10 = (($9) - ($3))|0;
   $11 = ($10|0)>(0);
   if ($11) {
    $12 = HEAP32[$0>>2]|0;
    $13 = ((($12)) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_iiii[$14 & 1023]($0,$__ob,$10)|0);
    $16 = ($15|0)==($10|0);
    if (!($16)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $17 = ($__ns$0|0)>(0);
   do {
    if ($17) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
     $18 = HEAP8[$__sp>>0]|0;
     $19 = $18 & 1;
     $20 = ($19<<24>>24)==(0);
     $21 = ((($__sp)) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($__sp)) + 1|0);
     $24 = $20 ? $23 : $22;
     $25 = HEAP32[$0>>2]|0;
     $26 = ((($25)) + 48|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     $28 = (invoke_iiii($27|0,($0|0),($24|0),($__ns$0|0))|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      $32 = ___cxa_find_matching_catch_2()|0;
      $33 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
      ___resumeException($32|0);
      // unreachable;
     }
     $31 = ($28|0)==($__ns$0|0);
     if ($31) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $34 = (($2) - ($9))|0;
   $35 = ($34|0)>(0);
   if ($35) {
    $36 = HEAP32[$0>>2]|0;
    $37 = ((($36)) + 48|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiii[$38 & 1023]($0,$__op,$34)|0);
    $40 = ($39|0)==($34|0);
    if (!($40)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$5>>2] = 0;
   $$sroa$0$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 78|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,14781,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(474,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[14773>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[14773+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[14773+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[14773+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[14773+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[14773+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,14779,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(474,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,14781,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(474,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$117 = 0, $$1316 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre10$pre = 0, $$pre1012 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__obh$sroa$0$1 = 0, $__obh$sroa$0$2 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 84|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 146|0;
 $__nb = sp + 80|0;
 $__o = sp + 88|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,21788,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(470)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(475,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(470)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = ((($__iob)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $30;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $31 = (invoke_iiiii(475,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $__nc$1 = $31;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $34 = HEAP32[$__nb>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $36 = $34;
     $$pre1012 = $34;$__nbh$sroa$0$0 = $36;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(458);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $39 = $$pre;
     $$pre1012 = $39;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   $$117 = $24;$$1316 = $25;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $$pre1012 = $$pre9;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $40 = (($$pre1012) + ($__nc$2)|0);
  $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre1012,$40,$__iob)|0);
  $42 = ($$pre1012|0)==($__nar|0);
  do {
   if ($42) {
    $54 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$1 = 0;
    label = 22;
   } else {
    $43 = $__nc$2 << 1;
    $44 = (_malloc($43)|0);
    $45 = ($44|0)==(0|0);
    if ($45) {
     __THREW__ = 0;
     invoke_v(458);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $__obh$sroa$0$0 = 0;
      label = 20;
      break;
     }
     $$pre10$pre = HEAP32[$__nb>>2]|0;
     $$pre10 = $$pre10$pre;
    } else {
     $$pre10 = $$pre1012;
    }
    $50 = $44;
    $54 = $$pre10;$__ob$0 = $44;$__obh$sroa$0$1 = $50;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $51 = (invoke_ii(345,($__iob|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if ($53) {
     $__obh$sroa$0$0 = $__obh$sroa$0$1;
     label = 20;
    } else {
     HEAP32[$0>>2] = $51;
     __THREW__ = 0;
     invoke_viiiiiii(476,($54|0),($41|0),($40|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if ($56) {
      $67 = ___cxa_find_matching_catch_2()|0;
      $68 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($51)|0);
      $$0 = $67;$$02 = $68;$__obh$sroa$0$2 = $__obh$sroa$0$1;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($51)|0);
     $57 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $57;
     $58 = HEAP32[$__op>>2]|0;
     $59 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $60 = (invoke_iiiiiii(477,($$byval_copy|0),($__ob$0|0),($58|0),($59|0),($__iob|0),($__fl|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      $__obh$sroa$0$0 = $__obh$sroa$0$1;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $60;
      $63 = ($__obh$sroa$0$1|0)==(0);
      if (!($63)) {
       $64 = $__obh$sroa$0$1;
       _free($64);
      }
      $65 = ($__nbh$sroa$0$0|0)==(0);
      if (!($65)) {
       $66 = $__nbh$sroa$0$0;
       _free($66);
      }
      STACKTOP = sp;return ($60|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $48 = ___cxa_find_matching_catch_2()|0;
   $49 = tempRet0;
   $$0 = $48;$$02 = $49;$__obh$sroa$0$2 = $__obh$sroa$0$0;
  }
  $69 = ($__obh$sroa$0$2|0)==(0);
  if (!($69)) {
   $70 = $__obh$sroa$0$2;
   _free($70);
  }
  $71 = ($__nbh$sroa$0$0|0)==(0);
  if ($71) {
   $$117 = $$0;$$1316 = $$02;
  } else {
   $72 = $__nbh$sroa$0$0;
   _free($72);
   $$117 = $$0;$$1316 = $$02;
  }
 }
 ___resumeException($$117|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$2$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = ((($__fmtp)) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = ((($$1)) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $$01 = $__len;$$2 = $$2$ph;
 while(1) {
  $11 = HEAP8[$$01>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   $$2$lcssa = $$2;
   break;
  }
  $13 = ((($$01)) + 1|0);
  $14 = ((($$2)) + 1|0);
  HEAP8[$$2>>0] = $11;
  $$01 = $13;$$2 = $14;
 }
 L14: do {
  switch ($6|0) {
  case 4:  {
   $15 = $7 & 1;
   $16 = ($15|0)==(0);
   if ($16) {
    HEAP8[$$2$lcssa>>0] = 102;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break L14;
   }
   break;
  }
  case 256:  {
   $17 = $7 & 1;
   $18 = ($17|0)==(0);
   if ($18) {
    HEAP8[$$2$lcssa>>0] = 101;
    break L14;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break L14;
   }
   break;
  }
  default: {
   $19 = $7 & 1;
   $20 = ($19|0)!=(0);
   if ($8) {
    if ($20) {
     HEAP8[$$2$lcssa>>0] = 65;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break L14;
    }
   } else {
    if ($20) {
     HEAP8[$$2$lcssa>>0] = 71;
     break L14;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break L14;
    }
   }
  }
  }
 } while(0);
 return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale($__l)|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(478,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(472,($0|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch_3(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
  }
  ___resumeException($9|0);
  // unreachable;
 } else {
  $4 = ($0|0)==(0|0);
  if (!($4)) {
   __THREW__ = 0;
   (invoke_ii(472,($0|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch_3(0|0)|0;
    $8 = tempRet0;
    ___clang_call_terminate($7);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$01$i$i5 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0;
 var $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa46 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18820)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18832)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $29 = HEAP8[$__nf$0>>0]|0;
     $30 = ($29<<24>>24)==(48);
     if ($30) {
      $31 = ((($__nf$0)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      switch ($32<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__ns$1 = $__nf$0;
       label = 21;
       break L6;
      }
      }
      $33 = HEAP32[$0>>2]|0;
      $34 = ((($33)) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($0|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       label = 8;
       break L4;
      }
      $39 = HEAP32[$__oe>>2]|0;
      $40 = ((($39)) + 1|0);
      HEAP32[$__oe>>2] = $40;
      HEAP8[$39>>0] = $36;
      $41 = ((($__nf$0)) + 2|0);
      $42 = HEAP8[$31>>0]|0;
      $43 = HEAP32[$0>>2]|0;
      $44 = ((($43)) + 28|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_iii($45|0,($0|0),($42|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 8;
       break L4;
      }
      $49 = HEAP32[$__oe>>2]|0;
      $50 = ((($49)) + 1|0);
      HEAP32[$__oe>>2] = $50;
      HEAP8[$49>>0] = $46;
      $__ns$0 = $41;
      while(1) {
       $51 = ($__ns$0>>>0)<($__ne>>>0);
       if (!($51)) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $52 = HEAP8[$__ns$0>>0]|0;
       __THREW__ = 0;
       $53 = (invoke_i(470)|0);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if ($55) {
        break;
       }
       $56 = $52 << 24 >> 24;
       __THREW__ = 0;
       $57 = (invoke_iii(479,($56|0),($53|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = ($57|0)==(0);
       if ($60) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $61 = ((($__ns$0)) + 1|0);
       $__ns$0 = $61;
      }
      $21 = ___cxa_find_matching_catch_2()|0;
      $22 = tempRet0;
      $lpad$phi$index = $21;$lpad$phi$index5 = $22;
      break L4;
     } else {
      $__ns$1 = $__nf$0;
      label = 21;
     }
    } else {
     $__ns$1 = $__nf$0;
     label = 21;
    }
   } while(0);
   L19: do {
    if ((label|0) == 21) {
     while(1) {
      label = 0;
      $62 = ($__ns$1>>>0)<($__ne>>>0);
      if (!($62)) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $63 = HEAP8[$__ns$1>>0]|0;
      __THREW__ = 0;
      $64 = (invoke_i(470)|0);
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       break;
      }
      $67 = $63 << 24 >> 24;
      __THREW__ = 0;
      $68 = (invoke_iii(480,($67|0),($64|0))|0);
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       break;
      }
      $71 = ($68|0)==(0);
      if ($71) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $72 = ((($__ns$1)) + 1|0);
      $__ns$1 = $72;
      label = 21;
     }
     $19 = ___cxa_find_matching_catch_2()|0;
     $20 = tempRet0;
     $lpad$phi$index = $19;$lpad$phi$index5 = $20;
     break L4;
    }
   } while(0);
   $73 = HEAP8[$__grouping>>0]|0;
   $74 = $73 & 1;
   $75 = ($74<<24>>24)==(0);
   $76 = ((($__grouping)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $73&255;
   $79 = $78 >>> 1;
   $80 = $75 ? $79 : $77;
   $81 = ($80|0)==(0);
   L28: do {
    if ($81) {
     $82 = HEAP32[$__oe>>2]|0;
     $83 = HEAP32[$0>>2]|0;
     $84 = ((($83)) + 32|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($85|0,($0|0),($__nf$1|0),($__ns$2|0),($82|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 8;
      break L4;
     }
     $88 = $__ns$2;
     $89 = $__nf$1;
     $90 = (($88) - ($89))|0;
     $91 = HEAP32[$__oe>>2]|0;
     $92 = (($91) + ($90)|0);
     HEAP32[$__oe>>2] = $92;
     $$pre$phiZ2D = $0;
    } else {
     $93 = ($__nf$1|0)==($__ns$2|0);
     L32: do {
      if (!($93)) {
       $$0$i$i = $__ns$2;$$01$i$i = $__nf$1;
       while(1) {
        $94 = ((($$0$i$i)) + -1|0);
        $95 = ($$01$i$i>>>0)<($94>>>0);
        if (!($95)) {
         break L32;
        }
        $96 = HEAP8[$$01$i$i>>0]|0;
        $97 = HEAP8[$94>>0]|0;
        HEAP8[$$01$i$i>>0] = $97;
        HEAP8[$94>>0] = $96;
        $98 = ((($$01$i$i)) + 1|0);
        $$0$i$i = $94;$$01$i$i = $98;
       }
      }
     } while(0);
     $99 = HEAP32[$1>>2]|0;
     $100 = ((($99)) + 16|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($1|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 8;
      break L4;
     }
     $105 = ((($__grouping)) + 8|0);
     $106 = ((($__grouping)) + 1|0);
     $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
     while(1) {
      $107 = ($__p$0>>>0)<($__ns$2>>>0);
      if (!($107)) {
       break;
      }
      $119 = HEAP8[$__grouping>>0]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      $122 = HEAP32[$105>>2]|0;
      $123 = $121 ? $106 : $122;
      $124 = (($123) + ($__dg$0)|0);
      $125 = HEAP8[$124>>0]|0;
      $126 = ($125<<24>>24)>(0);
      $127 = $125 << 24 >> 24;
      $128 = ($__dc$0|0)==($127|0);
      $or$cond = $126 & $128;
      if ($or$cond) {
       $129 = HEAP32[$__oe>>2]|0;
       $130 = ((($129)) + 1|0);
       HEAP32[$__oe>>2] = $130;
       HEAP8[$129>>0] = $102;
       $131 = HEAP8[$__grouping>>0]|0;
       $132 = $131 & 1;
       $133 = ($132<<24>>24)==(0);
       $134 = HEAP32[$76>>2]|0;
       $135 = $131&255;
       $136 = $135 >>> 1;
       $137 = $133 ? $136 : $134;
       $138 = (($137) + -1)|0;
       $139 = ($__dg$0>>>0)<($138>>>0);
       $140 = $139&1;
       $$__dg$0 = (($140) + ($__dg$0))|0;
       $__dc$1 = 0;$__dg$1 = $$__dg$0;
      } else {
       $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
      }
      $141 = HEAP8[$__p$0>>0]|0;
      $142 = HEAP32[$0>>2]|0;
      $143 = ((($142)) + 28|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_iii($144|0,($0|0),($141|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 5;
       break;
      }
      $148 = HEAP32[$__oe>>2]|0;
      $149 = ((($148)) + 1|0);
      HEAP32[$__oe>>2] = $149;
      HEAP8[$148>>0] = $145;
      $150 = (($__dc$1) + 1)|0;
      $151 = ((($__p$0)) + 1|0);
      $__dc$0 = $150;$__dg$0 = $__dg$1;$__p$0 = $151;
     }
     if ((label|0) == 5) {
      $17 = ___cxa_find_matching_catch_2()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
     $108 = $__nf$1;
     $109 = $__nb;
     $110 = (($108) - ($109))|0;
     $111 = (($__ob) + ($110)|0);
     $112 = HEAP32[$__oe>>2]|0;
     $113 = ($111|0)==($112|0);
     if ($113) {
      $$pre$phiZ2D = $0;
     } else {
      $$0$i$i6 = $112;$$01$i$i5 = $111;
      while(1) {
       $114 = ((($$0$i$i6)) + -1|0);
       $115 = ($$01$i$i5>>>0)<($114>>>0);
       if (!($115)) {
        $$pre$phiZ2D = $0;
        break L28;
       }
       $116 = HEAP8[$$01$i$i5>>0]|0;
       $117 = HEAP8[$114>>0]|0;
       HEAP8[$$01$i$i5>>0] = $117;
       HEAP8[$114>>0] = $116;
       $118 = ((($$01$i$i5)) + 1|0);
       $$0$i$i6 = $114;$$01$i$i5 = $118;
      }
     }
    }
   } while(0);
   $__nf$2 = $__ns$2;
   while(1) {
    $152 = ($__nf$2>>>0)<($__ne>>>0);
    if (!($152)) {
     $__nf$3 = $__nf$2;
     break;
    }
    $153 = HEAP8[$__nf$2>>0]|0;
    $154 = ($153<<24>>24)==(46);
    if ($154) {
     $__nf$2$lcssa46 = $__nf$2;
     label = 45;
     break;
    }
    $164 = HEAP32[$$pre$phiZ2D>>2]|0;
    $165 = ((($164)) + 28|0);
    $166 = HEAP32[$165>>2]|0;
    __THREW__ = 0;
    $167 = (invoke_iii($166|0,($0|0),($153|0))|0);
    $168 = __THREW__; __THREW__ = 0;
    $169 = $168&1;
    if ($169) {
     label = 4;
     break;
    }
    $170 = HEAP32[$__oe>>2]|0;
    $171 = ((($170)) + 1|0);
    HEAP32[$__oe>>2] = $171;
    HEAP8[$170>>0] = $167;
    $172 = ((($__nf$2)) + 1|0);
    $__nf$2 = $172;
   }
   if ((label|0) == 4) {
    $15 = ___cxa_find_matching_catch_2()|0;
    $16 = tempRet0;
    $lpad$phi$index = $15;$lpad$phi$index5 = $16;
    break;
   }
   if ((label|0) == 45) {
    $155 = HEAP32[$1>>2]|0;
    $156 = ((($155)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    __THREW__ = 0;
    $158 = (invoke_ii($157|0,($1|0))|0);
    $159 = __THREW__; __THREW__ = 0;
    $160 = $159&1;
    if ($160) {
     label = 8;
     break;
    }
    $161 = HEAP32[$__oe>>2]|0;
    $162 = ((($161)) + 1|0);
    HEAP32[$__oe>>2] = $162;
    HEAP8[$161>>0] = $158;
    $163 = ((($__nf$2$lcssa46)) + 1|0);
    $__nf$3 = $163;
   }
   $173 = HEAP32[$__oe>>2]|0;
   $174 = HEAP32[$0>>2]|0;
   $175 = ((($174)) + 32|0);
   $176 = HEAP32[$175>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($176|0,($0|0),($__nf$3|0),($__ne|0),($173|0))|0);
   $177 = __THREW__; __THREW__ = 0;
   $178 = $177&1;
   if ($178) {
    label = 8;
   } else {
    $179 = $__nf$3;
    $180 = (($25) - ($179))|0;
    $181 = HEAP32[$__oe>>2]|0;
    $182 = (($181) + ($180)|0);
    HEAP32[$__oe>>2] = $182;
    $183 = ($__np|0)==($__ne|0);
    $184 = $__np;
    $185 = $__nb;
    $186 = (($184) - ($185))|0;
    $187 = (($__ob) + ($186)|0);
    $storemerge = $183 ? $182 : $187;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$117 = 0, $$1316 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre10$pre = 0, $$pre1012 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__obh$sroa$0$1 = 0, $__obh$sroa$0$2 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 138|0;
 $__nb = sp + 72|0;
 $__o = sp + 80|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,14784,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(470)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(475,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(470)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $29 = (invoke_iiiii(475,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      $__nc$1 = $29;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $32 = HEAP32[$__nb>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $34 = $32;
     $$pre1012 = $32;$__nbh$sroa$0$0 = $34;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(458);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $37 = $$pre;
     $$pre1012 = $37;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   $$117 = $24;$$1316 = $25;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $$pre1012 = $$pre9;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $38 = (($$pre1012) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre1012,$38,$__iob)|0);
  $40 = ($$pre1012|0)==($__nar|0);
  do {
   if ($40) {
    $52 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$1 = 0;
    label = 22;
   } else {
    $41 = $__nc$2 << 1;
    $42 = (_malloc($41)|0);
    $43 = ($42|0)==(0|0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(458);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $__obh$sroa$0$0 = 0;
      label = 20;
      break;
     }
     $$pre10$pre = HEAP32[$__nb>>2]|0;
     $$pre10 = $$pre10$pre;
    } else {
     $$pre10 = $$pre1012;
    }
    $48 = $42;
    $52 = $$pre10;$__ob$0 = $42;$__obh$sroa$0$1 = $48;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $49 = (invoke_ii(345,($__iob|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $__obh$sroa$0$0 = $__obh$sroa$0$1;
     label = 20;
    } else {
     HEAP32[$0>>2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(476,($52|0),($39|0),($38|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $65 = ___cxa_find_matching_catch_2()|0;
      $66 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
      $$0 = $65;$$02 = $66;$__obh$sroa$0$2 = $__obh$sroa$0$1;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $55 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$__op>>2]|0;
     $57 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $58 = (invoke_iiiiiii(477,($$byval_copy|0),($__ob$0|0),($56|0),($57|0),($__iob|0),($__fl|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $__obh$sroa$0$0 = $__obh$sroa$0$1;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $58;
      $61 = ($__obh$sroa$0$1|0)==(0);
      if (!($61)) {
       $62 = $__obh$sroa$0$1;
       _free($62);
      }
      $63 = ($__nbh$sroa$0$0|0)==(0);
      if (!($63)) {
       $64 = $__nbh$sroa$0$0;
       _free($64);
      }
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   $$0 = $46;$$02 = $47;$__obh$sroa$0$2 = $__obh$sroa$0$0;
  }
  $67 = ($__obh$sroa$0$2|0)==(0);
  if (!($67)) {
   $68 = $__obh$sroa$0$2;
   _free($68);
  }
  $69 = ($__nbh$sroa$0$0|0)==(0);
  if ($69) {
   $$117 = $$0;$$1316 = $$02;
  } else {
   $70 = $__nbh$sroa$0$0;
   _free($70);
   $$117 = $$0;$$1316 = $$02;
  }
 }
 ___resumeException($$117|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 76|0;
 $__nar = sp + 56|0;
 $__o = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[14786>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[14786+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[14786+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[14786+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[14786+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[14786+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(346,($0|0),(18820|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$pre = 0, $$pre3 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$sroa$0$0 = 0, $__i$sroa$0$0$ph = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = ((($__iob)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $11 = (FUNCTION_TABLE_iiiiii[$8 & 1023]($this,$$byval_copy,$__iob,$__fl,$10)|0);
   $$sroa$0$0 = $11;
  } else {
   $12 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
   HEAP32[$1>>2] = $12;
   __THREW__ = 0;
   $13 = (invoke_iii(346,($1|0),(18860|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if ($15) {
     $39 = ___cxa_find_matching_catch_2()|0;
     $40 = tempRet0;
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $$0 = $40;$$01 = $39;
    } else {
     (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
     $16 = HEAP32[$13>>2]|0;
     if ($__v) {
      $17 = ((($16)) + 24|0);
      $18 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$18 & 1023]($__nm,$13);
     } else {
      $19 = ((($16)) + 28|0);
      $20 = HEAP32[$19>>2]|0;
      FUNCTION_TABLE_vii[$20 & 1023]($__nm,$13);
     }
     $21 = HEAP8[$__nm>>0]|0;
     $22 = $21 & 1;
     $23 = ($22<<24>>24)==(0);
     $24 = ((($__nm)) + 4|0);
     $25 = ((($__nm)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__i$sroa$0$0$ph = $23 ? $24 : $26;
     $28 = $21;$33 = $26;$__i$sroa$0$0 = $__i$sroa$0$0$ph;
     while(1) {
      $27 = $28 & 1;
      $29 = ($27<<24>>24)==(0);
      $30 = HEAP32[$24>>2]|0;
      $31 = $28&255;
      $32 = $31 >>> 1;
      $34 = $29 ? $24 : $33;
      $35 = $29 ? $32 : $30;
      $36 = (($34) + ($35<<2)|0);
      $37 = ($__i$sroa$0$0|0)==($36|0);
      if ($37) {
       label = 9;
       break;
      }
      $41 = HEAP32[$__i$sroa$0$0>>2]|0;
      $42 = HEAP32[$__s>>2]|0;
      $43 = ($42|0)==(0|0);
      if (!($43)) {
       $44 = ((($42)) + 24|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ((($42)) + 28|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($45|0)==($47|0);
       if ($48) {
        $49 = HEAP32[$42>>2]|0;
        $50 = ((($49)) + 52|0);
        $51 = HEAP32[$50>>2]|0;
        __THREW__ = 0;
        $52 = (invoke_iii($51|0,($42|0),($41|0))|0);
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if ($54) {
         label = 18;
         break;
        } else {
         $$0$i$i = $52;
        }
       } else {
        $55 = ((($45)) + 4|0);
        HEAP32[$44>>2] = $55;
        HEAP32[$45>>2] = $41;
        $$0$i$i = $41;
       }
       $56 = ($$0$i$i|0)==(-1);
       if ($56) {
        HEAP32[$__s>>2] = 0;
       }
      }
      $57 = ((($__i$sroa$0$0)) + 4|0);
      $$pre = HEAP8[$__nm>>0]|0;
      $$pre3 = HEAP32[$25>>2]|0;
      $28 = $$pre;$33 = $$pre3;$__i$sroa$0$0 = $57;
     }
     if ((label|0) == 9) {
      $38 = HEAP32[$__s>>2]|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
      $$sroa$0$0 = $38;
      break L1;
     }
     else if ((label|0) == 18) {
      $58 = ___cxa_find_matching_catch_2()|0;
      $59 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
      $$0 = $59;$$01 = $58;
      break;
     }
    }
   } while(0);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[14773>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[14773+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[14773+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[14773+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[14773+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[14773+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,14779,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(481,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$01$i$i5 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0;
 var $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18852)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18860)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__grouping)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5&255;
 $11 = $10 >>> 1;
 $12 = $7 ? $11 : $9;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 5;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $$pre$phiZ2D = $20;$126 = $22;
    label = 29;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   switch ($27<<24>>24) {
   case 43: case 45:  {
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 5;
     break L1;
    }
    $34 = ((($__nb)) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = ((($35)) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
    break;
   }
   default: {
    $__nf$0 = $__nb;
   }
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   L9: do {
    if ($40) {
     $41 = HEAP8[$__nf$0>>0]|0;
     $42 = ($41<<24>>24)==(48);
     if ($42) {
      $43 = ((($__nf$0)) + 1|0);
      $44 = HEAP8[$43>>0]|0;
      switch ($44<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__nf$1 = $__nf$0;
       break L9;
      }
      }
      $45 = HEAP32[$0>>2]|0;
      $46 = ((($45)) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 5;
       break L1;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = ((($51)) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 5;
       break L1;
      }
      $60 = ((($__nf$0)) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = ((($61)) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $63 = ($__nf$1|0)==($__ne|0);
   L16: do {
    if (!($63)) {
     $$0$i$i = $__ne;$$01$i$i = $__nf$1;
     while(1) {
      $64 = ((($$0$i$i)) + -1|0);
      $65 = ($$01$i$i>>>0)<($64>>>0);
      if (!($65)) {
       break L16;
      }
      $66 = HEAP8[$$01$i$i>>0]|0;
      $67 = HEAP8[$64>>0]|0;
      HEAP8[$$01$i$i>>0] = $67;
      HEAP8[$64>>0] = $66;
      $68 = ((($$01$i$i)) + 1|0);
      $$0$i$i = $64;$$01$i$i = $68;
     }
    }
   } while(0);
   $69 = HEAP32[$1>>2]|0;
   $70 = ((($69)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   __THREW__ = 0;
   $72 = (invoke_ii($71|0,($1|0))|0);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    label = 5;
   } else {
    $75 = ((($__grouping)) + 8|0);
    $76 = ((($__grouping)) + 1|0);
    $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
    while(1) {
     $77 = ($__p$0>>>0)<($__ne>>>0);
     if (!($77)) {
      break;
     }
     $89 = HEAP8[$__grouping>>0]|0;
     $90 = $89 & 1;
     $91 = ($90<<24>>24)==(0);
     $92 = HEAP32[$75>>2]|0;
     $93 = $91 ? $76 : $92;
     $94 = (($93) + ($__dg$0)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = ($95<<24>>24)!=(0);
     $97 = $95 << 24 >> 24;
     $98 = ($__dc$0|0)==($97|0);
     $or$cond = $96 & $98;
     if ($or$cond) {
      $99 = HEAP32[$__oe>>2]|0;
      $100 = ((($99)) + 4|0);
      HEAP32[$__oe>>2] = $100;
      HEAP32[$99>>2] = $72;
      $101 = HEAP8[$__grouping>>0]|0;
      $102 = $101 & 1;
      $103 = ($102<<24>>24)==(0);
      $104 = HEAP32[$8>>2]|0;
      $105 = $101&255;
      $106 = $105 >>> 1;
      $107 = $103 ? $106 : $104;
      $108 = (($107) + -1)|0;
      $109 = ($__dg$0>>>0)<($108>>>0);
      $110 = $109&1;
      $$__dg$0 = (($110) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
     $111 = HEAP8[$__p$0>>0]|0;
     $112 = HEAP32[$0>>2]|0;
     $113 = ((($112)) + 44|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     $115 = (invoke_iii($114|0,($0|0),($111|0))|0);
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 4;
      break;
     }
     $118 = HEAP32[$__oe>>2]|0;
     $119 = ((($118)) + 4|0);
     HEAP32[$__oe>>2] = $119;
     HEAP32[$118>>2] = $115;
     $120 = (($__dc$1) + 1)|0;
     $121 = ((($__p$0)) + 1|0);
     $__dc$0 = $120;$__dg$0 = $__dg$1;$__p$0 = $121;
    }
    if ((label|0) == 4) {
     $23 = ___cxa_find_matching_catch_2()|0;
     $24 = tempRet0;
     $lpad$phi$index = $23;$lpad$phi$index2 = $24;
     break;
    }
    $78 = $__nf$1;
    $79 = $__nb;
    $80 = (($78) - ($79))|0;
    $81 = (($__ob) + ($80<<2)|0);
    $82 = HEAP32[$__oe>>2]|0;
    $83 = ($81|0)==($82|0);
    if ($83) {
     $$pre$phiZ2D = $79;$126 = $81;
     label = 29;
    } else {
     $$0$i$i6 = $82;$$01$i$i5 = $81;
     while(1) {
      $84 = ((($$0$i$i6)) + -4|0);
      $85 = ($$01$i$i5>>>0)<($84>>>0);
      if (!($85)) {
       $$pre$phiZ2D = $79;$126 = $82;
       label = 29;
       break L1;
      }
      $86 = HEAP32[$$01$i$i5>>2]|0;
      $87 = HEAP32[$84>>2]|0;
      HEAP32[$$01$i$i5>>2] = $87;
      HEAP32[$84>>2] = $86;
      $88 = ((($$01$i$i5)) + 4|0);
      $$0$i$i6 = $84;$$01$i$i5 = $88;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 29) {
  $122 = ($__np|0)==($__ne|0);
  $123 = $__np;
  $124 = (($123) - ($$pre$phiZ2D))|0;
  $125 = (($__ob) + ($124<<2)|0);
  $storemerge = $122 ? $126 : $125;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$sroa$0$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$sroa$0$2 = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = $4 >> 2;
   $6 = ((($__iob)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>($5|0);
   $9 = (($7) - ($5))|0;
   $__ns$0 = $8 ? $9 : 0;
   $10 = $__op;
   $11 = (($10) - ($3))|0;
   $12 = $11 >> 2;
   $13 = ($11|0)>(0);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = ((($14)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
    $18 = ($17|0)==($12|0);
    if (!($18)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $19 = ($__ns$0|0)>(0);
   do {
    if ($19) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
     $20 = HEAP8[$__sp>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     $23 = ((($__sp)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($__sp)) + 4|0);
     $26 = $22 ? $25 : $24;
     $27 = HEAP32[$0>>2]|0;
     $28 = ((($27)) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_iiii($29|0,($0|0),($26|0),($__ns$0|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      $34 = ___cxa_find_matching_catch_2()|0;
      $35 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      ___resumeException($34|0);
      // unreachable;
     }
     $33 = ($30|0)==($__ns$0|0);
     if ($33) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $36 = (($2) - ($10))|0;
   $37 = $36 >> 2;
   $38 = ($36|0)>(0);
   if ($38) {
    $39 = HEAP32[$0>>2]|0;
    $40 = ((($39)) + 48|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
    $43 = ($42|0)==($37|0);
    if (!($43)) {
     HEAP32[$__s>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$6>>2] = 0;
   $$sroa$0$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 196|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 200|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,14781,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(481,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[14773>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[14773+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[14773+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[14773+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[14773+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[14773+5>>0]|0;
 $2 = ((($__fmt)) + 1|0);
 $3 = ((($__iob)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,14779,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 $9 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $9;
 __THREW__ = 0;
 invoke_viiiiiii(481,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  ___resumeException($16|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $15 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$13,$14,$__iob,$__fl)|0);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this,$__s,$__iob,$__fl,$0,$1) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 208|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($__fmt)) + 1|0);
 $9 = ((($__iob)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,14781,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 $19 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$2>>2] = $19;
 __THREW__ = 0;
 invoke_viiiiiii(481,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  ___resumeException($26|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
  $25 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$23,$24,$__iob,$__fl)|0);
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$115 = 0, $$1314 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $$pre8$pre = 0, $$pre810 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__obh$sroa$0$1 = 0, $__obh$sroa$0$2 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 312|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 308|0;
 $__o = sp + 80|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,21788,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(470)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(475,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(470)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = ((($__iob)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $30;
     $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
     HEAPF64[$vararg_ptr12>>3] = $__v;
     $31 = (invoke_iiiii(475,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $__nc$1 = $31;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $34 = HEAP32[$__nb>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $36 = $34;
     $$pre810 = $34;$__nbh$sroa$0$0 = $36;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(458);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $39 = $$pre;
     $$pre810 = $39;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   $$115 = $24;$$1314 = $25;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $$pre810 = $$pre7;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $40 = (($$pre810) + ($__nc$2)|0);
  $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre810,$40,$__iob)|0);
  $42 = ($$pre810|0)==($__nar|0);
  do {
   if ($42) {
    $54 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$1 = 0;
    label = 22;
   } else {
    $43 = $__nc$2 << 3;
    $44 = (_malloc($43)|0);
    $45 = ($44|0)==(0|0);
    if ($45) {
     __THREW__ = 0;
     invoke_v(458);
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $__obh$sroa$0$0 = 0;
      label = 20;
      break;
     }
     $$pre8$pre = HEAP32[$__nb>>2]|0;
     $$pre8 = $$pre8$pre;
    } else {
     $$pre8 = $$pre810;
    }
    $50 = $44;
    $54 = $$pre8;$__ob$0 = $44;$__obh$sroa$0$1 = $50;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $51 = (invoke_ii(345,($__iob|0))|0);
    $52 = __THREW__; __THREW__ = 0;
    $53 = $52&1;
    if ($53) {
     $__obh$sroa$0$0 = $__obh$sroa$0$1;
     label = 20;
    } else {
     HEAP32[$0>>2] = $51;
     __THREW__ = 0;
     invoke_viiiiiii(482,($54|0),($41|0),($40|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if ($56) {
      $67 = ___cxa_find_matching_catch_2()|0;
      $68 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($51)|0);
      $$0 = $67;$$02 = $68;$__obh$sroa$0$2 = $__obh$sroa$0$1;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($51)|0);
     $57 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $57;
     $58 = HEAP32[$__op>>2]|0;
     $59 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $60 = (invoke_iiiiiii(483,($$byval_copy|0),($__ob$0|0),($58|0),($59|0),($__iob|0),($__fl|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      $__obh$sroa$0$0 = $__obh$sroa$0$1;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $60;
      $63 = ($__obh$sroa$0$1|0)==(0);
      if (!($63)) {
       $64 = $__obh$sroa$0$1;
       _free($64);
      }
      $65 = ($__nbh$sroa$0$0|0)==(0);
      if (!($65)) {
       $66 = $__nbh$sroa$0$0;
       _free($66);
      }
      STACKTOP = sp;return ($60|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $48 = ___cxa_find_matching_catch_2()|0;
   $49 = tempRet0;
   $$0 = $48;$$02 = $49;$__obh$sroa$0$2 = $__obh$sroa$0$0;
  }
  $69 = ($__obh$sroa$0$2|0)==(0);
  if (!($69)) {
   $70 = $__obh$sroa$0$2;
   _free($70);
  }
  $71 = ($__nbh$sroa$0$0|0)==(0);
  if ($71) {
   $$115 = $$0;$$1314 = $$02;
  } else {
   $72 = $__nbh$sroa$0$0;
   _free($72);
   $$115 = $$0;$$1314 = $$02;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$0$i$i = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$01$i$i5 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0;
 var $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa53 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18852)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18860)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 switch ($5<<24>>24) {
 case 43: case 45:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = ((($__nb)) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = ((($13)) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
  break;
 }
 default: {
  $__nf$0 = $__nb;
  label = 10;
 }
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $29 = HEAP8[$__nf$0>>0]|0;
     $30 = ($29<<24>>24)==(48);
     if ($30) {
      $31 = ((($__nf$0)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      switch ($32<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $__ns$1 = $__nf$0;
       label = 21;
       break L6;
      }
      }
      $33 = HEAP32[$0>>2]|0;
      $34 = ((($33)) + 44|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($0|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       label = 8;
       break L4;
      }
      $39 = HEAP32[$__oe>>2]|0;
      $40 = ((($39)) + 4|0);
      HEAP32[$__oe>>2] = $40;
      HEAP32[$39>>2] = $36;
      $41 = ((($__nf$0)) + 2|0);
      $42 = HEAP8[$31>>0]|0;
      $43 = HEAP32[$0>>2]|0;
      $44 = ((($43)) + 44|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      $46 = (invoke_iii($45|0,($0|0),($42|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 8;
       break L4;
      }
      $49 = HEAP32[$__oe>>2]|0;
      $50 = ((($49)) + 4|0);
      HEAP32[$__oe>>2] = $50;
      HEAP32[$49>>2] = $46;
      $__ns$0 = $41;
      while(1) {
       $51 = ($__ns$0>>>0)<($__ne>>>0);
       if (!($51)) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $52 = HEAP8[$__ns$0>>0]|0;
       __THREW__ = 0;
       $53 = (invoke_i(470)|0);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if ($55) {
        break;
       }
       $56 = $52 << 24 >> 24;
       __THREW__ = 0;
       $57 = (invoke_iii(479,($56|0),($53|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = ($57|0)==(0);
       if ($60) {
        $__nf$1 = $41;$__ns$2 = $__ns$0;
        break L6;
       }
       $61 = ((($__ns$0)) + 1|0);
       $__ns$0 = $61;
      }
      $21 = ___cxa_find_matching_catch_2()|0;
      $22 = tempRet0;
      $lpad$phi$index = $21;$lpad$phi$index5 = $22;
      break L4;
     } else {
      $__ns$1 = $__nf$0;
      label = 21;
     }
    } else {
     $__ns$1 = $__nf$0;
     label = 21;
    }
   } while(0);
   L19: do {
    if ((label|0) == 21) {
     while(1) {
      label = 0;
      $62 = ($__ns$1>>>0)<($__ne>>>0);
      if (!($62)) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $63 = HEAP8[$__ns$1>>0]|0;
      __THREW__ = 0;
      $64 = (invoke_i(470)|0);
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       break;
      }
      $67 = $63 << 24 >> 24;
      __THREW__ = 0;
      $68 = (invoke_iii(480,($67|0),($64|0))|0);
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       break;
      }
      $71 = ($68|0)==(0);
      if ($71) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
       break L19;
      }
      $72 = ((($__ns$1)) + 1|0);
      $__ns$1 = $72;
      label = 21;
     }
     $19 = ___cxa_find_matching_catch_2()|0;
     $20 = tempRet0;
     $lpad$phi$index = $19;$lpad$phi$index5 = $20;
     break L4;
    }
   } while(0);
   $73 = HEAP8[$__grouping>>0]|0;
   $74 = $73 & 1;
   $75 = ($74<<24>>24)==(0);
   $76 = ((($__grouping)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $73&255;
   $79 = $78 >>> 1;
   $80 = $75 ? $79 : $77;
   $81 = ($80|0)==(0);
   L28: do {
    if ($81) {
     $82 = HEAP32[$__oe>>2]|0;
     $83 = HEAP32[$0>>2]|0;
     $84 = ((($83)) + 48|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($85|0,($0|0),($__nf$1|0),($__ns$2|0),($82|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 8;
      break L4;
     }
     $88 = $__ns$2;
     $89 = $__nf$1;
     $90 = (($88) - ($89))|0;
     $91 = HEAP32[$__oe>>2]|0;
     $92 = (($91) + ($90<<2)|0);
     HEAP32[$__oe>>2] = $92;
     $$pre$phiZ2D = $0;$188 = $92;
    } else {
     $93 = ($__nf$1|0)==($__ns$2|0);
     L32: do {
      if (!($93)) {
       $$0$i$i = $__ns$2;$$01$i$i = $__nf$1;
       while(1) {
        $94 = ((($$0$i$i)) + -1|0);
        $95 = ($$01$i$i>>>0)<($94>>>0);
        if (!($95)) {
         break L32;
        }
        $96 = HEAP8[$$01$i$i>>0]|0;
        $97 = HEAP8[$94>>0]|0;
        HEAP8[$$01$i$i>>0] = $97;
        HEAP8[$94>>0] = $96;
        $98 = ((($$01$i$i)) + 1|0);
        $$0$i$i = $94;$$01$i$i = $98;
       }
      }
     } while(0);
     $99 = HEAP32[$1>>2]|0;
     $100 = ((($99)) + 16|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     $102 = (invoke_ii($101|0,($1|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 8;
      break L4;
     }
     $105 = ((($__grouping)) + 8|0);
     $106 = ((($__grouping)) + 1|0);
     $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
     while(1) {
      $107 = ($__p$0>>>0)<($__ns$2>>>0);
      if (!($107)) {
       break;
      }
      $119 = HEAP8[$__grouping>>0]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      $122 = HEAP32[$105>>2]|0;
      $123 = $121 ? $106 : $122;
      $124 = (($123) + ($__dg$0)|0);
      $125 = HEAP8[$124>>0]|0;
      $126 = ($125<<24>>24)>(0);
      $127 = $125 << 24 >> 24;
      $128 = ($__dc$0|0)==($127|0);
      $or$cond = $126 & $128;
      if ($or$cond) {
       $129 = HEAP32[$__oe>>2]|0;
       $130 = ((($129)) + 4|0);
       HEAP32[$__oe>>2] = $130;
       HEAP32[$129>>2] = $102;
       $131 = HEAP8[$__grouping>>0]|0;
       $132 = $131 & 1;
       $133 = ($132<<24>>24)==(0);
       $134 = HEAP32[$76>>2]|0;
       $135 = $131&255;
       $136 = $135 >>> 1;
       $137 = $133 ? $136 : $134;
       $138 = (($137) + -1)|0;
       $139 = ($__dg$0>>>0)<($138>>>0);
       $140 = $139&1;
       $$__dg$0 = (($140) + ($__dg$0))|0;
       $__dc$1 = 0;$__dg$1 = $$__dg$0;
      } else {
       $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
      }
      $141 = HEAP8[$__p$0>>0]|0;
      $142 = HEAP32[$0>>2]|0;
      $143 = ((($142)) + 44|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_iii($144|0,($0|0),($141|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 5;
       break;
      }
      $148 = HEAP32[$__oe>>2]|0;
      $149 = ((($148)) + 4|0);
      HEAP32[$__oe>>2] = $149;
      HEAP32[$148>>2] = $145;
      $150 = (($__dc$1) + 1)|0;
      $151 = ((($__p$0)) + 1|0);
      $__dc$0 = $150;$__dg$0 = $__dg$1;$__p$0 = $151;
     }
     if ((label|0) == 5) {
      $17 = ___cxa_find_matching_catch_2()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      break L4;
     }
     $108 = $__nf$1;
     $109 = $__nb;
     $110 = (($108) - ($109))|0;
     $111 = (($__ob) + ($110<<2)|0);
     $112 = HEAP32[$__oe>>2]|0;
     $113 = ($111|0)==($112|0);
     if ($113) {
      $$pre$phiZ2D = $0;$188 = $111;
     } else {
      $$0$i$i6 = $112;$$01$i$i5 = $111;
      while(1) {
       $114 = ((($$0$i$i6)) + -4|0);
       $115 = ($$01$i$i5>>>0)<($114>>>0);
       if (!($115)) {
        $$pre$phiZ2D = $0;$188 = $112;
        break L28;
       }
       $116 = HEAP32[$$01$i$i5>>2]|0;
       $117 = HEAP32[$114>>2]|0;
       HEAP32[$$01$i$i5>>2] = $117;
       HEAP32[$114>>2] = $116;
       $118 = ((($$01$i$i5)) + 4|0);
       $$0$i$i6 = $114;$$01$i$i5 = $118;
      }
     }
    }
   } while(0);
   $189 = $188;$__nf$2 = $__ns$2;
   while(1) {
    $152 = ($__nf$2>>>0)<($__ne>>>0);
    if (!($152)) {
     $176 = $189;$__nf$3 = $__nf$2;
     break;
    }
    $153 = HEAP8[$__nf$2>>0]|0;
    $154 = ($153<<24>>24)==(46);
    if ($154) {
     $__nf$2$lcssa53 = $__nf$2;
     label = 45;
     break;
    }
    $164 = HEAP32[$$pre$phiZ2D>>2]|0;
    $165 = ((($164)) + 44|0);
    $166 = HEAP32[$165>>2]|0;
    __THREW__ = 0;
    $167 = (invoke_iii($166|0,($0|0),($153|0))|0);
    $168 = __THREW__; __THREW__ = 0;
    $169 = $168&1;
    if ($169) {
     label = 4;
     break;
    }
    $170 = HEAP32[$__oe>>2]|0;
    $171 = ((($170)) + 4|0);
    HEAP32[$__oe>>2] = $171;
    HEAP32[$170>>2] = $167;
    $172 = ((($__nf$2)) + 1|0);
    $189 = $171;$__nf$2 = $172;
   }
   if ((label|0) == 4) {
    $15 = ___cxa_find_matching_catch_2()|0;
    $16 = tempRet0;
    $lpad$phi$index = $15;$lpad$phi$index5 = $16;
    break;
   }
   if ((label|0) == 45) {
    $155 = HEAP32[$1>>2]|0;
    $156 = ((($155)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    __THREW__ = 0;
    $158 = (invoke_ii($157|0,($1|0))|0);
    $159 = __THREW__; __THREW__ = 0;
    $160 = $159&1;
    if ($160) {
     label = 8;
     break;
    }
    $161 = HEAP32[$__oe>>2]|0;
    $162 = ((($161)) + 4|0);
    HEAP32[$__oe>>2] = $162;
    HEAP32[$161>>2] = $158;
    $163 = ((($__nf$2$lcssa53)) + 1|0);
    $176 = $162;$__nf$3 = $163;
   }
   $173 = HEAP32[$0>>2]|0;
   $174 = ((($173)) + 48|0);
   $175 = HEAP32[$174>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($175|0,($0|0),($__nf$3|0),($__ne|0),($176|0))|0);
   $177 = __THREW__; __THREW__ = 0;
   $178 = $177&1;
   if ($178) {
    label = 8;
   } else {
    $179 = $__nf$3;
    $180 = (($25) - ($179))|0;
    $181 = HEAP32[$__oe>>2]|0;
    $182 = (($181) + ($180<<2)|0);
    HEAP32[$__oe>>2] = $182;
    $183 = ($__np|0)==($__ne|0);
    $184 = $__np;
    $185 = $__nb;
    $186 = (($184) - ($185))|0;
    $187 = (($__ob) + ($186<<2)|0);
    $storemerge = $183 ? $182 : $187;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$02 = 0, $$115 = 0, $$1314 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $$pre8$pre = 0, $$pre810 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__obh$sroa$0$1 = 0, $__obh$sroa$0$2 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 300|0;
 $__o = sp + 72|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($__fmt)) + 1|0);
 $7 = ((($__iob)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,14784,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = ((($__iob)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(470)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = ((($__iob)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $__v;
     $21 = (invoke_iiiii(475,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(470)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $__v;
     $29 = (invoke_iiiii(475,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      $__nc$1 = $29;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $32 = HEAP32[$__nb>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $34 = $32;
     $$pre810 = $32;$__nbh$sroa$0$0 = $34;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(458);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $37 = $$pre;
     $$pre810 = $37;$__nbh$sroa$0$0 = $$pre;$__nc$2 = $__nc$1;
     label = 16;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   $$115 = $24;$$1314 = $25;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $$pre810 = $$pre7;$__nbh$sroa$0$0 = 0;$__nc$2 = $__nc$0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $38 = (($$pre810) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre810,$38,$__iob)|0);
  $40 = ($$pre810|0)==($__nar|0);
  do {
   if ($40) {
    $52 = $__nar;$__ob$0 = $__o;$__obh$sroa$0$1 = 0;
    label = 22;
   } else {
    $41 = $__nc$2 << 3;
    $42 = (_malloc($41)|0);
    $43 = ($42|0)==(0|0);
    if ($43) {
     __THREW__ = 0;
     invoke_v(458);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $__obh$sroa$0$0 = 0;
      label = 20;
      break;
     }
     $$pre8$pre = HEAP32[$__nb>>2]|0;
     $$pre8 = $$pre8$pre;
    } else {
     $$pre8 = $$pre810;
    }
    $48 = $42;
    $52 = $$pre8;$__ob$0 = $42;$__obh$sroa$0$1 = $48;
    label = 22;
   }
  } while(0);
  do {
   if ((label|0) == 22) {
    __THREW__ = 0;
    $49 = (invoke_ii(345,($__iob|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $__obh$sroa$0$0 = $__obh$sroa$0$1;
     label = 20;
    } else {
     HEAP32[$0>>2] = $49;
     __THREW__ = 0;
     invoke_viiiiiii(482,($52|0),($39|0),($38|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $65 = ___cxa_find_matching_catch_2()|0;
      $66 = tempRet0;
      (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
      $$0 = $65;$$02 = $66;$__obh$sroa$0$2 = $__obh$sroa$0$1;
      break;
     }
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $55 = HEAP32[$__s>>2]|0;
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$__op>>2]|0;
     $57 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
     $58 = (invoke_iiiiiii(483,($$byval_copy|0),($__ob$0|0),($56|0),($57|0),($__iob|0),($__fl|0))|0);
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $__obh$sroa$0$0 = $__obh$sroa$0$1;
      label = 20;
     } else {
      HEAP32[$__s>>2] = $58;
      $61 = ($__obh$sroa$0$1|0)==(0);
      if (!($61)) {
       $62 = $__obh$sroa$0$1;
       _free($62);
      }
      $63 = ($__nbh$sroa$0$0|0)==(0);
      if (!($63)) {
       $64 = $__nbh$sroa$0$0;
       _free($64);
      }
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  } while(0);
  if ((label|0) == 20) {
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   $$0 = $46;$$02 = $47;$__obh$sroa$0$2 = $__obh$sroa$0$0;
  }
  $67 = ($__obh$sroa$0$2|0)==(0);
  if (!($67)) {
   $68 = $__obh$sroa$0$2;
   _free($68);
  }
  $69 = ($__nbh$sroa$0$0|0)==(0);
  if ($69) {
   $$115 = $$0;$$1314 = $$02;
  } else {
   $70 = $__nbh$sroa$0$0;
   _free($70);
   $$115 = $$0;$$1314 = $$02;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this,$__s,$__iob,$__fl,$__v) {
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 184|0;
 $__nar = sp + 164|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt>>0]=HEAP8[14786>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[14786+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[14786+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[14786+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[14786+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[14786+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 $6 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(346,($0|0),(18852|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  ___resumeException($21|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($6)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 1023]($7,$__nar,$4,$__o)|0);
  $13 = (($__o) + ($3<<2)|0);
  $14 = ($5|0)==($4|0);
  $15 = $__nar;
  $16 = $5;
  $17 = (($16) - ($15))|0;
  $18 = (($__o) + ($17<<2)|0);
  $__op$0 = $14 ? $13 : $18;
  $19 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  $20 = (__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$__o,$__op$0,$13,$__iob,$__fl)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,15004,(15012))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i27 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa116$lcssa = 0, $$lcssa116$lcssa119 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa121 = 0, $$lcssa123 = 0, $$lcssa126 = 0, $$lcssa127 = 0;
 var $$lcssa128 = 0, $$pre = 0, $$pre$i$i$i18 = 0, $$pre$i$i$i9 = 0, $$pre$i2$i$i22 = 0, $$pre$i2$i$i2240 = 0, $$pre$i2$i$i2241 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i25 = 0, $isascii1$i6 = 0, $or$cond = 0, $sext = 0, $tmp$i$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(346,($0|0),(18820|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($39|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $7 = ((($4)) + 8|0);
 $$0$ph = $__fmtb;$$pre = 0;
 L4: while(1) {
  $8 = ($$0$ph|0)!=($__fmte|0);
  $9 = $$pre;
  while(1) {
   $10 = ($9|0)==(0);
   $or$cond = $8 & $10;
   $11 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i9 = $11;
    break L4;
   }
   $12 = ($11|0)==(0|0);
   $13 = $11;
   if ($12) {
    $189 = $13;$24 = 0;
   } else {
    $14 = ((($11)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($11)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($15|0)==($17|0);
    if ($18) {
     $19 = HEAP32[$11>>2]|0;
     $20 = ((($19)) + 36|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (FUNCTION_TABLE_ii[$21 & 1023]($11)|0);
     $23 = ($22|0)==(-1);
     if ($23) {
      HEAP32[$__b>>2] = 0;
      $189 = 0;$24 = 0;
     } else {
      $189 = $13;$24 = $11;
     }
    } else {
     $189 = $13;$24 = $11;
    }
   }
   $25 = ($24|0)==(0|0);
   $26 = HEAP32[$__e>>2]|0;
   $27 = ($26|0)==(0|0);
   $28 = $26;
   do {
    if ($27) {
     $190 = $28;
     label = 14;
    } else {
     $29 = ((($26)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($26)) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$26>>2]|0;
      $35 = ((($34)) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (FUNCTION_TABLE_ii[$36 & 1023]($26)|0);
      $38 = ($37|0)==(-1);
      if ($38) {
       HEAP32[$__e>>2] = 0;
       $190 = 0;
       label = 14;
       break;
      }
     }
     if ($25) {
      $191 = $26;$192 = $28;
     } else {
      $$lcssa115 = $24;
      label = 15;
      break L4;
     }
    }
   } while(0);
   if ((label|0) == 14) {
    label = 0;
    if ($25) {
     $$lcssa115 = $24;
     label = 15;
     break L4;
    } else {
     $191 = 0;$192 = $190;
    }
   }
   $41 = HEAP8[$$0$ph>>0]|0;
   $42 = HEAP32[$4>>2]|0;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_iiii[$44 & 1023]($4,$41,0)|0);
   $46 = ($45<<24>>24)==(37);
   if ($46) {
    $$lcssa112 = $189;$$lcssa116 = $24;$$lcssa123 = $192;
    label = 18;
    break;
   }
   $67 = HEAP8[$$0$ph>>0]|0;
   $isascii1$i = ($67<<24>>24)>(-1);
   if ($isascii1$i) {
    $68 = $67 << 24 >> 24;
    $69 = HEAP32[$7>>2]|0;
    $70 = (($69) + ($68<<1)|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = $71 & 8192;
    $73 = ($72<<16>>16)==(0);
    if (!($73)) {
     $$lcssa117 = $24;$$lcssa121 = $191;$$lcssa126 = $69;
     label = 27;
     break;
    }
   }
   $132 = ((($24)) + 12|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ((($24)) + 16|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($133|0)==($135|0);
   if ($136) {
    $137 = HEAP32[$24>>2]|0;
    $138 = ((($137)) + 36|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (FUNCTION_TABLE_ii[$139 & 1023]($24)|0);
    $$0$i$i27 = $140;
   } else {
    $141 = HEAP8[$133>>0]|0;
    $142 = $141&255;
    $$0$i$i27 = $142;
   }
   $143 = $$0$i$i27&255;
   $144 = HEAP32[$4>>2]|0;
   $145 = ((($144)) + 12|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (FUNCTION_TABLE_iii[$146 & 511]($4,$143)|0);
   $148 = HEAP8[$$0$ph>>0]|0;
   $149 = HEAP32[$4>>2]|0;
   $150 = ((($149)) + 12|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (FUNCTION_TABLE_iii[$151 & 511]($4,$148)|0);
   $153 = ($147<<24>>24)==($152<<24>>24);
   if ($153) {
    $$lcssa118 = $24;$$lcssa127 = $132;$$lcssa128 = $134;
    label = 55;
    break;
   }
   HEAP32[$__err>>2] = 4;
   $9 = 4;
  }
  L32: do {
   if ((label|0) == 18) {
    label = 0;
    $47 = ((($$0$ph)) + 1|0);
    $48 = ($47|0)==($__fmte|0);
    if ($48) {
     $$lcssa116$lcssa = $$lcssa116;
     label = 19;
     break L4;
    }
    $49 = HEAP8[$47>>0]|0;
    $50 = HEAP32[$4>>2]|0;
    $51 = ((($50)) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($4,$49,0)|0);
    switch ($53<<24>>24) {
    case 48: case 69:  {
     $54 = ((($$0$ph)) + 2|0);
     $55 = ($54|0)==($__fmte|0);
     if ($55) {
      $$lcssa116$lcssa119 = $$lcssa116;
      label = 24;
      break L4;
     }
     $56 = HEAP8[$54>>0]|0;
     $57 = HEAP32[$4>>2]|0;
     $58 = ((($57)) + 36|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($4,$56,0)|0);
     $66 = $47;$__cmd$0 = $60;$__opt$0 = $53;
     break;
    }
    default: {
     $66 = $$0$ph;$__cmd$0 = $53;$__opt$0 = 0;
    }
    }
    $61 = HEAP32[$this>>2]|0;
    $62 = ((($61)) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    HEAP32[$1>>2] = $$lcssa112;
    HEAP32[$2>>2] = $$lcssa123;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
    $64 = (FUNCTION_TABLE_iiiiiiiii[$63 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
    HEAP32[$__b>>2] = $64;
    $65 = ((($66)) + 2|0);
    $$0$ph$be = $65;
   }
   else if ((label|0) == 27) {
    label = 0;
    $$0$pn = $$0$ph;
    while(1) {
     $$3 = ((($$0$pn)) + 1|0);
     $74 = ($$3|0)==($__fmte|0);
     if ($74) {
      $$3$lcssa = $__fmte;
      break;
     }
     $75 = HEAP8[$$3>>0]|0;
     $isascii1$i6 = ($75<<24>>24)>(-1);
     if (!($isascii1$i6)) {
      $$3$lcssa = $$3;
      break;
     }
     $76 = $75 << 24 >> 24;
     $77 = (($$lcssa126) + ($76<<1)|0);
     $78 = HEAP16[$77>>1]|0;
     $79 = $78 & 8192;
     $80 = ($79<<16>>16)==(0);
     if ($80) {
      $$3$lcssa = $$3;
      break;
     } else {
      $$0$pn = $$3;
     }
    }
    $$pre$i$i$i18 = $$lcssa117;$$pre$i2$i$i22 = $$lcssa121;$94 = $$lcssa121;
    while(1) {
     $81 = ($$pre$i$i$i18|0)==(0|0);
     if ($81) {
      $92 = 0;
     } else {
      $82 = ((($$pre$i$i$i18)) + 12|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($$pre$i$i$i18)) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($83|0)==($85|0);
      if ($86) {
       $87 = HEAP32[$$pre$i$i$i18>>2]|0;
       $88 = ((($87)) + 36|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = (FUNCTION_TABLE_ii[$89 & 1023]($$pre$i$i$i18)|0);
       $91 = ($90|0)==(-1);
       if ($91) {
        HEAP32[$__b>>2] = 0;
        $92 = 0;
       } else {
        $92 = $$pre$i$i$i18;
       }
      } else {
       $92 = $$pre$i$i$i18;
      }
     }
     $93 = ($92|0)==(0|0);
     $95 = ($94|0)==(0|0);
     do {
      if ($95) {
       $$pre$i2$i$i2241 = $$pre$i2$i$i22;
       label = 41;
      } else {
       $96 = ((($94)) + 12|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = ((($94)) + 16|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = ($97|0)==($99|0);
       if (!($100)) {
        if ($93) {
         $$pre$i2$i$i2240 = $$pre$i2$i$i22;$193 = $94;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L32;
        }
       }
       $101 = HEAP32[$94>>2]|0;
       $102 = ((($101)) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_ii[$103 & 1023]($94)|0);
       $105 = ($104|0)==(-1);
       if ($105) {
        HEAP32[$__e>>2] = 0;
        $$pre$i2$i$i2241 = 0;
        label = 41;
        break;
       } else {
        $106 = ($$pre$i2$i$i22|0)==(0|0);
        $tmp$i$i24 = $93 ^ $106;
        if ($tmp$i$i24) {
         $$pre$i2$i$i2240 = $$pre$i2$i$i22;$193 = $$pre$i2$i$i22;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L32;
        }
       }
      }
     } while(0);
     if ((label|0) == 41) {
      label = 0;
      if ($93) {
       $$0$ph$be = $$3$lcssa;
       break L32;
      } else {
       $$pre$i2$i$i2240 = $$pre$i2$i$i2241;$193 = 0;
      }
     }
     $107 = ((($92)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ((($92)) + 16|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($108|0)==($110|0);
     if ($111) {
      $112 = HEAP32[$92>>2]|0;
      $113 = ((($112)) + 36|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (FUNCTION_TABLE_ii[$114 & 1023]($92)|0);
      $$0$i$i = $115;
     } else {
      $116 = HEAP8[$108>>0]|0;
      $117 = $116&255;
      $$0$i$i = $117;
     }
     $118 = $$0$i$i&255;
     $isascii1$i25 = ($118<<24>>24)>(-1);
     if (!($isascii1$i25)) {
      $$0$ph$be = $$3$lcssa;
      break L32;
     }
     $sext = $$0$i$i << 24;
     $119 = $sext >> 24;
     $120 = HEAP32[$7>>2]|0;
     $121 = (($120) + ($119<<1)|0);
     $122 = HEAP16[$121>>1]|0;
     $123 = $122 & 8192;
     $124 = ($123<<16>>16)==(0);
     if ($124) {
      $$0$ph$be = $$3$lcssa;
      break L32;
     }
     $125 = HEAP32[$107>>2]|0;
     $126 = HEAP32[$109>>2]|0;
     $127 = ($125|0)==($126|0);
     if ($127) {
      $128 = HEAP32[$92>>2]|0;
      $129 = ((($128)) + 40|0);
      $130 = HEAP32[$129>>2]|0;
      (FUNCTION_TABLE_ii[$130 & 1023]($92)|0);
      $$pre$i$i$i18 = $92;$$pre$i2$i$i22 = $$pre$i2$i$i2240;$94 = $193;
      continue;
     } else {
      $131 = ((($125)) + 1|0);
      HEAP32[$107>>2] = $131;
      $$pre$i$i$i18 = $92;$$pre$i2$i$i22 = $$pre$i2$i$i2240;$94 = $193;
      continue;
     }
    }
   }
   else if ((label|0) == 55) {
    label = 0;
    $154 = HEAP32[$$lcssa127>>2]|0;
    $155 = HEAP32[$$lcssa128>>2]|0;
    $156 = ($154|0)==($155|0);
    if ($156) {
     $157 = HEAP32[$$lcssa118>>2]|0;
     $158 = ((($157)) + 40|0);
     $159 = HEAP32[$158>>2]|0;
     (FUNCTION_TABLE_ii[$159 & 1023]($$lcssa118)|0);
    } else {
     $160 = ((($154)) + 1|0);
     HEAP32[$$lcssa127>>2] = $160;
    }
    $161 = ((($$0$ph)) + 1|0);
    $$0$ph$be = $161;
   }
  } while(0);
  $$pre$pre = HEAP32[$__err>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 15) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i9 = $$lcssa115;
 }
 else if ((label|0) == 19) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i9 = $$lcssa116$lcssa;
 }
 else if ((label|0) == 24) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i9 = $$lcssa116$lcssa119;
 }
 $162 = ($$pre$i$i$i9|0)==(0|0);
 if ($162) {
  $173 = 0;
 } else {
  $163 = ((($$pre$i$i$i9)) + 12|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ((($$pre$i$i$i9)) + 16|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($164|0)==($166|0);
  if ($167) {
   $168 = HEAP32[$$pre$i$i$i9>>2]|0;
   $169 = ((($168)) + 36|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (FUNCTION_TABLE_ii[$170 & 1023]($$pre$i$i$i9)|0);
   $172 = ($171|0)==(-1);
   if ($172) {
    HEAP32[$__b>>2] = 0;
    $173 = 0;
   } else {
    $173 = $$pre$i$i$i9;
   }
  } else {
   $173 = $$pre$i$i$i9;
  }
 }
 $174 = ($173|0)==(0|0);
 $175 = HEAP32[$__e>>2]|0;
 $176 = ($175|0)==(0|0);
 do {
  if ($176) {
   label = 70;
  } else {
   $177 = ((($175)) + 12|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ((($175)) + 16|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($178|0)==($180|0);
   if ($181) {
    $182 = HEAP32[$175>>2]|0;
    $183 = ((($182)) + 36|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (FUNCTION_TABLE_ii[$184 & 1023]($175)|0);
    $186 = ($185|0)==(-1);
    if ($186) {
     HEAP32[$__e>>2] = 0;
     label = 70;
     break;
    }
   }
   if (!($174)) {
    label = 71;
   }
  }
 } while(0);
 if ((label|0) == 70) {
  if ($174) {
   label = 71;
  }
 }
 if ((label|0) == 71) {
  $187 = HEAP32[$__err>>2]|0;
  $188 = $187 | 2;
  HEAP32[$__err>>2] = $188;
 }
 STACKTOP = sp;return ($173|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 1|0);
 $15 = $11 ? $14 : $13;
 $16 = ((($6)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $9&255;
 $19 = $18 >>> 1;
 $20 = $11 ? $19 : $17;
 $21 = (($15) + ($20)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $22 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$15,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(346,($0|0),(18820|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(346,($0|0),(18820|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(346,($0|0),(18820|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$2 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $157 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $157 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$2 = 0;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $isascii1$i = ($40<<24>>24)>(-1);
   if ($isascii1$i) {
    $sext = $$0$i$i << 24;
    $41 = $sext >> 24;
    $42 = ((($__ct)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 & 2048;
    $47 = ($46<<16>>16)==(0);
    if (!($47)) {
     $50 = HEAP32[$__ct>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
     $54 = $53 << 24 >> 24;
     $55 = HEAP32[$__b>>2]|0;
     $56 = ((($55)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($55)) + 16|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($57|0)==($59|0);
     if ($60) {
      $61 = HEAP32[$55>>2]|0;
      $62 = ((($61)) + 40|0);
      $63 = HEAP32[$62>>2]|0;
      (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
      $$0$in = $__n;$$pre$i2$i$i7 = $157;$79 = $157;$__r$0$in = $54;
     } else {
      $64 = ((($57)) + 1|0);
      HEAP32[$56>>2] = $64;
      $$0$in = $__n;$$pre$i2$i$i7 = $157;$79 = $157;$__r$0$in = $54;
     }
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $$0 = (($$0$in) + -1)|0;
      $65 = HEAP32[$__b>>2]|0;
      $66 = ($65|0)==(0|0);
      do {
       if ($66) {
        $77 = 0;
       } else {
        $67 = ((($65)) + 12|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ((($65)) + 16|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($68|0)==($70|0);
        if ($71) {
         $72 = HEAP32[$65>>2]|0;
         $73 = ((($72)) + 36|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
         $76 = ($75|0)==(-1);
         if ($76) {
          HEAP32[$__b>>2] = 0;
          $77 = 0;
          break;
         } else {
          $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
          $77 = $$pre$i$i$i3;
          break;
         }
        } else {
         $77 = $65;
        }
       }
      } while(0);
      $78 = ($77|0)==(0|0);
      $80 = ($79|0)==(0|0);
      if ($80) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = 0;
      } else {
       $81 = ((($79)) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ((($79)) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = ((($86)) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (FUNCTION_TABLE_ii[$88 & 1023]($79)|0);
        $90 = ($89|0)==(-1);
        if ($90) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i20 = 0;$91 = 0;
        } else {
         $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $$pre$i2$i$i7;
        }
       } else {
        $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $79;
       }
      }
      $92 = ($91|0)==(0|0);
      $tmp$i$i9 = $78 ^ $92;
      $93 = ($$0$in|0)>(1);
      $94 = $93 & $tmp$i$i9;
      $95 = HEAP32[$__b>>2]|0;
      if (!($94)) {
       $$lcssa = $95;$$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;$__r$0$lcssa = $__r$0;
       break;
      }
      $96 = ((($95)) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ((($95)) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($97|0)==($99|0);
      if ($100) {
       $101 = HEAP32[$95>>2]|0;
       $102 = ((($101)) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_ii[$103 & 1023]($95)|0);
       $$0$i$i10 = $104;
      } else {
       $105 = HEAP8[$97>>0]|0;
       $106 = $105&255;
       $$0$i$i10 = $106;
      }
      $107 = $$0$i$i10&255;
      $isascii1$i12 = ($107<<24>>24)>(-1);
      if (!($isascii1$i12)) {
       $$2 = $__r$0;
       break L16;
      }
      $sext24 = $$0$i$i10 << 24;
      $108 = $sext24 >> 24;
      $109 = HEAP32[$42>>2]|0;
      $110 = (($109) + ($108<<1)|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $111 & 2048;
      $113 = ($112<<16>>16)==(0);
      if ($113) {
       $$2 = $__r$0;
       break L16;
      }
      $114 = ($__r$0*10)|0;
      $115 = HEAP32[$__ct>>2]|0;
      $116 = ((($115)) + 36|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (FUNCTION_TABLE_iiii[$117 & 1023]($__ct,$107,0)|0);
      $119 = $118 << 24 >> 24;
      $120 = (($119) + ($114))|0;
      $121 = HEAP32[$__b>>2]|0;
      $122 = ((($121)) + 12|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($121)) + 16|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($123|0)==($125|0);
      if ($126) {
       $127 = HEAP32[$121>>2]|0;
       $128 = ((($127)) + 40|0);
       $129 = HEAP32[$128>>2]|0;
       (FUNCTION_TABLE_ii[$129 & 1023]($121)|0);
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $120;
       continue;
      } else {
       $130 = ((($123)) + 1|0);
       HEAP32[$122>>2] = $130;
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $120;
       continue;
      }
     }
     $131 = ($$lcssa|0)==(0|0);
     do {
      if ($131) {
       $142 = 0;
      } else {
       $132 = ((($$lcssa)) + 12|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ((($$lcssa)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($133|0)==($135|0);
       if ($136) {
        $137 = HEAP32[$$lcssa>>2]|0;
        $138 = ((($137)) + 36|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (FUNCTION_TABLE_ii[$139 & 1023]($$lcssa)|0);
        $141 = ($140|0)==(-1);
        if ($141) {
         HEAP32[$__b>>2] = 0;
         $142 = 0;
         break;
        } else {
         $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
         $142 = $$pre$i$i$i16;
         break;
        }
       } else {
        $142 = $$lcssa;
       }
      }
     } while(0);
     $143 = ($142|0)==(0|0);
     $144 = ($$pre$i2$i$i20$lcssa|0)==(0|0);
     do {
      if ($144) {
       label = 50;
      } else {
       $145 = ((($$pre$i2$i$i20$lcssa)) + 12|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ((($$pre$i2$i$i20$lcssa)) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($146|0)==($148|0);
       if ($149) {
        $150 = HEAP32[$$pre$i2$i$i20$lcssa>>2]|0;
        $151 = ((($150)) + 36|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (FUNCTION_TABLE_ii[$152 & 1023]($$pre$i2$i$i20$lcssa)|0);
        $154 = ($153|0)==(-1);
        if ($154) {
         HEAP32[$__e>>2] = 0;
         label = 50;
         break;
        }
       }
       if ($143) {
        $$2 = $__r$0$lcssa;
        break L16;
       }
      }
     } while(0);
     if ((label|0) == 50) {
      if (!($143)) {
       $$2 = $__r$0$lcssa;
       break;
      }
     }
     $155 = HEAP32[$__err>>2]|0;
     $156 = $155 | 2;
     HEAP32[$__err>>2] = $156;
     $$2 = $__r$0$lcssa;
     break;
    }
   }
   $48 = HEAP32[$__err>>2]|0;
   $49 = $48 | 4;
   HEAP32[$__err>>2] = $49;
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(346,($1|0),(18820|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$42,$__b,$$byval_copy1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 1|0);
   $57 = $53 ? $56 : $55;
   $58 = ((($48)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $51&255;
   $61 = $60 >>> 1;
   $62 = $53 ? $61 : $59;
   $63 = (($57) + ($62)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
   $64 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$57,$63)|0);
   HEAP32[$__b>>2] = $64;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $65 = ((($__tm)) + 12|0);
   $66 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $66;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$65,$__b,$$byval_copy4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $67 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $67;
   $68 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $68;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;
   $69 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,15012,(15020))|0);
   HEAP32[$__b>>2] = $69;
   label = 28;
   break;
  }
  case 70:  {
   $70 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $70;
   $71 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $71;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;
   $72 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,15020,(15028))|0);
   HEAP32[$__b>>2] = $72;
   label = 28;
   break;
  }
  case 72:  {
   $73 = ((($__tm)) + 8|0);
   $74 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $74;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$73,$__b,$$byval_copy9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $75 = ((($__tm)) + 8|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $76;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $77 = ((($__tm)) + 28|0);
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $78;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$77,$__b,$$byval_copy11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $79 = ((($__tm)) + 16|0);
   $80 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $80;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$79,$__b,$$byval_copy12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $81 = ((($__tm)) + 4|0);
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $82;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$81,$__b,$$byval_copy13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $83 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $83;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $84 = ((($__tm)) + 8|0);
   $85 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $85;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$84,$__b,$$byval_copy15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $86 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $86;
   $87 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $87;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
   $88 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,15028,(15039))|0);
   HEAP32[$__b>>2] = $88;
   label = 28;
   break;
  }
  case 82:  {
   $89 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $89;
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $90;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$21>>2]|0;
   $91 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,15039,(15044))|0);
   HEAP32[$__b>>2] = $91;
   label = 28;
   break;
  }
  case 83:  {
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $92;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $93 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $93;
   $94 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $94;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$24>>2]|0;
   $95 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,15044,(15052))|0);
   HEAP32[$__b>>2] = $95;
   label = 28;
   break;
  }
  case 119:  {
   $96 = ((($__tm)) + 24|0);
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $97;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$96,$__b,$$byval_copy23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $98 = HEAP32[$this>>2]|0;
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $101;
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$27>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 511]($this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $103;
   break;
  }
  case 88:  {
   $104 = ((($this)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_ii[$107 & 1023]($104)|0);
   $109 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $109;
   $110 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $110;
   $111 = HEAP8[$108>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   $114 = ((($108)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($108)) + 1|0);
   $117 = $113 ? $116 : $115;
   $118 = ((($108)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $111&255;
   $121 = $120 >>> 1;
   $122 = $113 ? $121 : $119;
   $123 = (($117) + ($122)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$29>>2]|0;
   $124 = (__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$117,$123)|0);
   HEAP32[$__b>>2] = $124;
   label = 28;
   break;
  }
  case 121:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $126;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$125,$__b,$$byval_copy28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $127 = ((($__tm)) + 20|0);
   $128 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $128;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$127,$__b,$$byval_copy29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $129 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $129;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $130 = HEAP32[$__err>>2]|0;
   $131 = $130 | 4;
   HEAP32[$__err>>2] = $131;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $132 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $132;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__ct)) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $13 = 0;
   } else {
    $3 = ((($1)) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ((($1)) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = ((($8)) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $13 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $13 = $$pre$i$i$i;
      break;
     }
    } else {
     $13 = $1;
    }
   }
  } while(0);
  $14 = ($13|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = ((($15)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($15)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = ((($22)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($14) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($27)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($46)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = ((($52)) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = ((($48)) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $68 = 0;
  } else {
   $58 = ((($56)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($56)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = ((($63)) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $68 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $68 = $$pre$i$i$i2;
     break;
    }
   } else {
    $68 = $56;
   }
  }
 } while(0);
 $69 = ($68|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = ((($$pre$i2$i$i6)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($$pre$i2$i$i6)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if (!($69)) {
    label = 33;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($69) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $81 = HEAP32[$__err>>2]|0;
  $82 = $81 | 2;
  HEAP32[$__err>>2] = $82;
 }
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = ((($14)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($14)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = ((($21)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $$pre$i2$i$i611 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $41 = HEAP32[$__ct>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if (!($45)) {
    $46 = HEAP32[$__err>>2]|0;
    $47 = $46 | 4;
    HEAP32[$__err>>2] = $47;
    break;
   }
   $48 = HEAP32[$__b>>2]|0;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($48)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $55 = HEAP32[$48>>2]|0;
    $56 = ((($55)) + 40|0);
    $57 = HEAP32[$56>>2]|0;
    (FUNCTION_TABLE_ii[$57 & 1023]($48)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $58 = ($$pre|0)==(0|0);
    if ($58) {
     $70 = 0;
    } else {
     $60 = $$pre;
     label = 21;
    }
   } else {
    $54 = ((($50)) + 1|0);
    HEAP32[$49>>2] = $54;
    $60 = $48;
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $59 = ((($60)) + 12|0);
     $61 = HEAP32[$59>>2]|0;
     $62 = ((($60)) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($61|0)==($63|0);
     if ($64) {
      $65 = HEAP32[$60>>2]|0;
      $66 = ((($65)) + 36|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_ii[$67 & 1023]($60)|0);
      $69 = ($68|0)==(-1);
      if ($69) {
       HEAP32[$__b>>2] = 0;
       $70 = 0;
       break;
      } else {
       $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
       $70 = $$pre$i$i$i2;
       break;
      }
     } else {
      $70 = $60;
     }
    }
   } while(0);
   $71 = ($70|0)==(0|0);
   $72 = ($$pre$i2$i$i611|0)==(0|0);
   do {
    if ($72) {
     label = 30;
    } else {
     $73 = ((($$pre$i2$i$i611)) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($$pre$i2$i$i611)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
      $79 = ((($78)) + 36|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
      $82 = ($81|0)==(-1);
      if ($82) {
       HEAP32[$__e>>2] = 0;
       label = 30;
       break;
      }
     }
     if ($71) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 30) {
    if (!($71)) {
     break;
    }
   }
   $83 = HEAP32[$__err>>2]|0;
   $84 = $83 | 2;
   HEAP32[$__err>>2] = $84;
  }
 } while(0);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17488]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17488|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[17496]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((17496|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 18892;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((19060)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((484|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((17496|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(485,(18892|0),(15052|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(485,((18904)|0),(15059|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(485,((18916)|0),(15066|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(485,((18928)|0),(15074|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(485,((18940)|0),(15084|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(485,((18952)|0),(15093|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(485,((18964)|0),(15100|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(485,((18976)|0),(15109|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(485,((18988)|0),(15113|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(485,((19000)|0),(15117|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(485,((19012)|0),(15121|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(485,((19024)|0),(15125|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(485,((19036)|0),(15129|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(485,((19048)|0),(15133|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[4765] = 18892;
                  ___cxa_guard_release((17488|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch_2()|0;
    $43 = tempRet0;
    ___cxa_guard_abort((17488|0));
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[4765]|0;
 return ($41|0);
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19048));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19036));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19024));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19012));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19000));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((18988));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((18976));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((18964));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((18952));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((18940));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((18928));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((18916));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((18904));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(18892);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17504]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17504|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[17512]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((17512|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 19064;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((19352)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((486|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((17512|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(485,(19064|0),(15137|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(485,((19076)|0),(15145|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(485,((19088)|0),(15154|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(485,((19100)|0),(15160|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(485,((19112)|0),(15166|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(485,((19124)|0),(15170|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(485,((19136)|0),(15175|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(485,((19148)|0),(15180|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(485,((19160)|0),(15187|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(485,((19172)|0),(15197|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(485,((19184)|0),(15205|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(485,((19196)|0),(15214|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(485,((19208)|0),(15223|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(485,((19220)|0),(15227|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(485,((19232)|0),(15231|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(485,((19244)|0),(15235|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(485,((19256)|0),(15166|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(485,((19268)|0),(15239|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(485,((19280)|0),(15243|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(485,((19292)|0),(15247|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(485,((19304)|0),(15251|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(485,((19316)|0),(15255|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(485,((19328)|0),(15259|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(485,((19340)|0),(15263|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[4838] = 19064;
                    ___cxa_guard_release((17504|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch_2()|0;
    $63 = tempRet0;
    ___cxa_guard_abort((17504|0));
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[4838]|0;
 return ($61|0);
}
function ___cxx_global_array_dtor_69($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19340));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19328));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19316));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19304));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19292));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19280));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19268));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19256));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19244));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19232));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19220));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19208));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19196));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19184));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19172));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19160));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19148));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19136));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19124));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19112));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19100));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19088));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19076));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(19064);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17520]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17520|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[17528]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((17528|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 19356;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((19644)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((487|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((17528|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(485,(19356|0),(15267|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(485,((19368)|0),(15270|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[4911] = 19356;
      ___cxa_guard_release((17520|0));
      break;
     }
    }
    $18 = ___cxa_find_matching_catch_2()|0;
    $19 = tempRet0;
    ___cxa_guard_abort((17520|0));
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[4911]|0;
 return ($17|0);
}
function ___cxx_global_array_dtor_117($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19632));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19620));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19608));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19596));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19584));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19572));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19560));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19548));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19536));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19524));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19512));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19500));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19488));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19476));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19464));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19452));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19440));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19428));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19416));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19404));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19392));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19380));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((19368));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(19356);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17536]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17536|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(380,(19648|0),(15273|0),20);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch_2()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((17536|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((422|0),(19648|0),(___dso_handle|0))|0);
     ___cxa_guard_release((17536|0));
     break;
    }
   }
  }
 } while(0);
 return (19648|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17544]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17544|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(380,(19660|0),(15294|0),11);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch_2()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((17544|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((422|0),(19660|0),(___dso_handle|0))|0);
     ___cxa_guard_release((17544|0));
     break;
    }
   }
  }
 } while(0);
 return (19660|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17552]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17552|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(380,(19672|0),(15306|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch_2()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((17552|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((422|0),(19672|0),(___dso_handle|0))|0);
     ___cxa_guard_release((17552|0));
     break;
    }
   }
  }
 } while(0);
 return (19672|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17560]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17560|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(380,(19684|0),(15315|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch_2()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((17560|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((422|0),(19684|0),(___dso_handle|0))|0);
     ___cxa_guard_release((17560|0));
     break;
    }
   }
  }
 } while(0);
 return (19684|0);
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $4 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,6568,(6600))|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i21 = 0, $$0$i$i$i$i6 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i12 = 0, $$0$i$i1$i$i27 = 0, $$0$i$i18 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa114 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa118$lcssa = 0, $$lcssa118$lcssa121 = 0;
 var $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa128 = 0, $$lcssa129 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i23 = 0, $$pre$i$i$i8 = 0, $$pre$i3$i$i14 = 0, $$pre$i3$i$i1445 = 0, $$pre$i3$i$i1446 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $or$cond = 0, $phitmp$i4$i$i15 = 0, $tmp$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(346,($0|0),(18852|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 HEAP32[$__err>>2] = 0;
 $$0$ph = $__fmtb;$$pre = 0;
 L4: while(1) {
  $7 = ($$0$ph|0)!=($__fmte|0);
  $8 = $$pre;
  while(1) {
   $9 = ($8|0)==(0);
   $or$cond = $7 & $9;
   $10 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i23 = $10;
    break L4;
   }
   $11 = ($10|0)==(0|0);
   $12 = $10;
   if ($11) {
    $126 = 0;$182 = $12;$183 = 1;
   } else {
    $13 = ((($10)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($10)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14|0)==($16|0);
    if ($17) {
     $18 = HEAP32[$10>>2]|0;
     $19 = ((($18)) + 36|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (FUNCTION_TABLE_ii[$20 & 1023]($10)|0);
     $$0$i$i$i$i = $21;
    } else {
     $22 = HEAP32[$14>>2]|0;
     $$0$i$i$i$i = $22;
    }
    $23 = ($$0$i$i$i$i|0)==(-1);
    if ($23) {
     HEAP32[$__b>>2] = 0;
     $126 = 0;$182 = 0;$183 = 1;
    } else {
     $126 = $10;$182 = $12;$183 = 0;
    }
   }
   $24 = HEAP32[$__e>>2]|0;
   $25 = ($24|0)==(0|0);
   $26 = $24;
   do {
    if ($25) {
     $$ph = $26;
     label = 17;
    } else {
     $27 = ((($24)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($24)) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($28|0)==($30|0);
     if ($31) {
      $32 = HEAP32[$24>>2]|0;
      $33 = ((($32)) + 36|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (FUNCTION_TABLE_ii[$34 & 1023]($24)|0);
      $$0$i$i1$i$i = $35;
     } else {
      $36 = HEAP32[$28>>2]|0;
      $$0$i$i1$i$i = $36;
     }
     $37 = ($$0$i$i1$i$i|0)==(-1);
     if ($37) {
      HEAP32[$__e>>2] = 0;
      $$ph = 0;
      label = 17;
      break;
     } else {
      if ($183) {
       $184 = $24;$185 = $26;
       break;
      } else {
       $$lcssa117 = $126;
       label = 19;
       break L4;
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    label = 0;
    if ($183) {
     $$lcssa117 = $126;
     label = 19;
     break L4;
    } else {
     $184 = 0;$185 = $$ph;
    }
   }
   $40 = HEAP32[$$0$ph>>2]|0;
   $41 = HEAP32[$4>>2]|0;
   $42 = ((($41)) + 52|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($4,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if ($45) {
    $$lcssa114 = $182;$$lcssa118 = $126;$$lcssa125 = $185;
    label = 22;
    break;
   }
   $66 = HEAP32[$$0$ph>>2]|0;
   $67 = HEAP32[$4>>2]|0;
   $68 = ((($67)) + 12|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (FUNCTION_TABLE_iiii[$69 & 1023]($4,8192,$66)|0);
   if ($70) {
    $$lcssa119 = $126;$$lcssa123 = $184;
    label = 30;
    break;
   }
   $125 = ((($126)) + 12|0);
   $127 = HEAP32[$125>>2]|0;
   $128 = ((($126)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$126>>2]|0;
    $132 = ((($131)) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 1023]($126)|0);
    $$0$i$i18 = $134;
   } else {
    $135 = HEAP32[$127>>2]|0;
    $$0$i$i18 = $135;
   }
   $136 = HEAP32[$4>>2]|0;
   $137 = ((($136)) + 28|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (FUNCTION_TABLE_iii[$138 & 511]($4,$$0$i$i18)|0);
   $140 = HEAP32[$$0$ph>>2]|0;
   $141 = HEAP32[$4>>2]|0;
   $142 = ((($141)) + 28|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (FUNCTION_TABLE_iii[$143 & 511]($4,$140)|0);
   $145 = ($139|0)==($144|0);
   if ($145) {
    $$lcssa120 = $126;$$lcssa128 = $125;$$lcssa129 = $128;
    label = 59;
    break;
   }
   HEAP32[$__err>>2] = 4;
   $8 = 4;
  }
  L36: do {
   if ((label|0) == 22) {
    label = 0;
    $46 = ((($$0$ph)) + 4|0);
    $47 = ($46|0)==($__fmte|0);
    if ($47) {
     $$lcssa118$lcssa = $$lcssa118;
     label = 23;
     break L4;
    }
    $48 = HEAP32[$46>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ((($49)) + 52|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$48,0)|0);
    switch ($52<<24>>24) {
    case 48: case 69:  {
     $53 = ((($$0$ph)) + 8|0);
     $54 = ($53|0)==($__fmte|0);
     if ($54) {
      $$lcssa118$lcssa121 = $$lcssa118;
      label = 28;
      break L4;
     }
     $55 = HEAP32[$53>>2]|0;
     $56 = HEAP32[$4>>2]|0;
     $57 = ((($56)) + 52|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($4,$55,0)|0);
     $65 = $46;$__cmd$0 = $59;$__opt$0 = $52;
     break;
    }
    default: {
     $65 = $$0$ph;$__cmd$0 = $52;$__opt$0 = 0;
    }
    }
    $60 = HEAP32[$this>>2]|0;
    $61 = ((($60)) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    HEAP32[$1>>2] = $$lcssa114;
    HEAP32[$2>>2] = $$lcssa125;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
    $63 = (FUNCTION_TABLE_iiiiiiiii[$62 & 511]($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0)|0);
    HEAP32[$__b>>2] = $63;
    $64 = ((($65)) + 8|0);
    $$0$ph$be = $64;
   }
   else if ((label|0) == 30) {
    label = 0;
    $$0$pn = $$0$ph;
    while(1) {
     $$3 = ((($$0$pn)) + 4|0);
     $71 = ($$3|0)==($__fmte|0);
     if ($71) {
      $$3$lcssa = $__fmte;
      break;
     }
     $72 = HEAP32[$$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iiii[$75 & 1023]($4,8192,$72)|0);
     if ($76) {
      $$0$pn = $$3;
     } else {
      $$3$lcssa = $$3;
      break;
     }
    }
    $$pre$i$i$i8 = $$lcssa119;$$pre$i3$i$i14 = $$lcssa123;$89 = $$lcssa123;
    while(1) {
     $77 = ($$pre$i$i$i8|0)==(0|0);
     if ($77) {
      $102 = 1;$104 = 0;
     } else {
      $78 = ((($$pre$i$i$i8)) + 12|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ((($$pre$i$i$i8)) + 16|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($79|0)==($81|0);
      if ($82) {
       $83 = HEAP32[$$pre$i$i$i8>>2]|0;
       $84 = ((($83)) + 36|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (FUNCTION_TABLE_ii[$85 & 1023]($$pre$i$i$i8)|0);
       $$0$i$i$i$i6 = $86;
      } else {
       $87 = HEAP32[$79>>2]|0;
       $$0$i$i$i$i6 = $87;
      }
      $88 = ($$0$i$i$i$i6|0)==(-1);
      if ($88) {
       HEAP32[$__b>>2] = 0;
       $102 = 1;$104 = 0;
      } else {
       $102 = 0;$104 = $$pre$i$i$i8;
      }
     }
     $90 = ($89|0)==(0|0);
     do {
      if ($90) {
       $$pre$i3$i$i1446 = $$pre$i3$i$i14;
       label = 46;
      } else {
       $91 = ((($89)) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($89)) + 16|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($92|0)==($94|0);
       if ($95) {
        $96 = HEAP32[$89>>2]|0;
        $97 = ((($96)) + 36|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = (FUNCTION_TABLE_ii[$98 & 1023]($89)|0);
        $$0$i$i1$i$i12 = $99;
       } else {
        $100 = HEAP32[$92>>2]|0;
        $$0$i$i1$i$i12 = $100;
       }
       $101 = ($$0$i$i1$i$i12|0)==(-1);
       if ($101) {
        HEAP32[$__e>>2] = 0;
        $$pre$i3$i$i1446 = 0;
        label = 46;
        break;
       } else {
        $phitmp$i4$i$i15 = ($$pre$i3$i$i14|0)==(0|0);
        $tmp$i$i17 = $102 ^ $phitmp$i4$i$i15;
        if ($tmp$i$i17) {
         $$pre$i3$i$i1445 = $$pre$i3$i$i14;$186 = $$pre$i3$i$i14;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L36;
        }
       }
      }
     } while(0);
     if ((label|0) == 46) {
      label = 0;
      if ($102) {
       $$0$ph$be = $$3$lcssa;
       break L36;
      } else {
       $$pre$i3$i$i1445 = $$pre$i3$i$i1446;$186 = 0;
      }
     }
     $103 = ((($104)) + 12|0);
     $105 = HEAP32[$103>>2]|0;
     $106 = ((($104)) + 16|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($105|0)==($107|0);
     if ($108) {
      $109 = HEAP32[$104>>2]|0;
      $110 = ((($109)) + 36|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (FUNCTION_TABLE_ii[$111 & 1023]($104)|0);
      $$0$i$i = $112;
     } else {
      $113 = HEAP32[$105>>2]|0;
      $$0$i$i = $113;
     }
     $114 = HEAP32[$4>>2]|0;
     $115 = ((($114)) + 12|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (FUNCTION_TABLE_iiii[$116 & 1023]($4,8192,$$0$i$i)|0);
     if (!($117)) {
      $$0$ph$be = $$3$lcssa;
      break L36;
     }
     $118 = HEAP32[$103>>2]|0;
     $119 = HEAP32[$106>>2]|0;
     $120 = ($118|0)==($119|0);
     if ($120) {
      $121 = HEAP32[$104>>2]|0;
      $122 = ((($121)) + 40|0);
      $123 = HEAP32[$122>>2]|0;
      (FUNCTION_TABLE_ii[$123 & 1023]($104)|0);
      $$pre$i$i$i8 = $104;$$pre$i3$i$i14 = $$pre$i3$i$i1445;$89 = $186;
      continue;
     } else {
      $124 = ((($118)) + 4|0);
      HEAP32[$103>>2] = $124;
      $$pre$i$i$i8 = $104;$$pre$i3$i$i14 = $$pre$i3$i$i1445;$89 = $186;
      continue;
     }
    }
   }
   else if ((label|0) == 59) {
    label = 0;
    $146 = HEAP32[$$lcssa128>>2]|0;
    $147 = HEAP32[$$lcssa129>>2]|0;
    $148 = ($146|0)==($147|0);
    if ($148) {
     $149 = HEAP32[$$lcssa120>>2]|0;
     $150 = ((($149)) + 40|0);
     $151 = HEAP32[$150>>2]|0;
     (FUNCTION_TABLE_ii[$151 & 1023]($$lcssa120)|0);
    } else {
     $152 = ((($146)) + 4|0);
     HEAP32[$$lcssa128>>2] = $152;
    }
    $153 = ((($$0$ph)) + 4|0);
    $$0$ph$be = $153;
   }
  } while(0);
  $$pre$pre = HEAP32[$__err>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 19) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i23 = $$lcssa117;
 }
 else if ((label|0) == 23) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i23 = $$lcssa118$lcssa;
 }
 else if ((label|0) == 28) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i23 = $$lcssa118$lcssa121;
 }
 $154 = ($$pre$i$i$i23|0)==(0|0);
 if ($154) {
  $181 = 0;$187 = 1;
 } else {
  $155 = ((($$pre$i$i$i23)) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($$pre$i$i$i23)) + 16|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($156|0)==($158|0);
  if ($159) {
   $160 = HEAP32[$$pre$i$i$i23>>2]|0;
   $161 = ((($160)) + 36|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (FUNCTION_TABLE_ii[$162 & 1023]($$pre$i$i$i23)|0);
   $$0$i$i$i$i21 = $163;
  } else {
   $164 = HEAP32[$156>>2]|0;
   $$0$i$i$i$i21 = $164;
  }
  $165 = ($$0$i$i$i$i21|0)==(-1);
  if ($165) {
   HEAP32[$__b>>2] = 0;
   $181 = 0;$187 = 1;
  } else {
   $181 = $$pre$i$i$i23;$187 = 0;
  }
 }
 $166 = HEAP32[$__e>>2]|0;
 $167 = ($166|0)==(0|0);
 do {
  if ($167) {
   label = 77;
  } else {
   $168 = ((($166)) + 12|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ((($166)) + 16|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($169|0)==($171|0);
   if ($172) {
    $173 = HEAP32[$166>>2]|0;
    $174 = ((($173)) + 36|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (FUNCTION_TABLE_ii[$175 & 1023]($166)|0);
    $$0$i$i1$i$i27 = $176;
   } else {
    $177 = HEAP32[$169>>2]|0;
    $$0$i$i1$i$i27 = $177;
   }
   $178 = ($$0$i$i1$i$i27|0)==(-1);
   if ($178) {
    HEAP32[$__e>>2] = 0;
    label = 77;
    break;
   } else {
    if ($187) {
     break;
    } else {
     label = 79;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 77) {
  if ($187) {
   label = 79;
  }
 }
 if ((label|0) == 79) {
  $179 = HEAP32[$__err>>2]|0;
  $180 = $179 | 2;
  HEAP32[$__err>>2] = $180;
 }
 STACKTOP = sp;return ($181|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 4|0);
 $15 = $11 ? $14 : $13;
 $16 = HEAP32[$14>>2]|0;
 $17 = $9&255;
 $18 = $17 >>> 1;
 $19 = $11 ? $18 : $16;
 $20 = (($15) + ($19<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
 $21 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$15,$20)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(346,($0|0),(18852|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($4)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(346,($0|0),(18852|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = ((($5)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this,$__b,$__e,$__iob,$__err,$__tm) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$0>>2] = $2;
 __THREW__ = 0;
 $3 = (invoke_iii(346,($0|0),(18852|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($2)|0);
  $6 = ((($__tm)) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$3);
  $8 = HEAP32[$__b>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$2 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $148 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $148 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $148 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($148) {
     $149 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($148) {
   label = 16;
  } else {
   $149 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
   if (!($42)) {
    $43 = HEAP32[$__err>>2]|0;
    $44 = $43 | 4;
    HEAP32[$__err>>2] = $44;
    $$2 = 0;
    break;
   }
   $45 = HEAP32[$__ct>>2]|0;
   $46 = ((($45)) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
   $49 = $48 << 24 >> 24;
   $50 = HEAP32[$__b>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($50)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = HEAP32[$50>>2]|0;
    $57 = ((($56)) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
    $$0$in = $__n;$$pre$i3$i$i10 = $149;$73 = $149;$__r$0$in = $49;
   } else {
    $59 = ((($52)) + 4|0);
    HEAP32[$51>>2] = $59;
    $$0$in = $__n;$$pre$i3$i$i10 = $149;$73 = $149;$__r$0$in = $49;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $60 = HEAP32[$__b>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $87 = 1;
     } else {
      $62 = ((($60)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($60)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = ((($67)) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
       $$0$i$i$i$i2 = $70;
      } else {
       $71 = HEAP32[$63>>2]|0;
       $$0$i$i$i$i2 = $71;
      }
      $72 = ($$0$i$i$i$i2|0)==(-1);
      if ($72) {
       HEAP32[$__b>>2] = 0;
       $87 = 1;
       break;
      } else {
       $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
       $87 = $phitmp$i$i$i5;
       break;
      }
     }
    } while(0);
    $74 = ($73|0)==(0|0);
    do {
     if ($74) {
      $$pre$i3$i$i25 = $$pre$i3$i$i10;$150 = 0;$86 = 1;
     } else {
      $75 = ((($73)) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($73)) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if ($79) {
       $80 = HEAP32[$73>>2]|0;
       $81 = ((($80)) + 36|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (FUNCTION_TABLE_ii[$82 & 1023]($73)|0);
       $$0$i$i1$i$i8 = $83;
      } else {
       $84 = HEAP32[$76>>2]|0;
       $$0$i$i1$i$i8 = $84;
      }
      $85 = ($$0$i$i1$i$i8|0)==(-1);
      if ($85) {
       HEAP32[$__e>>2] = 0;
       $$pre$i3$i$i25 = 0;$150 = 0;$86 = 1;
       break;
      } else {
       $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
       $$pre$i3$i$i25 = $$pre$i3$i$i10;$150 = $$pre$i3$i$i10;$86 = $phitmp$i4$i$i11;
       break;
      }
     }
    } while(0);
    $tmp$i$i13 = $87 ^ $86;
    $88 = ($$0$in|0)>(1);
    $89 = $88 & $tmp$i$i13;
    $90 = HEAP32[$__b>>2]|0;
    if (!($89)) {
     $$lcssa = $90;$$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;$__r$0$lcssa = $__r$0;
     break;
    }
    $91 = ((($90)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($90)) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$90>>2]|0;
     $97 = ((($96)) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_ii[$98 & 1023]($90)|0);
     $$0$i$i14 = $99;
    } else {
     $100 = HEAP32[$92>>2]|0;
     $$0$i$i14 = $100;
    }
    $101 = HEAP32[$__ct>>2]|0;
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (FUNCTION_TABLE_iiii[$103 & 1023]($__ct,2048,$$0$i$i14)|0);
    if (!($104)) {
     $$2 = $__r$0;
     break L22;
    }
    $105 = ($__r$0*10)|0;
    $106 = HEAP32[$__ct>>2]|0;
    $107 = ((($106)) + 52|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (FUNCTION_TABLE_iiii[$108 & 1023]($__ct,$$0$i$i14,0)|0);
    $110 = $109 << 24 >> 24;
    $111 = (($110) + ($105))|0;
    $112 = HEAP32[$__b>>2]|0;
    $113 = ((($112)) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($112)) + 16|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($114|0)==($116|0);
    if ($117) {
     $118 = HEAP32[$112>>2]|0;
     $119 = ((($118)) + 40|0);
     $120 = HEAP32[$119>>2]|0;
     (FUNCTION_TABLE_ii[$120 & 1023]($112)|0);
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $150;$__r$0$in = $111;
     continue;
    } else {
     $121 = ((($114)) + 4|0);
     HEAP32[$113>>2] = $121;
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $150;$__r$0$in = $111;
     continue;
    }
   }
   $122 = ($$lcssa|0)==(0|0);
   do {
    if ($122) {
     $151 = 1;
    } else {
     $123 = ((($$lcssa)) + 12|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($$lcssa)) + 16|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($124|0)==($126|0);
     if ($127) {
      $128 = HEAP32[$$lcssa>>2]|0;
      $129 = ((($128)) + 36|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (FUNCTION_TABLE_ii[$130 & 1023]($$lcssa)|0);
      $$0$i$i$i$i17 = $131;
     } else {
      $132 = HEAP32[$124>>2]|0;
      $$0$i$i$i$i17 = $132;
     }
     $133 = ($$0$i$i$i$i17|0)==(-1);
     if ($133) {
      HEAP32[$__b>>2] = 0;
      $151 = 1;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
      $151 = $phitmp$i$i$i20;
      break;
     }
    }
   } while(0);
   $134 = ($$pre$i3$i$i25$lcssa|0)==(0|0);
   do {
    if ($134) {
     label = 60;
    } else {
     $135 = ((($$pre$i3$i$i25$lcssa)) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($$pre$i3$i$i25$lcssa)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$$pre$i3$i$i25$lcssa>>2]|0;
      $141 = ((($140)) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (FUNCTION_TABLE_ii[$142 & 1023]($$pre$i3$i$i25$lcssa)|0);
      $$0$i$i1$i$i23 = $143;
     } else {
      $144 = HEAP32[$136>>2]|0;
      $$0$i$i1$i$i23 = $144;
     }
     $145 = ($$0$i$i1$i$i23|0)==(-1);
     if ($145) {
      HEAP32[$__e>>2] = 0;
      label = 60;
      break;
     } else {
      if ($151) {
       $$2 = $__r$0$lcssa;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($151)) {
     $$2 = $__r$0$lcssa;
     break;
    }
   }
   $146 = HEAP32[$__err>>2]|0;
   $147 = $146 | 2;
   HEAP32[$__err>>2] = $147;
   $$2 = $__r$0$lcssa;
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 60|0;
 $18 = sp + 56|0;
 $19 = sp + 52|0;
 $20 = sp + 48|0;
 $21 = sp + 44|0;
 $22 = sp + 40|0;
 $23 = sp + 36|0;
 $24 = sp + 32|0;
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $28 = sp + 16|0;
 $29 = sp + 12|0;
 $30 = sp + 8|0;
 $31 = sp + 4|0;
 $32 = sp;
 HEAP32[$__err>>2] = 0;
 $33 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$1>>2] = $33;
 __THREW__ = 0;
 $34 = (invoke_iii(346,($1|0),(18852|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
 $37 = $__fmt << 24 >> 24;
 do {
  switch ($37|0) {
  case 65: case 97:  {
   $40 = ((($__tm)) + 24|0);
   $41 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$40,$__b,$$byval_copy,$__err,$34);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $42 = ((($__tm)) + 16|0);
   $43 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $43;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$42,$__b,$$byval_copy1,$__err,$34);
   label = 28;
   break;
  }
  case 99:  {
   $44 = ((($this)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($44)|0);
   $49 = HEAP32[$__b>>2]|0;
   HEAP32[$4>>2] = $49;
   $50 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $50;
   $51 = HEAP8[$48>>0]|0;
   $52 = $51 & 1;
   $53 = ($52<<24>>24)==(0);
   $54 = ((($48)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($48)) + 4|0);
   $57 = $53 ? $56 : $55;
   $58 = HEAP32[$56>>2]|0;
   $59 = $51&255;
   $60 = $59 >>> 1;
   $61 = $53 ? $60 : $58;
   $62 = (($57) + ($61<<2)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
   $63 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$57,$62)|0);
   HEAP32[$__b>>2] = $63;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $64 = ((($__tm)) + 12|0);
   $65 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $65;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$64,$__b,$$byval_copy4,$__err,$34);
   label = 28;
   break;
  }
  case 68:  {
   $66 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $66;
   $67 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $67;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;
   $68 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,6600,(6632))|0);
   HEAP32[$__b>>2] = $68;
   label = 28;
   break;
  }
  case 70:  {
   $69 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $69;
   $70 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $70;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;
   $71 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,6632,(6664))|0);
   HEAP32[$__b>>2] = $71;
   label = 28;
   break;
  }
  case 72:  {
   $72 = ((($__tm)) + 8|0);
   $73 = HEAP32[$__e>>2]|0;
   HEAP32[$11>>2] = $73;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$72,$__b,$$byval_copy9,$__err,$34);
   label = 28;
   break;
  }
  case 73:  {
   $74 = ((($__tm)) + 8|0);
   $75 = HEAP32[$__e>>2]|0;
   HEAP32[$12>>2] = $75;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$74,$__b,$$byval_copy10,$__err,$34);
   label = 28;
   break;
  }
  case 106:  {
   $76 = ((($__tm)) + 28|0);
   $77 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $77;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$76,$__b,$$byval_copy11,$__err,$34);
   label = 28;
   break;
  }
  case 109:  {
   $78 = ((($__tm)) + 16|0);
   $79 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $79;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$78,$__b,$$byval_copy12,$__err,$34);
   label = 28;
   break;
  }
  case 77:  {
   $80 = ((($__tm)) + 4|0);
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $81;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$15>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$80,$__b,$$byval_copy13,$__err,$34);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $82 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $82;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$16>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy14,$__err,$34);
   label = 28;
   break;
  }
  case 112:  {
   $83 = ((($__tm)) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $84;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy15,$__err,$34);
   label = 28;
   break;
  }
  case 114:  {
   $85 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $85;
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $86;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
   $87 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,6664,(6708))|0);
   HEAP32[$__b>>2] = $87;
   label = 28;
   break;
  }
  case 82:  {
   $88 = HEAP32[$__b>>2]|0;
   HEAP32[$20>>2] = $88;
   $89 = HEAP32[$__e>>2]|0;
   HEAP32[$21>>2] = $89;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$20>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$21>>2]|0;
   $90 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,6708,(6728))|0);
   HEAP32[$__b>>2] = $90;
   label = 28;
   break;
  }
  case 83:  {
   $91 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $91;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy20,$__err,$34);
   label = 28;
   break;
  }
  case 84:  {
   $92 = HEAP32[$__b>>2]|0;
   HEAP32[$23>>2] = $92;
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$24>>2] = $93;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$23>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$24>>2]|0;
   $94 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,6728,(6760))|0);
   HEAP32[$__b>>2] = $94;
   label = 28;
   break;
  }
  case 119:  {
   $95 = ((($__tm)) + 24|0);
   $96 = HEAP32[$__e>>2]|0;
   HEAP32[$25>>2] = $96;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$25>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$95,$__b,$$byval_copy23,$__err,$34);
   label = 28;
   break;
  }
  case 120:  {
   $97 = HEAP32[$this>>2]|0;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$__b>>2]|0;
   HEAP32[$26>>2] = $100;
   $101 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $101;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$27>>2]|0;
   $102 = (FUNCTION_TABLE_iiiiiii[$99 & 511]($this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm)|0);
   $$sroa$07$0 = $102;
   break;
  }
  case 88:  {
   $103 = ((($this)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_ii[$106 & 1023]($103)|0);
   $108 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $108;
   $109 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $109;
   $110 = HEAP8[$107>>0]|0;
   $111 = $110 & 1;
   $112 = ($111<<24>>24)==(0);
   $113 = ((($107)) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ((($107)) + 4|0);
   $116 = $112 ? $115 : $114;
   $117 = HEAP32[$115>>2]|0;
   $118 = $110&255;
   $119 = $118 >>> 1;
   $120 = $112 ? $119 : $117;
   $121 = (($116) + ($120<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$28>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$29>>2]|0;
   $122 = (__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$116,$121)|0);
   HEAP32[$__b>>2] = $122;
   label = 28;
   break;
  }
  case 121:  {
   $123 = ((($__tm)) + 20|0);
   $124 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $124;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$30>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$123,$__b,$$byval_copy28,$__err,$34);
   label = 28;
   break;
  }
  case 89:  {
   $125 = ((($__tm)) + 20|0);
   $126 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $126;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$125,$__b,$$byval_copy29,$__err,$34);
   label = 28;
   break;
  }
  case 37:  {
   $127 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $127;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$34);
   label = 28;
   break;
  }
  default: {
   $128 = HEAP32[$__err>>2]|0;
   $129 = $128 | 4;
   HEAP32[$__err>>2] = $129;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $130 = HEAP32[$__b>>2]|0;
  $$sroa$07$0 = $130;
 }
 STACKTOP = sp;return ($$sroa$07$0|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = ((($0)) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ((($0)) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = ((($7)) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = ((($13)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($13)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = ((($20)) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($26)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = ((($32)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($41)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = ((($47)) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = ((($43)) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = ((($51)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($51)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = ((($58)) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = ((($$pre$i3$i$i9)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($$pre$i3$i$i9)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = ((($70)) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($80) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $76 = HEAP32[$__err>>2]|0;
  $77 = $76 | 2;
  HEAP32[$__err>>2] = $77;
 }
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = ((($5)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = ((($5)) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = ((($5)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = ((($5)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ((($7)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = ((($13)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = ((($20)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = ((($34)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = ((($39)) + 52|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
   $43 = ($42<<24>>24)==(37);
   if (!($43)) {
    $44 = HEAP32[$__err>>2]|0;
    $45 = $44 | 4;
    HEAP32[$__err>>2] = $45;
    break;
   }
   $46 = HEAP32[$__b>>2]|0;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($46)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $53 = HEAP32[$46>>2]|0;
    $54 = ((($53)) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    (FUNCTION_TABLE_ii[$55 & 1023]($46)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $56 = ($$pre|0)==(0|0);
    if ($56) {
     $84 = 1;
    } else {
     $58 = $$pre;
     label = 25;
    }
   } else {
    $52 = ((($48)) + 4|0);
    HEAP32[$47>>2] = $52;
    $58 = $46;
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $57 = ((($58)) + 12|0);
     $59 = HEAP32[$57>>2]|0;
     $60 = ((($58)) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $63 = HEAP32[$58>>2]|0;
      $64 = ((($63)) + 36|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($58)|0);
      $$0$i$i$i$i1 = $66;
     } else {
      $67 = HEAP32[$59>>2]|0;
      $$0$i$i$i$i1 = $67;
     }
     $68 = ($$0$i$i$i$i1|0)==(-1);
     if ($68) {
      HEAP32[$__b>>2] = 0;
      $84 = 1;
      break;
     } else {
      $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
      $84 = $phitmp$i$i$i4;
      break;
     }
    }
   } while(0);
   $69 = ($$pre$i3$i$i915|0)==(0|0);
   do {
    if ($69) {
     label = 37;
    } else {
     $70 = ((($$pre$i3$i$i915)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($$pre$i3$i$i915)) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
      $76 = ((($75)) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
      $$0$i$i1$i$i7 = $78;
     } else {
      $79 = HEAP32[$71>>2]|0;
      $$0$i$i1$i$i7 = $79;
     }
     $80 = ($$0$i$i1$i$i7|0)==(-1);
     if ($80) {
      HEAP32[$__e>>2] = 0;
      label = 37;
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 37) {
    if (!($84)) {
     break;
    }
   }
   $81 = HEAP32[$__err>>2]|0;
   $82 = $81 | 2;
   HEAP32[$__err>>2] = $82;
  }
 } while(0);
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17568]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17568|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[17576]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((17576|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 19704;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((19872)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((488|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((17576|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(489,(19704|0),(6760|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(489,((19716)|0),(6788|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      (invoke_iii(489,((19728)|0),(6816|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       (invoke_iii(489,((19740)|0),(6848|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __THREW__ = 0;
        (invoke_iii(489,((19752)|0),(6888|0))|0);
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         (invoke_iii(489,((19764)|0),(6924|0))|0);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          (invoke_iii(489,((19776)|0),(6952|0))|0);
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           (invoke_iii(489,((19788)|0),(6988|0))|0);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            (invoke_iii(489,((19800)|0),(7004|0))|0);
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             (invoke_iii(489,((19812)|0),(7020|0))|0);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              (invoke_iii(489,((19824)|0),(7036|0))|0);
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               (invoke_iii(489,((19836)|0),(7052|0))|0);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                (invoke_iii(489,((19848)|0),(7068|0))|0);
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 (invoke_iii(489,((19860)|0),(7084|0))|0);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  HEAP32[4968] = 19704;
                  ___cxa_guard_release((17568|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $42 = ___cxa_find_matching_catch_2()|0;
    $43 = tempRet0;
    ___cxa_guard_abort((17568|0));
    ___resumeException($42|0);
    // unreachable;
   }
  }
 } while(0);
 $41 = HEAP32[4968]|0;
 return ($41|0);
}
function ___cxx_global_array_dtor_54($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19860));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19848));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19836));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19824));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19812));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19800));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19788));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19776));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19764));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19752));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19740));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19728));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19716));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19704);
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17584]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17584|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[17592]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((17592|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 19876;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((20164)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((490|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((17592|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(489,(19876|0),(7100|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    do {
     if (!($14)) {
      __THREW__ = 0;
      (invoke_iii(489,((19888)|0),(7132|0))|0);
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if (!($16)) {
       __THREW__ = 0;
       (invoke_iii(489,((19900)|0),(7168|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if (!($18)) {
        __THREW__ = 0;
        (invoke_iii(489,((19912)|0),(7192|0))|0);
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if (!($20)) {
         __THREW__ = 0;
         (invoke_iii(489,((19924)|0),(7216|0))|0);
         $21 = __THREW__; __THREW__ = 0;
         $22 = $21&1;
         if (!($22)) {
          __THREW__ = 0;
          (invoke_iii(489,((19936)|0),(7232|0))|0);
          $23 = __THREW__; __THREW__ = 0;
          $24 = $23&1;
          if (!($24)) {
           __THREW__ = 0;
           (invoke_iii(489,((19948)|0),(7252|0))|0);
           $25 = __THREW__; __THREW__ = 0;
           $26 = $25&1;
           if (!($26)) {
            __THREW__ = 0;
            (invoke_iii(489,((19960)|0),(7272|0))|0);
            $27 = __THREW__; __THREW__ = 0;
            $28 = $27&1;
            if (!($28)) {
             __THREW__ = 0;
             (invoke_iii(489,((19972)|0),(7300|0))|0);
             $29 = __THREW__; __THREW__ = 0;
             $30 = $29&1;
             if (!($30)) {
              __THREW__ = 0;
              (invoke_iii(489,((19984)|0),(7340|0))|0);
              $31 = __THREW__; __THREW__ = 0;
              $32 = $31&1;
              if (!($32)) {
               __THREW__ = 0;
               (invoke_iii(489,((19996)|0),(7372|0))|0);
               $33 = __THREW__; __THREW__ = 0;
               $34 = $33&1;
               if (!($34)) {
                __THREW__ = 0;
                (invoke_iii(489,((20008)|0),(7408|0))|0);
                $35 = __THREW__; __THREW__ = 0;
                $36 = $35&1;
                if (!($36)) {
                 __THREW__ = 0;
                 (invoke_iii(489,((20020)|0),(7444|0))|0);
                 $37 = __THREW__; __THREW__ = 0;
                 $38 = $37&1;
                 if (!($38)) {
                  __THREW__ = 0;
                  (invoke_iii(489,((20032)|0),(7460|0))|0);
                  $39 = __THREW__; __THREW__ = 0;
                  $40 = $39&1;
                  if (!($40)) {
                   __THREW__ = 0;
                   (invoke_iii(489,((20044)|0),(7476|0))|0);
                   $41 = __THREW__; __THREW__ = 0;
                   $42 = $41&1;
                   if (!($42)) {
                    __THREW__ = 0;
                    (invoke_iii(489,((20056)|0),(7492|0))|0);
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(489,((20068)|0),(7216|0))|0);
                    $45 = __THREW__; __THREW__ = 0;
                    $46 = $45&1;
                    if ($46) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(489,((20080)|0),(7508|0))|0);
                    $47 = __THREW__; __THREW__ = 0;
                    $48 = $47&1;
                    if ($48) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(489,((20092)|0),(7524|0))|0);
                    $49 = __THREW__; __THREW__ = 0;
                    $50 = $49&1;
                    if ($50) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(489,((20104)|0),(7540|0))|0);
                    $51 = __THREW__; __THREW__ = 0;
                    $52 = $51&1;
                    if ($52) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(489,((20116)|0),(7556|0))|0);
                    $53 = __THREW__; __THREW__ = 0;
                    $54 = $53&1;
                    if ($54) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(489,((20128)|0),(7572|0))|0);
                    $55 = __THREW__; __THREW__ = 0;
                    $56 = $55&1;
                    if ($56) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(489,((20140)|0),(7588|0))|0);
                    $57 = __THREW__; __THREW__ = 0;
                    $58 = $57&1;
                    if ($58) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(489,((20152)|0),(7604|0))|0);
                    $59 = __THREW__; __THREW__ = 0;
                    $60 = $59&1;
                    if ($60) {
                     break;
                    }
                    HEAP32[5041] = 19876;
                    ___cxa_guard_release((17584|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $62 = ___cxa_find_matching_catch_2()|0;
    $63 = tempRet0;
    ___cxa_guard_abort((17584|0));
    ___resumeException($62|0);
    // unreachable;
   }
  }
 } while(0);
 $61 = HEAP32[5041]|0;
 return ($61|0);
}
function ___cxx_global_array_dtor_93($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20152));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20140));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20128));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20116));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20104));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20092));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20080));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20068));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20056));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20044));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20032));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20020));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20008));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19996));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19984));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19972));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19960));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19948));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19936));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19924));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19912));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19900));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((19888));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(19876);
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17600]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17600|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[17608]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((17608|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $9 = 20168;
      while(1) {
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $8 = (($9) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$8>>2] = 0;
        $10 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $10;
       }
       $11 = ((($9)) + 12|0);
       $12 = ($11|0)==((20456)|0);
       if ($12) {
        break;
       } else {
        $9 = $11;
       }
      }
      (___cxa_atexit((491|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((17608|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(489,(20168|0),(7620|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     __THREW__ = 0;
     (invoke_iii(489,((20180)|0),(7632|0))|0);
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      HEAP32[5114] = 20168;
      ___cxa_guard_release((17600|0));
      break;
     }
    }
    $18 = ___cxa_find_matching_catch_2()|0;
    $19 = tempRet0;
    ___cxa_guard_abort((17600|0));
    ___resumeException($18|0);
    // unreachable;
   }
  }
 } while(0);
 $17 = HEAP32[5114]|0;
 return ($17|0);
}
function ___cxx_global_array_dtor_120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20444));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20432));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20420));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20408));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20396));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20384));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20372));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20360));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20348));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20336));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20324));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20312));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20300));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20288));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20276));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20264));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20252));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20240));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20228));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20216));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20204));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20192));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev((20180));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(20168);
 return;
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17616]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17616|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(492,(7644|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(493,(20460|0),(7644|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((494|0),(20460|0),(___dso_handle|0))|0);
      ___cxa_guard_release((17616|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((17616|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (20460|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17624]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17624|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(492,(7728|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(493,(20472|0),(7728|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((494|0),(20472|0),(___dso_handle|0))|0);
      ___cxa_guard_release((17624|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((17624|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (20472|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17632]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17632|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(492,(7776|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(493,(20484|0),(7776|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((494|0),(20484|0),(___dso_handle|0))|0);
      ___cxa_guard_release((17632|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((17632|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (20484|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17640]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17640|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(492,(7812|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(493,(20496|0),(7812|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((494|0),(20496|0),(___dso_handle|0))|0);
      ___cxa_guard_release((17640|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch_2()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((17640|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (20496|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(470)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = ($0|0)==($1|0);
   if (!($4)) {
    $5 = HEAP32[$this>>2]|0;
    __THREW__ = 0;
    invoke_vi(495,($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
   }
   return;
  }
 } while(0);
 $8 = ___cxa_find_matching_catch_3(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$sroa$02$0$i = 0, $$0$i$i = 0, $$sroa$02$0$i = 0, $$sroa$02$0$i$lcssa = 0, $$sroa$02$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $$0$i$i = $__nar;$$sroa$02$0$i = $5;
 while(1) {
  $6 = ($$0$i$i|0)==($4|0);
  if ($6) {
   $$sroa$02$0$i$lcssa = $$sroa$02$0$i;
   break;
  }
  $7 = HEAP8[$$0$i$i>>0]|0;
  $8 = ($$sroa$02$0$i|0)==(0|0);
  do {
   if ($8) {
    $$sroa$02$1$i = 0;
   } else {
    $9 = ((($$sroa$02$0$i)) + 24|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($$sroa$02$0$i)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10|0)==($12|0);
    if ($13) {
     $15 = HEAP32[$$sroa$02$0$i>>2]|0;
     $16 = ((($15)) + 52|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $7&255;
     $19 = (FUNCTION_TABLE_iii[$17 & 511]($$sroa$02$0$i,$18)|0);
     $20 = ($19|0)==(-1);
     $$$sroa$02$0$i = $20 ? 0 : $$sroa$02$0$i;
     $$sroa$02$1$i = $$$sroa$02$0$i;
     break;
    } else {
     $14 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $14;
     HEAP8[$10>>0] = $7;
     $$sroa$02$1$i = $$sroa$02$0$i;
     break;
    }
   }
  } while(0);
  $21 = ((($$0$i$i)) + 1|0);
  $$0$i$i = $21;$$sroa$02$0$i = $$sroa$02$1$i;
 }
 STACKTOP = sp;return ($$sroa$02$0$i$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = ((($fmt)) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = ((($fmt)) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = ((($fmt)) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $__nb;
 $6 = (($4) - ($5))|0;
 $7 = HEAP32[$this>>2]|0;
 $8 = (_strftime_l(($__nb|0),($6|0),($fmt|0),($__tm|0),($7|0))|0);
 $9 = (($__nb) + ($8)|0);
 HEAP32[$__ne>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$sroa$02$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$02$0$i = 0, $$sroa$02$0$i$lcssa = 0, $$sroa$02$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = ((($__nar)) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = ((($this)) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $$0$i$i = $__nar;$$sroa$02$0$i = $5;
 while(1) {
  $6 = ($$0$i$i|0)==($4|0);
  if ($6) {
   $$sroa$02$0$i$lcssa = $$sroa$02$0$i;
   break;
  }
  $7 = HEAP32[$$0$i$i>>2]|0;
  $8 = ($$sroa$02$0$i|0)==(0|0);
  if ($8) {
   $$sroa$02$1$i = 0;
  } else {
   $9 = ((($$sroa$02$0$i)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($$sroa$02$0$i)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10|0)==($12|0);
   if ($13) {
    $14 = HEAP32[$$sroa$02$0$i>>2]|0;
    $15 = ((($14)) + 52|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iii[$16 & 511]($$sroa$02$0$i,$7)|0);
    $$0$i$i$i$i = $17;
   } else {
    $18 = ((($10)) + 4|0);
    HEAP32[$9>>2] = $18;
    HEAP32[$10>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $19 = ($$0$i$i$i$i|0)==(-1);
   $$$sroa$02$0$i = $19 ? 0 : $$sroa$02$0$i;
   $$sroa$02$1$i = $$$sroa$02$0$i;
  }
  $20 = ((($$0$i$i)) + 4|0);
  $$0$i$i = $20;$$sroa$02$0$i = $$sroa$02$1$i;
 }
 STACKTOP = sp;return ($$sroa$02$0$i$lcssa|0);
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = ((($__nar)) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $__wb;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$this>>2]|0;
 $10 = (_uselocale($9)|0);
 __THREW__ = 0;
 $11 = (invoke_iiiii(496,($__wb|0),($__nb|0),($8|0),($mb|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  $21 = ($10|0)==(0|0);
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(472,($10|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $24 = ___cxa_find_matching_catch_3(0|0)|0;
    $25 = tempRet0;
    ___clang_call_terminate($24);
    // unreachable;
   }
  }
  ___resumeException($19|0);
  // unreachable;
 }
 $14 = ($10|0)==(0|0);
 if (!($14)) {
  __THREW__ = 0;
  (invoke_ii(472,($10|0))|0);
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  }
 }
 $26 = ($11|0)==(-1);
 if ($26) {
  __ZNSt3__121__throw_runtime_errorEPKc(15586);
  // unreachable;
 } else {
  $27 = (($__wb) + ($11<<2)|0);
  HEAP32[$__we>>2] = $27;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(448,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(1432|0),(316|0));
  // unreachable;
 }
}
function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$114 = 0, $$115 = 0, $$1212 = 0, $$1213 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre16 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0;
 var $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 138|0;
 $0 = sp + 4|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (497);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(345,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$114 = $33;$$1212 = $34;$108 = 497;$109 = $__wbuf;
  label = 47;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(346,($__loc|0),(18820|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(498,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 32|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(15835|0),((15845)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(98);
       $25 = $22;
       $26 = $21;
       if ($24) {
        $27 = (($23) + 2)|0;
        $28 = (_malloc($27)|0);
        $29 = $28;
        $30 = ($28|0)==(0|0);
        if ($30) {
         __THREW__ = 0;
         invoke_v(458);
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if ($32) {
          $__h$sroa$0$0 = $29;
         } else {
          $__h$sroa$0$1 = $29;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $__h$sroa$0$1 = $29;$__nc$0 = $28;
         label = 13;
        }
       } else {
        $__h$sroa$0$1 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $41 = HEAP8[$__neg>>0]|0;
         $42 = ($41<<24>>24)==(0);
         if ($42) {
          $__nc$1 = $__nc$0;
         } else {
          $43 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $43;
         }
         $44 = ((($__atoms)) + 10|0);
         $45 = $__atoms;
         $47 = $26;$__nc$2 = $__nc$1;$__w$0 = $25;
         while(1) {
          $46 = ($__w$0>>>0)<($47>>>0);
          if (!($46)) {
           $__nc$2$lcssa = $__nc$2;
           break;
          }
          $50 = HEAP8[$__w$0>>0]|0;
          $$0$i = $__atoms;
          while(1) {
           $51 = ($$0$i|0)==($44|0);
           if ($51) {
            $$0$lcssa$i = $44;
            break;
           }
           $52 = HEAP8[$$0$i>>0]|0;
           $53 = ($52<<24>>24)==($50<<24>>24);
           if ($53) {
            $$0$lcssa$i = $$0$i;
            break;
           }
           $54 = ((($$0$i)) + 1|0);
           $$0$i = $54;
          }
          $55 = $$0$lcssa$i;
          $56 = (($55) - ($45))|0;
          $57 = (15835 + ($56)|0);
          $58 = HEAP8[$57>>0]|0;
          HEAP8[$__nc$2>>0] = $58;
          $59 = ((($__w$0)) + 1|0);
          $60 = ((($__nc$2)) + 1|0);
          $$pre = HEAP32[$__wn>>2]|0;
          $47 = $$pre;$__nc$2 = $60;$__w$0 = $59;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $48 = (_sscanf($__nbuf,15846,$vararg_buffer)|0);
         $49 = ($48|0)==(1);
         if (!($49)) {
          __THREW__ = 0;
          invoke_vi(499,(15850|0));
          $61 = __THREW__; __THREW__ = 0;
          $62 = $61&1;
          if ($62) {
           $__h$sroa$0$0 = $__h$sroa$0$1;
           break;
          }
         }
         $63 = ($__h$sroa$0$1|0)==(0);
         if (!($63)) {
          $64 = $__h$sroa$0$1;
          _free($64);
         }
         break L7;
        }
       } while(0);
       $37 = ___cxa_find_matching_catch_2()|0;
       $38 = tempRet0;
       $39 = ($__h$sroa$0$0|0)==(0);
       if ($39) {
        $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $40 = $__h$sroa$0$0;
       _free($40);
       $$0 = $37;$$01 = $38;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $65 = HEAP32[$__b>>2]|0;
     $66 = ($65|0)==(0|0);
     do {
      if ($66) {
       $79 = 0;
      } else {
       $67 = ((($65)) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ((($65)) + 16|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($68|0)==($70|0);
       if ($71) {
        $72 = HEAP32[$65>>2]|0;
        $73 = ((($72)) + 36|0);
        $74 = HEAP32[$73>>2]|0;
        __THREW__ = 0;
        $75 = (invoke_ii($74|0,($65|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 10;
         break L4;
        }
        $78 = ($75|0)==(-1);
        if ($78) {
         HEAP32[$__b>>2] = 0;
         $79 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $79 = $$pre$i$i$i;
         break;
        }
       } else {
        $79 = $65;
       }
      }
     } while(0);
     $80 = ($79|0)==(0|0);
     $81 = HEAP32[$__e>>2]|0;
     $82 = ($81|0)==(0|0);
     do {
      if ($82) {
       label = 39;
      } else {
       $83 = ((($81)) + 12|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ((($81)) + 16|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($84|0)==($86|0);
       if ($87) {
        $88 = HEAP32[$81>>2]|0;
        $89 = ((($88)) + 36|0);
        $90 = HEAP32[$89>>2]|0;
        __THREW__ = 0;
        $91 = (invoke_ii($90|0,($81|0))|0);
        $92 = __THREW__; __THREW__ = 0;
        $93 = $92&1;
        if ($93) {
         label = 10;
         break L4;
        }
        $94 = ($91|0)==(-1);
        if ($94) {
         HEAP32[$__e>>2] = 0;
         label = 39;
         break;
        }
       }
       if (!($80)) {
        label = 40;
       }
      }
     } while(0);
     if ((label|0) == 39) {
      if ($80) {
       label = 40;
      }
     }
     if ((label|0) == 40) {
      $95 = HEAP32[$__err>>2]|0;
      $96 = $95 | 2;
      HEAP32[$__err>>2] = $96;
     }
     $97 = HEAP32[$__b>>2]|0;
     $98 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($98)|0);
     $99 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $100 = ($99|0)==(0|0);
     if (!($100)) {
      $101 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($101|0,($99|0));
      $102 = __THREW__; __THREW__ = 0;
      $103 = $102&1;
      if ($103) {
       $104 = ___cxa_find_matching_catch_3(0|0)|0;
       $105 = tempRet0;
       ___clang_call_terminate($104);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($97|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$0 = $35;$$01 = $36;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $106 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($106)|0);
  $$pre8 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $107 = ($$pre8|0)==(0|0);
  if ($107) {
   $$115 = $$0;$$1213 = $$01;
  } else {
   $$pre16 = HEAP32[$2>>2]|0;
   $$114 = $$0;$$1212 = $$01;$108 = $$pre16;$109 = $$pre8;
   label = 47;
  }
 }
 if ((label|0) == 47) {
  __THREW__ = 0;
  invoke_vi($108|0,($109|0));
  $110 = __THREW__; __THREW__ = 0;
  $111 = $110&1;
  if ($111) {
   $112 = ___cxa_find_matching_catch_3(0|0)|0;
   $113 = tempRet0;
   ___clang_call_terminate($112);
   // unreachable;
  } else {
   $$115 = $$114;$$1213 = $$1212;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0$i$i = 0, $$0$i$i109 = 0, $$0$i$i112 = 0, $$0$i$i129 = 0, $$0$i$i136 = 0, $$0$i$i145 = 0, $$0$i$i155 = 0, $$0$i$i172 = 0, $$0$i$i57 = 0, $$0$i$i60 = 0, $$0$i$i73 = 0, $$0$i$i80 = 0, $$0$i$i83 = 0, $$0$i$i90 = 0, $$10 = 0, $$lcssa = 0, $$lcssa392 = 0, $$lcssa394 = 0, $$phi$trans$insert = 0, $$phi$trans$insert301 = 0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i119 = 0, $$pre$i$i$i159 = 0, $$pre$i$i$i176 = 0, $$pre$i$i$i47 = 0, $$pre$i$i$i63 = 0, $$pre$i$i$i95 = 0, $$pre$i2$i$i123 = 0, $$pre$i2$i$i163 = 0, $$pre$i2$i$i163283 = 0, $$pre$i2$i$i163285 = 0, $$pre$i2$i$i180 = 0, $$pre$i2$i$i180295 = 0, $$pre$i2$i$i180296 = 0, $$pre$i2$i$i67 = 0, $$pre$i2$i$i67305 = 0, $$pre$i2$i$i67307 = 0, $$pre$i2$i$i99 = 0, $$pre$i2$i$i99291$ph = 0;
 var $$pre$i2$i$i99291310 = 0, $$pre288 = 0, $$pre290 = 0, $$pre293 = 0, $$pre294 = 0, $$pre298 = 0, $$pre299 = 0, $$pre300 = 0, $$pre302 = 0, $$pre303 = 0, $$pre304 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i29 = 0;
 var $__i$0$i$i32 = 0, $__i$0$i$i36 = 0, $__i$0$i$i41 = 0, $__ng$0 = 0, $__ng$0$lcssa393 = 0, $__ng$2$ph = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$023 = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$022 = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0 = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$0$lcssa = 0, $__trailing_sign$0 = 0;
 var $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond28 = 0, $exitcond$i$i = 0, $exitcond$i$i30 = 0, $exitcond$i$i33 = 0, $exitcond$i$i37 = 0, $exitcond$i$i42 = 0, $isascii1$i = 0, $isascii1$i153 = 0, $isascii1$i186 = 0, $isascii1$i76 = 0, $isascii1$i88 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond14 = 0;
 var $or$cond25 = 0, $sext = 0, $sext239 = 0, $sext240 = 0, $sext241 = 0, $switch = 0, $tmp$i$i101 = 0, $tmp$i$i165 = 0, $tmp$i$i182 = 0, $tmp$i$i69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 72|0;
 $__ge = sp + 68|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (497);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $4 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $5;
 }
 $__i$0$i$i29 = 0;
 while(1) {
  $exitcond$i$i30 = ($__i$0$i$i29|0)==(3);
  if ($exitcond$i$i30) {
   break;
  }
  $6 = (($__sym) + ($__i$0$i$i29<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($__i$0$i$i29) + 1)|0;
  $__i$0$i$i29 = $7;
 }
 $__i$0$i$i32 = 0;
 while(1) {
  $exitcond$i$i33 = ($__i$0$i$i32|0)==(3);
  if ($exitcond$i$i33) {
   break;
  }
  $8 = (($__psn) + ($__i$0$i$i32<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($__i$0$i$i32) + 1)|0;
  $__i$0$i$i32 = $9;
 }
 $__i$0$i$i36 = 0;
 while(1) {
  $exitcond$i$i37 = ($__i$0$i$i36|0)==(3);
  if ($exitcond$i$i37) {
   break;
  }
  $10 = (($__nsn) + ($__i$0$i$i36<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = (($__i$0$i$i36) + 1)|0;
  $__i$0$i$i36 = $11;
 }
 $__i$0$i$i41 = 0;
 while(1) {
  $exitcond$i$i42 = ($__i$0$i$i41|0)==(3);
  if ($exitcond$i$i42) {
   break;
  }
  $12 = (($__spaces) + ($__i$0$i$i41<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = (($__i$0$i$i41) + 1)|0;
  $__i$0$i$i41 = $13;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(500,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L21: do {
  if ($15) {
   $77 = ___cxa_find_matching_catch_2()|0;
   $78 = tempRet0;
   $lpad$phi$index = $77;$lpad$phi$index7 = $78;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__ct)) + 8|0);
   $18 = ((($__psn)) + 4|0);
   $19 = ((($__nsn)) + 4|0);
   $20 = ((($__nsn)) + 8|0);
   $21 = ((($__nsn)) + 1|0);
   $22 = ((($__psn)) + 8|0);
   $23 = ((($__psn)) + 1|0);
   $24 = $__flags & 512;
   $25 = ($24|0)!=(0);
   $26 = ((($__sym)) + 8|0);
   $27 = ((($__sym)) + 1|0);
   $28 = ((($__sym)) + 4|0);
   $29 = ((($__spaces)) + 4|0);
   $30 = ((($__spaces)) + 8|0);
   $31 = ((($__spaces)) + 1|0);
   $32 = ((($__pat)) + 3|0);
   $33 = ((($__grp)) + 4|0);
   $867 = $__gbuf;$__p$0 = 0;$__trailing_sign$0 = 0;
   L24: while(1) {
    $34 = ($__p$0>>>0)<(4);
    if (!($34)) {
     $$lcssa394 = $867;$__trailing_sign$0$lcssa = $__trailing_sign$0;
     label = 251;
     break;
    }
    $35 = HEAP32[$__b>>2]|0;
    $36 = ($35|0)==(0|0);
    do {
     if ($36) {
      $49 = 0;
     } else {
      $37 = ((($35)) + 12|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ((($35)) + 16|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($38|0)==($40|0);
      if ($41) {
       $42 = HEAP32[$35>>2]|0;
       $43 = ((($42)) + 36|0);
       $44 = HEAP32[$43>>2]|0;
       __THREW__ = 0;
       $45 = (invoke_ii($44|0,($35|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        label = 38;
        break L24;
       }
       $48 = ($45|0)==(-1);
       if ($48) {
        HEAP32[$__b>>2] = 0;
        $49 = 0;
        break;
       } else {
        $$pre$i$i$i47 = HEAP32[$__b>>2]|0;
        $49 = $$pre$i$i$i47;
        break;
       }
      } else {
       $49 = $35;
      }
     }
    } while(0);
    $50 = ($49|0)==(0|0);
    $51 = HEAP32[$__e>>2]|0;
    $52 = ($51|0)==(0|0);
    do {
     if ($52) {
      label = 31;
     } else {
      $53 = ((($51)) + 12|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ((($51)) + 16|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($54|0)==($56|0);
      if (!($57)) {
       if ($50) {
        $868 = $51;
        break;
       } else {
        $$lcssa394 = $867;$__trailing_sign$0$lcssa = $__trailing_sign$0;
        label = 251;
        break L24;
       }
      }
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 38;
       break L24;
      }
      $64 = ($61|0)==(-1);
      if ($64) {
       HEAP32[$__e>>2] = 0;
       label = 31;
       break;
      } else {
       if ($50) {
        $868 = $51;
        break;
       } else {
        $$lcssa394 = $867;$__trailing_sign$0$lcssa = $__trailing_sign$0;
        label = 251;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 31) {
     label = 0;
     if ($50) {
      $$lcssa394 = $867;$__trailing_sign$0$lcssa = $__trailing_sign$0;
      label = 251;
      break;
     } else {
      $868 = 0;
     }
    }
    $86 = (($__pat) + ($__p$0)|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87 << 24 >> 24;
    L47: do {
     switch ($88|0) {
     case 1:  {
      $cond28 = ($__p$0|0)==(3);
      if ($cond28) {
       $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $90 = HEAP32[$__b>>2]|0;
       $91 = ((($90)) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($90)) + 16|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($92|0)==($94|0);
       if ($95) {
        $96 = HEAP32[$90>>2]|0;
        $97 = ((($96)) + 36|0);
        $98 = HEAP32[$97>>2]|0;
        __THREW__ = 0;
        $99 = (invoke_ii($98|0,($90|0))|0);
        $100 = __THREW__; __THREW__ = 0;
        $101 = $100&1;
        if ($101) {
         label = 38;
         break L24;
        } else {
         $$0$i$i57 = $99;
        }
       } else {
        $102 = HEAP8[$92>>0]|0;
        $103 = $102&255;
        $$0$i$i57 = $103;
       }
       $104 = $$0$i$i57&255;
       $isascii1$i = ($104<<24>>24)>(-1);
       if (!($isascii1$i)) {
        label = 56;
        break L24;
       }
       $sext241 = $$0$i$i57 << 24;
       $105 = $sext241 >> 24;
       $106 = HEAP32[$17>>2]|0;
       $107 = (($106) + ($105<<1)|0);
       $108 = HEAP16[$107>>1]|0;
       $109 = $108 & 8192;
       $110 = ($109<<16>>16)==(0);
       if ($110) {
        label = 56;
        break L24;
       }
       $111 = HEAP32[$__b>>2]|0;
       $112 = ((($111)) + 12|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = ((($111)) + 16|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ($113|0)==($115|0);
       if ($116) {
        $117 = HEAP32[$111>>2]|0;
        $118 = ((($117)) + 40|0);
        $119 = HEAP32[$118>>2]|0;
        __THREW__ = 0;
        $120 = (invoke_ii($119|0,($111|0))|0);
        $121 = __THREW__; __THREW__ = 0;
        $122 = $121&1;
        if ($122) {
         label = 38;
         break L24;
        } else {
         $$0$i$i60 = $120;
        }
       } else {
        $123 = ((($113)) + 1|0);
        HEAP32[$112>>2] = $123;
        $124 = HEAP8[$113>>0]|0;
        $125 = $124&255;
        $$0$i$i60 = $125;
       }
       $126 = $$0$i$i60&255;
       __THREW__ = 0;
       invoke_vii(501,($__spaces|0),($126|0));
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if ($128) {
        label = 38;
        break L24;
       } else {
        $$pre$i2$i$i67 = $868;$148 = $868;
        label = 58;
       }
      }
      break;
     }
     case 0:  {
      $131 = ($__p$0|0)==(3);
      if ($131) {
       $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $$pre$i2$i$i67 = $868;$148 = $868;
       label = 58;
      }
      break;
     }
     case 3:  {
      $202 = HEAP8[$__psn>>0]|0;
      $203 = $202 & 1;
      $204 = ($203<<24>>24)==(0);
      $205 = HEAP32[$18>>2]|0;
      $206 = $202&255;
      $207 = $206 >>> 1;
      $208 = $204 ? $207 : $205;
      $209 = HEAP8[$__nsn>>0]|0;
      $210 = $209 & 1;
      $211 = ($210<<24>>24)==(0);
      $212 = HEAP32[$19>>2]|0;
      $213 = $209&255;
      $214 = $213 >>> 1;
      $215 = $211 ? $214 : $212;
      $216 = (0 - ($215))|0;
      $217 = ($208|0)==($216|0);
      if ($217) {
       $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $218 = ($208|0)==(0);
       if ($218) {
        $262 = HEAP32[$__b>>2]|0;
        $263 = ((($262)) + 12|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = ((($262)) + 16|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($264|0)==($266|0);
        if ($267) {
         $268 = HEAP32[$262>>2]|0;
         $269 = ((($268)) + 36|0);
         $270 = HEAP32[$269>>2]|0;
         __THREW__ = 0;
         $271 = (invoke_ii($270|0,($262|0))|0);
         $272 = __THREW__; __THREW__ = 0;
         $273 = $272&1;
         if ($273) {
          label = 38;
          break L24;
         }
         $$pre304 = HEAP8[$__nsn>>0]|0;
         $$0$i$i129 = $271;$278 = $$pre304;
        } else {
         $274 = HEAP8[$264>>0]|0;
         $275 = $274&255;
         $$0$i$i129 = $275;$278 = $209;
        }
        $276 = $$0$i$i129&255;
        $277 = $278 & 1;
        $279 = ($277<<24>>24)==(0);
        $280 = HEAP32[$20>>2]|0;
        $281 = $279 ? $21 : $280;
        $282 = HEAP8[$281>>0]|0;
        $283 = ($276<<24>>24)==($282<<24>>24);
        if (!($283)) {
         $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
         break L47;
        }
        $284 = HEAP32[$__b>>2]|0;
        $285 = ((($284)) + 12|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = ((($284)) + 16|0);
        $288 = HEAP32[$287>>2]|0;
        $289 = ($286|0)==($288|0);
        if ($289) {
         $290 = HEAP32[$284>>2]|0;
         $291 = ((($290)) + 40|0);
         $292 = HEAP32[$291>>2]|0;
         __THREW__ = 0;
         (invoke_ii($292|0,($284|0))|0);
         $293 = __THREW__; __THREW__ = 0;
         $294 = $293&1;
         if ($294) {
          label = 38;
          break L24;
         }
        } else {
         $295 = ((($286)) + 1|0);
         HEAP32[$285>>2] = $295;
        }
        HEAP8[$__neg>>0] = 1;
        $296 = HEAP8[$__nsn>>0]|0;
        $297 = $296 & 1;
        $298 = ($297<<24>>24)==(0);
        $299 = HEAP32[$19>>2]|0;
        $300 = $296&255;
        $301 = $300 >>> 1;
        $302 = $298 ? $301 : $299;
        $303 = ($302>>>0)>(1);
        $__nsn$__trailing_sign$0 = $303 ? $__nsn : $__trailing_sign$0;
        $869 = $867;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L47;
       }
       $219 = ($215|0)==(0);
       $220 = HEAP32[$__b>>2]|0;
       $221 = ((($220)) + 12|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = ((($220)) + 16|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($222|0)==($224|0);
       if ($219) {
        if ($225) {
         $226 = HEAP32[$220>>2]|0;
         $227 = ((($226)) + 36|0);
         $228 = HEAP32[$227>>2]|0;
         __THREW__ = 0;
         $229 = (invoke_ii($228|0,($220|0))|0);
         $230 = __THREW__; __THREW__ = 0;
         $231 = $230&1;
         if ($231) {
          label = 38;
          break L24;
         }
         $$pre303 = HEAP8[$__psn>>0]|0;
         $$0$i$i109 = $229;$236 = $$pre303;
        } else {
         $232 = HEAP8[$222>>0]|0;
         $233 = $232&255;
         $$0$i$i109 = $233;$236 = $202;
        }
        $234 = $$0$i$i109&255;
        $235 = $236 & 1;
        $237 = ($235<<24>>24)==(0);
        $238 = HEAP32[$22>>2]|0;
        $239 = $237 ? $23 : $238;
        $240 = HEAP8[$239>>0]|0;
        $241 = ($234<<24>>24)==($240<<24>>24);
        if (!($241)) {
         HEAP8[$__neg>>0] = 1;
         $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
         break L47;
        }
        $242 = HEAP32[$__b>>2]|0;
        $243 = ((($242)) + 12|0);
        $244 = HEAP32[$243>>2]|0;
        $245 = ((($242)) + 16|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = ($244|0)==($246|0);
        if ($247) {
         $248 = HEAP32[$242>>2]|0;
         $249 = ((($248)) + 40|0);
         $250 = HEAP32[$249>>2]|0;
         __THREW__ = 0;
         (invoke_ii($250|0,($242|0))|0);
         $251 = __THREW__; __THREW__ = 0;
         $252 = $251&1;
         if ($252) {
          label = 38;
          break L24;
         }
        } else {
         $253 = ((($244)) + 1|0);
         HEAP32[$243>>2] = $253;
        }
        $254 = HEAP8[$__psn>>0]|0;
        $255 = $254 & 1;
        $256 = ($255<<24>>24)==(0);
        $257 = HEAP32[$18>>2]|0;
        $258 = $254&255;
        $259 = $258 >>> 1;
        $260 = $256 ? $259 : $257;
        $261 = ($260>>>0)>(1);
        $__psn$__trailing_sign$0 = $261 ? $__psn : $__trailing_sign$0;
        $869 = $867;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L47;
       }
       if ($225) {
        $304 = HEAP32[$220>>2]|0;
        $305 = ((($304)) + 36|0);
        $306 = HEAP32[$305>>2]|0;
        __THREW__ = 0;
        $307 = (invoke_ii($306|0,($220|0))|0);
        $308 = __THREW__; __THREW__ = 0;
        $309 = $308&1;
        if ($309) {
         label = 38;
         break L24;
        }
        $$pre298 = HEAP8[$__psn>>0]|0;
        $$pre299 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre299)) + 12|0);
        $$pre300 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert301 = ((($$pre299)) + 16|0);
        $$pre302 = HEAP32[$$phi$trans$insert301>>2]|0;
        $$0$i$i136 = $307;$314 = $$pre298;$321 = $$pre299;$322 = $$pre300;$324 = $$pre302;
       } else {
        $310 = HEAP8[$222>>0]|0;
        $311 = $310&255;
        $$0$i$i136 = $311;$314 = $202;$321 = $220;$322 = $222;$324 = $224;
       }
       $312 = $$0$i$i136&255;
       $313 = $314 & 1;
       $315 = ($313<<24>>24)==(0);
       $316 = HEAP32[$22>>2]|0;
       $317 = $315 ? $23 : $316;
       $318 = HEAP8[$317>>0]|0;
       $319 = ($312<<24>>24)==($318<<24>>24);
       $320 = ((($321)) + 12|0);
       $323 = ($322|0)==($324|0);
       if ($319) {
        if ($323) {
         $325 = HEAP32[$321>>2]|0;
         $326 = ((($325)) + 40|0);
         $327 = HEAP32[$326>>2]|0;
         __THREW__ = 0;
         (invoke_ii($327|0,($321|0))|0);
         $328 = __THREW__; __THREW__ = 0;
         $329 = $328&1;
         if ($329) {
          label = 38;
          break L24;
         }
        } else {
         $330 = ((($322)) + 1|0);
         HEAP32[$320>>2] = $330;
        }
        $331 = HEAP8[$__psn>>0]|0;
        $332 = $331 & 1;
        $333 = ($332<<24>>24)==(0);
        $334 = HEAP32[$18>>2]|0;
        $335 = $331&255;
        $336 = $335 >>> 1;
        $337 = $333 ? $336 : $334;
        $338 = ($337>>>0)>(1);
        $__psn$__trailing_sign$022 = $338 ? $__psn : $__trailing_sign$0;
        $869 = $867;$__trailing_sign$1 = $__psn$__trailing_sign$022;
        break L47;
       }
       if ($323) {
        $339 = HEAP32[$321>>2]|0;
        $340 = ((($339)) + 36|0);
        $341 = HEAP32[$340>>2]|0;
        __THREW__ = 0;
        $342 = (invoke_ii($341|0,($321|0))|0);
        $343 = __THREW__; __THREW__ = 0;
        $344 = $343&1;
        if ($344) {
         label = 38;
         break L24;
        } else {
         $$0$i$i145 = $342;
        }
       } else {
        $345 = HEAP8[$322>>0]|0;
        $346 = $345&255;
        $$0$i$i145 = $346;
       }
       $347 = $$0$i$i145&255;
       $348 = HEAP8[$__nsn>>0]|0;
       $349 = $348 & 1;
       $350 = ($349<<24>>24)==(0);
       $351 = HEAP32[$20>>2]|0;
       $352 = $350 ? $21 : $351;
       $353 = HEAP8[$352>>0]|0;
       $354 = ($347<<24>>24)==($353<<24>>24);
       if (!($354)) {
        label = 120;
        break L24;
       }
       $355 = HEAP32[$__b>>2]|0;
       $356 = ((($355)) + 12|0);
       $357 = HEAP32[$356>>2]|0;
       $358 = ((($355)) + 16|0);
       $359 = HEAP32[$358>>2]|0;
       $360 = ($357|0)==($359|0);
       if ($360) {
        $361 = HEAP32[$355>>2]|0;
        $362 = ((($361)) + 40|0);
        $363 = HEAP32[$362>>2]|0;
        __THREW__ = 0;
        (invoke_ii($363|0,($355|0))|0);
        $364 = __THREW__; __THREW__ = 0;
        $365 = $364&1;
        if ($365) {
         label = 38;
         break L24;
        }
       } else {
        $366 = ((($357)) + 1|0);
        HEAP32[$356>>2] = $366;
       }
       HEAP8[$__neg>>0] = 1;
       $367 = HEAP8[$__nsn>>0]|0;
       $368 = $367 & 1;
       $369 = ($368<<24>>24)==(0);
       $370 = HEAP32[$19>>2]|0;
       $371 = $367&255;
       $372 = $371 >>> 1;
       $373 = $369 ? $372 : $370;
       $374 = ($373>>>0)>(1);
       $__nsn$__trailing_sign$023 = $374 ? $__nsn : $__trailing_sign$0;
       $869 = $867;$__trailing_sign$1 = $__nsn$__trailing_sign$023;
      }
      break;
     }
     case 2:  {
      $377 = ($__trailing_sign$0|0)!=(0|0);
      $378 = ($__p$0>>>0)<(2);
      $or$cond = $378 | $377;
      if (!($or$cond)) {
       $379 = ($__p$0|0)==(2);
       $380 = HEAP8[$32>>0]|0;
       $381 = ($380<<24>>24)!=(0);
       $382 = $379 & $381;
       $brmerge = $25 | $382;
       if (!($brmerge)) {
        $869 = $867;$__trailing_sign$1 = 0;
        break L47;
       }
      }
      $383 = HEAP8[$__sym>>0]|0;
      $384 = $383 & 1;
      $385 = ($384<<24>>24)==(0);
      $386 = HEAP32[$26>>2]|0;
      $387 = $385 ? $27 : $386;
      $388 = $387;
      $389 = ($__p$0|0)==(0);
      L116: do {
       if ($389) {
        $$pre$i2$i$i180 = $868;$431 = $383;$436 = $386;$458 = $868;$__sym_curr_char$sroa$0$0 = $388;
       } else {
        $390 = (($__p$0) + -1)|0;
        $391 = (($__pat) + ($390)|0);
        $392 = HEAP8[$391>>0]|0;
        $switch = ($392&255)<(2);
        if ($switch) {
         $393 = HEAP32[$28>>2]|0;
         $394 = $383&255;
         $395 = $394 >>> 1;
         $396 = $385 ? $395 : $393;
         $397 = (($387) + ($396)|0);
         $__sym_space_end$sroa$0$0 = $388;
         while(1) {
          $398 = $__sym_space_end$sroa$0$0;
          $399 = ($398|0)==($397|0);
          if ($399) {
           $__sym_space_end$sroa$0$0$lcssa = $__sym_space_end$sroa$0$0;
           break;
          }
          $400 = HEAP8[$398>>0]|0;
          $isascii1$i186 = ($400<<24>>24)>(-1);
          if (!($isascii1$i186)) {
           $__sym_space_end$sroa$0$0$lcssa = $__sym_space_end$sroa$0$0;
           break;
          }
          $401 = $400 << 24 >> 24;
          $402 = HEAP32[$17>>2]|0;
          $403 = (($402) + ($401<<1)|0);
          $404 = HEAP16[$403>>1]|0;
          $405 = $404 & 8192;
          $406 = ($405<<16>>16)==(0);
          if ($406) {
           $__sym_space_end$sroa$0$0$lcssa = $__sym_space_end$sroa$0$0;
           break;
          }
          $407 = ((($398)) + 1|0);
          $408 = $407;
          $__sym_space_end$sroa$0$0 = $408;
         }
         $409 = (($__sym_space_end$sroa$0$0$lcssa) - ($388))|0;
         $410 = HEAP8[$__spaces>>0]|0;
         $411 = $410 & 1;
         $412 = ($411<<24>>24)==(0);
         $413 = HEAP32[$29>>2]|0;
         $414 = $410&255;
         $415 = $414 >>> 1;
         $416 = $412 ? $415 : $413;
         $417 = ($409>>>0)>($416>>>0);
         if ($417) {
          $$pre$i2$i$i180 = $868;$431 = $383;$436 = $386;$458 = $868;$__sym_curr_char$sroa$0$0 = $388;
         } else {
          $418 = HEAP32[$30>>2]|0;
          $419 = $412 ? $31 : $418;
          $420 = (($419) + ($416)|0);
          $421 = (0 - ($409))|0;
          $422 = (($420) + ($421)|0);
          $$sink = $387;$423 = $422;
          while(1) {
           $424 = ($423|0)==($420|0);
           if ($424) {
            $$pre$i2$i$i180 = $868;$431 = $383;$436 = $386;$458 = $868;$__sym_curr_char$sroa$0$0 = $__sym_space_end$sroa$0$0$lcssa;
            break L116;
           }
           $425 = HEAP8[$423>>0]|0;
           $426 = HEAP8[$$sink>>0]|0;
           $427 = ($425<<24>>24)==($426<<24>>24);
           if (!($427)) {
            $$pre$i2$i$i180 = $868;$431 = $383;$436 = $386;$458 = $868;$__sym_curr_char$sroa$0$0 = $388;
            break L116;
           }
           $428 = ((($423)) + 1|0);
           $429 = ((($$sink)) + 1|0);
           $$sink = $429;$423 = $428;
          }
         }
        } else {
         $$pre$i2$i$i180 = $868;$431 = $383;$436 = $386;$458 = $868;$__sym_curr_char$sroa$0$0 = $388;
        }
       }
      } while(0);
      L130: while(1) {
       $430 = $431 & 1;
       $432 = ($430<<24>>24)==(0);
       $433 = HEAP32[$28>>2]|0;
       $434 = $431&255;
       $435 = $434 >>> 1;
       $437 = $432 ? $27 : $436;
       $438 = $432 ? $435 : $433;
       $439 = (($437) + ($438)|0);
       $440 = $__sym_curr_char$sroa$0$0;
       $441 = ($440|0)==($439|0);
       if ($441) {
        $$lcssa = $439;
        break;
       }
       $442 = HEAP32[$__b>>2]|0;
       $443 = ($442|0)==(0|0);
       do {
        if ($443) {
         $456 = 0;
        } else {
         $444 = ((($442)) + 12|0);
         $445 = HEAP32[$444>>2]|0;
         $446 = ((($442)) + 16|0);
         $447 = HEAP32[$446>>2]|0;
         $448 = ($445|0)==($447|0);
         if ($448) {
          $449 = HEAP32[$442>>2]|0;
          $450 = ((($449)) + 36|0);
          $451 = HEAP32[$450>>2]|0;
          __THREW__ = 0;
          $452 = (invoke_ii($451|0,($442|0))|0);
          $453 = __THREW__; __THREW__ = 0;
          $454 = $453&1;
          if ($454) {
           label = 35;
           break L24;
          }
          $455 = ($452|0)==(-1);
          if ($455) {
           HEAP32[$__b>>2] = 0;
           $456 = 0;
           break;
          } else {
           $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
           $456 = $$pre$i$i$i176;
           break;
          }
         } else {
          $456 = $442;
         }
        }
       } while(0);
       $457 = ($456|0)==(0|0);
       $459 = ($458|0)==(0|0);
       do {
        if ($459) {
         $$pre$i2$i$i180296 = $$pre$i2$i$i180;
         label = 148;
        } else {
         $460 = ((($458)) + 12|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = ((($458)) + 16|0);
         $463 = HEAP32[$462>>2]|0;
         $464 = ($461|0)==($463|0);
         if (!($464)) {
          if ($457) {
           $$pre$i2$i$i180295 = $$pre$i2$i$i180;$871 = $458;
           break;
          } else {
           $$lcssa = $440;
           break L130;
          }
         }
         $465 = HEAP32[$458>>2]|0;
         $466 = ((($465)) + 36|0);
         $467 = HEAP32[$466>>2]|0;
         __THREW__ = 0;
         $468 = (invoke_ii($467|0,($458|0))|0);
         $469 = __THREW__; __THREW__ = 0;
         $470 = $469&1;
         if ($470) {
          label = 35;
          break L24;
         }
         $471 = ($468|0)==(-1);
         if ($471) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i180296 = 0;
          label = 148;
          break;
         } else {
          $472 = ($$pre$i2$i$i180|0)==(0|0);
          $tmp$i$i182 = $457 ^ $472;
          if ($tmp$i$i182) {
           $$pre$i2$i$i180295 = $$pre$i2$i$i180;$871 = $$pre$i2$i$i180;
           break;
          } else {
           $$lcssa = $440;
           break L130;
          }
         }
        }
       } while(0);
       if ((label|0) == 148) {
        label = 0;
        if ($457) {
         $$lcssa = $440;
         break;
        } else {
         $$pre$i2$i$i180295 = $$pre$i2$i$i180296;$871 = 0;
        }
       }
       $473 = HEAP32[$__b>>2]|0;
       $474 = ((($473)) + 12|0);
       $475 = HEAP32[$474>>2]|0;
       $476 = ((($473)) + 16|0);
       $477 = HEAP32[$476>>2]|0;
       $478 = ($475|0)==($477|0);
       if ($478) {
        $479 = HEAP32[$473>>2]|0;
        $480 = ((($479)) + 36|0);
        $481 = HEAP32[$480>>2]|0;
        __THREW__ = 0;
        $482 = (invoke_ii($481|0,($473|0))|0);
        $483 = __THREW__; __THREW__ = 0;
        $484 = $483&1;
        if ($484) {
         label = 35;
         break L24;
        } else {
         $$0$i$i172 = $482;
        }
       } else {
        $485 = HEAP8[$475>>0]|0;
        $486 = $485&255;
        $$0$i$i172 = $486;
       }
       $487 = $$0$i$i172&255;
       $488 = HEAP8[$440>>0]|0;
       $489 = ($487<<24>>24)==($488<<24>>24);
       if (!($489)) {
        $$lcssa = $440;
        break;
       }
       $490 = HEAP32[$__b>>2]|0;
       $491 = ((($490)) + 12|0);
       $492 = HEAP32[$491>>2]|0;
       $493 = ((($490)) + 16|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = ($492|0)==($494|0);
       if ($495) {
        $496 = HEAP32[$490>>2]|0;
        $497 = ((($496)) + 40|0);
        $498 = HEAP32[$497>>2]|0;
        __THREW__ = 0;
        (invoke_ii($498|0,($490|0))|0);
        $499 = __THREW__; __THREW__ = 0;
        $500 = $499&1;
        if ($500) {
         label = 35;
         break L24;
        }
       } else {
        $501 = ((($492)) + 1|0);
        HEAP32[$491>>2] = $501;
       }
       $502 = ((($440)) + 1|0);
       $503 = $502;
       $$pre293 = HEAP8[$__sym>>0]|0;
       $$pre294 = HEAP32[$26>>2]|0;
       $$pre$i2$i$i180 = $$pre$i2$i$i180295;$431 = $$pre293;$436 = $$pre294;$458 = $871;$__sym_curr_char$sroa$0$0 = $503;
      }
      if ($25) {
       $504 = HEAP8[$__sym>>0]|0;
       $505 = $504 & 1;
       $506 = ($505<<24>>24)==(0);
       $507 = HEAP32[$26>>2]|0;
       $508 = HEAP32[$28>>2]|0;
       $509 = $504&255;
       $510 = $509 >>> 1;
       $511 = $506 ? $27 : $507;
       $512 = $506 ? $510 : $508;
       $513 = (($511) + ($512)|0);
       $514 = ($$lcssa|0)==($513|0);
       if ($514) {
        $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
       } else {
        label = 160;
        break L24;
       }
      } else {
       $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 4:  {
      $89 = HEAP8[$__ts>>0]|0;
      $$pre$i2$i$i163 = $868;$533 = $868;$588 = $867;$__ng$0 = 0;
      L165: while(1) {
       $517 = HEAP32[$__b>>2]|0;
       $518 = ($517|0)==(0|0);
       do {
        if ($518) {
         $531 = 0;
        } else {
         $519 = ((($517)) + 12|0);
         $520 = HEAP32[$519>>2]|0;
         $521 = ((($517)) + 16|0);
         $522 = HEAP32[$521>>2]|0;
         $523 = ($520|0)==($522|0);
         if ($523) {
          $524 = HEAP32[$517>>2]|0;
          $525 = ((($524)) + 36|0);
          $526 = HEAP32[$525>>2]|0;
          __THREW__ = 0;
          $527 = (invoke_ii($526|0,($517|0))|0);
          $528 = __THREW__; __THREW__ = 0;
          $529 = $528&1;
          if ($529) {
           label = 37;
           break L24;
          }
          $530 = ($527|0)==(-1);
          if ($530) {
           HEAP32[$__b>>2] = 0;
           $531 = 0;
           break;
          } else {
           $$pre$i$i$i159 = HEAP32[$__b>>2]|0;
           $531 = $$pre$i$i$i159;
           break;
          }
         } else {
          $531 = $517;
         }
        }
       } while(0);
       $532 = ($531|0)==(0|0);
       $534 = ($533|0)==(0|0);
       do {
        if ($534) {
         $$pre$i2$i$i163283 = $$pre$i2$i$i163;
         label = 173;
        } else {
         $535 = ((($533)) + 12|0);
         $536 = HEAP32[$535>>2]|0;
         $537 = ((($533)) + 16|0);
         $538 = HEAP32[$537>>2]|0;
         $539 = ($536|0)==($538|0);
         if (!($539)) {
          if ($532) {
           $$pre$i2$i$i163285 = $$pre$i2$i$i163;$872 = $533;
           break;
          } else {
           $$lcssa392 = $588;$$pre$i2$i$i123 = $$pre$i2$i$i163;$__ng$0$lcssa393 = $__ng$0;
           break L165;
          }
         }
         $540 = HEAP32[$533>>2]|0;
         $541 = ((($540)) + 36|0);
         $542 = HEAP32[$541>>2]|0;
         __THREW__ = 0;
         $543 = (invoke_ii($542|0,($533|0))|0);
         $544 = __THREW__; __THREW__ = 0;
         $545 = $544&1;
         if ($545) {
          label = 37;
          break L24;
         }
         $546 = ($543|0)==(-1);
         if ($546) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i163283 = 0;
          label = 173;
          break;
         } else {
          $547 = ($$pre$i2$i$i163|0)==(0|0);
          $tmp$i$i165 = $532 ^ $547;
          if ($tmp$i$i165) {
           $$pre$i2$i$i163285 = $$pre$i2$i$i163;$872 = $$pre$i2$i$i163;
           break;
          } else {
           $$lcssa392 = $588;$$pre$i2$i$i123 = $$pre$i2$i$i163;$__ng$0$lcssa393 = $__ng$0;
           break L165;
          }
         }
        }
       } while(0);
       if ((label|0) == 173) {
        label = 0;
        if ($532) {
         $$lcssa392 = $588;$$pre$i2$i$i123 = $$pre$i2$i$i163283;$__ng$0$lcssa393 = $__ng$0;
         break;
        } else {
         $$pre$i2$i$i163285 = $$pre$i2$i$i163283;$872 = 0;
        }
       }
       $548 = HEAP32[$__b>>2]|0;
       $549 = ((($548)) + 12|0);
       $550 = HEAP32[$549>>2]|0;
       $551 = ((($548)) + 16|0);
       $552 = HEAP32[$551>>2]|0;
       $553 = ($550|0)==($552|0);
       if ($553) {
        $554 = HEAP32[$548>>2]|0;
        $555 = ((($554)) + 36|0);
        $556 = HEAP32[$555>>2]|0;
        __THREW__ = 0;
        $557 = (invoke_ii($556|0,($548|0))|0);
        $558 = __THREW__; __THREW__ = 0;
        $559 = $558&1;
        if ($559) {
         label = 37;
         break L24;
        } else {
         $$0$i$i155 = $557;
        }
       } else {
        $560 = HEAP8[$550>>0]|0;
        $561 = $560&255;
        $$0$i$i155 = $561;
       }
       $562 = $$0$i$i155&255;
       $isascii1$i153 = ($562<<24>>24)>(-1);
       if ($isascii1$i153) {
        $sext239 = $$0$i$i155 << 24;
        $563 = $sext239 >> 24;
        $564 = HEAP32[$17>>2]|0;
        $565 = (($564) + ($563<<1)|0);
        $566 = HEAP16[$565>>1]|0;
        $567 = $566 & 2048;
        $568 = ($567<<16>>16)==(0);
        if ($568) {
         label = 184;
        } else {
         $569 = HEAP32[$__wn>>2]|0;
         $570 = HEAP32[$0>>2]|0;
         $571 = ($569|0)==($570|0);
         if ($571) {
          __THREW__ = 0;
          invoke_viii(502,($__wb|0),($__wn|0),($0|0));
          $572 = __THREW__; __THREW__ = 0;
          $573 = $572&1;
          if ($573) {
           label = 37;
           break L24;
          }
          $$pre = HEAP32[$__wn>>2]|0;
          $575 = $$pre;
         } else {
          $575 = $569;
         }
         $574 = ((($575)) + 1|0);
         HEAP32[$__wn>>2] = $574;
         HEAP8[$575>>0] = $562;
         $576 = (($__ng$0) + 1)|0;
         $873 = $588;$__ng$2$ph = $576;
        }
       } else {
        label = 184;
       }
       if ((label|0) == 184) {
        label = 0;
        $577 = HEAP8[$__grp>>0]|0;
        $578 = $577 & 1;
        $579 = ($578<<24>>24)==(0);
        $580 = HEAP32[$33>>2]|0;
        $581 = $577&255;
        $582 = $581 >>> 1;
        $583 = $579 ? $582 : $580;
        $584 = ($583|0)!=(0);
        $585 = ($__ng$0|0)!=(0);
        $or$cond12 = $585 & $584;
        $586 = ($562<<24>>24)==($89<<24>>24);
        $or$cond25 = $586 & $or$cond12;
        if (!($or$cond25)) {
         $$lcssa392 = $588;$$pre$i2$i$i123 = $$pre$i2$i$i163285;$__ng$0$lcssa393 = $__ng$0;
         break;
        }
        $587 = HEAP32[$__ge>>2]|0;
        $589 = ($588|0)==($587|0);
        if ($589) {
         __THREW__ = 0;
         invoke_viii(503,($__gb|0),($__gn|0),($__ge|0));
         $590 = __THREW__; __THREW__ = 0;
         $591 = $590&1;
         if ($591) {
          label = 37;
          break L24;
         }
         $$pre288 = HEAP32[$__gn>>2]|0;
         $593 = $$pre288;
        } else {
         $593 = $588;
        }
        $592 = ((($593)) + 4|0);
        HEAP32[$__gn>>2] = $592;
        HEAP32[$593>>2] = $__ng$0;
        $873 = $592;$__ng$2$ph = 0;
       }
       $594 = HEAP32[$__b>>2]|0;
       $595 = ((($594)) + 12|0);
       $596 = HEAP32[$595>>2]|0;
       $597 = ((($594)) + 16|0);
       $598 = HEAP32[$597>>2]|0;
       $599 = ($596|0)==($598|0);
       if ($599) {
        $600 = HEAP32[$594>>2]|0;
        $601 = ((($600)) + 40|0);
        $602 = HEAP32[$601>>2]|0;
        __THREW__ = 0;
        (invoke_ii($602|0,($594|0))|0);
        $603 = __THREW__; __THREW__ = 0;
        $604 = $603&1;
        if ($604) {
         label = 37;
         break L24;
        } else {
         $$pre$i2$i$i163 = $$pre$i2$i$i163285;$533 = $872;$588 = $873;$__ng$0 = $__ng$2$ph;
         continue;
        }
       } else {
        $605 = ((($596)) + 1|0);
        HEAP32[$595>>2] = $605;
        $$pre$i2$i$i163 = $$pre$i2$i$i163285;$533 = $872;$588 = $873;$__ng$0 = $__ng$2$ph;
        continue;
       }
      }
      $606 = HEAP32[$__gb>>2]|0;
      $607 = ($606|0)!=($$lcssa392|0);
      $608 = ($__ng$0$lcssa393|0)!=(0);
      $or$cond14 = $608 & $607;
      if ($or$cond14) {
       $609 = HEAP32[$__ge>>2]|0;
       $610 = ($$lcssa392|0)==($609|0);
       if ($610) {
        __THREW__ = 0;
        invoke_viii(503,($__gb|0),($__gn|0),($__ge|0));
        $611 = __THREW__; __THREW__ = 0;
        $612 = $611&1;
        if ($612) {
         label = 38;
         break L24;
        }
        $$pre290 = HEAP32[$__gn>>2]|0;
        $614 = $$pre290;
       } else {
        $614 = $$lcssa392;
       }
       $613 = ((($614)) + 4|0);
       HEAP32[$__gn>>2] = $613;
       HEAP32[$614>>2] = $__ng$0$lcssa393;
       $874 = $613;
      } else {
       $874 = $$lcssa392;
      }
      $615 = HEAP32[$__fd>>2]|0;
      $616 = ($615|0)>(0);
      L217: do {
       if ($616) {
        $617 = HEAP32[$__b>>2]|0;
        $618 = ($617|0)==(0|0);
        do {
         if ($618) {
          $631 = 0;
         } else {
          $619 = ((($617)) + 12|0);
          $620 = HEAP32[$619>>2]|0;
          $621 = ((($617)) + 16|0);
          $622 = HEAP32[$621>>2]|0;
          $623 = ($620|0)==($622|0);
          if ($623) {
           $624 = HEAP32[$617>>2]|0;
           $625 = ((($624)) + 36|0);
           $626 = HEAP32[$625>>2]|0;
           __THREW__ = 0;
           $627 = (invoke_ii($626|0,($617|0))|0);
           $628 = __THREW__; __THREW__ = 0;
           $629 = $628&1;
           if ($629) {
            label = 38;
            break L24;
           }
           $630 = ($627|0)==(-1);
           if ($630) {
            HEAP32[$__b>>2] = 0;
            $631 = 0;
            break;
           } else {
            $$pre$i$i$i119 = HEAP32[$__b>>2]|0;
            $631 = $$pre$i$i$i119;
            break;
           }
          } else {
           $631 = $617;
          }
         }
        } while(0);
        $632 = ($631|0)==(0|0);
        $633 = ($$pre$i2$i$i123|0)==(0|0);
        do {
         if ($633) {
          label = 210;
         } else {
          $634 = ((($$pre$i2$i$i123)) + 12|0);
          $635 = HEAP32[$634>>2]|0;
          $636 = ((($$pre$i2$i$i123)) + 16|0);
          $637 = HEAP32[$636>>2]|0;
          $638 = ($635|0)==($637|0);
          if ($638) {
           $639 = HEAP32[$$pre$i2$i$i123>>2]|0;
           $640 = ((($639)) + 36|0);
           $641 = HEAP32[$640>>2]|0;
           __THREW__ = 0;
           $642 = (invoke_ii($641|0,($$pre$i2$i$i123|0))|0);
           $643 = __THREW__; __THREW__ = 0;
           $644 = $643&1;
           if ($644) {
            label = 38;
            break L24;
           }
           $645 = ($642|0)==(-1);
           if ($645) {
            HEAP32[$__e>>2] = 0;
            label = 210;
            break;
           }
          }
          if ($632) {
           $875 = $$pre$i2$i$i123;
          } else {
           label = 215;
           break L24;
          }
         }
        } while(0);
        if ((label|0) == 210) {
         label = 0;
         if ($632) {
          label = 215;
          break L24;
         } else {
          $875 = 0;
         }
        }
        $646 = HEAP32[$__b>>2]|0;
        $647 = ((($646)) + 12|0);
        $648 = HEAP32[$647>>2]|0;
        $649 = ((($646)) + 16|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = ($648|0)==($650|0);
        if ($651) {
         $652 = HEAP32[$646>>2]|0;
         $653 = ((($652)) + 36|0);
         $654 = HEAP32[$653>>2]|0;
         __THREW__ = 0;
         $655 = (invoke_ii($654|0,($646|0))|0);
         $656 = __THREW__; __THREW__ = 0;
         $657 = $656&1;
         if ($657) {
          label = 38;
          break L24;
         } else {
          $$0$i$i112 = $655;
         }
        } else {
         $658 = HEAP8[$648>>0]|0;
         $659 = $658&255;
         $$0$i$i112 = $659;
        }
        $660 = $$0$i$i112&255;
        $661 = HEAP8[$__dp>>0]|0;
        $662 = ($660<<24>>24)==($661<<24>>24);
        if (!($662)) {
         label = 215;
         break L24;
        }
        $665 = HEAP32[$__b>>2]|0;
        $666 = ((($665)) + 12|0);
        $667 = HEAP32[$666>>2]|0;
        $668 = ((($665)) + 16|0);
        $669 = HEAP32[$668>>2]|0;
        $670 = ($667|0)==($669|0);
        if ($670) {
         $671 = HEAP32[$665>>2]|0;
         $672 = ((($671)) + 40|0);
         $673 = HEAP32[$672>>2]|0;
         __THREW__ = 0;
         (invoke_ii($673|0,($665|0))|0);
         $674 = __THREW__; __THREW__ = 0;
         $675 = $674&1;
         if ($675) {
          label = 38;
          break L24;
         } else {
          $$pre$i2$i$i99 = $875;$677 = $615;$695 = $875;
         }
        } else {
         $676 = ((($667)) + 1|0);
         HEAP32[$666>>2] = $676;
         $$pre$i2$i$i99 = $875;$677 = $615;$695 = $875;
        }
        while(1) {
         $678 = ($677|0)>(0);
         if (!($678)) {
          break L217;
         }
         $679 = HEAP32[$__b>>2]|0;
         $680 = ($679|0)==(0|0);
         do {
          if ($680) {
           $693 = 0;
          } else {
           $681 = ((($679)) + 12|0);
           $682 = HEAP32[$681>>2]|0;
           $683 = ((($679)) + 16|0);
           $684 = HEAP32[$683>>2]|0;
           $685 = ($682|0)==($684|0);
           if ($685) {
            $686 = HEAP32[$679>>2]|0;
            $687 = ((($686)) + 36|0);
            $688 = HEAP32[$687>>2]|0;
            __THREW__ = 0;
            $689 = (invoke_ii($688|0,($679|0))|0);
            $690 = __THREW__; __THREW__ = 0;
            $691 = $690&1;
            if ($691) {
             label = 36;
             break L24;
            }
            $692 = ($689|0)==(-1);
            if ($692) {
             HEAP32[$__b>>2] = 0;
             $693 = 0;
             break;
            } else {
             $$pre$i$i$i95 = HEAP32[$__b>>2]|0;
             $693 = $$pre$i$i$i95;
             break;
            }
           } else {
            $693 = $679;
           }
          }
         } while(0);
         $694 = ($693|0)==(0|0);
         $696 = ($695|0)==(0|0);
         do {
          if ($696) {
           $$pre$i2$i$i99291$ph = $$pre$i2$i$i99;
           label = 232;
          } else {
           $697 = ((($695)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ((($695)) + 16|0);
           $700 = HEAP32[$699>>2]|0;
           $701 = ($698|0)==($700|0);
           if (!($701)) {
            if ($694) {
             $$pre$i2$i$i99291310 = $$pre$i2$i$i99;$876 = $695;
             break;
            } else {
             label = 239;
             break L24;
            }
           }
           $702 = HEAP32[$695>>2]|0;
           $703 = ((($702)) + 36|0);
           $704 = HEAP32[$703>>2]|0;
           __THREW__ = 0;
           $705 = (invoke_ii($704|0,($695|0))|0);
           $706 = __THREW__; __THREW__ = 0;
           $707 = $706&1;
           if ($707) {
            label = 36;
            break L24;
           }
           $708 = ($705|0)==(-1);
           if ($708) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i99291$ph = 0;
            label = 232;
            break;
           } else {
            $709 = ($$pre$i2$i$i99|0)==(0|0);
            $tmp$i$i101 = $694 ^ $709;
            if ($tmp$i$i101) {
             $$pre$i2$i$i99291310 = $$pre$i2$i$i99;$876 = $$pre$i2$i$i99;
             break;
            } else {
             label = 239;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 232) {
          label = 0;
          if ($694) {
           label = 239;
           break L24;
          } else {
           $$pre$i2$i$i99291310 = $$pre$i2$i$i99291$ph;$876 = 0;
          }
         }
         $710 = HEAP32[$__b>>2]|0;
         $711 = ((($710)) + 12|0);
         $712 = HEAP32[$711>>2]|0;
         $713 = ((($710)) + 16|0);
         $714 = HEAP32[$713>>2]|0;
         $715 = ($712|0)==($714|0);
         if ($715) {
          $716 = HEAP32[$710>>2]|0;
          $717 = ((($716)) + 36|0);
          $718 = HEAP32[$717>>2]|0;
          __THREW__ = 0;
          $719 = (invoke_ii($718|0,($710|0))|0);
          $720 = __THREW__; __THREW__ = 0;
          $721 = $720&1;
          if ($721) {
           label = 36;
           break L24;
          } else {
           $$0$i$i90 = $719;
          }
         } else {
          $722 = HEAP8[$712>>0]|0;
          $723 = $722&255;
          $$0$i$i90 = $723;
         }
         $724 = $$0$i$i90&255;
         $isascii1$i88 = ($724<<24>>24)>(-1);
         if (!($isascii1$i88)) {
          label = 239;
          break L24;
         }
         $sext = $$0$i$i90 << 24;
         $725 = $sext >> 24;
         $726 = HEAP32[$17>>2]|0;
         $727 = (($726) + ($725<<1)|0);
         $728 = HEAP16[$727>>1]|0;
         $729 = $728 & 2048;
         $730 = ($729<<16>>16)==(0);
         if ($730) {
          label = 239;
          break L24;
         }
         $733 = HEAP32[$__wn>>2]|0;
         $734 = HEAP32[$0>>2]|0;
         $735 = ($733|0)==($734|0);
         if ($735) {
          __THREW__ = 0;
          invoke_viii(502,($__wb|0),($__wn|0),($0|0));
          $736 = __THREW__; __THREW__ = 0;
          $737 = $736&1;
          if ($737) {
           label = 36;
           break L24;
          }
         }
         $738 = HEAP32[$__b>>2]|0;
         $739 = ((($738)) + 12|0);
         $740 = HEAP32[$739>>2]|0;
         $741 = ((($738)) + 16|0);
         $742 = HEAP32[$741>>2]|0;
         $743 = ($740|0)==($742|0);
         if ($743) {
          $744 = HEAP32[$738>>2]|0;
          $745 = ((($744)) + 36|0);
          $746 = HEAP32[$745>>2]|0;
          __THREW__ = 0;
          $747 = (invoke_ii($746|0,($738|0))|0);
          $748 = __THREW__; __THREW__ = 0;
          $749 = $748&1;
          if ($749) {
           label = 36;
           break L24;
          } else {
           $$0$i$i83 = $747;
          }
         } else {
          $750 = HEAP8[$740>>0]|0;
          $751 = $750&255;
          $$0$i$i83 = $751;
         }
         $752 = $$0$i$i83&255;
         $753 = HEAP32[$__wn>>2]|0;
         $754 = ((($753)) + 1|0);
         HEAP32[$__wn>>2] = $754;
         HEAP8[$753>>0] = $752;
         $755 = (($677) + -1)|0;
         HEAP32[$__fd>>2] = $755;
         $756 = HEAP32[$__b>>2]|0;
         $757 = ((($756)) + 12|0);
         $758 = HEAP32[$757>>2]|0;
         $759 = ((($756)) + 16|0);
         $760 = HEAP32[$759>>2]|0;
         $761 = ($758|0)==($760|0);
         if ($761) {
          $762 = HEAP32[$756>>2]|0;
          $763 = ((($762)) + 40|0);
          $764 = HEAP32[$763>>2]|0;
          __THREW__ = 0;
          (invoke_ii($764|0,($756|0))|0);
          $765 = __THREW__; __THREW__ = 0;
          $766 = $765&1;
          if ($766) {
           label = 36;
           break L24;
          } else {
           $$pre$i2$i$i99 = $$pre$i2$i$i99291310;$677 = $755;$695 = $876;
           continue;
          }
         } else {
          $767 = ((($758)) + 1|0);
          HEAP32[$757>>2] = $767;
          $$pre$i2$i$i99 = $$pre$i2$i$i99291310;$677 = $755;$695 = $876;
          continue;
         }
        }
       }
      } while(0);
      $768 = HEAP32[$__wn>>2]|0;
      $769 = HEAP32[$__wb>>2]|0;
      $770 = ($768|0)==($769|0);
      if ($770) {
       label = 249;
       break L24;
      } else {
       $869 = $874;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     default: {
      $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
     }
     }
    } while(0);
    L285: do {
     if ((label|0) == 58) {
      while(1) {
       label = 0;
       $132 = HEAP32[$__b>>2]|0;
       $133 = ($132|0)==(0|0);
       do {
        if ($133) {
         $146 = 0;
        } else {
         $134 = ((($132)) + 12|0);
         $135 = HEAP32[$134>>2]|0;
         $136 = ((($132)) + 16|0);
         $137 = HEAP32[$136>>2]|0;
         $138 = ($135|0)==($137|0);
         if ($138) {
          $139 = HEAP32[$132>>2]|0;
          $140 = ((($139)) + 36|0);
          $141 = HEAP32[$140>>2]|0;
          __THREW__ = 0;
          $142 = (invoke_ii($141|0,($132|0))|0);
          $143 = __THREW__; __THREW__ = 0;
          $144 = $143&1;
          if ($144) {
           label = 34;
           break L24;
          }
          $145 = ($142|0)==(-1);
          if ($145) {
           HEAP32[$__b>>2] = 0;
           $146 = 0;
           break;
          } else {
           $$pre$i$i$i63 = HEAP32[$__b>>2]|0;
           $146 = $$pre$i$i$i63;
           break;
          }
         } else {
          $146 = $132;
         }
        }
       } while(0);
       $147 = ($146|0)==(0|0);
       $149 = ($148|0)==(0|0);
       do {
        if ($149) {
         $$pre$i2$i$i67305 = $$pre$i2$i$i67;
         label = 70;
        } else {
         $150 = ((($148)) + 12|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = ((($148)) + 16|0);
         $153 = HEAP32[$152>>2]|0;
         $154 = ($151|0)==($153|0);
         if (!($154)) {
          if ($147) {
           $$pre$i2$i$i67307 = $$pre$i2$i$i67;$870 = $148;
           break;
          } else {
           $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
           break L285;
          }
         }
         $155 = HEAP32[$148>>2]|0;
         $156 = ((($155)) + 36|0);
         $157 = HEAP32[$156>>2]|0;
         __THREW__ = 0;
         $158 = (invoke_ii($157|0,($148|0))|0);
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if ($160) {
          label = 34;
          break L24;
         }
         $161 = ($158|0)==(-1);
         if ($161) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i67305 = 0;
          label = 70;
          break;
         } else {
          $162 = ($$pre$i2$i$i67|0)==(0|0);
          $tmp$i$i69 = $147 ^ $162;
          if ($tmp$i$i69) {
           $$pre$i2$i$i67307 = $$pre$i2$i$i67;$870 = $$pre$i2$i$i67;
           break;
          } else {
           $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
           break L285;
          }
         }
        }
       } while(0);
       if ((label|0) == 70) {
        label = 0;
        if ($147) {
         $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
         break L285;
        } else {
         $$pre$i2$i$i67307 = $$pre$i2$i$i67305;$870 = 0;
        }
       }
       $163 = HEAP32[$__b>>2]|0;
       $164 = ((($163)) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ((($163)) + 16|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($165|0)==($167|0);
       if ($168) {
        $169 = HEAP32[$163>>2]|0;
        $170 = ((($169)) + 36|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (invoke_ii($171|0,($163|0))|0);
        $173 = __THREW__; __THREW__ = 0;
        $174 = $173&1;
        if ($174) {
         label = 34;
         break L24;
        } else {
         $$0$i$i73 = $172;
        }
       } else {
        $175 = HEAP8[$165>>0]|0;
        $176 = $175&255;
        $$0$i$i73 = $176;
       }
       $177 = $$0$i$i73&255;
       $isascii1$i76 = ($177<<24>>24)>(-1);
       if (!($isascii1$i76)) {
        $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
        break L285;
       }
       $sext240 = $$0$i$i73 << 24;
       $178 = $sext240 >> 24;
       $179 = HEAP32[$17>>2]|0;
       $180 = (($179) + ($178<<1)|0);
       $181 = HEAP16[$180>>1]|0;
       $182 = $181 & 8192;
       $183 = ($182<<16>>16)==(0);
       if ($183) {
        $869 = $867;$__trailing_sign$1 = $__trailing_sign$0;
        break L285;
       }
       $184 = HEAP32[$__b>>2]|0;
       $185 = ((($184)) + 12|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ((($184)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($186|0)==($188|0);
       if ($189) {
        $190 = HEAP32[$184>>2]|0;
        $191 = ((($190)) + 40|0);
        $192 = HEAP32[$191>>2]|0;
        __THREW__ = 0;
        $193 = (invoke_ii($192|0,($184|0))|0);
        $194 = __THREW__; __THREW__ = 0;
        $195 = $194&1;
        if ($195) {
         label = 34;
         break L24;
        } else {
         $$0$i$i80 = $193;
        }
       } else {
        $196 = ((($186)) + 1|0);
        HEAP32[$185>>2] = $196;
        $197 = HEAP8[$186>>0]|0;
        $198 = $197&255;
        $$0$i$i80 = $198;
       }
       $199 = $$0$i$i80&255;
       __THREW__ = 0;
       invoke_vii(501,($__spaces|0),($199|0));
       $200 = __THREW__; __THREW__ = 0;
       $201 = $200&1;
       if ($201) {
        label = 34;
        break L24;
       } else {
        $$pre$i2$i$i67 = $$pre$i2$i$i67307;$148 = $870;
        label = 58;
       }
      }
     }
    } while(0);
    $773 = (($__p$0) + 1)|0;
    $867 = $869;$__p$0 = $773;$__trailing_sign$0 = $__trailing_sign$1;
   }
   L319:    switch (label|0) {
    case 34: {
     $67 = ___cxa_find_matching_catch_2()|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;$lpad$phi$index7 = $68;
     break L21;
     break;
    }
    case 35: {
     $69 = ___cxa_find_matching_catch_2()|0;
     $70 = tempRet0;
     $lpad$phi$index = $69;$lpad$phi$index7 = $70;
     break L21;
     break;
    }
    case 36: {
     $71 = ___cxa_find_matching_catch_2()|0;
     $72 = tempRet0;
     $lpad$phi$index = $71;$lpad$phi$index7 = $72;
     break L21;
     break;
    }
    case 37: {
     $73 = ___cxa_find_matching_catch_2()|0;
     $74 = tempRet0;
     $lpad$phi$index = $73;$lpad$phi$index7 = $74;
     break L21;
     break;
    }
    case 38: {
     $75 = ___cxa_find_matching_catch_2()|0;
     $76 = tempRet0;
     $lpad$phi$index = $75;$lpad$phi$index7 = $76;
     break L21;
     break;
    }
    case 56: {
     $129 = HEAP32[$__err>>2]|0;
     $130 = $129 | 4;
     HEAP32[$__err>>2] = $130;
     $$10 = 0;
     break;
    }
    case 120: {
     $375 = HEAP32[$__err>>2]|0;
     $376 = $375 | 4;
     HEAP32[$__err>>2] = $376;
     $$10 = 0;
     break;
    }
    case 160: {
     $515 = HEAP32[$__err>>2]|0;
     $516 = $515 | 4;
     HEAP32[$__err>>2] = $516;
     $$10 = 0;
     break;
    }
    case 215: {
     $663 = HEAP32[$__err>>2]|0;
     $664 = $663 | 4;
     HEAP32[$__err>>2] = $664;
     $$10 = 0;
     break;
    }
    case 239: {
     $731 = HEAP32[$__err>>2]|0;
     $732 = $731 | 4;
     HEAP32[$__err>>2] = $732;
     $$10 = 0;
     break;
    }
    case 249: {
     $771 = HEAP32[$__err>>2]|0;
     $772 = $771 | 4;
     HEAP32[$__err>>2] = $772;
     $$10 = 0;
     break;
    }
    case 251: {
     $774 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L321: do {
      if (!($774)) {
       $775 = ((($__trailing_sign$0$lcssa)) + 1|0);
       $776 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $777 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $__i$0 = 1;
       L323: while(1) {
        $778 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $779 = $778 & 1;
        $780 = ($779<<24>>24)==(0);
        if ($780) {
         $782 = $778&255;
         $783 = $782 >>> 1;
         $785 = $783;
        } else {
         $781 = HEAP32[$777>>2]|0;
         $785 = $781;
        }
        $784 = ($__i$0>>>0)<($785>>>0);
        if (!($784)) {
         break L321;
        }
        $786 = HEAP32[$__b>>2]|0;
        $787 = ($786|0)==(0|0);
        do {
         if ($787) {
          $800 = 0;
         } else {
          $788 = ((($786)) + 12|0);
          $789 = HEAP32[$788>>2]|0;
          $790 = ((($786)) + 16|0);
          $791 = HEAP32[$790>>2]|0;
          $792 = ($789|0)==($791|0);
          if ($792) {
           $793 = HEAP32[$786>>2]|0;
           $794 = ((($793)) + 36|0);
           $795 = HEAP32[$794>>2]|0;
           __THREW__ = 0;
           $796 = (invoke_ii($795|0,($786|0))|0);
           $797 = __THREW__; __THREW__ = 0;
           $798 = $797&1;
           if ($798) {
            label = 33;
            break L323;
           }
           $799 = ($796|0)==(-1);
           if ($799) {
            HEAP32[$__b>>2] = 0;
            $800 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $800 = $$pre$i$i$i;
            break;
           }
          } else {
           $800 = $786;
          }
         }
        } while(0);
        $801 = ($800|0)==(0|0);
        $802 = HEAP32[$__e>>2]|0;
        $803 = ($802|0)==(0|0);
        do {
         if ($803) {
          label = 269;
         } else {
          $804 = ((($802)) + 12|0);
          $805 = HEAP32[$804>>2]|0;
          $806 = ((($802)) + 16|0);
          $807 = HEAP32[$806>>2]|0;
          $808 = ($805|0)==($807|0);
          if ($808) {
           $809 = HEAP32[$802>>2]|0;
           $810 = ((($809)) + 36|0);
           $811 = HEAP32[$810>>2]|0;
           __THREW__ = 0;
           $812 = (invoke_ii($811|0,($802|0))|0);
           $813 = __THREW__; __THREW__ = 0;
           $814 = $813&1;
           if ($814) {
            label = 33;
            break L323;
           }
           $815 = ($812|0)==(-1);
           if ($815) {
            HEAP32[$__e>>2] = 0;
            label = 269;
            break;
           }
          }
          if (!($801)) {
           label = 276;
           break L323;
          }
         }
        } while(0);
        if ((label|0) == 269) {
         label = 0;
         if ($801) {
          label = 276;
          break;
         }
        }
        $816 = HEAP32[$__b>>2]|0;
        $817 = ((($816)) + 12|0);
        $818 = HEAP32[$817>>2]|0;
        $819 = ((($816)) + 16|0);
        $820 = HEAP32[$819>>2]|0;
        $821 = ($818|0)==($820|0);
        if ($821) {
         $822 = HEAP32[$816>>2]|0;
         $823 = ((($822)) + 36|0);
         $824 = HEAP32[$823>>2]|0;
         __THREW__ = 0;
         $825 = (invoke_ii($824|0,($816|0))|0);
         $826 = __THREW__; __THREW__ = 0;
         $827 = $826&1;
         if ($827) {
          label = 33;
          break;
         } else {
          $$0$i$i = $825;
         }
        } else {
         $828 = HEAP8[$818>>0]|0;
         $829 = $828&255;
         $$0$i$i = $829;
        }
        $830 = $$0$i$i&255;
        $831 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $832 = $831 & 1;
        $833 = ($832<<24>>24)==(0);
        if ($833) {
         $836 = $775;
        } else {
         $834 = HEAP32[$776>>2]|0;
         $836 = $834;
        }
        $835 = (($836) + ($__i$0)|0);
        $837 = HEAP8[$835>>0]|0;
        $838 = ($830<<24>>24)==($837<<24>>24);
        if (!($838)) {
         label = 276;
         break;
        }
        $841 = (($__i$0) + 1)|0;
        $842 = HEAP32[$__b>>2]|0;
        $843 = ((($842)) + 12|0);
        $844 = HEAP32[$843>>2]|0;
        $845 = ((($842)) + 16|0);
        $846 = HEAP32[$845>>2]|0;
        $847 = ($844|0)==($846|0);
        if ($847) {
         $848 = HEAP32[$842>>2]|0;
         $849 = ((($848)) + 40|0);
         $850 = HEAP32[$849>>2]|0;
         __THREW__ = 0;
         (invoke_ii($850|0,($842|0))|0);
         $851 = __THREW__; __THREW__ = 0;
         $852 = $851&1;
         if ($852) {
          label = 33;
          break;
         } else {
          $__i$0 = $841;
          continue;
         }
        } else {
         $853 = ((($844)) + 1|0);
         HEAP32[$843>>2] = $853;
         $__i$0 = $841;
         continue;
        }
       }
       if ((label|0) == 33) {
        $65 = ___cxa_find_matching_catch_2()|0;
        $66 = tempRet0;
        $lpad$phi$index = $65;$lpad$phi$index7 = $66;
        break L21;
       }
       else if ((label|0) == 276) {
        $839 = HEAP32[$__err>>2]|0;
        $840 = $839 | 4;
        HEAP32[$__err>>2] = $840;
        $$10 = 0;
        break L319;
       }
      }
     } while(0);
     $854 = HEAP32[$__gb>>2]|0;
     $855 = ($854|0)==($$lcssa394|0);
     if ($855) {
      $$10 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$854,$$lcssa394,$__et);
      $856 = HEAP32[$__et>>2]|0;
      $857 = ($856|0)==(0);
      if ($857) {
       $$10 = 1;
       break;
      } else {
       $858 = HEAP32[$__err>>2]|0;
       $859 = $858 | 4;
       HEAP32[$__err>>2] = $859;
       $$10 = 0;
       break;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $860 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $861 = ($860|0)==(0|0);
   if (!($861)) {
    $862 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($862|0,($860|0));
    $863 = __THREW__; __THREW__ = 0;
    $864 = $863&1;
    if ($864) {
     $865 = ___cxa_find_matching_catch_3(0|0)|0;
     $866 = tempRet0;
     ___clang_call_terminate($865);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$10|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $79 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $80 = ($79|0)==(0|0);
 if (!($80)) {
  $81 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($81|0,($79|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  if ($83) {
   $84 = ___cxa_find_matching_catch_3(0|0)|0;
   $85 = tempRet0;
   ___clang_call_terminate($84);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i14 = 0, $__i$0$i$i$i19 = 0, $__i$0$i$i$i24 = 0, $__i$0$i$i$i29 = 0, $__i$0$i$i$i34 = 0, $__i$0$i$i$i4 = 0, $__i$0$i$i$i9 = 0;
 var $exitcond$i$i$i = 0, $exitcond$i$i$i10 = 0, $exitcond$i$i$i15 = 0, $exitcond$i$i$i20 = 0, $exitcond$i$i$i25 = 0, $exitcond$i$i$i30 = 0, $exitcond$i$i$i35 = 0, $exitcond$i$i$i5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,20540)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = ((($__nsn)) + 1|0);
   HEAP8[$24>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = ((($__nsn)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP8[$22>>0] = 0;
   $23 = ((($__nsn)) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $29 = (($1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$29>>2] = 0;
   $30 = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $30;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $31 = HEAP32[$10>>2]|0;
  $32 = ((($31)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vii[$33 & 1023]($2,$10);
  $34 = HEAP8[$__psn>>0]|0;
  $35 = $34 & 1;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   $40 = ((($__psn)) + 1|0);
   HEAP8[$40>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $37 = ((($__psn)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   HEAP8[$38>>0] = 0;
   $39 = ((($__psn)) + 4|0);
   HEAP32[$39>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__psn|0),0);
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $43 = ___cxa_find_matching_catch_3(0|0)|0;
   $44 = tempRet0;
   ___clang_call_terminate($43);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  $__i$0$i$i$i4 = 0;
  while(1) {
   $exitcond$i$i$i5 = ($__i$0$i$i$i4|0)==(3);
   if ($exitcond$i$i$i5) {
    break;
   }
   $45 = (($2) + ($__i$0$i$i$i4<<2)|0);
   HEAP32[$45>>2] = 0;
   $46 = (($__i$0$i$i$i4) + 1)|0;
   $__i$0$i$i$i4 = $46;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $47 = HEAP32[$10>>2]|0;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP8[$__dp>>0] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = ((($51)) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (FUNCTION_TABLE_ii[$53 & 1023]($10)|0);
  HEAP8[$__ts>>0] = $54;
  $55 = HEAP32[$10>>2]|0;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  FUNCTION_TABLE_vii[$57 & 1023]($3,$10);
  $58 = HEAP8[$__grp>>0]|0;
  $59 = $58 & 1;
  $60 = ($59<<24>>24)==(0);
  if ($60) {
   $64 = ((($__grp)) + 1|0);
   HEAP8[$64>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $61 = ((($__grp)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   HEAP8[$62>>0] = 0;
   $63 = ((($__grp)) + 4|0);
   HEAP32[$63>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__grp|0),0);
  $65 = __THREW__; __THREW__ = 0;
  $66 = $65&1;
  if ($66) {
   $67 = ___cxa_find_matching_catch_3(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  $__i$0$i$i$i9 = 0;
  while(1) {
   $exitcond$i$i$i10 = ($__i$0$i$i$i9|0)==(3);
   if ($exitcond$i$i$i10) {
    break;
   }
   $69 = (($3) + ($__i$0$i$i$i9<<2)|0);
   HEAP32[$69>>2] = 0;
   $70 = (($__i$0$i$i$i9) + 1)|0;
   $__i$0$i$i$i9 = $70;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $71 = HEAP32[$10>>2]|0;
  $72 = ((($71)) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  FUNCTION_TABLE_vii[$73 & 1023]($4,$10);
  $74 = HEAP8[$__sym>>0]|0;
  $75 = $74 & 1;
  $76 = ($75<<24>>24)==(0);
  if ($76) {
   $80 = ((($__sym)) + 1|0);
   HEAP8[$80>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $77 = ((($__sym)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   HEAP8[$78>>0] = 0;
   $79 = ((($__sym)) + 4|0);
   HEAP32[$79>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__sym|0),0);
  $81 = __THREW__; __THREW__ = 0;
  $82 = $81&1;
  if ($82) {
   $83 = ___cxa_find_matching_catch_3(0|0)|0;
   $84 = tempRet0;
   ___clang_call_terminate($83);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i14 = 0;
  while(1) {
   $exitcond$i$i$i15 = ($__i$0$i$i$i14|0)==(3);
   if ($exitcond$i$i$i15) {
    break;
   }
   $85 = (($4) + ($__i$0$i$i$i14<<2)|0);
   HEAP32[$85>>2] = 0;
   $86 = (($__i$0$i$i$i14) + 1)|0;
   $__i$0$i$i$i14 = $86;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $87 = HEAP32[$10>>2]|0;
  $88 = ((($87)) + 36|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (FUNCTION_TABLE_ii[$89 & 1023]($10)|0);
  $storemerge = $90;
 } else {
  $91 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,20532)|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($92)) + 44|0);
  $94 = HEAP32[$93>>2]|0;
  FUNCTION_TABLE_vii[$94 & 1023]($5,$91);
  $95 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$95&255;HEAP8[$__pat+1>>0]=($95>>8)&255;HEAP8[$__pat+2>>0]=($95>>16)&255;HEAP8[$__pat+3>>0]=$95>>24;
  $96 = HEAP32[$91>>2]|0;
  $97 = ((($96)) + 32|0);
  $98 = HEAP32[$97>>2]|0;
  FUNCTION_TABLE_vii[$98 & 1023]($6,$91);
  $99 = HEAP8[$__nsn>>0]|0;
  $100 = $99 & 1;
  $101 = ($100<<24>>24)==(0);
  if ($101) {
   $105 = ((($__nsn)) + 1|0);
   HEAP8[$105>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $102 = ((($__nsn)) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   HEAP8[$103>>0] = 0;
   $104 = ((($__nsn)) + 4|0);
   HEAP32[$104>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__nsn|0),0);
  $106 = __THREW__; __THREW__ = 0;
  $107 = $106&1;
  if ($107) {
   $108 = ___cxa_find_matching_catch_3(0|0)|0;
   $109 = tempRet0;
   ___clang_call_terminate($108);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  $__i$0$i$i$i19 = 0;
  while(1) {
   $exitcond$i$i$i20 = ($__i$0$i$i$i19|0)==(3);
   if ($exitcond$i$i$i20) {
    break;
   }
   $110 = (($6) + ($__i$0$i$i$i19<<2)|0);
   HEAP32[$110>>2] = 0;
   $111 = (($__i$0$i$i$i19) + 1)|0;
   $__i$0$i$i$i19 = $111;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
  $112 = HEAP32[$91>>2]|0;
  $113 = ((($112)) + 28|0);
  $114 = HEAP32[$113>>2]|0;
  FUNCTION_TABLE_vii[$114 & 1023]($7,$91);
  $115 = HEAP8[$__psn>>0]|0;
  $116 = $115 & 1;
  $117 = ($116<<24>>24)==(0);
  if ($117) {
   $121 = ((($__psn)) + 1|0);
   HEAP8[$121>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $118 = ((($__psn)) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   HEAP8[$119>>0] = 0;
   $120 = ((($__psn)) + 4|0);
   HEAP32[$120>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__psn|0),0);
  $122 = __THREW__; __THREW__ = 0;
  $123 = $122&1;
  if ($123) {
   $124 = ___cxa_find_matching_catch_3(0|0)|0;
   $125 = tempRet0;
   ___clang_call_terminate($124);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  $__i$0$i$i$i24 = 0;
  while(1) {
   $exitcond$i$i$i25 = ($__i$0$i$i$i24|0)==(3);
   if ($exitcond$i$i$i25) {
    break;
   }
   $126 = (($7) + ($__i$0$i$i$i24<<2)|0);
   HEAP32[$126>>2] = 0;
   $127 = (($__i$0$i$i$i24) + 1)|0;
   $__i$0$i$i$i24 = $127;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  $128 = HEAP32[$91>>2]|0;
  $129 = ((($128)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($91)|0);
  HEAP8[$__dp>>0] = $131;
  $132 = HEAP32[$91>>2]|0;
  $133 = ((($132)) + 16|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (FUNCTION_TABLE_ii[$134 & 1023]($91)|0);
  HEAP8[$__ts>>0] = $135;
  $136 = HEAP32[$91>>2]|0;
  $137 = ((($136)) + 20|0);
  $138 = HEAP32[$137>>2]|0;
  FUNCTION_TABLE_vii[$138 & 1023]($8,$91);
  $139 = HEAP8[$__grp>>0]|0;
  $140 = $139 & 1;
  $141 = ($140<<24>>24)==(0);
  if ($141) {
   $145 = ((($__grp)) + 1|0);
   HEAP8[$145>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $142 = ((($__grp)) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   HEAP8[$143>>0] = 0;
   $144 = ((($__grp)) + 4|0);
   HEAP32[$144>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__grp|0),0);
  $146 = __THREW__; __THREW__ = 0;
  $147 = $146&1;
  if ($147) {
   $148 = ___cxa_find_matching_catch_3(0|0)|0;
   $149 = tempRet0;
   ___clang_call_terminate($148);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  $__i$0$i$i$i29 = 0;
  while(1) {
   $exitcond$i$i$i30 = ($__i$0$i$i$i29|0)==(3);
   if ($exitcond$i$i$i30) {
    break;
   }
   $150 = (($8) + ($__i$0$i$i$i29<<2)|0);
   HEAP32[$150>>2] = 0;
   $151 = (($__i$0$i$i$i29) + 1)|0;
   $__i$0$i$i$i29 = $151;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  $152 = HEAP32[$91>>2]|0;
  $153 = ((($152)) + 24|0);
  $154 = HEAP32[$153>>2]|0;
  FUNCTION_TABLE_vii[$154 & 1023]($9,$91);
  $155 = HEAP8[$__sym>>0]|0;
  $156 = $155 & 1;
  $157 = ($156<<24>>24)==(0);
  if ($157) {
   $161 = ((($__sym)) + 1|0);
   HEAP8[$161>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $158 = ((($__sym)) + 8|0);
   $159 = HEAP32[$158>>2]|0;
   HEAP8[$159>>0] = 0;
   $160 = ((($__sym)) + 4|0);
   HEAP32[$160>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__sym|0),0);
  $162 = __THREW__; __THREW__ = 0;
  $163 = $162&1;
  if ($163) {
   $164 = ___cxa_find_matching_catch_3(0|0)|0;
   $165 = tempRet0;
   ___clang_call_terminate($164);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  $__i$0$i$i$i34 = 0;
  while(1) {
   $exitcond$i$i$i35 = ($__i$0$i$i$i34|0)==(3);
   if ($exitcond$i$i$i35) {
    break;
   }
   $166 = (($9) + ($__i$0$i$i$i34<<2)|0);
   HEAP32[$166>>2] = 0;
   $167 = (($__i$0$i$i$i34) + 1)|0;
   $__i$0$i$i$i34 = $167;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
  $168 = HEAP32[$91>>2]|0;
  $169 = ((($168)) + 36|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (FUNCTION_TABLE_ii[$170 & 1023]($91)|0);
  $storemerge = $171;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(497|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<(2147483647);
 $7 = $5 << 1;
 $$ = $6 ? $7 : -1;
 $8 = HEAP32[$__n>>2]|0;
 $9 = $4;
 $10 = (($8) - ($4))|0;
 $11 = $2 ? $9 : 0;
 $12 = (_realloc($11,$$)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $14 = $12;
   HEAP32[$__b>>2] = $14;
   $23 = $12;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $15 = $12;
   HEAP32[$__b>>2] = $15;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $23 = $12;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $23 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (504);
 $22 = (($23) + ($10)|0);
 HEAP32[$__n>>2] = $22;
 $24 = HEAP32[$__b>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$__e>>2] = $25;
 return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(497|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<(2147483647);
 $7 = $5 << 1;
 $$ = $6 ? $7 : -1;
 $8 = HEAP32[$__n>>2]|0;
 $9 = (($8) - ($4))|0;
 $10 = $9 >> 2;
 $phitmp = $4;
 $11 = $2 ? $phitmp : 0;
 $12 = (_realloc($11,$$)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $14 = $12;
   HEAP32[$__b>>2] = $14;
   $24 = $12;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $15 = $12;
   HEAP32[$__b>>2] = $15;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $24 = $12;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $24 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (504);
 $22 = $$ >>> 2;
 $23 = (($24) + ($10<<2)|0);
 HEAP32[$__n>>2] = $23;
 $25 = HEAP32[$__b>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$__e>>2] = $26;
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (497);
 $3 = ((($__wbuf)) + 100|0);
 __THREW__ = 0;
 $4 = (invoke_ii(345,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $34;$$019 = $35;$95 = $__wbuf;
  label = 37;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(346,($__loc|0),(18820|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(498,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $23 = ((($__v)) + 1|0);
       HEAP8[$23>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP8[$21>>0] = 0;
       $22 = ((($__v)) + 4|0);
       HEAP32[$22>>2] = 0;
      }
      $24 = HEAP8[$__neg>>0]|0;
      $25 = ($24<<24>>24)==(0);
      if (!($25)) {
       $26 = HEAP32[$7>>2]|0;
       $27 = ((($26)) + 28|0);
       $28 = HEAP32[$27>>2]|0;
       __THREW__ = 0;
       $29 = (invoke_iii($28|0,($7|0),45)|0);
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(501,($__v|0),($29|0));
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        break;
       }
      }
      $36 = HEAP32[$7>>2]|0;
      $37 = ((($36)) + 28|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_iii($38|0,($7|0),48)|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break;
      }
      $42 = HEAP32[$__wb>>2]|0;
      $43 = HEAP32[$__wn>>2]|0;
      $44 = ((($43)) + -1|0);
      $__w$0 = $42;
      while(1) {
       $45 = ($__w$0>>>0)<($44>>>0);
       if (!($45)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $46 = HEAP8[$__w$0>>0]|0;
       $47 = ($46<<24>>24)==($39<<24>>24);
       if (!($47)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $48 = ((($__w$0)) + 1|0);
       $__w$0 = $48;
      }
      __THREW__ = 0;
      (invoke_iiii(505,($__v|0),($__w$0$lcssa|0),($43|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       break;
      }
     }
     $51 = HEAP32[$__b>>2]|0;
     $52 = ($51|0)==(0|0);
     do {
      if ($52) {
       $65 = 0;
      } else {
       $53 = ((($51)) + 12|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($51)) + 16|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($54|0)==($56|0);
       if ($57) {
        $58 = HEAP32[$51>>2]|0;
        $59 = ((($58)) + 36|0);
        $60 = HEAP32[$59>>2]|0;
        __THREW__ = 0;
        $61 = (invoke_ii($60|0,($51|0))|0);
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         break L4;
        }
        $64 = ($61|0)==(-1);
        if ($64) {
         HEAP32[$__b>>2] = 0;
         $65 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $65 = $$pre$i$i$i;
         break;
        }
       } else {
        $65 = $51;
       }
      }
     } while(0);
     $66 = ($65|0)==(0|0);
     $67 = ($10|0)==(0);
     do {
      if ($67) {
       label = 30;
      } else {
       $68 = ((($13)) + 12|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ((($13)) + 16|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ($69|0)==($71|0);
       if ($72) {
        $73 = $10;
        $74 = HEAP32[$73>>2]|0;
        $75 = ((($74)) + 36|0);
        $76 = HEAP32[$75>>2]|0;
        __THREW__ = 0;
        $77 = (invoke_ii($76|0,($13|0))|0);
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if ($79) {
         break L4;
        }
        $80 = ($77|0)==(-1);
        if ($80) {
         HEAP32[$__e>>2] = 0;
         label = 30;
         break;
        }
       }
       if (!($66)) {
        label = 31;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($66) {
       label = 31;
      }
     }
     if ((label|0) == 31) {
      $81 = HEAP32[$__err>>2]|0;
      $82 = $81 | 2;
      HEAP32[$__err>>2] = $82;
     }
     $83 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $84 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $85 = ($84|0)==(0|0);
     if (!($85)) {
      $86 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($86|0,($84|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       $89 = ___cxa_find_matching_catch_3(0|0)|0;
       $90 = tempRet0;
       ___clang_call_terminate($89);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($83|0);
    }
   }
  } while(0);
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0110 = $92;$$012 = $91;
  } else {
   $$011 = $91;$$019 = $92;$95 = $$pre;
   label = 37;
  }
 }
 if ((label|0) == 37) {
  $94 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($94|0,($95|0));
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  if ($97) {
   $98 = ___cxa_find_matching_catch_3(0|0)|0;
   $99 = tempRet0;
   ___clang_call_terminate($98);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = $5;$16 = 10;$40 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $7;$16 = $phitmp$i;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($16) - ($15))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($15) + ($12))|0;
    $19 = (($18) - ($16))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $40;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = ((($this)) + 1|0);
    $27 = $25;
   } else {
    $23 = ((($this)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $27 = $24;
   }
   $26 = (($27) + ($15)|0);
   $28 = (($15) - ($0))|0;
   $scevgep = (($__last) + ($28)|0);
   $scevgep1 = $scevgep;
   $$0 = $__first;$__p$0 = $26;
   while(1) {
    $29 = ($$0|0)==($__last|0);
    if ($29) {
     break;
    }
    $30 = HEAP8[$$0>>0]|0;
    HEAP8[$__p$0>>0] = $30;
    $31 = ((($__p$0)) + 1|0);
    $32 = ((($$0)) + 1|0);
    $$0 = $32;$__p$0 = $31;
   }
   $scevgep2 = (($27) + ($scevgep1)|0);
   HEAP8[$scevgep2>>0] = 0;
   $33 = (($15) + ($12))|0;
   $34 = HEAP8[$this>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $33 << 1;
    $39 = $38&255;
    HEAP8[$this>>0] = $39;
    break;
   } else {
    $37 = ((($this)) + 4|0);
    HEAP32[$37>>2] = $33;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$113 = 0, $$114 = 0, $$1211 = 0, $$1212 = 0, $$byval_copy = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 52|0;
 $__neg = sp + 576|0;
 $0 = sp + 48|0;
 $__atoms = sp + 8|0;
 $__nbuf = sp + 476|0;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (497);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(345,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$113 = $34;$$1211 = $35;$110 = 497;$111 = $__wbuf;
  label = 49;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(346,($__loc|0),(18852|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if ($9) {
    label = 10;
   } else {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $13 = (invoke_iiiiiiiiiiii(506,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 10;
    } else {
     L7: do {
      if ($13) {
       $16 = HEAP32[$7>>2]|0;
       $17 = ((($16)) + 48|0);
       $18 = HEAP32[$17>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($18|0,($7|0),(15961|0),((15971)|0),($__atoms|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if ($20) {
        label = 10;
        break L4;
       }
       $21 = HEAP32[$__wn>>2]|0;
       $22 = HEAP32[$__wb>>2]|0;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(392);
       $25 = $22;
       $26 = $21;
       if ($24) {
        $27 = $23 >> 2;
        $28 = (($27) + 2)|0;
        $29 = (_malloc($28)|0);
        $30 = $29;
        $31 = ($29|0)==(0|0);
        if ($31) {
         __THREW__ = 0;
         invoke_v(458);
         $32 = __THREW__; __THREW__ = 0;
         $33 = $32&1;
         if ($33) {
          $__h$sroa$0$0 = $30;
         } else {
          $__h$sroa$0$1 = $30;$__nc$0 = 0;
          label = 13;
         }
        } else {
         $__h$sroa$0$1 = $30;$__nc$0 = $29;
         label = 13;
        }
       } else {
        $__h$sroa$0$1 = 0;$__nc$0 = $__nbuf;
        label = 13;
       }
       do {
        if ((label|0) == 13) {
         $42 = HEAP8[$__neg>>0]|0;
         $43 = ($42<<24>>24)==(0);
         if ($43) {
          $__nc$1 = $__nc$0;
         } else {
          $44 = ((($__nc$0)) + 1|0);
          HEAP8[$__nc$0>>0] = 45;
          $__nc$1 = $44;
         }
         $45 = ((($__atoms)) + 40|0);
         $46 = $__atoms;
         $48 = $26;$__nc$2 = $__nc$1;$__w$0 = $25;
         while(1) {
          $47 = ($__w$0>>>0)<($48>>>0);
          if (!($47)) {
           $__nc$2$lcssa = $__nc$2;
           break;
          }
          $51 = HEAP32[$__w$0>>2]|0;
          $$0$i = $__atoms;
          while(1) {
           $52 = ($$0$i|0)==($45|0);
           if ($52) {
            $$0$lcssa$i = $45;
            break;
           }
           $53 = HEAP32[$$0$i>>2]|0;
           $54 = ($53|0)==($51|0);
           if ($54) {
            $$0$lcssa$i = $$0$i;
            break;
           }
           $55 = ((($$0$i)) + 4|0);
           $$0$i = $55;
          }
          $56 = $$0$lcssa$i;
          $57 = (($56) - ($46))|0;
          $58 = $57 >> 2;
          $59 = (15961 + ($58)|0);
          $60 = HEAP8[$59>>0]|0;
          HEAP8[$__nc$2>>0] = $60;
          $61 = ((($__w$0)) + 4|0);
          $62 = ((($__nc$2)) + 1|0);
          $$pre = HEAP32[$__wn>>2]|0;
          $48 = $$pre;$__nc$2 = $62;$__w$0 = $61;
         }
         HEAP8[$__nc$2$lcssa>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $49 = (_sscanf($__nbuf,15846,$vararg_buffer)|0);
         $50 = ($49|0)==(1);
         if (!($50)) {
          __THREW__ = 0;
          invoke_vi(499,(15850|0));
          $63 = __THREW__; __THREW__ = 0;
          $64 = $63&1;
          if ($64) {
           $__h$sroa$0$0 = $__h$sroa$0$1;
           break;
          }
         }
         $65 = ($__h$sroa$0$1|0)==(0);
         if (!($65)) {
          $66 = $__h$sroa$0$1;
          _free($66);
         }
         break L7;
        }
       } while(0);
       $38 = ___cxa_find_matching_catch_2()|0;
       $39 = tempRet0;
       $40 = ($__h$sroa$0$0|0)==(0);
       if ($40) {
        $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
        break L4;
       }
       $41 = $__h$sroa$0$0;
       _free($41);
       $$0 = $38;$$01 = $39;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
       break L4;
      }
     } while(0);
     $67 = HEAP32[$__b>>2]|0;
     $68 = ($67|0)==(0|0);
     do {
      if ($68) {
       $116 = 1;
      } else {
       $69 = ((($67)) + 12|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ((($67)) + 16|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($70|0)==($72|0);
       if ($73) {
        $74 = HEAP32[$67>>2]|0;
        $75 = ((($74)) + 36|0);
        $76 = HEAP32[$75>>2]|0;
        __THREW__ = 0;
        $77 = (invoke_ii($76|0,($67|0))|0);
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if ($79) {
         label = 10;
         break L4;
        } else {
         $$0$i$i$i$i = $77;
        }
       } else {
        $80 = HEAP32[$70>>2]|0;
        $$0$i$i$i$i = $80;
       }
       $81 = ($$0$i$i$i$i|0)==(-1);
       if ($81) {
        HEAP32[$__b>>2] = 0;
        $116 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $116 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $82 = HEAP32[$__e>>2]|0;
     $83 = ($82|0)==(0|0);
     do {
      if ($83) {
       label = 40;
      } else {
       $84 = ((($82)) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ((($82)) + 16|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($85|0)==($87|0);
       if ($88) {
        $89 = HEAP32[$82>>2]|0;
        $90 = ((($89)) + 36|0);
        $91 = HEAP32[$90>>2]|0;
        __THREW__ = 0;
        $92 = (invoke_ii($91|0,($82|0))|0);
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         label = 10;
         break L4;
        } else {
         $$0$i$i1$i$i = $92;
        }
       } else {
        $95 = HEAP32[$85>>2]|0;
        $$0$i$i1$i$i = $95;
       }
       $96 = ($$0$i$i1$i$i|0)==(-1);
       if ($96) {
        HEAP32[$__e>>2] = 0;
        label = 40;
        break;
       } else {
        if ($116) {
         break;
        } else {
         label = 42;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 40) {
      if ($116) {
       label = 42;
      }
     }
     if ((label|0) == 42) {
      $97 = HEAP32[$__err>>2]|0;
      $98 = $97 | 2;
      HEAP32[$__err>>2] = $98;
     }
     $99 = HEAP32[$__b>>2]|0;
     $100 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
     $101 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $102 = ($101|0)==(0|0);
     if (!($102)) {
      $103 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($103|0,($101|0));
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       $106 = ___cxa_find_matching_catch_3(0|0)|0;
       $107 = tempRet0;
       ___clang_call_terminate($106);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($99|0);
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $36 = ___cxa_find_matching_catch_2()|0;
   $37 = tempRet0;
   $$0 = $36;$$01 = $37;$$phi$trans$insert$pre$phiZZZZ2D = $__wb;
  }
  $108 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($108)|0);
  $$pre7 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2] = 0;
  $109 = ($$pre7|0)==(0|0);
  if ($109) {
   $$114 = $$0;$$1212 = $$01;
  } else {
   $$pre15 = HEAP32[$2>>2]|0;
   $$113 = $$0;$$1211 = $$01;$110 = $$pre15;$111 = $$pre7;
   label = 49;
  }
 }
 if ((label|0) == 49) {
  __THREW__ = 0;
  invoke_vi($110|0,($111|0));
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch_3(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  } else {
   $$114 = $$113;$$1212 = $$1211;
  }
 }
 ___resumeException($$114|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i107 = 0, $$0$i$i$i$i141 = 0, $$0$i$i$i$i173 = 0, $$0$i$i$i$i198 = 0, $$0$i$i$i$i45 = 0, $$0$i$i$i$i66 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i113 = 0, $$0$i$i1$i$i147 = 0, $$0$i$i1$i$i179 = 0, $$0$i$i1$i$i204 = 0, $$0$i$i1$i$i51 = 0, $$0$i$i1$i$i72 = 0, $$0$i$i101 = 0, $$0$i$i104 = 0, $$0$i$i125 = 0, $$0$i$i134 = 0, $$0$i$i137 = 0;
 var $$0$i$i159 = 0, $$0$i$i170 = 0, $$0$i$i194 = 0, $$0$i$i60 = 0, $$0$i$i64 = 0, $$0$i$i81 = 0, $$0$i$i88 = 0, $$0$i$i93 = 0, $$10 = 0, $$lcssa = 0, $$lcssa450 = 0, $$lcssa461 = 0, $$phi$trans$insert = 0, $$phi$trans$insert323 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i109 = 0, $$pre$i$i$i143 = 0, $$pre$i$i$i175 = 0, $$pre$i$i$i200 = 0;
 var $$pre$i$i$i47 = 0, $$pre$i$i$i68 = 0, $$pre$i3$i$i115 = 0, $$pre$i3$i$i115309$ph = 0, $$pre$i3$i$i115309333 = 0, $$pre$i3$i$i149 = 0, $$pre$i3$i$i181 = 0, $$pre$i3$i$i181302 = 0, $$pre$i3$i$i181304 = 0, $$pre$i3$i$i206 = 0, $$pre$i3$i$i206317 = 0, $$pre$i3$i$i206318 = 0, $$pre$i3$i$i74 = 0, $$pre$i3$i$i74327 = 0, $$pre$i3$i$i74329 = 0, $$pre306 = 0, $$pre308 = 0, $$pre311 = 0, $$pre312 = 0, $$pre313 = 0;
 var $$pre314 = 0, $$pre315 = 0, $$pre316 = 0, $$pre320 = 0, $$pre321 = 0, $$pre322 = 0, $$pre324 = 0, $$pre325 = 0, $$pre326 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0;
 var $__i$0$i$i29 = 0, $__i$0$i$i31 = 0, $__i$0$i$i35 = 0, $__i$0$i$i40 = 0, $__ng$0 = 0, $__ng$0$lcssa451 = 0, $__ng$2$ph = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$023 = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$022 = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0 = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$0$lcssa459 = 0;
 var $__sym_space_end$sroa$0$0460 = 0, $__trailing_sign$0 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond28 = 0, $exitcond$i$i = 0, $exitcond$i$i30 = 0, $exitcond$i$i32 = 0, $exitcond$i$i36 = 0, $exitcond$i$i41 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond25 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i110 = 0;
 var $phitmp$i$i$i144 = 0, $phitmp$i$i$i176 = 0, $phitmp$i$i$i201 = 0, $phitmp$i$i$i48 = 0, $phitmp$i$i$i69 = 0, $phitmp$i4$i$i116 = 0, $phitmp$i4$i$i182 = 0, $phitmp$i4$i$i207 = 0, $phitmp$i4$i$i75 = 0, $switch = 0, $tmp$i$i118 = 0, $tmp$i$i184 = 0, $tmp$i$i209 = 0, $tmp$i$i77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 80|0;
 $__ge = sp + 76|0;
 $__pat = sp + 500|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 $1 = $__gbuf;
 HEAP32[$__gb>>2] = $1;
 $2 = ((($__gb)) + 4|0);
 HEAP32[$2>>2] = (497);
 HEAP32[$__gn>>2] = $__gbuf;
 $3 = ((($__gbuf)) + 400|0);
 HEAP32[$__ge>>2] = $3;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $4 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $5;
 }
 $__i$0$i$i29 = 0;
 while(1) {
  $exitcond$i$i30 = ($__i$0$i$i29|0)==(3);
  if ($exitcond$i$i30) {
   break;
  }
  $6 = (($__sym) + ($__i$0$i$i29<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($__i$0$i$i29) + 1)|0;
  $__i$0$i$i29 = $7;
 }
 $__i$0$i$i31 = 0;
 while(1) {
  $exitcond$i$i32 = ($__i$0$i$i31|0)==(3);
  if ($exitcond$i$i32) {
   break;
  }
  $8 = (($__psn) + ($__i$0$i$i31<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($__i$0$i$i31) + 1)|0;
  $__i$0$i$i31 = $9;
 }
 $__i$0$i$i35 = 0;
 while(1) {
  $exitcond$i$i36 = ($__i$0$i$i35|0)==(3);
  if ($exitcond$i$i36) {
   break;
  }
  $10 = (($__nsn) + ($__i$0$i$i35<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = (($__i$0$i$i35) + 1)|0;
  $__i$0$i$i35 = $11;
 }
 $__i$0$i$i40 = 0;
 while(1) {
  $exitcond$i$i41 = ($__i$0$i$i40|0)==(3);
  if ($exitcond$i$i41) {
   break;
  }
  $12 = (($__spaces) + ($__i$0$i$i40<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = (($__i$0$i$i40) + 1)|0;
  $__i$0$i$i40 = $13;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(507,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L21: do {
  if ($15) {
   $74 = ___cxa_find_matching_catch_2()|0;
   $75 = tempRet0;
   $lpad$phi$index = $74;$lpad$phi$index8 = $75;
  } else {
   $16 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $16;
   $17 = ((($__psn)) + 4|0);
   $18 = ((($__nsn)) + 4|0);
   $19 = ((($__nsn)) + 8|0);
   $20 = ((($__psn)) + 8|0);
   $21 = $__flags & 512;
   $22 = ($21|0)!=(0);
   $23 = ((($__sym)) + 8|0);
   $24 = ((($__sym)) + 4|0);
   $25 = ((($__spaces)) + 4|0);
   $26 = ((($__spaces)) + 8|0);
   $27 = ((($__pat)) + 3|0);
   $28 = ((($__grp)) + 4|0);
   $847 = $__gbuf;$__p$0 = 0;$__trailing_sign$0 = 0;
   L24: while(1) {
    $29 = ($__p$0>>>0)<(4);
    if (!($29)) {
     $$lcssa461 = $847;$__trailing_sign$0$lcssa = $__trailing_sign$0;
     label = 259;
     break;
    }
    $30 = HEAP32[$__b>>2]|0;
    $31 = ($30|0)==(0|0);
    do {
     if ($31) {
      $848 = 1;
     } else {
      $32 = ((($30)) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($30)) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if ($36) {
       $37 = HEAP32[$30>>2]|0;
       $38 = ((($37)) + 36|0);
       $39 = HEAP32[$38>>2]|0;
       __THREW__ = 0;
       $40 = (invoke_ii($39|0,($30|0))|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        label = 40;
        break L24;
       } else {
        $$0$i$i$i$i45 = $40;
       }
      } else {
       $43 = HEAP32[$33>>2]|0;
       $$0$i$i$i$i45 = $43;
      }
      $44 = ($$0$i$i$i$i45|0)==(-1);
      if ($44) {
       HEAP32[$__b>>2] = 0;
       $848 = 1;
       break;
      } else {
       $$pre$i$i$i47 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i48 = ($$pre$i$i$i47|0)==(0|0);
       $848 = $phitmp$i$i$i48;
       break;
      }
     }
    } while(0);
    $45 = HEAP32[$__e>>2]|0;
    $46 = ($45|0)==(0|0);
    do {
     if ($46) {
      label = 32;
     } else {
      $47 = ((($45)) + 12|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ((($45)) + 16|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($48|0)==($50|0);
      if ($51) {
       $52 = HEAP32[$45>>2]|0;
       $53 = ((($52)) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       __THREW__ = 0;
       $55 = (invoke_ii($54|0,($45|0))|0);
       $56 = __THREW__; __THREW__ = 0;
       $57 = $56&1;
       if ($57) {
        label = 40;
        break L24;
       } else {
        $$0$i$i1$i$i51 = $55;
       }
      } else {
       $58 = HEAP32[$48>>2]|0;
       $$0$i$i1$i$i51 = $58;
      }
      $59 = ($$0$i$i1$i$i51|0)==(-1);
      if ($59) {
       HEAP32[$__e>>2] = 0;
       label = 32;
       break;
      } else {
       if ($848) {
        $849 = $45;
        break;
       } else {
        $$lcssa461 = $847;$__trailing_sign$0$lcssa = $__trailing_sign$0;
        label = 259;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 32) {
     label = 0;
     if ($848) {
      $$lcssa461 = $847;$__trailing_sign$0$lcssa = $__trailing_sign$0;
      label = 259;
      break;
     } else {
      $849 = 0;
     }
    }
    $83 = (($__pat) + ($__p$0)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84 << 24 >> 24;
    L49: do {
     switch ($85|0) {
     case 1:  {
      $cond28 = ($__p$0|0)==(3);
      if ($cond28) {
       $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $87 = HEAP32[$__b>>2]|0;
       $88 = ((($87)) + 12|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ((($87)) + 16|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ($89|0)==($91|0);
       if ($92) {
        $93 = HEAP32[$87>>2]|0;
        $94 = ((($93)) + 36|0);
        $95 = HEAP32[$94>>2]|0;
        __THREW__ = 0;
        $96 = (invoke_ii($95|0,($87|0))|0);
        $97 = __THREW__; __THREW__ = 0;
        $98 = $97&1;
        if ($98) {
         label = 40;
         break L24;
        } else {
         $$0$i$i60 = $96;
        }
       } else {
        $99 = HEAP32[$89>>2]|0;
        $$0$i$i60 = $99;
       }
       $100 = HEAP32[$__ct>>2]|0;
       $101 = ((($100)) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_iiii($102|0,($__ct|0),8192,($$0$i$i60|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 40;
        break L24;
       }
       if (!($103)) {
        label = 58;
        break L24;
       }
       $106 = HEAP32[$__b>>2]|0;
       $107 = ((($106)) + 12|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ((($106)) + 16|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ($108|0)==($110|0);
       if ($111) {
        $112 = HEAP32[$106>>2]|0;
        $113 = ((($112)) + 40|0);
        $114 = HEAP32[$113>>2]|0;
        __THREW__ = 0;
        $115 = (invoke_ii($114|0,($106|0))|0);
        $116 = __THREW__; __THREW__ = 0;
        $117 = $116&1;
        if ($117) {
         label = 40;
         break L24;
        } else {
         $$0$i$i64 = $115;
        }
       } else {
        $118 = ((($108)) + 4|0);
        HEAP32[$107>>2] = $118;
        $119 = HEAP32[$108>>2]|0;
        $$0$i$i64 = $119;
       }
       __THREW__ = 0;
       invoke_vii(508,($__spaces|0),($$0$i$i64|0));
       $120 = __THREW__; __THREW__ = 0;
       $121 = $120&1;
       if ($121) {
        label = 40;
        break L24;
       } else {
        $$pre$i3$i$i74 = $849;$140 = $849;
        label = 60;
       }
      }
      break;
     }
     case 0:  {
      $124 = ($__p$0|0)==(3);
      if ($124) {
       $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $$pre$i3$i$i74 = $849;$140 = $849;
       label = 60;
      }
      break;
     }
     case 3:  {
      $191 = HEAP8[$__psn>>0]|0;
      $192 = $191 & 1;
      $193 = ($192<<24>>24)==(0);
      $194 = HEAP32[$17>>2]|0;
      $195 = $191&255;
      $196 = $195 >>> 1;
      $197 = $193 ? $196 : $194;
      $198 = HEAP8[$__nsn>>0]|0;
      $199 = $198 & 1;
      $200 = ($199<<24>>24)==(0);
      $201 = HEAP32[$18>>2]|0;
      $202 = $198&255;
      $203 = $202 >>> 1;
      $204 = $200 ? $203 : $201;
      $205 = (0 - ($204))|0;
      $206 = ($197|0)==($205|0);
      if ($206) {
       $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
      } else {
       $207 = ($197|0)==(0);
       if ($207) {
        $249 = HEAP32[$__b>>2]|0;
        $250 = ((($249)) + 12|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = ((($249)) + 16|0);
        $253 = HEAP32[$252>>2]|0;
        $254 = ($251|0)==($253|0);
        if ($254) {
         $255 = HEAP32[$249>>2]|0;
         $256 = ((($255)) + 36|0);
         $257 = HEAP32[$256>>2]|0;
         __THREW__ = 0;
         $258 = (invoke_ii($257|0,($249|0))|0);
         $259 = __THREW__; __THREW__ = 0;
         $260 = $259&1;
         if ($260) {
          label = 40;
          break L24;
         }
         $$pre326 = HEAP8[$__nsn>>0]|0;
         $$0$i$i125 = $258;$263 = $$pre326;
        } else {
         $261 = HEAP32[$251>>2]|0;
         $$0$i$i125 = $261;$263 = $198;
        }
        $262 = $263 & 1;
        $264 = ($262<<24>>24)==(0);
        $265 = HEAP32[$19>>2]|0;
        $266 = $264 ? $18 : $265;
        $267 = HEAP32[$266>>2]|0;
        $268 = ($$0$i$i125|0)==($267|0);
        if (!($268)) {
         $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
         break L49;
        }
        $269 = HEAP32[$__b>>2]|0;
        $270 = ((($269)) + 12|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = ((($269)) + 16|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = ($271|0)==($273|0);
        if ($274) {
         $275 = HEAP32[$269>>2]|0;
         $276 = ((($275)) + 40|0);
         $277 = HEAP32[$276>>2]|0;
         __THREW__ = 0;
         (invoke_ii($277|0,($269|0))|0);
         $278 = __THREW__; __THREW__ = 0;
         $279 = $278&1;
         if ($279) {
          label = 40;
          break L24;
         }
        } else {
         $280 = ((($271)) + 4|0);
         HEAP32[$270>>2] = $280;
        }
        HEAP8[$__neg>>0] = 1;
        $281 = HEAP8[$__nsn>>0]|0;
        $282 = $281 & 1;
        $283 = ($282<<24>>24)==(0);
        $284 = HEAP32[$18>>2]|0;
        $285 = $281&255;
        $286 = $285 >>> 1;
        $287 = $283 ? $286 : $284;
        $288 = ($287>>>0)>(1);
        $__nsn$__trailing_sign$0 = $288 ? $__nsn : $__trailing_sign$0;
        $850 = $847;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L49;
       }
       $208 = ($204|0)==(0);
       $209 = HEAP32[$__b>>2]|0;
       $210 = ((($209)) + 12|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ((($209)) + 16|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = ($211|0)==($213|0);
       if ($208) {
        if ($214) {
         $215 = HEAP32[$209>>2]|0;
         $216 = ((($215)) + 36|0);
         $217 = HEAP32[$216>>2]|0;
         __THREW__ = 0;
         $218 = (invoke_ii($217|0,($209|0))|0);
         $219 = __THREW__; __THREW__ = 0;
         $220 = $219&1;
         if ($220) {
          label = 40;
          break L24;
         }
         $$pre325 = HEAP8[$__psn>>0]|0;
         $$0$i$i104 = $218;$223 = $$pre325;
        } else {
         $221 = HEAP32[$211>>2]|0;
         $$0$i$i104 = $221;$223 = $191;
        }
        $222 = $223 & 1;
        $224 = ($222<<24>>24)==(0);
        $225 = HEAP32[$20>>2]|0;
        $226 = $224 ? $17 : $225;
        $227 = HEAP32[$226>>2]|0;
        $228 = ($$0$i$i104|0)==($227|0);
        if (!($228)) {
         HEAP8[$__neg>>0] = 1;
         $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
         break L49;
        }
        $229 = HEAP32[$__b>>2]|0;
        $230 = ((($229)) + 12|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = ((($229)) + 16|0);
        $233 = HEAP32[$232>>2]|0;
        $234 = ($231|0)==($233|0);
        if ($234) {
         $235 = HEAP32[$229>>2]|0;
         $236 = ((($235)) + 40|0);
         $237 = HEAP32[$236>>2]|0;
         __THREW__ = 0;
         (invoke_ii($237|0,($229|0))|0);
         $238 = __THREW__; __THREW__ = 0;
         $239 = $238&1;
         if ($239) {
          label = 40;
          break L24;
         }
        } else {
         $240 = ((($231)) + 4|0);
         HEAP32[$230>>2] = $240;
        }
        $241 = HEAP8[$__psn>>0]|0;
        $242 = $241 & 1;
        $243 = ($242<<24>>24)==(0);
        $244 = HEAP32[$17>>2]|0;
        $245 = $241&255;
        $246 = $245 >>> 1;
        $247 = $243 ? $246 : $244;
        $248 = ($247>>>0)>(1);
        $__psn$__trailing_sign$0 = $248 ? $__psn : $__trailing_sign$0;
        $850 = $847;$__trailing_sign$1 = $__psn$__trailing_sign$0;
        break L49;
       }
       if ($214) {
        $289 = HEAP32[$209>>2]|0;
        $290 = ((($289)) + 36|0);
        $291 = HEAP32[$290>>2]|0;
        __THREW__ = 0;
        $292 = (invoke_ii($291|0,($209|0))|0);
        $293 = __THREW__; __THREW__ = 0;
        $294 = $293&1;
        if ($294) {
         label = 40;
         break L24;
        }
        $$pre320 = HEAP8[$__psn>>0]|0;
        $$pre321 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = ((($$pre321)) + 12|0);
        $$pre322 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert323 = ((($$pre321)) + 16|0);
        $$pre324 = HEAP32[$$phi$trans$insert323>>2]|0;
        $$0$i$i137 = $292;$297 = $$pre320;$304 = $$pre321;$305 = $$pre322;$307 = $$pre324;
       } else {
        $295 = HEAP32[$211>>2]|0;
        $$0$i$i137 = $295;$297 = $191;$304 = $209;$305 = $211;$307 = $213;
       }
       $296 = $297 & 1;
       $298 = ($296<<24>>24)==(0);
       $299 = HEAP32[$20>>2]|0;
       $300 = $298 ? $17 : $299;
       $301 = HEAP32[$300>>2]|0;
       $302 = ($$0$i$i137|0)==($301|0);
       $303 = ((($304)) + 12|0);
       $306 = ($305|0)==($307|0);
       if ($302) {
        if ($306) {
         $308 = HEAP32[$304>>2]|0;
         $309 = ((($308)) + 40|0);
         $310 = HEAP32[$309>>2]|0;
         __THREW__ = 0;
         (invoke_ii($310|0,($304|0))|0);
         $311 = __THREW__; __THREW__ = 0;
         $312 = $311&1;
         if ($312) {
          label = 40;
          break L24;
         }
        } else {
         $313 = ((($305)) + 4|0);
         HEAP32[$303>>2] = $313;
        }
        $314 = HEAP8[$__psn>>0]|0;
        $315 = $314 & 1;
        $316 = ($315<<24>>24)==(0);
        $317 = HEAP32[$17>>2]|0;
        $318 = $314&255;
        $319 = $318 >>> 1;
        $320 = $316 ? $319 : $317;
        $321 = ($320>>>0)>(1);
        $__psn$__trailing_sign$022 = $321 ? $__psn : $__trailing_sign$0;
        $850 = $847;$__trailing_sign$1 = $__psn$__trailing_sign$022;
        break L49;
       }
       if ($306) {
        $322 = HEAP32[$304>>2]|0;
        $323 = ((($322)) + 36|0);
        $324 = HEAP32[$323>>2]|0;
        __THREW__ = 0;
        $325 = (invoke_ii($324|0,($304|0))|0);
        $326 = __THREW__; __THREW__ = 0;
        $327 = $326&1;
        if ($327) {
         label = 40;
         break L24;
        } else {
         $$0$i$i159 = $325;
        }
       } else {
        $328 = HEAP32[$305>>2]|0;
        $$0$i$i159 = $328;
       }
       $329 = HEAP8[$__nsn>>0]|0;
       $330 = $329 & 1;
       $331 = ($330<<24>>24)==(0);
       $332 = HEAP32[$19>>2]|0;
       $333 = $331 ? $18 : $332;
       $334 = HEAP32[$333>>2]|0;
       $335 = ($$0$i$i159|0)==($334|0);
       if (!($335)) {
        label = 123;
        break L24;
       }
       $336 = HEAP32[$__b>>2]|0;
       $337 = ((($336)) + 12|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ((($336)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($338|0)==($340|0);
       if ($341) {
        $342 = HEAP32[$336>>2]|0;
        $343 = ((($342)) + 40|0);
        $344 = HEAP32[$343>>2]|0;
        __THREW__ = 0;
        (invoke_ii($344|0,($336|0))|0);
        $345 = __THREW__; __THREW__ = 0;
        $346 = $345&1;
        if ($346) {
         label = 40;
         break L24;
        }
       } else {
        $347 = ((($338)) + 4|0);
        HEAP32[$337>>2] = $347;
       }
       HEAP8[$__neg>>0] = 1;
       $348 = HEAP8[$__nsn>>0]|0;
       $349 = $348 & 1;
       $350 = ($349<<24>>24)==(0);
       $351 = HEAP32[$18>>2]|0;
       $352 = $348&255;
       $353 = $352 >>> 1;
       $354 = $350 ? $353 : $351;
       $355 = ($354>>>0)>(1);
       $__nsn$__trailing_sign$023 = $355 ? $__nsn : $__trailing_sign$0;
       $850 = $847;$__trailing_sign$1 = $__nsn$__trailing_sign$023;
      }
      break;
     }
     case 2:  {
      $358 = ($__trailing_sign$0|0)!=(0|0);
      $359 = ($__p$0>>>0)<(2);
      $or$cond = $359 | $358;
      if (!($or$cond)) {
       $360 = ($__p$0|0)==(2);
       $361 = HEAP8[$27>>0]|0;
       $362 = ($361<<24>>24)!=(0);
       $363 = $360 & $362;
       $brmerge = $22 | $363;
       if (!($brmerge)) {
        $850 = $847;$__trailing_sign$1 = 0;
        break L49;
       }
      }
      $364 = HEAP8[$__sym>>0]|0;
      $365 = $364 & 1;
      $366 = ($365<<24>>24)==(0);
      $367 = HEAP32[$23>>2]|0;
      $368 = $366 ? $24 : $367;
      $369 = $368;
      $370 = ($__p$0|0)==(0);
      L118: do {
       if ($370) {
        $$pre$i3$i$i206 = $849;$424 = $364;$429 = $367;$450 = $849;$__sym_curr_char$sroa$0$0 = $369;
       } else {
        $371 = (($__p$0) + -1)|0;
        $372 = (($__pat) + ($371)|0);
        $373 = HEAP8[$372>>0]|0;
        $switch = ($373&255)<(2);
        if ($switch) {
         $375 = $364;$380 = $367;$__sym_space_end$sroa$0$0 = $369;
         while(1) {
          $374 = $375 & 1;
          $376 = ($374<<24>>24)==(0);
          $377 = HEAP32[$24>>2]|0;
          $378 = $375&255;
          $379 = $378 >>> 1;
          $381 = $376 ? $24 : $380;
          $382 = $376 ? $379 : $377;
          $383 = (($381) + ($382<<2)|0);
          $384 = $__sym_space_end$sroa$0$0;
          $385 = ($384|0)==($383|0);
          if ($385) {
           $396 = $375;$398 = $380;$__sym_space_end$sroa$0$0460 = $__sym_space_end$sroa$0$0;
           break;
          }
          $386 = HEAP32[$384>>2]|0;
          $387 = HEAP32[$__ct>>2]|0;
          $388 = ((($387)) + 12|0);
          $389 = HEAP32[$388>>2]|0;
          __THREW__ = 0;
          $390 = (invoke_iiii($389|0,($__ct|0),8192,($386|0))|0);
          $391 = __THREW__; __THREW__ = 0;
          $392 = $391&1;
          if ($392) {
           label = 37;
           break L24;
          }
          if (!($390)) {
           $__sym_space_end$sroa$0$0$lcssa459 = $__sym_space_end$sroa$0$0;
           label = 131;
           break;
          }
          $393 = ((($384)) + 4|0);
          $394 = $393;
          $$pre311 = HEAP8[$__sym>>0]|0;
          $$pre312 = HEAP32[$23>>2]|0;
          $375 = $$pre311;$380 = $$pre312;$__sym_space_end$sroa$0$0 = $394;
         }
         if ((label|0) == 131) {
          label = 0;
          $$pre313 = HEAP8[$__sym>>0]|0;
          $$pre314 = HEAP32[$23>>2]|0;
          $396 = $$pre313;$398 = $$pre314;$__sym_space_end$sroa$0$0460 = $__sym_space_end$sroa$0$0$lcssa459;
         }
         $395 = $396 & 1;
         $397 = ($395<<24>>24)==(0);
         $399 = $397 ? $24 : $398;
         $400 = $399;
         $401 = (($__sym_space_end$sroa$0$0460) - ($400))|0;
         $402 = $401 >> 2;
         $403 = HEAP8[$__spaces>>0]|0;
         $404 = $403 & 1;
         $405 = ($404<<24>>24)==(0);
         $406 = HEAP32[$25>>2]|0;
         $407 = $403&255;
         $408 = $407 >>> 1;
         $409 = $405 ? $408 : $406;
         $410 = ($402>>>0)>($409>>>0);
         if ($410) {
          $$pre$i3$i$i206 = $849;$424 = $396;$429 = $398;$450 = $849;$__sym_curr_char$sroa$0$0 = $400;
         } else {
          $411 = HEAP32[$26>>2]|0;
          $412 = $405 ? $25 : $411;
          $413 = (($412) + ($409<<2)|0);
          $414 = (0 - ($402))|0;
          $415 = (($413) + ($414<<2)|0);
          $$sink = $399;$416 = $415;
          while(1) {
           $417 = ($416|0)==($413|0);
           if ($417) {
            $$pre$i3$i$i206 = $849;$424 = $396;$429 = $398;$450 = $849;$__sym_curr_char$sroa$0$0 = $__sym_space_end$sroa$0$0460;
            break L118;
           }
           $418 = HEAP32[$416>>2]|0;
           $419 = HEAP32[$$sink>>2]|0;
           $420 = ($418|0)==($419|0);
           if (!($420)) {
            $$pre$i3$i$i206 = $849;$424 = $396;$429 = $398;$450 = $849;$__sym_curr_char$sroa$0$0 = $400;
            break L118;
           }
           $421 = ((($416)) + 4|0);
           $422 = ((($$sink)) + 4|0);
           $$sink = $422;$416 = $421;
          }
         }
        } else {
         $$pre$i3$i$i206 = $849;$424 = $364;$429 = $367;$450 = $849;$__sym_curr_char$sroa$0$0 = $369;
        }
       }
      } while(0);
      L133: while(1) {
       $423 = $424 & 1;
       $425 = ($423<<24>>24)==(0);
       $426 = HEAP32[$24>>2]|0;
       $427 = $424&255;
       $428 = $427 >>> 1;
       $430 = $425 ? $24 : $429;
       $431 = $425 ? $428 : $426;
       $432 = (($430) + ($431<<2)|0);
       $433 = $__sym_curr_char$sroa$0$0;
       $434 = ($433|0)==($432|0);
       if ($434) {
        $$lcssa = $432;
        break;
       }
       $435 = HEAP32[$__b>>2]|0;
       $436 = ($435|0)==(0|0);
       do {
        if ($436) {
         $465 = 1;
        } else {
         $437 = ((($435)) + 12|0);
         $438 = HEAP32[$437>>2]|0;
         $439 = ((($435)) + 16|0);
         $440 = HEAP32[$439>>2]|0;
         $441 = ($438|0)==($440|0);
         if ($441) {
          $442 = HEAP32[$435>>2]|0;
          $443 = ((($442)) + 36|0);
          $444 = HEAP32[$443>>2]|0;
          __THREW__ = 0;
          $445 = (invoke_ii($444|0,($435|0))|0);
          $446 = __THREW__; __THREW__ = 0;
          $447 = $446&1;
          if ($447) {
           label = 36;
           break L24;
          } else {
           $$0$i$i$i$i198 = $445;
          }
         } else {
          $448 = HEAP32[$438>>2]|0;
          $$0$i$i$i$i198 = $448;
         }
         $449 = ($$0$i$i$i$i198|0)==(-1);
         if ($449) {
          HEAP32[$__b>>2] = 0;
          $465 = 1;
          break;
         } else {
          $$pre$i$i$i200 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i201 = ($$pre$i$i$i200|0)==(0|0);
          $465 = $phitmp$i$i$i201;
          break;
         }
        }
       } while(0);
       $451 = ($450|0)==(0|0);
       do {
        if ($451) {
         $$pre$i3$i$i206318 = $$pre$i3$i$i206;
         label = 152;
        } else {
         $452 = ((($450)) + 12|0);
         $453 = HEAP32[$452>>2]|0;
         $454 = ((($450)) + 16|0);
         $455 = HEAP32[$454>>2]|0;
         $456 = ($453|0)==($455|0);
         if ($456) {
          $457 = HEAP32[$450>>2]|0;
          $458 = ((($457)) + 36|0);
          $459 = HEAP32[$458>>2]|0;
          __THREW__ = 0;
          $460 = (invoke_ii($459|0,($450|0))|0);
          $461 = __THREW__; __THREW__ = 0;
          $462 = $461&1;
          if ($462) {
           label = 36;
           break L24;
          } else {
           $$0$i$i1$i$i204 = $460;
          }
         } else {
          $463 = HEAP32[$453>>2]|0;
          $$0$i$i1$i$i204 = $463;
         }
         $464 = ($$0$i$i1$i$i204|0)==(-1);
         if ($464) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i206318 = 0;
          label = 152;
          break;
         } else {
          $phitmp$i4$i$i207 = ($$pre$i3$i$i206|0)==(0|0);
          $tmp$i$i209 = $465 ^ $phitmp$i4$i$i207;
          if ($tmp$i$i209) {
           $$pre$i3$i$i206317 = $$pre$i3$i$i206;$852 = $$pre$i3$i$i206;
           break;
          } else {
           $$lcssa = $433;
           break L133;
          }
         }
        }
       } while(0);
       if ((label|0) == 152) {
        label = 0;
        if ($465) {
         $$lcssa = $433;
         break;
        } else {
         $$pre$i3$i$i206317 = $$pre$i3$i$i206318;$852 = 0;
        }
       }
       $466 = HEAP32[$__b>>2]|0;
       $467 = ((($466)) + 12|0);
       $468 = HEAP32[$467>>2]|0;
       $469 = ((($466)) + 16|0);
       $470 = HEAP32[$469>>2]|0;
       $471 = ($468|0)==($470|0);
       if ($471) {
        $472 = HEAP32[$466>>2]|0;
        $473 = ((($472)) + 36|0);
        $474 = HEAP32[$473>>2]|0;
        __THREW__ = 0;
        $475 = (invoke_ii($474|0,($466|0))|0);
        $476 = __THREW__; __THREW__ = 0;
        $477 = $476&1;
        if ($477) {
         label = 36;
         break L24;
        } else {
         $$0$i$i194 = $475;
        }
       } else {
        $478 = HEAP32[$468>>2]|0;
        $$0$i$i194 = $478;
       }
       $479 = HEAP32[$433>>2]|0;
       $480 = ($$0$i$i194|0)==($479|0);
       if (!($480)) {
        $$lcssa = $433;
        break;
       }
       $481 = HEAP32[$__b>>2]|0;
       $482 = ((($481)) + 12|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = ((($481)) + 16|0);
       $485 = HEAP32[$484>>2]|0;
       $486 = ($483|0)==($485|0);
       if ($486) {
        $487 = HEAP32[$481>>2]|0;
        $488 = ((($487)) + 40|0);
        $489 = HEAP32[$488>>2]|0;
        __THREW__ = 0;
        (invoke_ii($489|0,($481|0))|0);
        $490 = __THREW__; __THREW__ = 0;
        $491 = $490&1;
        if ($491) {
         label = 36;
         break L24;
        }
       } else {
        $492 = ((($483)) + 4|0);
        HEAP32[$482>>2] = $492;
       }
       $493 = ((($433)) + 4|0);
       $494 = $493;
       $$pre315 = HEAP8[$__sym>>0]|0;
       $$pre316 = HEAP32[$23>>2]|0;
       $$pre$i3$i$i206 = $$pre$i3$i$i206317;$424 = $$pre315;$429 = $$pre316;$450 = $852;$__sym_curr_char$sroa$0$0 = $494;
      }
      if ($22) {
       $495 = HEAP8[$__sym>>0]|0;
       $496 = $495 & 1;
       $497 = ($496<<24>>24)==(0);
       $498 = HEAP32[$23>>2]|0;
       $499 = HEAP32[$24>>2]|0;
       $500 = $495&255;
       $501 = $500 >>> 1;
       $502 = $497 ? $24 : $498;
       $503 = $497 ? $501 : $499;
       $504 = (($502) + ($503<<2)|0);
       $505 = ($$lcssa|0)==($504|0);
       if ($505) {
        $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
       } else {
        label = 164;
        break L24;
       }
      } else {
       $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     case 4:  {
      $86 = HEAP32[$__ts>>2]|0;
      $$pre$i3$i$i181 = $849;$523 = $849;$577 = $847;$__ng$0 = 0;
      L170: while(1) {
       $508 = HEAP32[$__b>>2]|0;
       $509 = ($508|0)==(0|0);
       do {
        if ($509) {
         $538 = 1;
        } else {
         $510 = ((($508)) + 12|0);
         $511 = HEAP32[$510>>2]|0;
         $512 = ((($508)) + 16|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($511|0)==($513|0);
         if ($514) {
          $515 = HEAP32[$508>>2]|0;
          $516 = ((($515)) + 36|0);
          $517 = HEAP32[$516>>2]|0;
          __THREW__ = 0;
          $518 = (invoke_ii($517|0,($508|0))|0);
          $519 = __THREW__; __THREW__ = 0;
          $520 = $519&1;
          if ($520) {
           label = 39;
           break L24;
          } else {
           $$0$i$i$i$i173 = $518;
          }
         } else {
          $521 = HEAP32[$511>>2]|0;
          $$0$i$i$i$i173 = $521;
         }
         $522 = ($$0$i$i$i$i173|0)==(-1);
         if ($522) {
          HEAP32[$__b>>2] = 0;
          $538 = 1;
          break;
         } else {
          $$pre$i$i$i175 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i176 = ($$pre$i$i$i175|0)==(0|0);
          $538 = $phitmp$i$i$i176;
          break;
         }
        }
       } while(0);
       $524 = ($523|0)==(0|0);
       do {
        if ($524) {
         $$pre$i3$i$i181302 = $$pre$i3$i$i181;
         label = 178;
        } else {
         $525 = ((($523)) + 12|0);
         $526 = HEAP32[$525>>2]|0;
         $527 = ((($523)) + 16|0);
         $528 = HEAP32[$527>>2]|0;
         $529 = ($526|0)==($528|0);
         if ($529) {
          $530 = HEAP32[$523>>2]|0;
          $531 = ((($530)) + 36|0);
          $532 = HEAP32[$531>>2]|0;
          __THREW__ = 0;
          $533 = (invoke_ii($532|0,($523|0))|0);
          $534 = __THREW__; __THREW__ = 0;
          $535 = $534&1;
          if ($535) {
           label = 39;
           break L24;
          } else {
           $$0$i$i1$i$i179 = $533;
          }
         } else {
          $536 = HEAP32[$526>>2]|0;
          $$0$i$i1$i$i179 = $536;
         }
         $537 = ($$0$i$i1$i$i179|0)==(-1);
         if ($537) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i181302 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i4$i$i182 = ($$pre$i3$i$i181|0)==(0|0);
          $tmp$i$i184 = $538 ^ $phitmp$i4$i$i182;
          if ($tmp$i$i184) {
           $$pre$i3$i$i181304 = $$pre$i3$i$i181;$853 = $$pre$i3$i$i181;
           break;
          } else {
           $$lcssa450 = $577;$$pre$i3$i$i149 = $$pre$i3$i$i181;$__ng$0$lcssa451 = $__ng$0;
           break L170;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        if ($538) {
         $$lcssa450 = $577;$$pre$i3$i$i149 = $$pre$i3$i$i181302;$__ng$0$lcssa451 = $__ng$0;
         break;
        } else {
         $$pre$i3$i$i181304 = $$pre$i3$i$i181302;$853 = 0;
        }
       }
       $539 = HEAP32[$__b>>2]|0;
       $540 = ((($539)) + 12|0);
       $541 = HEAP32[$540>>2]|0;
       $542 = ((($539)) + 16|0);
       $543 = HEAP32[$542>>2]|0;
       $544 = ($541|0)==($543|0);
       if ($544) {
        $545 = HEAP32[$539>>2]|0;
        $546 = ((($545)) + 36|0);
        $547 = HEAP32[$546>>2]|0;
        __THREW__ = 0;
        $548 = (invoke_ii($547|0,($539|0))|0);
        $549 = __THREW__; __THREW__ = 0;
        $550 = $549&1;
        if ($550) {
         label = 39;
         break L24;
        } else {
         $$0$i$i170 = $548;
        }
       } else {
        $551 = HEAP32[$541>>2]|0;
        $$0$i$i170 = $551;
       }
       $552 = HEAP32[$__ct>>2]|0;
       $553 = ((($552)) + 12|0);
       $554 = HEAP32[$553>>2]|0;
       __THREW__ = 0;
       $555 = (invoke_iiii($554|0,($__ct|0),2048,($$0$i$i170|0))|0);
       $556 = __THREW__; __THREW__ = 0;
       $557 = $556&1;
       if ($557) {
        label = 39;
        break L24;
       }
       if ($555) {
        $558 = HEAP32[$__wn>>2]|0;
        $559 = HEAP32[$0>>2]|0;
        $560 = ($558|0)==($559|0);
        if ($560) {
         __THREW__ = 0;
         invoke_viii(509,($__wb|0),($__wn|0),($0|0));
         $561 = __THREW__; __THREW__ = 0;
         $562 = $561&1;
         if ($562) {
          label = 39;
          break L24;
         }
         $$pre306 = HEAP32[$__wn>>2]|0;
         $564 = $$pre306;
        } else {
         $564 = $558;
        }
        $563 = ((($564)) + 4|0);
        HEAP32[$__wn>>2] = $563;
        HEAP32[$564>>2] = $$0$i$i170;
        $565 = (($__ng$0) + 1)|0;
        $854 = $577;$__ng$2$ph = $565;
       } else {
        $566 = HEAP8[$__grp>>0]|0;
        $567 = $566 & 1;
        $568 = ($567<<24>>24)==(0);
        $569 = HEAP32[$28>>2]|0;
        $570 = $566&255;
        $571 = $570 >>> 1;
        $572 = $568 ? $571 : $569;
        $573 = ($572|0)!=(0);
        $574 = ($__ng$0|0)!=(0);
        $or$cond12 = $574 & $573;
        $575 = ($$0$i$i170|0)==($86|0);
        $or$cond25 = $575 & $or$cond12;
        if (!($or$cond25)) {
         $$lcssa450 = $577;$$pre$i3$i$i149 = $$pre$i3$i$i181304;$__ng$0$lcssa451 = $__ng$0;
         break;
        }
        $576 = HEAP32[$__ge>>2]|0;
        $578 = ($577|0)==($576|0);
        if ($578) {
         __THREW__ = 0;
         invoke_viii(503,($__gb|0),($__gn|0),($__ge|0));
         $579 = __THREW__; __THREW__ = 0;
         $580 = $579&1;
         if ($580) {
          label = 39;
          break L24;
         }
         $$pre = HEAP32[$__gn>>2]|0;
         $582 = $$pre;
        } else {
         $582 = $577;
        }
        $581 = ((($582)) + 4|0);
        HEAP32[$__gn>>2] = $581;
        HEAP32[$582>>2] = $__ng$0;
        $854 = $581;$__ng$2$ph = 0;
       }
       $583 = HEAP32[$__b>>2]|0;
       $584 = ((($583)) + 12|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = ((($583)) + 16|0);
       $587 = HEAP32[$586>>2]|0;
       $588 = ($585|0)==($587|0);
       if ($588) {
        $589 = HEAP32[$583>>2]|0;
        $590 = ((($589)) + 40|0);
        $591 = HEAP32[$590>>2]|0;
        __THREW__ = 0;
        (invoke_ii($591|0,($583|0))|0);
        $592 = __THREW__; __THREW__ = 0;
        $593 = $592&1;
        if ($593) {
         label = 39;
         break L24;
        } else {
         $$pre$i3$i$i181 = $$pre$i3$i$i181304;$523 = $853;$577 = $854;$__ng$0 = $__ng$2$ph;
         continue;
        }
       } else {
        $594 = ((($585)) + 4|0);
        HEAP32[$584>>2] = $594;
        $$pre$i3$i$i181 = $$pre$i3$i$i181304;$523 = $853;$577 = $854;$__ng$0 = $__ng$2$ph;
        continue;
       }
      }
      $595 = HEAP32[$__gb>>2]|0;
      $596 = ($595|0)!=($$lcssa450|0);
      $597 = ($__ng$0$lcssa451|0)!=(0);
      $or$cond14 = $597 & $596;
      if ($or$cond14) {
       $598 = HEAP32[$__ge>>2]|0;
       $599 = ($$lcssa450|0)==($598|0);
       if ($599) {
        __THREW__ = 0;
        invoke_viii(503,($__gb|0),($__gn|0),($__ge|0));
        $600 = __THREW__; __THREW__ = 0;
        $601 = $600&1;
        if ($601) {
         label = 40;
         break L24;
        }
        $$pre308 = HEAP32[$__gn>>2]|0;
        $603 = $$pre308;
       } else {
        $603 = $$lcssa450;
       }
       $602 = ((($603)) + 4|0);
       HEAP32[$__gn>>2] = $602;
       HEAP32[$603>>2] = $__ng$0$lcssa451;
       $855 = $602;
      } else {
       $855 = $$lcssa450;
      }
      $604 = HEAP32[$__fd>>2]|0;
      $605 = ($604|0)>(0);
      L223: do {
       if ($605) {
        $606 = HEAP32[$__b>>2]|0;
        $607 = ($606|0)==(0|0);
        do {
         if ($607) {
          $856 = 1;
         } else {
          $608 = ((($606)) + 12|0);
          $609 = HEAP32[$608>>2]|0;
          $610 = ((($606)) + 16|0);
          $611 = HEAP32[$610>>2]|0;
          $612 = ($609|0)==($611|0);
          if ($612) {
           $613 = HEAP32[$606>>2]|0;
           $614 = ((($613)) + 36|0);
           $615 = HEAP32[$614>>2]|0;
           __THREW__ = 0;
           $616 = (invoke_ii($615|0,($606|0))|0);
           $617 = __THREW__; __THREW__ = 0;
           $618 = $617&1;
           if ($618) {
            label = 40;
            break L24;
           } else {
            $$0$i$i$i$i141 = $616;
           }
          } else {
           $619 = HEAP32[$609>>2]|0;
           $$0$i$i$i$i141 = $619;
          }
          $620 = ($$0$i$i$i$i141|0)==(-1);
          if ($620) {
           HEAP32[$__b>>2] = 0;
           $856 = 1;
           break;
          } else {
           $$pre$i$i$i143 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i144 = ($$pre$i$i$i143|0)==(0|0);
           $856 = $phitmp$i$i$i144;
           break;
          }
         }
        } while(0);
        $621 = ($$pre$i3$i$i149|0)==(0|0);
        do {
         if ($621) {
          label = 216;
         } else {
          $622 = ((($$pre$i3$i$i149)) + 12|0);
          $623 = HEAP32[$622>>2]|0;
          $624 = ((($$pre$i3$i$i149)) + 16|0);
          $625 = HEAP32[$624>>2]|0;
          $626 = ($623|0)==($625|0);
          if ($626) {
           $627 = HEAP32[$$pre$i3$i$i149>>2]|0;
           $628 = ((($627)) + 36|0);
           $629 = HEAP32[$628>>2]|0;
           __THREW__ = 0;
           $630 = (invoke_ii($629|0,($$pre$i3$i$i149|0))|0);
           $631 = __THREW__; __THREW__ = 0;
           $632 = $631&1;
           if ($632) {
            label = 40;
            break L24;
           } else {
            $$0$i$i1$i$i147 = $630;
           }
          } else {
           $633 = HEAP32[$623>>2]|0;
           $$0$i$i1$i$i147 = $633;
          }
          $634 = ($$0$i$i1$i$i147|0)==(-1);
          if ($634) {
           HEAP32[$__e>>2] = 0;
           label = 216;
           break;
          } else {
           if ($856) {
            $857 = $$pre$i3$i$i149;
            break;
           } else {
            label = 222;
            break L24;
           }
          }
         }
        } while(0);
        if ((label|0) == 216) {
         label = 0;
         if ($856) {
          label = 222;
          break L24;
         } else {
          $857 = 0;
         }
        }
        $635 = HEAP32[$__b>>2]|0;
        $636 = ((($635)) + 12|0);
        $637 = HEAP32[$636>>2]|0;
        $638 = ((($635)) + 16|0);
        $639 = HEAP32[$638>>2]|0;
        $640 = ($637|0)==($639|0);
        if ($640) {
         $641 = HEAP32[$635>>2]|0;
         $642 = ((($641)) + 36|0);
         $643 = HEAP32[$642>>2]|0;
         __THREW__ = 0;
         $644 = (invoke_ii($643|0,($635|0))|0);
         $645 = __THREW__; __THREW__ = 0;
         $646 = $645&1;
         if ($646) {
          label = 40;
          break L24;
         } else {
          $$0$i$i134 = $644;
         }
        } else {
         $647 = HEAP32[$637>>2]|0;
         $$0$i$i134 = $647;
        }
        $648 = HEAP32[$__dp>>2]|0;
        $649 = ($$0$i$i134|0)==($648|0);
        if (!($649)) {
         label = 222;
         break L24;
        }
        $652 = HEAP32[$__b>>2]|0;
        $653 = ((($652)) + 12|0);
        $654 = HEAP32[$653>>2]|0;
        $655 = ((($652)) + 16|0);
        $656 = HEAP32[$655>>2]|0;
        $657 = ($654|0)==($656|0);
        if ($657) {
         $658 = HEAP32[$652>>2]|0;
         $659 = ((($658)) + 40|0);
         $660 = HEAP32[$659>>2]|0;
         __THREW__ = 0;
         (invoke_ii($660|0,($652|0))|0);
         $661 = __THREW__; __THREW__ = 0;
         $662 = $661&1;
         if ($662) {
          label = 40;
          break L24;
         } else {
          $$pre$i3$i$i115 = $857;$664 = $604;$681 = $857;
         }
        } else {
         $663 = ((($654)) + 4|0);
         HEAP32[$653>>2] = $663;
         $$pre$i3$i$i115 = $857;$664 = $604;$681 = $857;
        }
        while(1) {
         $665 = ($664|0)>(0);
         if (!($665)) {
          break L223;
         }
         $666 = HEAP32[$__b>>2]|0;
         $667 = ($666|0)==(0|0);
         do {
          if ($667) {
           $696 = 1;
          } else {
           $668 = ((($666)) + 12|0);
           $669 = HEAP32[$668>>2]|0;
           $670 = ((($666)) + 16|0);
           $671 = HEAP32[$670>>2]|0;
           $672 = ($669|0)==($671|0);
           if ($672) {
            $673 = HEAP32[$666>>2]|0;
            $674 = ((($673)) + 36|0);
            $675 = HEAP32[$674>>2]|0;
            __THREW__ = 0;
            $676 = (invoke_ii($675|0,($666|0))|0);
            $677 = __THREW__; __THREW__ = 0;
            $678 = $677&1;
            if ($678) {
             label = 38;
             break L24;
            } else {
             $$0$i$i$i$i107 = $676;
            }
           } else {
            $679 = HEAP32[$669>>2]|0;
            $$0$i$i$i$i107 = $679;
           }
           $680 = ($$0$i$i$i$i107|0)==(-1);
           if ($680) {
            HEAP32[$__b>>2] = 0;
            $696 = 1;
            break;
           } else {
            $$pre$i$i$i109 = HEAP32[$__b>>2]|0;
            $phitmp$i$i$i110 = ($$pre$i$i$i109|0)==(0|0);
            $696 = $phitmp$i$i$i110;
            break;
           }
          }
         } while(0);
         $682 = ($681|0)==(0|0);
         do {
          if ($682) {
           $$pre$i3$i$i115309$ph = $$pre$i3$i$i115;
           label = 240;
          } else {
           $683 = ((($681)) + 12|0);
           $684 = HEAP32[$683>>2]|0;
           $685 = ((($681)) + 16|0);
           $686 = HEAP32[$685>>2]|0;
           $687 = ($684|0)==($686|0);
           if ($687) {
            $688 = HEAP32[$681>>2]|0;
            $689 = ((($688)) + 36|0);
            $690 = HEAP32[$689>>2]|0;
            __THREW__ = 0;
            $691 = (invoke_ii($690|0,($681|0))|0);
            $692 = __THREW__; __THREW__ = 0;
            $693 = $692&1;
            if ($693) {
             label = 38;
             break L24;
            } else {
             $$0$i$i1$i$i113 = $691;
            }
           } else {
            $694 = HEAP32[$684>>2]|0;
            $$0$i$i1$i$i113 = $694;
           }
           $695 = ($$0$i$i1$i$i113|0)==(-1);
           if ($695) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i115309$ph = 0;
            label = 240;
            break;
           } else {
            $phitmp$i4$i$i116 = ($$pre$i3$i$i115|0)==(0|0);
            $tmp$i$i118 = $696 ^ $phitmp$i4$i$i116;
            if ($tmp$i$i118) {
             $$pre$i3$i$i115309333 = $$pre$i3$i$i115;$858 = $$pre$i3$i$i115;
             break;
            } else {
             label = 247;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 240) {
          label = 0;
          if ($696) {
           label = 247;
           break L24;
          } else {
           $$pre$i3$i$i115309333 = $$pre$i3$i$i115309$ph;$858 = 0;
          }
         }
         $697 = HEAP32[$__b>>2]|0;
         $698 = ((($697)) + 12|0);
         $699 = HEAP32[$698>>2]|0;
         $700 = ((($697)) + 16|0);
         $701 = HEAP32[$700>>2]|0;
         $702 = ($699|0)==($701|0);
         if ($702) {
          $703 = HEAP32[$697>>2]|0;
          $704 = ((($703)) + 36|0);
          $705 = HEAP32[$704>>2]|0;
          __THREW__ = 0;
          $706 = (invoke_ii($705|0,($697|0))|0);
          $707 = __THREW__; __THREW__ = 0;
          $708 = $707&1;
          if ($708) {
           label = 38;
           break L24;
          } else {
           $$0$i$i101 = $706;
          }
         } else {
          $709 = HEAP32[$699>>2]|0;
          $$0$i$i101 = $709;
         }
         $710 = HEAP32[$__ct>>2]|0;
         $711 = ((($710)) + 12|0);
         $712 = HEAP32[$711>>2]|0;
         __THREW__ = 0;
         $713 = (invoke_iiii($712|0,($__ct|0),2048,($$0$i$i101|0))|0);
         $714 = __THREW__; __THREW__ = 0;
         $715 = $714&1;
         if ($715) {
          label = 38;
          break L24;
         }
         if (!($713)) {
          label = 247;
          break L24;
         }
         $718 = HEAP32[$__wn>>2]|0;
         $719 = HEAP32[$0>>2]|0;
         $720 = ($718|0)==($719|0);
         if ($720) {
          __THREW__ = 0;
          invoke_viii(509,($__wb|0),($__wn|0),($0|0));
          $721 = __THREW__; __THREW__ = 0;
          $722 = $721&1;
          if ($722) {
           label = 38;
           break L24;
          }
         }
         $723 = HEAP32[$__b>>2]|0;
         $724 = ((($723)) + 12|0);
         $725 = HEAP32[$724>>2]|0;
         $726 = ((($723)) + 16|0);
         $727 = HEAP32[$726>>2]|0;
         $728 = ($725|0)==($727|0);
         if ($728) {
          $729 = HEAP32[$723>>2]|0;
          $730 = ((($729)) + 36|0);
          $731 = HEAP32[$730>>2]|0;
          __THREW__ = 0;
          $732 = (invoke_ii($731|0,($723|0))|0);
          $733 = __THREW__; __THREW__ = 0;
          $734 = $733&1;
          if ($734) {
           label = 38;
           break L24;
          } else {
           $$0$i$i93 = $732;
          }
         } else {
          $735 = HEAP32[$725>>2]|0;
          $$0$i$i93 = $735;
         }
         $736 = HEAP32[$__wn>>2]|0;
         $737 = ((($736)) + 4|0);
         HEAP32[$__wn>>2] = $737;
         HEAP32[$736>>2] = $$0$i$i93;
         $738 = (($664) + -1)|0;
         HEAP32[$__fd>>2] = $738;
         $739 = HEAP32[$__b>>2]|0;
         $740 = ((($739)) + 12|0);
         $741 = HEAP32[$740>>2]|0;
         $742 = ((($739)) + 16|0);
         $743 = HEAP32[$742>>2]|0;
         $744 = ($741|0)==($743|0);
         if ($744) {
          $745 = HEAP32[$739>>2]|0;
          $746 = ((($745)) + 40|0);
          $747 = HEAP32[$746>>2]|0;
          __THREW__ = 0;
          (invoke_ii($747|0,($739|0))|0);
          $748 = __THREW__; __THREW__ = 0;
          $749 = $748&1;
          if ($749) {
           label = 38;
           break L24;
          } else {
           $$pre$i3$i$i115 = $$pre$i3$i$i115309333;$664 = $738;$681 = $858;
           continue;
          }
         } else {
          $750 = ((($741)) + 4|0);
          HEAP32[$740>>2] = $750;
          $$pre$i3$i$i115 = $$pre$i3$i$i115309333;$664 = $738;$681 = $858;
          continue;
         }
        }
       }
      } while(0);
      $751 = HEAP32[$__wn>>2]|0;
      $752 = HEAP32[$__wb>>2]|0;
      $753 = ($751|0)==($752|0);
      if ($753) {
       label = 257;
       break L24;
      } else {
       $850 = $855;$__trailing_sign$1 = $__trailing_sign$0;
      }
      break;
     }
     default: {
      $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
     }
     }
    } while(0);
    L297: do {
     if ((label|0) == 60) {
      while(1) {
       label = 0;
       $125 = HEAP32[$__b>>2]|0;
       $126 = ($125|0)==(0|0);
       do {
        if ($126) {
         $155 = 1;
        } else {
         $127 = ((($125)) + 12|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = ((($125)) + 16|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = ($128|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$125>>2]|0;
          $133 = ((($132)) + 36|0);
          $134 = HEAP32[$133>>2]|0;
          __THREW__ = 0;
          $135 = (invoke_ii($134|0,($125|0))|0);
          $136 = __THREW__; __THREW__ = 0;
          $137 = $136&1;
          if ($137) {
           label = 35;
           break L24;
          } else {
           $$0$i$i$i$i66 = $135;
          }
         } else {
          $138 = HEAP32[$128>>2]|0;
          $$0$i$i$i$i66 = $138;
         }
         $139 = ($$0$i$i$i$i66|0)==(-1);
         if ($139) {
          HEAP32[$__b>>2] = 0;
          $155 = 1;
          break;
         } else {
          $$pre$i$i$i68 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i69 = ($$pre$i$i$i68|0)==(0|0);
          $155 = $phitmp$i$i$i69;
          break;
         }
        }
       } while(0);
       $141 = ($140|0)==(0|0);
       do {
        if ($141) {
         $$pre$i3$i$i74327 = $$pre$i3$i$i74;
         label = 73;
        } else {
         $142 = ((($140)) + 12|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = ((($140)) + 16|0);
         $145 = HEAP32[$144>>2]|0;
         $146 = ($143|0)==($145|0);
         if ($146) {
          $147 = HEAP32[$140>>2]|0;
          $148 = ((($147)) + 36|0);
          $149 = HEAP32[$148>>2]|0;
          __THREW__ = 0;
          $150 = (invoke_ii($149|0,($140|0))|0);
          $151 = __THREW__; __THREW__ = 0;
          $152 = $151&1;
          if ($152) {
           label = 35;
           break L24;
          } else {
           $$0$i$i1$i$i72 = $150;
          }
         } else {
          $153 = HEAP32[$143>>2]|0;
          $$0$i$i1$i$i72 = $153;
         }
         $154 = ($$0$i$i1$i$i72|0)==(-1);
         if ($154) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i74327 = 0;
          label = 73;
          break;
         } else {
          $phitmp$i4$i$i75 = ($$pre$i3$i$i74|0)==(0|0);
          $tmp$i$i77 = $155 ^ $phitmp$i4$i$i75;
          if ($tmp$i$i77) {
           $$pre$i3$i$i74329 = $$pre$i3$i$i74;$851 = $$pre$i3$i$i74;
           break;
          } else {
           $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
           break L297;
          }
         }
        }
       } while(0);
       if ((label|0) == 73) {
        label = 0;
        if ($155) {
         $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
         break L297;
        } else {
         $$pre$i3$i$i74329 = $$pre$i3$i$i74327;$851 = 0;
        }
       }
       $156 = HEAP32[$__b>>2]|0;
       $157 = ((($156)) + 12|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ((($156)) + 16|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($158|0)==($160|0);
       if ($161) {
        $162 = HEAP32[$156>>2]|0;
        $163 = ((($162)) + 36|0);
        $164 = HEAP32[$163>>2]|0;
        __THREW__ = 0;
        $165 = (invoke_ii($164|0,($156|0))|0);
        $166 = __THREW__; __THREW__ = 0;
        $167 = $166&1;
        if ($167) {
         label = 35;
         break L24;
        } else {
         $$0$i$i81 = $165;
        }
       } else {
        $168 = HEAP32[$158>>2]|0;
        $$0$i$i81 = $168;
       }
       $169 = HEAP32[$__ct>>2]|0;
       $170 = ((($169)) + 12|0);
       $171 = HEAP32[$170>>2]|0;
       __THREW__ = 0;
       $172 = (invoke_iiii($171|0,($__ct|0),8192,($$0$i$i81|0))|0);
       $173 = __THREW__; __THREW__ = 0;
       $174 = $173&1;
       if ($174) {
        label = 35;
        break L24;
       }
       if (!($172)) {
        $850 = $847;$__trailing_sign$1 = $__trailing_sign$0;
        break L297;
       }
       $175 = HEAP32[$__b>>2]|0;
       $176 = ((($175)) + 12|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ((($175)) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($177|0)==($179|0);
       if ($180) {
        $181 = HEAP32[$175>>2]|0;
        $182 = ((($181)) + 40|0);
        $183 = HEAP32[$182>>2]|0;
        __THREW__ = 0;
        $184 = (invoke_ii($183|0,($175|0))|0);
        $185 = __THREW__; __THREW__ = 0;
        $186 = $185&1;
        if ($186) {
         label = 35;
         break L24;
        } else {
         $$0$i$i88 = $184;
        }
       } else {
        $187 = ((($177)) + 4|0);
        HEAP32[$176>>2] = $187;
        $188 = HEAP32[$177>>2]|0;
        $$0$i$i88 = $188;
       }
       __THREW__ = 0;
       invoke_vii(508,($__spaces|0),($$0$i$i88|0));
       $189 = __THREW__; __THREW__ = 0;
       $190 = $189&1;
       if ($190) {
        label = 35;
        break L24;
       } else {
        $$pre$i3$i$i74 = $$pre$i3$i$i74329;$140 = $851;
        label = 60;
       }
      }
     }
    } while(0);
    $756 = (($__p$0) + 1)|0;
    $847 = $850;$__p$0 = $756;$__trailing_sign$0 = $__trailing_sign$1;
   }
   L333:    switch (label|0) {
    case 35: {
     $62 = ___cxa_find_matching_catch_2()|0;
     $63 = tempRet0;
     $lpad$phi$index = $62;$lpad$phi$index8 = $63;
     break L21;
     break;
    }
    case 36: {
     $64 = ___cxa_find_matching_catch_2()|0;
     $65 = tempRet0;
     $lpad$phi$index = $64;$lpad$phi$index8 = $65;
     break L21;
     break;
    }
    case 37: {
     $66 = ___cxa_find_matching_catch_2()|0;
     $67 = tempRet0;
     $lpad$phi$index = $66;$lpad$phi$index8 = $67;
     break L21;
     break;
    }
    case 38: {
     $68 = ___cxa_find_matching_catch_2()|0;
     $69 = tempRet0;
     $lpad$phi$index = $68;$lpad$phi$index8 = $69;
     break L21;
     break;
    }
    case 39: {
     $70 = ___cxa_find_matching_catch_2()|0;
     $71 = tempRet0;
     $lpad$phi$index = $70;$lpad$phi$index8 = $71;
     break L21;
     break;
    }
    case 40: {
     $72 = ___cxa_find_matching_catch_2()|0;
     $73 = tempRet0;
     $lpad$phi$index = $72;$lpad$phi$index8 = $73;
     break L21;
     break;
    }
    case 58: {
     $122 = HEAP32[$__err>>2]|0;
     $123 = $122 | 4;
     HEAP32[$__err>>2] = $123;
     $$10 = 0;
     break;
    }
    case 123: {
     $356 = HEAP32[$__err>>2]|0;
     $357 = $356 | 4;
     HEAP32[$__err>>2] = $357;
     $$10 = 0;
     break;
    }
    case 164: {
     $506 = HEAP32[$__err>>2]|0;
     $507 = $506 | 4;
     HEAP32[$__err>>2] = $507;
     $$10 = 0;
     break;
    }
    case 222: {
     $650 = HEAP32[$__err>>2]|0;
     $651 = $650 | 4;
     HEAP32[$__err>>2] = $651;
     $$10 = 0;
     break;
    }
    case 247: {
     $716 = HEAP32[$__err>>2]|0;
     $717 = $716 | 4;
     HEAP32[$__err>>2] = $717;
     $$10 = 0;
     break;
    }
    case 257: {
     $754 = HEAP32[$__err>>2]|0;
     $755 = $754 | 4;
     HEAP32[$__err>>2] = $755;
     $$10 = 0;
     break;
    }
    case 259: {
     $757 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L335: do {
      if (!($757)) {
       $758 = ((($__trailing_sign$0$lcssa)) + 4|0);
       $759 = ((($__trailing_sign$0$lcssa)) + 8|0);
       $__i$0 = 1;
       L337: while(1) {
        $760 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $761 = $760 & 1;
        $762 = ($761<<24>>24)==(0);
        if ($762) {
         $764 = $760&255;
         $765 = $764 >>> 1;
         $767 = $765;
        } else {
         $763 = HEAP32[$758>>2]|0;
         $767 = $763;
        }
        $766 = ($__i$0>>>0)<($767>>>0);
        if (!($766)) {
         break L335;
        }
        $768 = HEAP32[$__b>>2]|0;
        $769 = ($768|0)==(0|0);
        do {
         if ($769) {
          $859 = 1;
         } else {
          $770 = ((($768)) + 12|0);
          $771 = HEAP32[$770>>2]|0;
          $772 = ((($768)) + 16|0);
          $773 = HEAP32[$772>>2]|0;
          $774 = ($771|0)==($773|0);
          if ($774) {
           $775 = HEAP32[$768>>2]|0;
           $776 = ((($775)) + 36|0);
           $777 = HEAP32[$776>>2]|0;
           __THREW__ = 0;
           $778 = (invoke_ii($777|0,($768|0))|0);
           $779 = __THREW__; __THREW__ = 0;
           $780 = $779&1;
           if ($780) {
            label = 34;
            break L337;
           } else {
            $$0$i$i$i$i = $778;
           }
          } else {
           $781 = HEAP32[$771>>2]|0;
           $$0$i$i$i$i = $781;
          }
          $782 = ($$0$i$i$i$i|0)==(-1);
          if ($782) {
           HEAP32[$__b>>2] = 0;
           $859 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $859 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $783 = HEAP32[$__e>>2]|0;
        $784 = ($783|0)==(0|0);
        do {
         if ($784) {
          label = 278;
         } else {
          $785 = ((($783)) + 12|0);
          $786 = HEAP32[$785>>2]|0;
          $787 = ((($783)) + 16|0);
          $788 = HEAP32[$787>>2]|0;
          $789 = ($786|0)==($788|0);
          if ($789) {
           $790 = HEAP32[$783>>2]|0;
           $791 = ((($790)) + 36|0);
           $792 = HEAP32[$791>>2]|0;
           __THREW__ = 0;
           $793 = (invoke_ii($792|0,($783|0))|0);
           $794 = __THREW__; __THREW__ = 0;
           $795 = $794&1;
           if ($795) {
            label = 34;
            break L337;
           } else {
            $$0$i$i1$i$i = $793;
           }
          } else {
           $796 = HEAP32[$786>>2]|0;
           $$0$i$i1$i$i = $796;
          }
          $797 = ($$0$i$i1$i$i|0)==(-1);
          if ($797) {
           HEAP32[$__e>>2] = 0;
           label = 278;
           break;
          } else {
           if ($859) {
            break;
           } else {
            label = 286;
            break L337;
           }
          }
         }
        } while(0);
        if ((label|0) == 278) {
         label = 0;
         if ($859) {
          label = 286;
          break;
         }
        }
        $798 = HEAP32[$__b>>2]|0;
        $799 = ((($798)) + 12|0);
        $800 = HEAP32[$799>>2]|0;
        $801 = ((($798)) + 16|0);
        $802 = HEAP32[$801>>2]|0;
        $803 = ($800|0)==($802|0);
        if ($803) {
         $804 = HEAP32[$798>>2]|0;
         $805 = ((($804)) + 36|0);
         $806 = HEAP32[$805>>2]|0;
         __THREW__ = 0;
         $807 = (invoke_ii($806|0,($798|0))|0);
         $808 = __THREW__; __THREW__ = 0;
         $809 = $808&1;
         if ($809) {
          label = 34;
          break;
         } else {
          $$0$i$i = $807;
         }
        } else {
         $810 = HEAP32[$800>>2]|0;
         $$0$i$i = $810;
        }
        $811 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $812 = $811 & 1;
        $813 = ($812<<24>>24)==(0);
        if ($813) {
         $816 = $758;
        } else {
         $814 = HEAP32[$759>>2]|0;
         $816 = $814;
        }
        $815 = (($816) + ($__i$0<<2)|0);
        $817 = HEAP32[$815>>2]|0;
        $818 = ($$0$i$i|0)==($817|0);
        if (!($818)) {
         label = 286;
         break;
        }
        $821 = (($__i$0) + 1)|0;
        $822 = HEAP32[$__b>>2]|0;
        $823 = ((($822)) + 12|0);
        $824 = HEAP32[$823>>2]|0;
        $825 = ((($822)) + 16|0);
        $826 = HEAP32[$825>>2]|0;
        $827 = ($824|0)==($826|0);
        if ($827) {
         $828 = HEAP32[$822>>2]|0;
         $829 = ((($828)) + 40|0);
         $830 = HEAP32[$829>>2]|0;
         __THREW__ = 0;
         (invoke_ii($830|0,($822|0))|0);
         $831 = __THREW__; __THREW__ = 0;
         $832 = $831&1;
         if ($832) {
          label = 34;
          break;
         } else {
          $__i$0 = $821;
          continue;
         }
        } else {
         $833 = ((($824)) + 4|0);
         HEAP32[$823>>2] = $833;
         $__i$0 = $821;
         continue;
        }
       }
       if ((label|0) == 34) {
        $60 = ___cxa_find_matching_catch_2()|0;
        $61 = tempRet0;
        $lpad$phi$index = $60;$lpad$phi$index8 = $61;
        break L21;
       }
       else if ((label|0) == 286) {
        $819 = HEAP32[$__err>>2]|0;
        $820 = $819 | 4;
        HEAP32[$__err>>2] = $820;
        $$10 = 0;
        break L333;
       }
      }
     } while(0);
     $834 = HEAP32[$__gb>>2]|0;
     $835 = ($834|0)==($$lcssa461|0);
     if ($835) {
      $$10 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$834,$$lcssa461,$__et);
      $836 = HEAP32[$__et>>2]|0;
      $837 = ($836|0)==(0);
      if ($837) {
       $$10 = 1;
       break;
      } else {
       $838 = HEAP32[$__err>>2]|0;
       $839 = $838 | 4;
       HEAP32[$__err>>2] = $839;
       $$10 = 0;
       break;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $840 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $841 = ($840|0)==(0|0);
   if (!($841)) {
    $842 = HEAP32[$2>>2]|0;
    __THREW__ = 0;
    invoke_vi($842|0,($840|0));
    $843 = __THREW__; __THREW__ = 0;
    $844 = $843&1;
    if ($844) {
     $845 = ___cxa_find_matching_catch_3(0|0)|0;
     $846 = tempRet0;
     ___clang_call_terminate($845);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$10|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $76 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $77 = ($76|0)==(0|0);
 if (!($77)) {
  $78 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($78|0,($76|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if ($80) {
   $81 = ___cxa_find_matching_catch_3(0|0)|0;
   $82 = tempRet0;
   ___clang_call_terminate($81);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i11 = 0, $__i$0$i$i$i16 = 0, $__i$0$i$i$i21 = 0, $__i$0$i$i$i26 = 0, $__i$0$i$i$i31 = 0, $__i$0$i$i$i4 = 0, $__i$0$i$i$i7 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i12 = 0, $exitcond$i$i$i17 = 0, $exitcond$i$i$i22 = 0, $exitcond$i$i$i27 = 0, $exitcond$i$i$i32 = 0;
 var $exitcond$i$i$i5 = 0, $exitcond$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,20556)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = ((($__nsn)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
  }
  $23 = ((($__nsn)) + 4|0);
  HEAP32[$23>>2] = 0;
  __THREW__ = 0;
  invoke_vii(510,($__nsn|0),0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if ($25) {
   $26 = ___cxa_find_matching_catch_3(0|0)|0;
   $27 = tempRet0;
   ___clang_call_terminate($26);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$1>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $28 = (($1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$28>>2] = 0;
   $29 = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $29;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $30 = HEAP32[$10>>2]|0;
  $31 = ((($30)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 1023]($2,$10);
  $33 = HEAP8[$__psn>>0]|0;
  $34 = $33 & 1;
  $35 = ($34<<24>>24)==(0);
  if ($35) {
   HEAP8[$__psn>>0] = 0;
  } else {
   $36 = ((($__psn)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$37>>2] = 0;
  }
  $38 = ((($__psn)) + 4|0);
  HEAP32[$38>>2] = 0;
  __THREW__ = 0;
  invoke_vii(510,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch_3(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$2>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  $__i$0$i$i$i4 = 0;
  while(1) {
   $exitcond$i$i$i5 = ($__i$0$i$i$i4|0)==(3);
   if ($exitcond$i$i$i5) {
    break;
   }
   $43 = (($2) + ($__i$0$i$i$i4<<2)|0);
   HEAP32[$43>>2] = 0;
   $44 = (($__i$0$i$i$i4) + 1)|0;
   $__i$0$i$i$i4 = $44;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
  $45 = HEAP32[$10>>2]|0;
  $46 = ((($45)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (FUNCTION_TABLE_ii[$47 & 1023]($10)|0);
  HEAP32[$__dp>>2] = $48;
  $49 = HEAP32[$10>>2]|0;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (FUNCTION_TABLE_ii[$51 & 1023]($10)|0);
  HEAP32[$__ts>>2] = $52;
  $53 = HEAP32[$10>>2]|0;
  $54 = ((($53)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vii[$55 & 1023]($3,$10);
  $56 = HEAP8[$__grp>>0]|0;
  $57 = $56 & 1;
  $58 = ($57<<24>>24)==(0);
  if ($58) {
   $62 = ((($__grp)) + 1|0);
   HEAP8[$62>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $59 = ((($__grp)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP8[$60>>0] = 0;
   $61 = ((($__grp)) + 4|0);
   HEAP32[$61>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__grp|0),0);
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if ($64) {
   $65 = ___cxa_find_matching_catch_3(0|0)|0;
   $66 = tempRet0;
   ___clang_call_terminate($65);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$3>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  $__i$0$i$i$i7 = 0;
  while(1) {
   $exitcond$i$i$i8 = ($__i$0$i$i$i7|0)==(3);
   if ($exitcond$i$i$i8) {
    break;
   }
   $67 = (($3) + ($__i$0$i$i$i7<<2)|0);
   HEAP32[$67>>2] = 0;
   $68 = (($__i$0$i$i$i7) + 1)|0;
   $__i$0$i$i$i7 = $68;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $69 = HEAP32[$10>>2]|0;
  $70 = ((($69)) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  FUNCTION_TABLE_vii[$71 & 1023]($4,$10);
  $72 = HEAP8[$__sym>>0]|0;
  $73 = $72 & 1;
  $74 = ($73<<24>>24)==(0);
  if ($74) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $75 = ((($__sym)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   HEAP32[$76>>2] = 0;
  }
  $77 = ((($__sym)) + 4|0);
  HEAP32[$77>>2] = 0;
  __THREW__ = 0;
  invoke_vii(510,($__sym|0),0);
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  if ($79) {
   $80 = ___cxa_find_matching_catch_3(0|0)|0;
   $81 = tempRet0;
   ___clang_call_terminate($80);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$4>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i11 = 0;
  while(1) {
   $exitcond$i$i$i12 = ($__i$0$i$i$i11|0)==(3);
   if ($exitcond$i$i$i12) {
    break;
   }
   $82 = (($4) + ($__i$0$i$i$i11<<2)|0);
   HEAP32[$82>>2] = 0;
   $83 = (($__i$0$i$i$i11) + 1)|0;
   $__i$0$i$i$i11 = $83;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
  $84 = HEAP32[$10>>2]|0;
  $85 = ((($84)) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($10)|0);
  $storemerge = $87;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,20548)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ((($89)) + 44|0);
  $91 = HEAP32[$90>>2]|0;
  FUNCTION_TABLE_vii[$91 & 1023]($5,$88);
  $92 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
  $93 = HEAP32[$88>>2]|0;
  $94 = ((($93)) + 32|0);
  $95 = HEAP32[$94>>2]|0;
  FUNCTION_TABLE_vii[$95 & 1023]($6,$88);
  $96 = HEAP8[$__nsn>>0]|0;
  $97 = $96 & 1;
  $98 = ($97<<24>>24)==(0);
  if ($98) {
   HEAP8[$__nsn>>0] = 0;
  } else {
   $99 = ((($__nsn)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   HEAP32[$100>>2] = 0;
  }
  $101 = ((($__nsn)) + 4|0);
  HEAP32[$101>>2] = 0;
  __THREW__ = 0;
  invoke_vii(510,($__nsn|0),0);
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if ($103) {
   $104 = ___cxa_find_matching_catch_3(0|0)|0;
   $105 = tempRet0;
   ___clang_call_terminate($104);
   // unreachable;
  }
  ;HEAP32[$__nsn>>2]=HEAP32[$6>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  $__i$0$i$i$i16 = 0;
  while(1) {
   $exitcond$i$i$i17 = ($__i$0$i$i$i16|0)==(3);
   if ($exitcond$i$i$i17) {
    break;
   }
   $106 = (($6) + ($__i$0$i$i$i16<<2)|0);
   HEAP32[$106>>2] = 0;
   $107 = (($__i$0$i$i$i16) + 1)|0;
   $__i$0$i$i$i16 = $107;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
  $108 = HEAP32[$88>>2]|0;
  $109 = ((($108)) + 28|0);
  $110 = HEAP32[$109>>2]|0;
  FUNCTION_TABLE_vii[$110 & 1023]($7,$88);
  $111 = HEAP8[$__psn>>0]|0;
  $112 = $111 & 1;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   HEAP8[$__psn>>0] = 0;
  } else {
   $114 = ((($__psn)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   HEAP32[$115>>2] = 0;
  }
  $116 = ((($__psn)) + 4|0);
  HEAP32[$116>>2] = 0;
  __THREW__ = 0;
  invoke_vii(510,($__psn|0),0);
  $117 = __THREW__; __THREW__ = 0;
  $118 = $117&1;
  if ($118) {
   $119 = ___cxa_find_matching_catch_3(0|0)|0;
   $120 = tempRet0;
   ___clang_call_terminate($119);
   // unreachable;
  }
  ;HEAP32[$__psn>>2]=HEAP32[$7>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  $__i$0$i$i$i21 = 0;
  while(1) {
   $exitcond$i$i$i22 = ($__i$0$i$i$i21|0)==(3);
   if ($exitcond$i$i$i22) {
    break;
   }
   $121 = (($7) + ($__i$0$i$i$i21<<2)|0);
   HEAP32[$121>>2] = 0;
   $122 = (($__i$0$i$i$i21) + 1)|0;
   $__i$0$i$i$i21 = $122;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  $123 = HEAP32[$88>>2]|0;
  $124 = ((($123)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (FUNCTION_TABLE_ii[$125 & 1023]($88)|0);
  HEAP32[$__dp>>2] = $126;
  $127 = HEAP32[$88>>2]|0;
  $128 = ((($127)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 1023]($88)|0);
  HEAP32[$__ts>>2] = $130;
  $131 = HEAP32[$88>>2]|0;
  $132 = ((($131)) + 20|0);
  $133 = HEAP32[$132>>2]|0;
  FUNCTION_TABLE_vii[$133 & 1023]($8,$88);
  $134 = HEAP8[$__grp>>0]|0;
  $135 = $134 & 1;
  $136 = ($135<<24>>24)==(0);
  if ($136) {
   $140 = ((($__grp)) + 1|0);
   HEAP8[$140>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $137 = ((($__grp)) + 8|0);
   $138 = HEAP32[$137>>2]|0;
   HEAP8[$138>>0] = 0;
   $139 = ((($__grp)) + 4|0);
   HEAP32[$139>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__grp|0),0);
  $141 = __THREW__; __THREW__ = 0;
  $142 = $141&1;
  if ($142) {
   $143 = ___cxa_find_matching_catch_3(0|0)|0;
   $144 = tempRet0;
   ___clang_call_terminate($143);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$8>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  $__i$0$i$i$i26 = 0;
  while(1) {
   $exitcond$i$i$i27 = ($__i$0$i$i$i26|0)==(3);
   if ($exitcond$i$i$i27) {
    break;
   }
   $145 = (($8) + ($__i$0$i$i$i26<<2)|0);
   HEAP32[$145>>2] = 0;
   $146 = (($__i$0$i$i$i26) + 1)|0;
   $__i$0$i$i$i26 = $146;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  $147 = HEAP32[$88>>2]|0;
  $148 = ((($147)) + 24|0);
  $149 = HEAP32[$148>>2]|0;
  FUNCTION_TABLE_vii[$149 & 1023]($9,$88);
  $150 = HEAP8[$__sym>>0]|0;
  $151 = $150 & 1;
  $152 = ($151<<24>>24)==(0);
  if ($152) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $153 = ((($__sym)) + 8|0);
   $154 = HEAP32[$153>>2]|0;
   HEAP32[$154>>2] = 0;
  }
  $155 = ((($__sym)) + 4|0);
  HEAP32[$155>>2] = 0;
  __THREW__ = 0;
  invoke_vii(510,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch_3(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$9>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  $__i$0$i$i$i31 = 0;
  while(1) {
   $exitcond$i$i$i32 = ($__i$0$i$i$i31|0)==(3);
   if ($exitcond$i$i$i32) {
    break;
   }
   $160 = (($9) + ($__i$0$i$i$i31<<2)|0);
   HEAP32[$160>>2] = 0;
   $161 = (($__i$0$i$i$i31) + 1)|0;
   $__i$0$i$i$i31 = $161;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  $162 = HEAP32[$88>>2]|0;
  $163 = ((($162)) + 36|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (FUNCTION_TABLE_ii[$164 & 1023]($88)|0);
  $storemerge = $165;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($__b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(497|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<(2147483647);
 $7 = $5 << 1;
 $$ = $6 ? $7 : -1;
 $8 = HEAP32[$__n>>2]|0;
 $9 = (($8) - ($4))|0;
 $10 = $9 >> 2;
 $phitmp = $4;
 $11 = $2 ? $phitmp : 0;
 $12 = (_realloc($11,$$)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   $14 = $12;
   HEAP32[$__b>>2] = $14;
   $24 = $12;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   $15 = $12;
   HEAP32[$__b>>2] = $15;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $24 = $12;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $24 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = (504);
 $22 = $$ >>> 2;
 $23 = (($24) + ($10<<2)|0);
 HEAP32[$__n>>2] = $23;
 $25 = HEAP32[$__b>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$__e>>2] = $26;
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$011 = 0, $$0110 = 0, $$012 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 428|0;
 $0 = sp;
 $1 = $__wbuf;
 HEAP32[$__wb>>2] = $1;
 $2 = ((($__wb)) + 4|0);
 HEAP32[$2>>2] = (497);
 $3 = ((($__wbuf)) + 400|0);
 __THREW__ = 0;
 $4 = (invoke_ii(345,($__iob|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$011 = $33;$$019 = $34;$94 = $__wbuf;
  label = 39;
 } else {
  HEAP32[$__loc>>2] = $4;
  __THREW__ = 0;
  $7 = (invoke_iii(346,($__loc|0),(18852|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  L4: do {
   if (!($9)) {
    HEAP8[$__neg>>0] = 0;
    $10 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $10;
    $11 = ((($__iob)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $10;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    $14 = (invoke_iiiiiiiiiiii(506,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($12|0),($__err|0),($__neg|0),($7|0),($__wb|0),($__wn|0),($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     if ($14) {
      $17 = HEAP8[$__v>>0]|0;
      $18 = $17 & 1;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       HEAP8[$__v>>0] = 0;
      } else {
       $20 = ((($__v)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP32[$21>>2] = 0;
      }
      $22 = ((($__v)) + 4|0);
      HEAP32[$22>>2] = 0;
      $23 = HEAP8[$__neg>>0]|0;
      $24 = ($23<<24>>24)==(0);
      if (!($24)) {
       $25 = HEAP32[$7>>2]|0;
       $26 = ((($25)) + 44|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_iii($27|0,($7|0),45)|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(508,($__v|0),($28|0));
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if ($32) {
        break;
       }
      }
      $35 = HEAP32[$7>>2]|0;
      $36 = ((($35)) + 44|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_iii($37|0,($7|0),48)|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break;
      }
      $41 = HEAP32[$__wb>>2]|0;
      $42 = HEAP32[$__wn>>2]|0;
      $43 = ((($42)) + -4|0);
      $__w$0 = $41;
      while(1) {
       $44 = ($__w$0>>>0)<($43>>>0);
       if (!($44)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $45 = HEAP32[$__w$0>>2]|0;
       $46 = ($45|0)==($38|0);
       if (!($46)) {
        $__w$0$lcssa = $__w$0;
        break;
       }
       $47 = ((($__w$0)) + 4|0);
       $__w$0 = $47;
      }
      __THREW__ = 0;
      (invoke_iiii(511,($__v|0),($__w$0$lcssa|0),($42|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       break;
      }
     }
     $50 = HEAP32[$__b>>2]|0;
     $51 = ($50|0)==(0|0);
     do {
      if ($51) {
       $99 = 1;
      } else {
       $52 = ((($50)) + 12|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ((($50)) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ($53|0)==($55|0);
       if ($56) {
        $57 = HEAP32[$50>>2]|0;
        $58 = ((($57)) + 36|0);
        $59 = HEAP32[$58>>2]|0;
        __THREW__ = 0;
        $60 = (invoke_ii($59|0,($50|0))|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         break L4;
        } else {
         $$0$i$i$i$i = $60;
        }
       } else {
        $63 = HEAP32[$53>>2]|0;
        $$0$i$i$i$i = $63;
       }
       $64 = ($$0$i$i$i$i|0)==(-1);
       if ($64) {
        HEAP32[$__b>>2] = 0;
        $99 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $99 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $65 = ($10|0)==(0);
     do {
      if ($65) {
       label = 31;
      } else {
       $66 = ((($13)) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ((($13)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if ($70) {
        $71 = $10;
        $72 = HEAP32[$71>>2]|0;
        $73 = ((($72)) + 36|0);
        $74 = HEAP32[$73>>2]|0;
        __THREW__ = 0;
        $75 = (invoke_ii($74|0,($13|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         break L4;
        } else {
         $$0$i$i1$i$i = $75;
        }
       } else {
        $78 = HEAP32[$67>>2]|0;
        $$0$i$i1$i$i = $78;
       }
       $79 = ($$0$i$i1$i$i|0)==(-1);
       if ($79) {
        HEAP32[$__e>>2] = 0;
        label = 31;
        break;
       } else {
        if ($99) {
         break;
        } else {
         label = 33;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 31) {
      if ($99) {
       label = 33;
      }
     }
     if ((label|0) == 33) {
      $80 = HEAP32[$__err>>2]|0;
      $81 = $80 | 2;
      HEAP32[$__err>>2] = $81;
     }
     $82 = HEAP32[$__b>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
     $83 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $84 = ($83|0)==(0|0);
     if (!($84)) {
      $85 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      invoke_vi($85|0,($83|0));
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       $88 = ___cxa_find_matching_catch_3(0|0)|0;
       $89 = tempRet0;
       ___clang_call_terminate($88);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($82|0);
    }
   }
  } while(0);
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = tempRet0;
  (__ZNSt3__114__shared_count16__release_sharedEv($4)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $92 = ($$pre|0)==(0|0);
  if ($92) {
   $$0110 = $91;$$012 = $90;
  } else {
   $$011 = $90;$$019 = $91;$94 = $$pre;
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $93 = HEAP32[$2>>2]|0;
  __THREW__ = 0;
  invoke_vi($93|0,($94|0));
  $95 = __THREW__; __THREW__ = 0;
  $96 = $95&1;
  if ($96) {
   $97 = ___cxa_find_matching_catch_3(0|0)|0;
   $98 = tempRet0;
   ___clang_call_terminate($97);
   // unreachable;
  } else {
   $$0110 = $$019;$$012 = $$011;
  }
 }
 ___resumeException($$012|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $phitmp$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = $5;$17 = 1;$44 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $7;$17 = $phitmp$i;$44 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 do {
  if (!($14)) {
   $15 = (($17) - ($16))|0;
   $18 = ($15>>>0)<($13>>>0);
   if ($18) {
    $19 = (($16) + ($13))|0;
    $20 = (($19) - ($17))|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$17,$20,$16,$16,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $22 = $$pre;
   } else {
    $22 = $44;
   }
   $21 = $22 & 1;
   $23 = ($21<<24>>24)==(0);
   if ($23) {
    $26 = ((($this)) + 4|0);
    $28 = $26;
   } else {
    $24 = ((($this)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $28 = $25;
   }
   $27 = (($28) + ($16<<2)|0);
   $29 = $__last;
   $30 = (($29) - ($0))|0;
   $31 = $30 >>> 2;
   $32 = (($16) + ($31))|0;
   $$0 = $__first;$__p$0 = $27;
   while(1) {
    $33 = ($$0|0)==($__last|0);
    if ($33) {
     break;
    }
    $34 = HEAP32[$$0>>2]|0;
    HEAP32[$__p$0>>2] = $34;
    $35 = ((($__p$0)) + 4|0);
    $36 = ((($$0)) + 4|0);
    $$0 = $36;$__p$0 = $35;
   }
   $scevgep = (($28) + ($32<<2)|0);
   HEAP32[$scevgep>>2] = 0;
   $37 = (($16) + ($13))|0;
   $38 = HEAP8[$this>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $37 << 1;
    $43 = $42&255;
    HEAP8[$this>>0] = $43;
    break;
   } else {
    $41 = ((($this)) + 4|0);
    HEAP32[$41>>2] = $37;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre23 = 0, $$pre23$pre = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hd$sroa$0$1 = 0, $__hd$sroa$0$2 = 0, $__hn$sroa$0$0 = 0, $__hn$sroa$0$1 = 0, $__hn$sroa$0$2 = 0, $__hw$sroa$0$0 = 0, $__hw$sroa$0$1 = 0, $__i$0$i$i = 0, $__i$0$i$i6 = 0, $__i$0$i$i9 = 0;
 var $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i10 = 0, $exitcond$i$i7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 288|0;
 $__bb = sp + 72|0;
 $__digits = sp + 188|0;
 $__loc = sp + 68|0;
 $__pat = sp + 184|0;
 $__dp = sp + 181|0;
 $__ts = sp + 180|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,16067,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(470)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(475,($__bb|0),($3|0),(16067|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
     label = 8;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(458);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if ($13) {
       $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $130 = $$pre;
     } else {
      $11 = $9;
      $130 = $11;
     }
     $16 = (_malloc($6)|0);
     $17 = $16;
     $18 = ($16|0)==(0|0);
     if ($18) {
      __THREW__ = 0;
      invoke_v(458);
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       $__hd$sroa$0$0 = $17;$__hn$sroa$0$0 = $130;
       label = 8;
      } else {
       $__db$0 = 0;$__hd$sroa$0$1 = $17;$__hn$sroa$0$1 = $130;$__n$0 = $6;
       label = 11;
      }
     } else {
      $__db$0 = $16;$__hd$sroa$0$1 = $17;$__hn$sroa$0$1 = $130;$__n$0 = $6;
      label = 11;
     }
    }
   }
  } else {
   $__db$0 = $__digits;$__hd$sroa$0$1 = 0;$__hn$sroa$0$1 = 0;$__n$0 = $1;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  $21 = (invoke_ii(345,($__iob|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $__hd$sroa$0$0 = $__hd$sroa$0$1;$__hn$sroa$0$0 = $__hn$sroa$0$1;
   label = 8;
  } else {
   HEAP32[$__loc>>2] = $21;
   __THREW__ = 0;
   $24 = (invoke_iii(346,($__loc|0),(18820|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 32;
   } else {
    $27 = HEAP32[$__bb>>2]|0;
    $28 = (($27) + ($__n$0)|0);
    $29 = HEAP32[$24>>2]|0;
    $30 = ((($29)) + 32|0);
    $31 = HEAP32[$30>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($31|0,($24|0),($27|0),($28|0),($__db$0|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 32;
    } else {
     $34 = ($__n$0|0)==(0);
     if ($34) {
      $44 = 0;
     } else {
      $35 = HEAP32[$__bb>>2]|0;
      $36 = HEAP8[$35>>0]|0;
      $37 = ($36<<24>>24)==(45);
      $44 = $37;
     }
     $__i$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($__i$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $38 = (($__grp) + ($__i$0$i$i<<2)|0);
      HEAP32[$38>>2] = 0;
      $39 = (($__i$0$i$i) + 1)|0;
      $__i$0$i$i = $39;
     }
     $__i$0$i$i6 = 0;
     while(1) {
      $exitcond$i$i7 = ($__i$0$i$i6|0)==(3);
      if ($exitcond$i$i7) {
       break;
      }
      $40 = (($__sym) + ($__i$0$i$i6<<2)|0);
      HEAP32[$40>>2] = 0;
      $41 = (($__i$0$i$i6) + 1)|0;
      $__i$0$i$i6 = $41;
     }
     $__i$0$i$i9 = 0;
     while(1) {
      $exitcond$i$i10 = ($__i$0$i$i9|0)==(3);
      if ($exitcond$i$i10) {
       break;
      }
      $42 = (($__sn) + ($__i$0$i$i9<<2)|0);
      HEAP32[$42>>2] = 0;
      $43 = (($__i$0$i$i9) + 1)|0;
      $__i$0$i$i9 = $43;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(512,($__intl|0),($44|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      $99 = ___cxa_find_matching_catch_2()|0;
      $100 = tempRet0;
      $$0 = $99;$$01 = $100;$$pre23 = $21;
     } else {
      $47 = HEAP32[$__fd>>2]|0;
      $48 = ($__n$0|0)>($47|0);
      if ($48) {
       $49 = (($__n$0) - ($47))|0;
       $50 = $49 << 1;
       $51 = HEAP8[$__sn>>0]|0;
       $52 = $51 & 1;
       $53 = ($52<<24>>24)==(0);
       $54 = ((($__sn)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = $51&255;
       $57 = $56 >>> 1;
       $58 = $53 ? $57 : $55;
       $59 = HEAP8[$__sym>>0]|0;
       $60 = $59 & 1;
       $61 = ($60<<24>>24)==(0);
       $62 = ((($__sym)) + 4|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = $59&255;
       $65 = $64 >>> 1;
       $66 = $61 ? $65 : $63;
       $67 = $50 | 1;
       $68 = (($67) + ($47))|0;
       $69 = (($68) + ($58))|0;
       $70 = (($69) + ($66))|0;
       $90 = $70;
      } else {
       $71 = HEAP8[$__sn>>0]|0;
       $72 = $71 & 1;
       $73 = ($72<<24>>24)==(0);
       $74 = ((($__sn)) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = $71&255;
       $77 = $76 >>> 1;
       $78 = $73 ? $77 : $75;
       $79 = HEAP8[$__sym>>0]|0;
       $80 = $79 & 1;
       $81 = ($80<<24>>24)==(0);
       $82 = ((($__sym)) + 4|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = $79&255;
       $85 = $84 >>> 1;
       $86 = $81 ? $85 : $83;
       $87 = (($47) + 2)|0;
       $88 = (($87) + ($78))|0;
       $89 = (($88) + ($86))|0;
       $90 = $89;
      }
      $91 = ($90>>>0)>(100);
      if ($91) {
       $92 = (_malloc($90)|0);
       $93 = $92;
       $94 = ($92|0)==(0|0);
       if ($94) {
        __THREW__ = 0;
        invoke_v(458);
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if ($96) {
         $__hw$sroa$0$0 = $93;
        } else {
         $__hw$sroa$0$1 = $93;$__mb$0 = 0;
         label = 36;
        }
       } else {
        $__hw$sroa$0$1 = $93;$__mb$0 = $92;
        label = 36;
       }
      } else {
       $__hw$sroa$0$1 = 0;$__mb$0 = $__mbuf;
       label = 36;
      }
      if ((label|0) == 36) {
       $105 = ((($__iob)) + 4|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = (($__db$0) + ($__n$0)|0);
       $108 = HEAP8[$__dp>>0]|0;
       $109 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(513,($__mb$0|0),($__mi|0),($__me|0),($106|0),($__db$0|0),($107|0),($24|0),($44|0),($__pat|0),($108|0),($109|0),($__grp|0),($__sym|0),($__sn|0),($47|0));
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if ($111) {
        $__hw$sroa$0$0 = $__hw$sroa$0$1;
       } else {
        $112 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $112;
        $113 = HEAP32[$__mi>>2]|0;
        $114 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $115 = (invoke_iiiiiii(477,($$byval_copy|0),($__mb$0|0),($113|0),($114|0),($__iob|0),($__fl|0))|0);
        $116 = __THREW__; __THREW__ = 0;
        $117 = $116&1;
        if ($117) {
         $__hw$sroa$0$0 = $__hw$sroa$0$1;
        } else {
         $118 = ($__hw$sroa$0$1|0)==(0);
         if ($118) {
          $120 = $21;
         } else {
          $119 = $__hw$sroa$0$1;
          _free($119);
          $$pre25 = HEAP32[$__loc>>2]|0;
          $120 = $$pre25;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($120)|0);
         $121 = ($__hd$sroa$0$1|0)==(0);
         if (!($121)) {
          $122 = $__hd$sroa$0$1;
          _free($122);
         }
         $123 = ($__hn$sroa$0$1|0)==(0);
         if (!($123)) {
          $124 = $__hn$sroa$0$1;
          _free($124);
         }
         STACKTOP = sp;return ($115|0);
        }
       }
      }
      $101 = ___cxa_find_matching_catch_2()|0;
      $102 = tempRet0;
      $103 = ($__hw$sroa$0$0|0)==(0);
      if ($103) {
       $$0 = $101;$$01 = $102;$$pre23 = $21;
      } else {
       $104 = $__hw$sroa$0$0;
       _free($104);
       $$pre23$pre = HEAP32[$__loc>>2]|0;
       $$0 = $101;$$01 = $102;$$pre23 = $$pre23$pre;
      }
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$125 = $$pre23;
    }
   }
   if ((label|0) == 32) {
    $97 = ___cxa_find_matching_catch_2()|0;
    $98 = tempRet0;
    $$1 = $97;$$12 = $98;$125 = $21;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
   $$2 = $$1;$$23 = $$12;$__hd$sroa$0$2 = $__hd$sroa$0$1;$__hn$sroa$0$2 = $__hn$sroa$0$1;
  }
 }
 if ((label|0) == 8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$2 = $14;$$23 = $15;$__hd$sroa$0$2 = $__hd$sroa$0$0;$__hn$sroa$0$2 = $__hn$sroa$0$0;
 }
 $126 = ($__hd$sroa$0$2|0)==(0);
 if (!($126)) {
  $127 = $__hd$sroa$0$2;
  _free($127);
 }
 $128 = ($__hn$sroa$0$2|0)==(0);
 if (!($128)) {
  $129 = $__hn$sroa$0$2;
  _free($129);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$pre$phi39Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i11 = 0, $__i$0$i$i$i16 = 0, $__i$0$i$i$i21 = 0, $__i$0$i$i$i26 = 0, $__i$0$i$i$i31 = 0, $__i$0$i$i$i36 = 0, $__i$0$i$i$i6 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i12 = 0, $exitcond$i$i$i17 = 0, $exitcond$i$i$i22 = 0, $exitcond$i$i$i27 = 0, $exitcond$i$i$i32 = 0, $exitcond$i$i$i37 = 0, $exitcond$i$i$i7 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,20540)|0);
  $13 = HEAP32[$12>>2]|0;
  if ($__neg) {
   $14 = ((($13)) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
   $16 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = ((($17)) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
   $20 = HEAP8[$__sn>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $26 = ((($__sn)) + 1|0);
    HEAP8[$26>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $23 = ((($__sn)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP8[$24>>0] = 0;
    $25 = ((($__sn)) + 4|0);
    HEAP32[$25>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(368,($__sn|0),0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch_3(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $31 = (($1) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$31>>2] = 0;
    $32 = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $32;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
   $$pre$phiZ2D = $12;
  } else {
   $33 = ((($13)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   FUNCTION_TABLE_vii[$34 & 1023]($2,$12);
   $35 = HEAP32[$2>>2]|0;
   HEAP8[$__pat>>0]=$35&255;HEAP8[$__pat+1>>0]=($35>>8)&255;HEAP8[$__pat+2>>0]=($35>>16)&255;HEAP8[$__pat+3>>0]=$35>>24;
   $36 = HEAP32[$12>>2]|0;
   $37 = ((($36)) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vii[$38 & 1023]($3,$12);
   $39 = HEAP8[$__sn>>0]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $45 = ((($__sn)) + 1|0);
    HEAP8[$45>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $42 = ((($__sn)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP8[$43>>0] = 0;
    $44 = ((($__sn)) + 4|0);
    HEAP32[$44>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(368,($__sn|0),0);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $48 = ___cxa_find_matching_catch_3(0|0)|0;
    $49 = tempRet0;
    ___clang_call_terminate($48);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   $__i$0$i$i$i6 = 0;
   while(1) {
    $exitcond$i$i$i7 = ($__i$0$i$i$i6|0)==(3);
    if ($exitcond$i$i$i7) {
     break;
    }
    $50 = (($3) + ($__i$0$i$i$i6<<2)|0);
    HEAP32[$50>>2] = 0;
    $51 = (($__i$0$i$i$i6) + 1)|0;
    $__i$0$i$i$i6 = $51;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $$pre$phiZ2D = $12;
  }
  $52 = HEAP32[$12>>2]|0;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP8[$__dp>>0] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = ((($56)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (FUNCTION_TABLE_ii[$58 & 1023]($12)|0);
  HEAP8[$__ts>>0] = $59;
  $60 = HEAP32[$$pre$phiZ2D>>2]|0;
  $61 = ((($60)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  FUNCTION_TABLE_vii[$62 & 1023]($4,$12);
  $63 = HEAP8[$__grp>>0]|0;
  $64 = $63 & 1;
  $65 = ($64<<24>>24)==(0);
  if ($65) {
   $69 = ((($__grp)) + 1|0);
   HEAP8[$69>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $66 = ((($__grp)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   HEAP8[$67>>0] = 0;
   $68 = ((($__grp)) + 4|0);
   HEAP32[$68>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__grp|0),0);
  $70 = __THREW__; __THREW__ = 0;
  $71 = $70&1;
  if ($71) {
   $72 = ___cxa_find_matching_catch_3(0|0)|0;
   $73 = tempRet0;
   ___clang_call_terminate($72);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i11 = 0;
  while(1) {
   $exitcond$i$i$i12 = ($__i$0$i$i$i11|0)==(3);
   if ($exitcond$i$i$i12) {
    break;
   }
   $74 = (($4) + ($__i$0$i$i$i11<<2)|0);
   HEAP32[$74>>2] = 0;
   $75 = (($__i$0$i$i$i11) + 1)|0;
   $__i$0$i$i$i11 = $75;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $76 = HEAP32[$$pre$phiZ2D>>2]|0;
  $77 = ((($76)) + 24|0);
  $78 = HEAP32[$77>>2]|0;
  FUNCTION_TABLE_vii[$78 & 1023]($5,$12);
  $79 = HEAP8[$__sym>>0]|0;
  $80 = $79 & 1;
  $81 = ($80<<24>>24)==(0);
  if ($81) {
   $85 = ((($__sym)) + 1|0);
   HEAP8[$85>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $82 = ((($__sym)) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   HEAP8[$83>>0] = 0;
   $84 = ((($__sym)) + 4|0);
   HEAP32[$84>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__sym|0),0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   $88 = ___cxa_find_matching_catch_3(0|0)|0;
   $89 = tempRet0;
   ___clang_call_terminate($88);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  $__i$0$i$i$i16 = 0;
  while(1) {
   $exitcond$i$i$i17 = ($__i$0$i$i$i16|0)==(3);
   if ($exitcond$i$i$i17) {
    break;
   }
   $90 = (($5) + ($__i$0$i$i$i16<<2)|0);
   HEAP32[$90>>2] = 0;
   $91 = (($__i$0$i$i$i16) + 1)|0;
   $__i$0$i$i$i16 = $91;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
  $92 = HEAP32[$12>>2]|0;
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (FUNCTION_TABLE_ii[$94 & 1023]($12)|0);
  $storemerge = $95;
 } else {
  $96 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,20532)|0);
  $97 = HEAP32[$96>>2]|0;
  if ($__neg) {
   $98 = ((($97)) + 44|0);
   $99 = HEAP32[$98>>2]|0;
   FUNCTION_TABLE_vii[$99 & 1023]($6,$96);
   $100 = HEAP32[$6>>2]|0;
   HEAP8[$__pat>>0]=$100&255;HEAP8[$__pat+1>>0]=($100>>8)&255;HEAP8[$__pat+2>>0]=($100>>16)&255;HEAP8[$__pat+3>>0]=$100>>24;
   $101 = HEAP32[$96>>2]|0;
   $102 = ((($101)) + 32|0);
   $103 = HEAP32[$102>>2]|0;
   FUNCTION_TABLE_vii[$103 & 1023]($7,$96);
   $104 = HEAP8[$__sn>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $110 = ((($__sn)) + 1|0);
    HEAP8[$110>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $107 = ((($__sn)) + 8|0);
    $108 = HEAP32[$107>>2]|0;
    HEAP8[$108>>0] = 0;
    $109 = ((($__sn)) + 4|0);
    HEAP32[$109>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(368,($__sn|0),0);
   $111 = __THREW__; __THREW__ = 0;
   $112 = $111&1;
   if ($112) {
    $113 = ___cxa_find_matching_catch_3(0|0)|0;
    $114 = tempRet0;
    ___clang_call_terminate($113);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   $__i$0$i$i$i21 = 0;
   while(1) {
    $exitcond$i$i$i22 = ($__i$0$i$i$i21|0)==(3);
    if ($exitcond$i$i$i22) {
     break;
    }
    $115 = (($7) + ($__i$0$i$i$i21<<2)|0);
    HEAP32[$115>>2] = 0;
    $116 = (($__i$0$i$i$i21) + 1)|0;
    $__i$0$i$i$i21 = $116;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $$pre$phi39Z2D = $96;
  } else {
   $117 = ((($97)) + 40|0);
   $118 = HEAP32[$117>>2]|0;
   FUNCTION_TABLE_vii[$118 & 1023]($8,$96);
   $119 = HEAP32[$8>>2]|0;
   HEAP8[$__pat>>0]=$119&255;HEAP8[$__pat+1>>0]=($119>>8)&255;HEAP8[$__pat+2>>0]=($119>>16)&255;HEAP8[$__pat+3>>0]=$119>>24;
   $120 = HEAP32[$96>>2]|0;
   $121 = ((($120)) + 28|0);
   $122 = HEAP32[$121>>2]|0;
   FUNCTION_TABLE_vii[$122 & 1023]($9,$96);
   $123 = HEAP8[$__sn>>0]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   if ($125) {
    $129 = ((($__sn)) + 1|0);
    HEAP8[$129>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $126 = ((($__sn)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    HEAP8[$127>>0] = 0;
    $128 = ((($__sn)) + 4|0);
    HEAP32[$128>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(368,($__sn|0),0);
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   if ($131) {
    $132 = ___cxa_find_matching_catch_3(0|0)|0;
    $133 = tempRet0;
    ___clang_call_terminate($132);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   $__i$0$i$i$i26 = 0;
   while(1) {
    $exitcond$i$i$i27 = ($__i$0$i$i$i26|0)==(3);
    if ($exitcond$i$i$i27) {
     break;
    }
    $134 = (($9) + ($__i$0$i$i$i26<<2)|0);
    HEAP32[$134>>2] = 0;
    $135 = (($__i$0$i$i$i26) + 1)|0;
    $__i$0$i$i$i26 = $135;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
   $$pre$phi39Z2D = $96;
  }
  $136 = HEAP32[$96>>2]|0;
  $137 = ((($136)) + 12|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (FUNCTION_TABLE_ii[$138 & 1023]($96)|0);
  HEAP8[$__dp>>0] = $139;
  $140 = HEAP32[$96>>2]|0;
  $141 = ((($140)) + 16|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (FUNCTION_TABLE_ii[$142 & 1023]($96)|0);
  HEAP8[$__ts>>0] = $143;
  $144 = HEAP32[$$pre$phi39Z2D>>2]|0;
  $145 = ((($144)) + 20|0);
  $146 = HEAP32[$145>>2]|0;
  FUNCTION_TABLE_vii[$146 & 1023]($10,$96);
  $147 = HEAP8[$__grp>>0]|0;
  $148 = $147 & 1;
  $149 = ($148<<24>>24)==(0);
  if ($149) {
   $153 = ((($__grp)) + 1|0);
   HEAP8[$153>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $150 = ((($__grp)) + 8|0);
   $151 = HEAP32[$150>>2]|0;
   HEAP8[$151>>0] = 0;
   $152 = ((($__grp)) + 4|0);
   HEAP32[$152>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__grp|0),0);
  $154 = __THREW__; __THREW__ = 0;
  $155 = $154&1;
  if ($155) {
   $156 = ___cxa_find_matching_catch_3(0|0)|0;
   $157 = tempRet0;
   ___clang_call_terminate($156);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  $__i$0$i$i$i31 = 0;
  while(1) {
   $exitcond$i$i$i32 = ($__i$0$i$i$i31|0)==(3);
   if ($exitcond$i$i$i32) {
    break;
   }
   $158 = (($10) + ($__i$0$i$i$i31<<2)|0);
   HEAP32[$158>>2] = 0;
   $159 = (($__i$0$i$i$i31) + 1)|0;
   $__i$0$i$i$i31 = $159;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $160 = HEAP32[$$pre$phi39Z2D>>2]|0;
  $161 = ((($160)) + 24|0);
  $162 = HEAP32[$161>>2]|0;
  FUNCTION_TABLE_vii[$162 & 1023]($11,$96);
  $163 = HEAP8[$__sym>>0]|0;
  $164 = $163 & 1;
  $165 = ($164<<24>>24)==(0);
  if ($165) {
   $169 = ((($__sym)) + 1|0);
   HEAP8[$169>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $166 = ((($__sym)) + 8|0);
   $167 = HEAP32[$166>>2]|0;
   HEAP8[$167>>0] = 0;
   $168 = ((($__sym)) + 4|0);
   HEAP32[$168>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__sym|0),0);
  $170 = __THREW__; __THREW__ = 0;
  $171 = $170&1;
  if ($171) {
   $172 = ___cxa_find_matching_catch_3(0|0)|0;
   $173 = tempRet0;
   ___clang_call_terminate($172);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  $__i$0$i$i$i36 = 0;
  while(1) {
   $exitcond$i$i$i37 = ($__i$0$i$i$i36|0)==(3);
   if ($exitcond$i$i$i37) {
    break;
   }
   $174 = (($11) + ($__i$0$i$i$i36<<2)|0);
   HEAP32[$174>>2] = 0;
   $175 = (($__i$0$i$i$i36) + 1)|0;
   $__i$0$i$i$i36 = $175;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $176 = HEAP32[$96>>2]|0;
  $177 = ((($176)) + 36|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (FUNCTION_TABLE_ii[$178 & 1023]($96)|0);
  $storemerge = $179;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$lcssa = 0, $$0$i$i2 = 0, $$0$i$i9 = 0, $$0$i$i9$lcssa = 0, $$01$i$i = 0, $$2 = 0, $$lcssa36 = 0, $$pn = 0, $$sroa$04$0$i = 0, $$sroa$04$0$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sn)) + 1|0);
 $3 = ((($__sym)) + 4|0);
 $4 = $__flags & 512;
 $5 = ($4|0)==(0);
 $6 = ((($__sym)) + 8|0);
 $7 = ((($__sym)) + 1|0);
 $8 = ((($__ct)) + 8|0);
 $9 = ($__fd|0)>(0);
 $10 = ((($__grp)) + 4|0);
 $11 = ((($__grp)) + 8|0);
 $12 = ((($__grp)) + 1|0);
 $$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $21 = (($__pat) + ($__p$0)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  L4: do {
   switch ($23|0) {
   case 0:  {
    $24 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $24;
    $$2 = $$0;
    break;
   }
   case 1:  {
    $25 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $25;
    $26 = HEAP32[$__ct>>2]|0;
    $27 = ((($26)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iii[$28 & 511]($__ct,32)|0);
    $30 = HEAP32[$__me>>2]|0;
    $31 = ((($30)) + 1|0);
    HEAP32[$__me>>2] = $31;
    HEAP8[$30>>0] = $29;
    $$2 = $$0;
    break;
   }
   case 3:  {
    $32 = HEAP8[$__sn>>0]|0;
    $33 = $32 & 1;
    $34 = ($33<<24>>24)==(0);
    $35 = HEAP32[$0>>2]|0;
    $36 = $32&255;
    $37 = $36 >>> 1;
    $38 = $34 ? $37 : $35;
    $39 = ($38|0)==(0);
    if ($39) {
     $$2 = $$0;
    } else {
     $40 = HEAP32[$1>>2]|0;
     $41 = $34 ? $2 : $40;
     $42 = HEAP8[$41>>0]|0;
     $43 = HEAP32[$__me>>2]|0;
     $44 = ((($43)) + 1|0);
     HEAP32[$__me>>2] = $44;
     HEAP8[$43>>0] = $42;
     $$2 = $$0;
    }
    break;
   }
   case 2:  {
    $45 = HEAP8[$__sym>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    $48 = HEAP32[$3>>2]|0;
    $49 = $45&255;
    $50 = $49 >>> 1;
    $51 = $47 ? $50 : $48;
    $52 = ($51|0)==(0);
    $or$cond = $5 | $52;
    if ($or$cond) {
     $$2 = $$0;
    } else {
     $53 = HEAP32[$6>>2]|0;
     $54 = $47 ? $7 : $53;
     $55 = (($54) + ($51)|0);
     $56 = HEAP32[$__me>>2]|0;
     $$0$i$i9 = $56;$$sroa$04$0$i8 = $54;
     while(1) {
      $57 = ($$sroa$04$0$i8|0)==($55|0);
      if ($57) {
       $$0$i$i9$lcssa = $$0$i$i9;
       break;
      }
      $58 = HEAP8[$$sroa$04$0$i8>>0]|0;
      HEAP8[$$0$i$i9>>0] = $58;
      $59 = ((($$sroa$04$0$i8)) + 1|0);
      $60 = ((($$0$i$i9)) + 1|0);
      $$0$i$i9 = $60;$$sroa$04$0$i8 = $59;
     }
     HEAP32[$__me>>2] = $$0$i$i9$lcssa;
     $$2 = $$0;
    }
    break;
   }
   case 4:  {
    $61 = HEAP32[$__me>>2]|0;
    $62 = ((($$0)) + 1|0);
    $$$0 = $__neg ? $62 : $$0;
    $__d$0 = $$$0;
    while(1) {
     $63 = ($__d$0>>>0)<($__de>>>0);
     if (!($63)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $64 = HEAP8[$__d$0>>0]|0;
     $isascii1$i = ($64<<24>>24)>(-1);
     if (!($isascii1$i)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $65 = $64 << 24 >> 24;
     $66 = HEAP32[$8>>2]|0;
     $67 = (($66) + ($65<<1)|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68 & 2048;
     $70 = ($69<<16>>16)==(0);
     if ($70) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $71 = ((($__d$0)) + 1|0);
     $__d$0 = $71;
    }
    if ($9) {
     $__d$1 = $__d$0$lcssa;$__f$0 = $__fd;
     while(1) {
      $72 = ($__d$1>>>0)>($$$0>>>0);
      $73 = ($__f$0|0)>(0);
      $74 = $72 & $73;
      if (!($74)) {
       break;
      }
      $75 = ((($__d$1)) + -1|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = HEAP32[$__me>>2]|0;
      $78 = ((($77)) + 1|0);
      HEAP32[$__me>>2] = $78;
      HEAP8[$77>>0] = $76;
      $79 = (($__f$0) + -1)|0;
      $__d$1 = $75;$__f$0 = $79;
     }
     if ($73) {
      $80 = HEAP32[$__ct>>2]|0;
      $81 = ((($80)) + 28|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (FUNCTION_TABLE_iii[$82 & 511]($__ct,48)|0);
      $87 = $83;
     } else {
      $87 = 0;
     }
     $__f$1 = $__f$0;
     while(1) {
      $84 = ($__f$1|0)>(0);
      $85 = HEAP32[$__me>>2]|0;
      $86 = ((($85)) + 1|0);
      HEAP32[$__me>>2] = $86;
      if (!($84)) {
       $$lcssa36 = $85;
       break;
      }
      HEAP8[$85>>0] = $87;
      $88 = (($__f$1) + -1)|0;
      $__f$1 = $88;
     }
     HEAP8[$$lcssa36>>0] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $89 = ($__d$2|0)==($$$0|0);
    L35: do {
     if ($89) {
      $90 = HEAP32[$__ct>>2]|0;
      $91 = ((($90)) + 28|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (FUNCTION_TABLE_iii[$92 & 511]($__ct,48)|0);
      $94 = HEAP32[$__me>>2]|0;
      $95 = ((($94)) + 1|0);
      HEAP32[$__me>>2] = $95;
      HEAP8[$94>>0] = $93;
     } else {
      $96 = HEAP8[$__grp>>0]|0;
      $97 = $96 & 1;
      $98 = ($97<<24>>24)==(0);
      $99 = HEAP32[$10>>2]|0;
      $100 = $96&255;
      $101 = $100 >>> 1;
      $102 = $98 ? $101 : $99;
      $103 = ($102|0)==(0);
      if ($103) {
       $__d$3 = $__d$2;$__gl$0 = -1;$__ig$0 = 0;$__ng$0 = 0;
      } else {
       $104 = HEAP32[$11>>2]|0;
       $105 = $98 ? $12 : $104;
       $106 = HEAP8[$105>>0]|0;
       $107 = $106 << 24 >> 24;
       $__d$3 = $__d$2;$__gl$0 = $107;$__ig$0 = 0;$__ng$0 = 0;
      }
      while(1) {
       $108 = ($__d$3|0)==($$$0|0);
       if ($108) {
        break L35;
       }
       $109 = ($__ng$0|0)==($__gl$0|0);
       if ($109) {
        $110 = HEAP32[$__me>>2]|0;
        $111 = ((($110)) + 1|0);
        HEAP32[$__me>>2] = $111;
        HEAP8[$110>>0] = $__ts;
        $112 = (($__ig$0) + 1)|0;
        $113 = HEAP8[$__grp>>0]|0;
        $114 = $113 & 1;
        $115 = ($114<<24>>24)==(0);
        $116 = HEAP32[$10>>2]|0;
        $117 = $113&255;
        $118 = $117 >>> 1;
        $119 = $115 ? $118 : $116;
        $120 = ($112>>>0)<($119>>>0);
        if ($120) {
         $121 = HEAP32[$11>>2]|0;
         $122 = $115 ? $12 : $121;
         $123 = (($122) + ($112)|0);
         $124 = HEAP8[$123>>0]|0;
         $125 = ($124<<24>>24)==(127);
         $126 = $124 << 24 >> 24;
         $$ = $125 ? -1 : $126;
         $__gl$1 = $$;$__ig$1 = $112;$__ng$1 = 0;
        } else {
         $__gl$1 = $__ng$0;$__ig$1 = $112;$__ng$1 = 0;
        }
       } else {
        $__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
       }
       $127 = ((($__d$3)) + -1|0);
       $128 = HEAP8[$127>>0]|0;
       $129 = HEAP32[$__me>>2]|0;
       $130 = ((($129)) + 1|0);
       HEAP32[$__me>>2] = $130;
       HEAP8[$129>>0] = $128;
       $131 = (($__ng$1) + 1)|0;
       $__d$3 = $127;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $131;
      }
     }
    } while(0);
    $132 = HEAP32[$__me>>2]|0;
    $133 = ($61|0)==($132|0);
    if ($133) {
     $$2 = $$$0;
    } else {
     $$0$i$i2 = $132;$$01$i$i = $61;
     while(1) {
      $134 = ((($$0$i$i2)) + -1|0);
      $135 = ($$01$i$i>>>0)<($134>>>0);
      if (!($135)) {
       $$2 = $$$0;
       break L4;
      }
      $136 = HEAP8[$$01$i$i>>0]|0;
      $137 = HEAP8[$134>>0]|0;
      HEAP8[$$01$i$i>>0] = $137;
      HEAP8[$134>>0] = $136;
      $138 = ((($$01$i$i)) + 1|0);
      $$0$i$i2 = $134;$$01$i$i = $138;
     }
    }
    break;
   }
   default: {
    $$2 = $$0;
   }
   }
  } while(0);
  $139 = (($__p$0) + 1)|0;
  $$0 = $$2;$__p$0 = $139;
 }
 $13 = HEAP8[$__sn>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 $16 = HEAP32[$0>>2]|0;
 $17 = $13&255;
 $18 = $17 >>> 1;
 $19 = $15 ? $18 : $16;
 $20 = ($19>>>0)>(1);
 if ($20) {
  $140 = HEAP32[$1>>2]|0;
  $141 = $15 ? $2 : $140;
  $142 = (($141) + ($19)|0);
  $143 = HEAP32[$__me>>2]|0;
  $$0$i$i = $143;$$pn = $141;
  while(1) {
   $$sroa$04$0$i = ((($$pn)) + 1|0);
   $144 = ($$sroa$04$0$i|0)==($142|0);
   if ($144) {
    $$0$i$i$lcssa = $$0$i$i;
    break;
   }
   $145 = HEAP8[$$sroa$04$0$i>>0]|0;
   HEAP8[$$0$i$i>>0] = $145;
   $146 = ((($$0$i$i)) + 1|0);
   $$0$i$i = $146;$$pn = $$sroa$04$0$i;
  }
  HEAP32[$__me>>2] = $$0$i$i$lcssa;
 }
 $147 = $__flags & 176;
 switch ($147|0) {
 case 32:  {
  $148 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $148;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre19$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0;
 var $__grp = 0, $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__i$0$i$i = 0, $__i$0$i$i3 = 0, $__i$0$i$i6 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i4 = 0, $exitcond$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $__loc = sp + 52|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 60|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(346,($__loc|0),(18820|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 22;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $32 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($__digits)) + 1|0);
    $17 = $7 ? $16 : $15;
    $18 = HEAP8[$17>>0]|0;
    $19 = HEAP32[$2>>2]|0;
    $20 = ((($19)) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $22 = (invoke_iii($21|0,($2|0),45)|0);
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     label = 22;
     break;
    }
    $25 = ($18<<24>>24)==($22<<24>>24);
    $32 = $25;
   }
   $__i$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($__i$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $26 = (($__grp) + ($__i$0$i$i<<2)|0);
    HEAP32[$26>>2] = 0;
    $27 = (($__i$0$i$i) + 1)|0;
    $__i$0$i$i = $27;
   }
   $__i$0$i$i3 = 0;
   while(1) {
    $exitcond$i$i4 = ($__i$0$i$i3|0)==(3);
    if ($exitcond$i$i4) {
     break;
    }
    $28 = (($__sym) + ($__i$0$i$i3<<2)|0);
    HEAP32[$28>>2] = 0;
    $29 = (($__i$0$i$i3) + 1)|0;
    $__i$0$i$i3 = $29;
   }
   $__i$0$i$i6 = 0;
   while(1) {
    $exitcond$i$i7 = ($__i$0$i$i6|0)==(3);
    if ($exitcond$i$i7) {
     break;
    }
    $30 = (($__sn) + ($__i$0$i$i6<<2)|0);
    HEAP32[$30>>2] = 0;
    $31 = (($__i$0$i$i6) + 1)|0;
    $__i$0$i$i6 = $31;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(512,($__intl|0),($32|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $94 = ___cxa_find_matching_catch_2()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre19 = $1;
   } else {
    $35 = HEAP8[$__digits>>0]|0;
    $36 = $35 & 1;
    $37 = ($36<<24>>24)==(0);
    $38 = HEAP32[$8>>2]|0;
    $39 = $35&255;
    $40 = $39 >>> 1;
    $41 = $37 ? $40 : $38;
    $42 = HEAP32[$__fd>>2]|0;
    $43 = ($41|0)>($42|0);
    if ($43) {
     $44 = (($41) - ($42))|0;
     $45 = $44 << 1;
     $46 = HEAP8[$__sn>>0]|0;
     $47 = $46 & 1;
     $48 = ($47<<24>>24)==(0);
     $49 = ((($__sn)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $46&255;
     $52 = $51 >>> 1;
     $53 = $48 ? $52 : $50;
     $54 = HEAP8[$__sym>>0]|0;
     $55 = $54 & 1;
     $56 = ($55<<24>>24)==(0);
     $57 = ((($__sym)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $54&255;
     $60 = $59 >>> 1;
     $61 = $56 ? $60 : $58;
     $62 = $45 | 1;
     $63 = (($62) + ($42))|0;
     $64 = (($63) + ($53))|0;
     $65 = (($64) + ($61))|0;
     $85 = $65;
    } else {
     $66 = HEAP8[$__sn>>0]|0;
     $67 = $66 & 1;
     $68 = ($67<<24>>24)==(0);
     $69 = ((($__sn)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $66&255;
     $72 = $71 >>> 1;
     $73 = $68 ? $72 : $70;
     $74 = HEAP8[$__sym>>0]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     $77 = ((($__sym)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $74&255;
     $80 = $79 >>> 1;
     $81 = $76 ? $80 : $78;
     $82 = (($42) + 2)|0;
     $83 = (($82) + ($73))|0;
     $84 = (($83) + ($81))|0;
     $85 = $84;
    }
    $86 = ($85>>>0)>(100);
    if ($86) {
     $87 = (_malloc($85)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(458);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $__h$sroa$0$0 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre18 = HEAP32[$8>>2]|0;
       $103 = $$pre;$111 = $$pre18;$__h$sroa$0$1 = $88;$__mb$0 = 0;
       label = 26;
      }
     } else {
      $103 = $35;$111 = $38;$__h$sroa$0$1 = $88;$__mb$0 = $87;
      label = 26;
     }
    } else {
     $103 = $35;$111 = $38;$__h$sroa$0$1 = 0;$__mb$0 = $__mbuf;
     label = 26;
    }
    if ((label|0) == 26) {
     $100 = ((($__iob)) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $103 & 1;
     $104 = ($102<<24>>24)==(0);
     $105 = ((($__digits)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ((($__digits)) + 1|0);
     $108 = $104 ? $107 : $106;
     $109 = $103&255;
     $110 = $109 >>> 1;
     $112 = $104 ? $110 : $111;
     $113 = (($108) + ($112)|0);
     $114 = HEAP8[$__dp>>0]|0;
     $115 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(513,($__mb$0|0),($__mi|0),($__me|0),($101|0),($108|0),($113|0),($2|0),($32|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($42|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      $__h$sroa$0$0 = $__h$sroa$0$1;
     } else {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $121 = (invoke_iiiiiii(477,($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0))|0);
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      if ($123) {
       $__h$sroa$0$0 = $__h$sroa$0$1;
      } else {
       $124 = ($__h$sroa$0$1|0)==(0);
       if ($124) {
        $126 = $1;
       } else {
        $125 = $__h$sroa$0$1;
        _free($125);
        $$pre21 = HEAP32[$__loc>>2]|0;
        $126 = $$pre21;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($126)|0);
       STACKTOP = sp;return ($121|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch_2()|0;
    $97 = tempRet0;
    $98 = ($__h$sroa$0$0|0)==(0);
    if ($98) {
     $$0 = $96;$$01 = $97;$$pre19 = $1;
    } else {
     $99 = $__h$sroa$0$0;
     _free($99);
     $$pre19$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre19 = $$pre19$pre;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$127 = $$pre19;
  }
 } while(0);
 if ((label|0) == 22) {
  $92 = ___cxa_find_matching_catch_2()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$127 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($127)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this,$__s,$__intl,$__iob,$__fl,$__units) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $$pre20$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hd$sroa$0$1 = 0, $__hd$sroa$0$2 = 0, $__hn$sroa$0$0 = 0, $__hn$sroa$0$1 = 0, $__hn$sroa$0$2 = 0, $__hw$sroa$0$0 = 0, $__hw$sroa$0$1 = 0, $__i$0$i$i = 0;
 var $__i$0$i$i4 = 0, $__i$0$i$i6 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i5 = 0, $exitcond$i$i7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 900|0;
 $__bb = sp + 888|0;
 $__digits = sp + 488|0;
 $__loc = sp + 480|0;
 $__pat = sp + 896|0;
 $__dp = sp + 476|0;
 $__ts = sp + 472|0;
 $__grp = sp + 460|0;
 $__sym = sp + 448|0;
 $__sn = sp + 436|0;
 $__fd = sp + 432|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$vararg_buffer>>3] = $__units;
 $1 = (_snprintf($__buf,100,16067,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(470)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $__units;
    $6 = (invoke_iiiii(475,($__bb|0),($3|0),(16067|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
     label = 8;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(458);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if ($13) {
       $__hd$sroa$0$0 = 0;$__hn$sroa$0$0 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $132 = $$pre;
     } else {
      $11 = $9;
      $132 = $11;
     }
     $16 = $6 << 2;
     $17 = (_malloc($16)|0);
     $18 = $17;
     $19 = ($17|0)==(0|0);
     if ($19) {
      __THREW__ = 0;
      invoke_v(458);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       $__hd$sroa$0$0 = $18;$__hn$sroa$0$0 = $132;
       label = 8;
      } else {
       $__db$0 = 0;$__hd$sroa$0$1 = $18;$__hn$sroa$0$1 = $132;$__n$0 = $6;
       label = 11;
      }
     } else {
      $__db$0 = $17;$__hd$sroa$0$1 = $18;$__hn$sroa$0$1 = $132;$__n$0 = $6;
      label = 11;
     }
    }
   }
  } else {
   $__db$0 = $__digits;$__hd$sroa$0$1 = 0;$__hn$sroa$0$1 = 0;$__n$0 = $1;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  $22 = (invoke_ii(345,($__iob|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $__hd$sroa$0$0 = $__hd$sroa$0$1;$__hn$sroa$0$0 = $__hn$sroa$0$1;
   label = 8;
  } else {
   HEAP32[$__loc>>2] = $22;
   __THREW__ = 0;
   $25 = (invoke_iii(346,($__loc|0),(18852|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 32;
   } else {
    $28 = HEAP32[$__bb>>2]|0;
    $29 = (($28) + ($__n$0)|0);
    $30 = HEAP32[$25>>2]|0;
    $31 = ((($30)) + 48|0);
    $32 = HEAP32[$31>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($32|0,($25|0),($28|0),($29|0),($__db$0|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     label = 32;
    } else {
     $35 = ($__n$0|0)==(0);
     if ($35) {
      $45 = 0;
     } else {
      $36 = HEAP32[$__bb>>2]|0;
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(45);
      $45 = $38;
     }
     $__i$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($__i$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $39 = (($__grp) + ($__i$0$i$i<<2)|0);
      HEAP32[$39>>2] = 0;
      $40 = (($__i$0$i$i) + 1)|0;
      $__i$0$i$i = $40;
     }
     $__i$0$i$i4 = 0;
     while(1) {
      $exitcond$i$i5 = ($__i$0$i$i4|0)==(3);
      if ($exitcond$i$i5) {
       break;
      }
      $41 = (($__sym) + ($__i$0$i$i4<<2)|0);
      HEAP32[$41>>2] = 0;
      $42 = (($__i$0$i$i4) + 1)|0;
      $__i$0$i$i4 = $42;
     }
     $__i$0$i$i6 = 0;
     while(1) {
      $exitcond$i$i7 = ($__i$0$i$i6|0)==(3);
      if ($exitcond$i$i7) {
       break;
      }
      $43 = (($__sn) + ($__i$0$i$i6<<2)|0);
      HEAP32[$43>>2] = 0;
      $44 = (($__i$0$i$i6) + 1)|0;
      $__i$0$i$i6 = $44;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(514,($__intl|0),($45|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $101 = ___cxa_find_matching_catch_2()|0;
      $102 = tempRet0;
      $$0 = $101;$$01 = $102;$$pre20 = $22;
     } else {
      $48 = HEAP32[$__fd>>2]|0;
      $49 = ($__n$0|0)>($48|0);
      if ($49) {
       $50 = (($__n$0) - ($48))|0;
       $51 = $50 << 1;
       $52 = HEAP8[$__sn>>0]|0;
       $53 = $52 & 1;
       $54 = ($53<<24>>24)==(0);
       $55 = ((($__sn)) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = $52&255;
       $58 = $57 >>> 1;
       $59 = $54 ? $58 : $56;
       $60 = HEAP8[$__sym>>0]|0;
       $61 = $60 & 1;
       $62 = ($61<<24>>24)==(0);
       $63 = ((($__sym)) + 4|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = $60&255;
       $66 = $65 >>> 1;
       $67 = $62 ? $66 : $64;
       $68 = $51 | 1;
       $69 = (($68) + ($48))|0;
       $70 = (($69) + ($59))|0;
       $71 = (($70) + ($67))|0;
       $91 = $71;
      } else {
       $72 = HEAP8[$__sn>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       $75 = ((($__sn)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $72&255;
       $78 = $77 >>> 1;
       $79 = $74 ? $78 : $76;
       $80 = HEAP8[$__sym>>0]|0;
       $81 = $80 & 1;
       $82 = ($81<<24>>24)==(0);
       $83 = ((($__sym)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $80&255;
       $86 = $85 >>> 1;
       $87 = $82 ? $86 : $84;
       $88 = (($48) + 2)|0;
       $89 = (($88) + ($79))|0;
       $90 = (($89) + ($87))|0;
       $91 = $90;
      }
      $92 = ($91>>>0)>(100);
      if ($92) {
       $93 = $91 << 2;
       $94 = (_malloc($93)|0);
       $95 = $94;
       $96 = ($94|0)==(0|0);
       if ($96) {
        __THREW__ = 0;
        invoke_v(458);
        $97 = __THREW__; __THREW__ = 0;
        $98 = $97&1;
        if ($98) {
         $__hw$sroa$0$0 = $95;
        } else {
         $__hw$sroa$0$1 = $95;$__mb$0 = 0;
         label = 36;
        }
       } else {
        $__hw$sroa$0$1 = $95;$__mb$0 = $94;
        label = 36;
       }
      } else {
       $__hw$sroa$0$1 = 0;$__mb$0 = $__mbuf;
       label = 36;
      }
      if ((label|0) == 36) {
       $107 = ((($__iob)) + 4|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($__db$0) + ($__n$0<<2)|0);
       $110 = HEAP32[$__dp>>2]|0;
       $111 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(515,($__mb$0|0),($__mi|0),($__me|0),($108|0),($__db$0|0),($109|0),($25|0),($45|0),($__pat|0),($110|0),($111|0),($__grp|0),($__sym|0),($__sn|0),($48|0));
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        $__hw$sroa$0$0 = $__hw$sroa$0$1;
       } else {
        $114 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $114;
        $115 = HEAP32[$__mi>>2]|0;
        $116 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        $117 = (invoke_iiiiiii(483,($$byval_copy|0),($__mb$0|0),($115|0),($116|0),($__iob|0),($__fl|0))|0);
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         $__hw$sroa$0$0 = $__hw$sroa$0$1;
        } else {
         $120 = ($__hw$sroa$0$1|0)==(0);
         if ($120) {
          $122 = $22;
         } else {
          $121 = $__hw$sroa$0$1;
          _free($121);
          $$pre22 = HEAP32[$__loc>>2]|0;
          $122 = $$pre22;
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
         (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
         $123 = ($__hd$sroa$0$1|0)==(0);
         if (!($123)) {
          $124 = $__hd$sroa$0$1;
          _free($124);
         }
         $125 = ($__hn$sroa$0$1|0)==(0);
         if (!($125)) {
          $126 = $__hn$sroa$0$1;
          _free($126);
         }
         STACKTOP = sp;return ($117|0);
        }
       }
      }
      $103 = ___cxa_find_matching_catch_2()|0;
      $104 = tempRet0;
      $105 = ($__hw$sroa$0$0|0)==(0);
      if ($105) {
       $$0 = $103;$$01 = $104;$$pre20 = $22;
      } else {
       $106 = $__hw$sroa$0$0;
       _free($106);
       $$pre20$pre = HEAP32[$__loc>>2]|0;
       $$0 = $103;$$01 = $104;$$pre20 = $$pre20$pre;
      }
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
     $$1 = $$0;$$12 = $$01;$127 = $$pre20;
    }
   }
   if ((label|0) == 32) {
    $99 = ___cxa_find_matching_catch_2()|0;
    $100 = tempRet0;
    $$1 = $99;$$12 = $100;$127 = $22;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($127)|0);
   $$2 = $$1;$$23 = $$12;$__hd$sroa$0$2 = $__hd$sroa$0$1;$__hn$sroa$0$2 = $__hn$sroa$0$1;
  }
 }
 if ((label|0) == 8) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  $$2 = $14;$$23 = $15;$__hd$sroa$0$2 = $__hd$sroa$0$0;$__hn$sroa$0$2 = $__hn$sroa$0$0;
 }
 $128 = ($__hd$sroa$0$2|0)==(0);
 if (!($128)) {
  $129 = $__hd$sroa$0$2;
  _free($129);
 }
 $130 = ($__hn$sroa$0$2|0)==(0);
 if (!($130)) {
  $131 = $__hn$sroa$0$2;
  _free($131);
 }
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i13 = 0, $__i$0$i$i$i18 = 0, $__i$0$i$i$i23 = 0, $__i$0$i$i$i28 = 0, $__i$0$i$i$i33 = 0;
 var $__i$0$i$i$i6 = 0, $__i$0$i$i$i9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i10 = 0, $exitcond$i$i$i14 = 0, $exitcond$i$i$i19 = 0, $exitcond$i$i$i24 = 0, $exitcond$i$i$i29 = 0, $exitcond$i$i$i34 = 0, $exitcond$i$i$i7 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,20556)|0);
  $13 = HEAP32[$12>>2]|0;
  if ($__neg) {
   $14 = ((($13)) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
   $16 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = ((($17)) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
   $20 = HEAP8[$__sn>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $23 = ((($__sn)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$24>>2] = 0;
   }
   $25 = ((($__sn)) + 4|0);
   HEAP32[$25>>2] = 0;
   __THREW__ = 0;
   invoke_vii(510,($__sn|0),0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $28 = ___cxa_find_matching_catch_3(0|0)|0;
    $29 = tempRet0;
    ___clang_call_terminate($28);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$1>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $30 = (($1) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$30>>2] = 0;
    $31 = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $31;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  } else {
   $32 = ((($13)) + 40|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vii[$33 & 1023]($2,$12);
   $34 = HEAP32[$2>>2]|0;
   HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
   $35 = HEAP32[$12>>2]|0;
   $36 = ((($35)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vii[$37 & 1023]($3,$12);
   $38 = HEAP8[$__sn>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $41 = ((($__sn)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    HEAP32[$42>>2] = 0;
   }
   $43 = ((($__sn)) + 4|0);
   HEAP32[$43>>2] = 0;
   __THREW__ = 0;
   invoke_vii(510,($__sn|0),0);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $46 = ___cxa_find_matching_catch_3(0|0)|0;
    $47 = tempRet0;
    ___clang_call_terminate($46);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$3>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   $__i$0$i$i$i6 = 0;
   while(1) {
    $exitcond$i$i$i7 = ($__i$0$i$i$i6|0)==(3);
    if ($exitcond$i$i$i7) {
     break;
    }
    $48 = (($3) + ($__i$0$i$i$i6<<2)|0);
    HEAP32[$48>>2] = 0;
    $49 = (($__i$0$i$i$i6) + 1)|0;
    $__i$0$i$i$i6 = $49;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
  }
  $50 = HEAP32[$12>>2]|0;
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (FUNCTION_TABLE_ii[$52 & 1023]($12)|0);
  HEAP32[$__dp>>2] = $53;
  $54 = HEAP32[$12>>2]|0;
  $55 = ((($54)) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (FUNCTION_TABLE_ii[$56 & 1023]($12)|0);
  HEAP32[$__ts>>2] = $57;
  $58 = HEAP32[$12>>2]|0;
  $59 = ((($58)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  FUNCTION_TABLE_vii[$60 & 1023]($4,$12);
  $61 = HEAP8[$__grp>>0]|0;
  $62 = $61 & 1;
  $63 = ($62<<24>>24)==(0);
  if ($63) {
   $67 = ((($__grp)) + 1|0);
   HEAP8[$67>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $64 = ((($__grp)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   HEAP8[$65>>0] = 0;
   $66 = ((($__grp)) + 4|0);
   HEAP32[$66>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__grp|0),0);
  $68 = __THREW__; __THREW__ = 0;
  $69 = $68&1;
  if ($69) {
   $70 = ___cxa_find_matching_catch_3(0|0)|0;
   $71 = tempRet0;
   ___clang_call_terminate($70);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$4>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i9 = 0;
  while(1) {
   $exitcond$i$i$i10 = ($__i$0$i$i$i9|0)==(3);
   if ($exitcond$i$i$i10) {
    break;
   }
   $72 = (($4) + ($__i$0$i$i$i9<<2)|0);
   HEAP32[$72>>2] = 0;
   $73 = (($__i$0$i$i$i9) + 1)|0;
   $__i$0$i$i$i9 = $73;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $74 = HEAP32[$12>>2]|0;
  $75 = ((($74)) + 24|0);
  $76 = HEAP32[$75>>2]|0;
  FUNCTION_TABLE_vii[$76 & 1023]($5,$12);
  $77 = HEAP8[$__sym>>0]|0;
  $78 = $77 & 1;
  $79 = ($78<<24>>24)==(0);
  if ($79) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $80 = ((($__sym)) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   HEAP32[$81>>2] = 0;
  }
  $82 = ((($__sym)) + 4|0);
  HEAP32[$82>>2] = 0;
  __THREW__ = 0;
  invoke_vii(510,($__sym|0),0);
  $83 = __THREW__; __THREW__ = 0;
  $84 = $83&1;
  if ($84) {
   $85 = ___cxa_find_matching_catch_3(0|0)|0;
   $86 = tempRet0;
   ___clang_call_terminate($85);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$5>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  $__i$0$i$i$i13 = 0;
  while(1) {
   $exitcond$i$i$i14 = ($__i$0$i$i$i13|0)==(3);
   if ($exitcond$i$i$i14) {
    break;
   }
   $87 = (($5) + ($__i$0$i$i$i13<<2)|0);
   HEAP32[$87>>2] = 0;
   $88 = (($__i$0$i$i$i13) + 1)|0;
   $__i$0$i$i$i13 = $88;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5);
  $89 = HEAP32[$12>>2]|0;
  $90 = ((($89)) + 36|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (FUNCTION_TABLE_ii[$91 & 1023]($12)|0);
  $storemerge = $92;
 } else {
  $93 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,20548)|0);
  $94 = HEAP32[$93>>2]|0;
  if ($__neg) {
   $95 = ((($94)) + 44|0);
   $96 = HEAP32[$95>>2]|0;
   FUNCTION_TABLE_vii[$96 & 1023]($6,$93);
   $97 = HEAP32[$6>>2]|0;
   HEAP8[$__pat>>0]=$97&255;HEAP8[$__pat+1>>0]=($97>>8)&255;HEAP8[$__pat+2>>0]=($97>>16)&255;HEAP8[$__pat+3>>0]=$97>>24;
   $98 = HEAP32[$93>>2]|0;
   $99 = ((($98)) + 32|0);
   $100 = HEAP32[$99>>2]|0;
   FUNCTION_TABLE_vii[$100 & 1023]($7,$93);
   $101 = HEAP8[$__sn>>0]|0;
   $102 = $101 & 1;
   $103 = ($102<<24>>24)==(0);
   if ($103) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $104 = ((($__sn)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    HEAP32[$105>>2] = 0;
   }
   $106 = ((($__sn)) + 4|0);
   HEAP32[$106>>2] = 0;
   __THREW__ = 0;
   invoke_vii(510,($__sn|0),0);
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   if ($108) {
    $109 = ___cxa_find_matching_catch_3(0|0)|0;
    $110 = tempRet0;
    ___clang_call_terminate($109);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$7>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   $__i$0$i$i$i18 = 0;
   while(1) {
    $exitcond$i$i$i19 = ($__i$0$i$i$i18|0)==(3);
    if ($exitcond$i$i$i19) {
     break;
    }
    $111 = (($7) + ($__i$0$i$i$i18<<2)|0);
    HEAP32[$111>>2] = 0;
    $112 = (($__i$0$i$i$i18) + 1)|0;
    $__i$0$i$i$i18 = $112;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  } else {
   $113 = ((($94)) + 40|0);
   $114 = HEAP32[$113>>2]|0;
   FUNCTION_TABLE_vii[$114 & 1023]($8,$93);
   $115 = HEAP32[$8>>2]|0;
   HEAP8[$__pat>>0]=$115&255;HEAP8[$__pat+1>>0]=($115>>8)&255;HEAP8[$__pat+2>>0]=($115>>16)&255;HEAP8[$__pat+3>>0]=$115>>24;
   $116 = HEAP32[$93>>2]|0;
   $117 = ((($116)) + 28|0);
   $118 = HEAP32[$117>>2]|0;
   FUNCTION_TABLE_vii[$118 & 1023]($9,$93);
   $119 = HEAP8[$__sn>>0]|0;
   $120 = $119 & 1;
   $121 = ($120<<24>>24)==(0);
   if ($121) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $122 = ((($__sn)) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    HEAP32[$123>>2] = 0;
   }
   $124 = ((($__sn)) + 4|0);
   HEAP32[$124>>2] = 0;
   __THREW__ = 0;
   invoke_vii(510,($__sn|0),0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    $127 = ___cxa_find_matching_catch_3(0|0)|0;
    $128 = tempRet0;
    ___clang_call_terminate($127);
    // unreachable;
   }
   ;HEAP32[$__sn>>2]=HEAP32[$9>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   $__i$0$i$i$i23 = 0;
   while(1) {
    $exitcond$i$i$i24 = ($__i$0$i$i$i23|0)==(3);
    if ($exitcond$i$i$i24) {
     break;
    }
    $129 = (($9) + ($__i$0$i$i$i23<<2)|0);
    HEAP32[$129>>2] = 0;
    $130 = (($__i$0$i$i$i23) + 1)|0;
    $__i$0$i$i$i23 = $130;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  }
  $131 = HEAP32[$93>>2]|0;
  $132 = ((($131)) + 12|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (FUNCTION_TABLE_ii[$133 & 1023]($93)|0);
  HEAP32[$__dp>>2] = $134;
  $135 = HEAP32[$93>>2]|0;
  $136 = ((($135)) + 16|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (FUNCTION_TABLE_ii[$137 & 1023]($93)|0);
  HEAP32[$__ts>>2] = $138;
  $139 = HEAP32[$93>>2]|0;
  $140 = ((($139)) + 20|0);
  $141 = HEAP32[$140>>2]|0;
  FUNCTION_TABLE_vii[$141 & 1023]($10,$93);
  $142 = HEAP8[$__grp>>0]|0;
  $143 = $142 & 1;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $148 = ((($__grp)) + 1|0);
   HEAP8[$148>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $145 = ((($__grp)) + 8|0);
   $146 = HEAP32[$145>>2]|0;
   HEAP8[$146>>0] = 0;
   $147 = ((($__grp)) + 4|0);
   HEAP32[$147>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(368,($__grp|0),0);
  $149 = __THREW__; __THREW__ = 0;
  $150 = $149&1;
  if ($150) {
   $151 = ___cxa_find_matching_catch_3(0|0)|0;
   $152 = tempRet0;
   ___clang_call_terminate($151);
   // unreachable;
  }
  ;HEAP32[$__grp>>2]=HEAP32[$10>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  $__i$0$i$i$i28 = 0;
  while(1) {
   $exitcond$i$i$i29 = ($__i$0$i$i$i28|0)==(3);
   if ($exitcond$i$i$i29) {
    break;
   }
   $153 = (($10) + ($__i$0$i$i$i28<<2)|0);
   HEAP32[$153>>2] = 0;
   $154 = (($__i$0$i$i$i28) + 1)|0;
   $__i$0$i$i$i28 = $154;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $155 = HEAP32[$93>>2]|0;
  $156 = ((($155)) + 24|0);
  $157 = HEAP32[$156>>2]|0;
  FUNCTION_TABLE_vii[$157 & 1023]($11,$93);
  $158 = HEAP8[$__sym>>0]|0;
  $159 = $158 & 1;
  $160 = ($159<<24>>24)==(0);
  if ($160) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $161 = ((($__sym)) + 8|0);
   $162 = HEAP32[$161>>2]|0;
   HEAP32[$162>>2] = 0;
  }
  $163 = ((($__sym)) + 4|0);
  HEAP32[$163>>2] = 0;
  __THREW__ = 0;
  invoke_vii(510,($__sym|0),0);
  $164 = __THREW__; __THREW__ = 0;
  $165 = $164&1;
  if ($165) {
   $166 = ___cxa_find_matching_catch_3(0|0)|0;
   $167 = tempRet0;
   ___clang_call_terminate($166);
   // unreachable;
  }
  ;HEAP32[$__sym>>2]=HEAP32[$11>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  $__i$0$i$i$i33 = 0;
  while(1) {
   $exitcond$i$i$i34 = ($__i$0$i$i$i33|0)==(3);
   if ($exitcond$i$i$i34) {
    break;
   }
   $168 = (($11) + ($__i$0$i$i$i33<<2)|0);
   HEAP32[$168>>2] = 0;
   $169 = (($__i$0$i$i$i33) + 1)|0;
   $__i$0$i$i$i33 = $169;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $170 = HEAP32[$93>>2]|0;
  $171 = ((($170)) + 36|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (FUNCTION_TABLE_ii[$172 & 1023]($93)|0);
  $storemerge = $173;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i2 = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$2 = 0, $$lcssa34 = 0, $$lcssa35 = 0, $$pre27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $exitcond = 0, $or$cond = 0, $scevgep$i = 0;
 var $scevgep$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = ((($__sn)) + 4|0);
 $1 = ((($__sn)) + 8|0);
 $2 = ((($__sym)) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = ((($__sym)) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = ((($__grp)) + 4|0);
 $8 = ((($__grp)) + 8|0);
 $9 = ((($__grp)) + 1|0);
 $$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $18 = (($__pat) + ($__p$0)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  L4: do {
   switch ($20|0) {
   case 0:  {
    $21 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $21;
    $$2 = $$0;
    break;
   }
   case 1:  {
    $22 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $22;
    $23 = HEAP32[$__ct>>2]|0;
    $24 = ((($23)) + 44|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (FUNCTION_TABLE_iii[$25 & 511]($__ct,32)|0);
    $27 = HEAP32[$__me>>2]|0;
    $28 = ((($27)) + 4|0);
    HEAP32[$__me>>2] = $28;
    HEAP32[$27>>2] = $26;
    $$2 = $$0;
    break;
   }
   case 3:  {
    $29 = HEAP8[$__sn>>0]|0;
    $30 = $29 & 1;
    $31 = ($30<<24>>24)==(0);
    $32 = HEAP32[$0>>2]|0;
    $33 = $29&255;
    $34 = $33 >>> 1;
    $35 = $31 ? $34 : $32;
    $36 = ($35|0)==(0);
    if ($36) {
     $$2 = $$0;
    } else {
     $37 = HEAP32[$1>>2]|0;
     $38 = $31 ? $0 : $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = HEAP32[$__me>>2]|0;
     $41 = ((($40)) + 4|0);
     HEAP32[$__me>>2] = $41;
     HEAP32[$40>>2] = $39;
     $$2 = $$0;
    }
    break;
   }
   case 2:  {
    $42 = HEAP8[$__sym>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    $45 = HEAP32[$2>>2]|0;
    $46 = $42&255;
    $47 = $46 >>> 1;
    $48 = $44 ? $47 : $45;
    $49 = ($48|0)==(0);
    $or$cond = $4 | $49;
    if ($or$cond) {
     $$2 = $$0;
    } else {
     $50 = HEAP32[$5>>2]|0;
     $51 = $44 ? $2 : $50;
     $52 = (($51) + ($48<<2)|0);
     $53 = HEAP32[$__me>>2]|0;
     $$0$i$i6 = $53;$54 = $51;
     while(1) {
      $55 = ($54|0)==($52|0);
      if ($55) {
       break;
      }
      $56 = HEAP32[$54>>2]|0;
      HEAP32[$$0$i$i6>>2] = $56;
      $57 = ((($54)) + 4|0);
      $58 = ((($$0$i$i6)) + 4|0);
      $$0$i$i6 = $58;$54 = $57;
     }
     $scevgep$i7 = (($53) + ($48<<2)|0);
     HEAP32[$__me>>2] = $scevgep$i7;
     $$2 = $$0;
    }
    break;
   }
   case 4:  {
    $59 = HEAP32[$__me>>2]|0;
    $60 = ((($$0)) + 4|0);
    $$$0 = $__neg ? $60 : $$0;
    $__d$0 = $$$0;
    while(1) {
     $61 = ($__d$0>>>0)<($__de>>>0);
     if (!($61)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $62 = HEAP32[$__d$0>>2]|0;
     $63 = HEAP32[$__ct>>2]|0;
     $64 = ((($63)) + 12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (FUNCTION_TABLE_iiii[$65 & 1023]($__ct,2048,$62)|0);
     if (!($66)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $67 = ((($__d$0)) + 4|0);
     $__d$0 = $67;
    }
    if ($6) {
     $__d$1 = $__d$0$lcssa;$__f$0 = $__fd;
     while(1) {
      $68 = ($__d$1>>>0)>($$$0>>>0);
      $69 = ($__f$0|0)>(0);
      $70 = $68 & $69;
      if (!($70)) {
       break;
      }
      $71 = ((($__d$1)) + -4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = HEAP32[$__me>>2]|0;
      $74 = ((($73)) + 4|0);
      HEAP32[$__me>>2] = $74;
      HEAP32[$73>>2] = $72;
      $75 = (($__f$0) + -1)|0;
      $__d$1 = $71;$__f$0 = $75;
     }
     if ($69) {
      $76 = HEAP32[$__ct>>2]|0;
      $77 = ((($76)) + 44|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (FUNCTION_TABLE_iii[$78 & 511]($__ct,48)|0);
      $83 = $79;
     } else {
      $83 = 0;
     }
     $__me$promoted = HEAP32[$__me>>2]|0;
     $82 = $__me$promoted;$__f$1 = $__f$0;
     while(1) {
      $80 = ($__f$1|0)>(0);
      $81 = ((($82)) + 4|0);
      if (!($80)) {
       $$lcssa34 = $82;$$lcssa35 = $81;
       break;
      }
      HEAP32[$82>>2] = $83;
      $84 = (($__f$1) + -1)|0;
      $82 = $81;$__f$1 = $84;
     }
     HEAP32[$__me>>2] = $$lcssa35;
     HEAP32[$$lcssa34>>2] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $85 = ($__d$2|0)==($$$0|0);
    if ($85) {
     $86 = HEAP32[$__ct>>2]|0;
     $87 = ((($86)) + 44|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (FUNCTION_TABLE_iii[$88 & 511]($__ct,48)|0);
     $90 = HEAP32[$__me>>2]|0;
     $91 = ((($90)) + 4|0);
     HEAP32[$__me>>2] = $91;
     HEAP32[$90>>2] = $89;
     $128 = $91;
    } else {
     $92 = HEAP8[$__grp>>0]|0;
     $93 = $92 & 1;
     $94 = ($93<<24>>24)==(0);
     $95 = HEAP32[$7>>2]|0;
     $96 = $92&255;
     $97 = $96 >>> 1;
     $98 = $94 ? $97 : $95;
     $99 = ($98|0)==(0);
     if ($99) {
      $__d$3 = $__d$2;$__gl$0 = -1;$__ig$0 = 0;$__ng$0 = 0;
     } else {
      $100 = HEAP32[$8>>2]|0;
      $101 = $94 ? $9 : $100;
      $102 = HEAP8[$101>>0]|0;
      $103 = $102 << 24 >> 24;
      $__d$3 = $__d$2;$__gl$0 = $103;$__ig$0 = 0;$__ng$0 = 0;
     }
     while(1) {
      $104 = ($__d$3|0)==($$$0|0);
      if ($104) {
       break;
      }
      $105 = ($__ng$0|0)==($__gl$0|0);
      $106 = HEAP32[$__me>>2]|0;
      if ($105) {
       $107 = ((($106)) + 4|0);
       HEAP32[$__me>>2] = $107;
       HEAP32[$106>>2] = $__ts;
       $108 = (($__ig$0) + 1)|0;
       $109 = HEAP8[$__grp>>0]|0;
       $110 = $109 & 1;
       $111 = ($110<<24>>24)==(0);
       $112 = $109&255;
       $113 = $112 >>> 1;
       $114 = $111 ? $113 : $95;
       $115 = ($108>>>0)<($114>>>0);
       if ($115) {
        $116 = HEAP32[$8>>2]|0;
        $117 = $111 ? $9 : $116;
        $118 = (($117) + ($108)|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = ($119<<24>>24)==(127);
        $121 = $119 << 24 >> 24;
        $$ = $120 ? -1 : $121;
        $125 = $107;$__gl$1 = $$;$__ig$1 = $108;$__ng$1 = 0;
       } else {
        $125 = $107;$__gl$1 = $__ng$0;$__ig$1 = $108;$__ng$1 = 0;
       }
      } else {
       $125 = $106;$__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
      }
      $122 = ((($__d$3)) + -4|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($125)) + 4|0);
      HEAP32[$__me>>2] = $124;
      HEAP32[$125>>2] = $123;
      $126 = (($__ng$1) + 1)|0;
      $__d$3 = $122;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $126;
     }
     $$pre27 = HEAP32[$__me>>2]|0;
     $128 = $$pre27;
    }
    $127 = ($59|0)==($128|0);
    if ($127) {
     $$2 = $$$0;
    } else {
     $$0$i$i2 = $128;$$01$i$i = $59;
     while(1) {
      $129 = ((($$0$i$i2)) + -4|0);
      $130 = ($$01$i$i>>>0)<($129>>>0);
      if (!($130)) {
       $$2 = $$$0;
       break L4;
      }
      $131 = HEAP32[$$01$i$i>>2]|0;
      $132 = HEAP32[$129>>2]|0;
      HEAP32[$$01$i$i>>2] = $132;
      HEAP32[$129>>2] = $131;
      $133 = ((($$01$i$i)) + 4|0);
      $$0$i$i2 = $129;$$01$i$i = $133;
     }
    }
    break;
   }
   default: {
    $$2 = $$0;
   }
   }
  } while(0);
  $134 = (($__p$0) + 1)|0;
  $$0 = $$2;$__p$0 = $134;
 }
 $10 = HEAP8[$__sn>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 $13 = HEAP32[$0>>2]|0;
 $14 = $10&255;
 $15 = $14 >>> 1;
 $16 = $12 ? $15 : $13;
 $17 = ($16>>>0)>(1);
 if ($17) {
  $135 = HEAP32[$1>>2]|0;
  $136 = $12 ? $0 : $135;
  $137 = ((($136)) + 4|0);
  $138 = (($136) + ($16<<2)|0);
  $139 = HEAP32[$__me>>2]|0;
  $140 = $137;
  $141 = $138;
  $142 = (($141) - ($140))|0;
  $$0$i$i = $139;$143 = $137;
  while(1) {
   $144 = ($143|0)==($138|0);
   if ($144) {
    break;
   }
   $145 = HEAP32[$143>>2]|0;
   HEAP32[$$0$i$i>>2] = $145;
   $146 = ((($143)) + 4|0);
   $147 = ((($$0$i$i)) + 4|0);
   $$0$i$i = $147;$143 = $146;
  }
  $148 = $142 >>> 2;
  $scevgep$i = (($139) + ($148<<2)|0);
  HEAP32[$__me>>2] = $scevgep$i;
 }
 $149 = $__flags & 176;
 switch ($149|0) {
 case 32:  {
  $150 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $150;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$__mi>>2] = $__mb;
 }
 }
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $$pre18$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0;
 var $__h$sroa$0$0 = 0, $__h$sroa$0$1 = 0, $__i$0$i$i = 0, $__i$0$i$i3 = 0, $__i$0$i$i5 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i4 = 0, $exitcond$i$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 468|0;
 $__loc = sp + 464|0;
 $__pat = sp + 472|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 $1 = (__ZNKSt3__18ios_base6getlocEv($__iob)|0);
 HEAP32[$__loc>>2] = $1;
 __THREW__ = 0;
 $2 = (invoke_iii(346,($__loc|0),(18852|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 22;
  } else {
   $5 = HEAP8[$__digits>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   $8 = ((($__digits)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5&255;
   $11 = $10 >>> 1;
   $12 = $7 ? $11 : $9;
   $13 = ($12|0)==(0);
   if ($13) {
    $31 = 0;
   } else {
    $14 = ((($__digits)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $7 ? $8 : $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$2>>2]|0;
    $19 = ((($18)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($2|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 22;
     break;
    }
    $24 = ($17|0)==($21|0);
    $31 = $24;
   }
   $__i$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($__i$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $25 = (($__grp) + ($__i$0$i$i<<2)|0);
    HEAP32[$25>>2] = 0;
    $26 = (($__i$0$i$i) + 1)|0;
    $__i$0$i$i = $26;
   }
   $__i$0$i$i3 = 0;
   while(1) {
    $exitcond$i$i4 = ($__i$0$i$i3|0)==(3);
    if ($exitcond$i$i4) {
     break;
    }
    $27 = (($__sym) + ($__i$0$i$i3<<2)|0);
    HEAP32[$27>>2] = 0;
    $28 = (($__i$0$i$i3) + 1)|0;
    $__i$0$i$i3 = $28;
   }
   $__i$0$i$i5 = 0;
   while(1) {
    $exitcond$i$i6 = ($__i$0$i$i5|0)==(3);
    if ($exitcond$i$i6) {
     break;
    }
    $29 = (($__sn) + ($__i$0$i$i5<<2)|0);
    HEAP32[$29>>2] = 0;
    $30 = (($__i$0$i$i5) + 1)|0;
    $__i$0$i$i5 = $30;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(514,($__intl|0),($31|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $94 = ___cxa_find_matching_catch_2()|0;
    $95 = tempRet0;
    $$0 = $94;$$01 = $95;$$pre18 = $1;
   } else {
    $34 = HEAP8[$__digits>>0]|0;
    $35 = $34 & 1;
    $36 = ($35<<24>>24)==(0);
    $37 = HEAP32[$8>>2]|0;
    $38 = $34&255;
    $39 = $38 >>> 1;
    $40 = $36 ? $39 : $37;
    $41 = HEAP32[$__fd>>2]|0;
    $42 = ($40|0)>($41|0);
    if ($42) {
     $43 = (($40) - ($41))|0;
     $44 = $43 << 1;
     $45 = HEAP8[$__sn>>0]|0;
     $46 = $45 & 1;
     $47 = ($46<<24>>24)==(0);
     $48 = ((($__sn)) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $45&255;
     $51 = $50 >>> 1;
     $52 = $47 ? $51 : $49;
     $53 = HEAP8[$__sym>>0]|0;
     $54 = $53 & 1;
     $55 = ($54<<24>>24)==(0);
     $56 = ((($__sym)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $53&255;
     $59 = $58 >>> 1;
     $60 = $55 ? $59 : $57;
     $61 = $44 | 1;
     $62 = (($61) + ($41))|0;
     $63 = (($62) + ($52))|0;
     $64 = (($63) + ($60))|0;
     $84 = $64;
    } else {
     $65 = HEAP8[$__sn>>0]|0;
     $66 = $65 & 1;
     $67 = ($66<<24>>24)==(0);
     $68 = ((($__sn)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $65&255;
     $71 = $70 >>> 1;
     $72 = $67 ? $71 : $69;
     $73 = HEAP8[$__sym>>0]|0;
     $74 = $73 & 1;
     $75 = ($74<<24>>24)==(0);
     $76 = ((($__sym)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $73&255;
     $79 = $78 >>> 1;
     $80 = $75 ? $79 : $77;
     $81 = (($41) + 2)|0;
     $82 = (($81) + ($72))|0;
     $83 = (($82) + ($80))|0;
     $84 = $83;
    }
    $85 = ($84>>>0)>(100);
    if ($85) {
     $86 = $84 << 2;
     $87 = (_malloc($86)|0);
     $88 = $87;
     $89 = ($87|0)==(0|0);
     if ($89) {
      __THREW__ = 0;
      invoke_v(458);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       $__h$sroa$0$0 = $88;
      } else {
       $$pre = HEAP8[$__digits>>0]|0;
       $$pre17 = HEAP32[$8>>2]|0;
       $103 = $$pre;$110 = $$pre17;$__h$sroa$0$1 = $88;$__mb$0 = 0;
       label = 26;
      }
     } else {
      $103 = $34;$110 = $37;$__h$sroa$0$1 = $88;$__mb$0 = $87;
      label = 26;
     }
    } else {
     $103 = $34;$110 = $37;$__h$sroa$0$1 = 0;$__mb$0 = $__mbuf;
     label = 26;
    }
    if ((label|0) == 26) {
     $100 = ((($__iob)) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $103 & 1;
     $104 = ($102<<24>>24)==(0);
     $105 = ((($__digits)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $104 ? $8 : $106;
     $108 = $103&255;
     $109 = $108 >>> 1;
     $111 = $104 ? $109 : $110;
     $112 = (($107) + ($111<<2)|0);
     $113 = HEAP32[$__dp>>2]|0;
     $114 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(515,($__mb$0|0),($__mi|0),($__me|0),($101|0),($107|0),($112|0),($2|0),($31|0),($__pat|0),($113|0),($114|0),($__grp|0),($__sym|0),($__sn|0),($41|0));
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      $__h$sroa$0$0 = $__h$sroa$0$1;
     } else {
      $117 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $117;
      $118 = HEAP32[$__mi>>2]|0;
      $119 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      $120 = (invoke_iiiiiii(483,($$byval_copy|0),($__mb$0|0),($118|0),($119|0),($__iob|0),($__fl|0))|0);
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if ($122) {
       $__h$sroa$0$0 = $__h$sroa$0$1;
      } else {
       $123 = ($__h$sroa$0$1|0)==(0);
       if ($123) {
        $125 = $1;
       } else {
        $124 = $__h$sroa$0$1;
        _free($124);
        $$pre20 = HEAP32[$__loc>>2]|0;
        $125 = $$pre20;
       }
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
       (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
       STACKTOP = sp;return ($120|0);
      }
     }
    }
    $96 = ___cxa_find_matching_catch_2()|0;
    $97 = tempRet0;
    $98 = ($__h$sroa$0$0|0)==(0);
    if ($98) {
     $$0 = $96;$$01 = $97;$$pre18 = $1;
    } else {
     $99 = $__h$sroa$0$0;
     _free($99);
     $$pre18$pre = HEAP32[$__loc>>2]|0;
     $$0 = $96;$$01 = $97;$$pre18 = $$pre18$pre;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
   $$1 = $$0;$$12 = $$01;$126 = $$pre18;
  }
 } while(0);
 if ((label|0) == 22) {
  $92 = ___cxa_find_matching_catch_2()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;$126 = $1;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($126)|0);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i = 0, $$0$i8 = 0, $$02 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i = 0, $__i$0$i$i4 = 0, $__ndflt = 0, $exitcond$i$i = 0, $exitcond$i$i5 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__dflt>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 $5 = ((($__dflt)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($__dflt)) + 1|0);
 $8 = $4 ? $7 : $6;
 $9 = ((($__dflt)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2&255;
 $12 = $11 >>> 1;
 $13 = $4 ? $12 : $10;
 $14 = (($8) + ($13)|0);
 $$0$i8 = $8;
 while(1) {
  $15 = ($$0$i8>>>0)<($14>>>0);
  if (!($15)) {
   label = 8;
   break;
  }
  $16 = HEAP8[$$0$i8>>0]|0;
  __THREW__ = 0;
  invoke_vii(501,($__ndflt|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   label = 9;
   break;
  }
  $19 = ((($$0$i8)) + 1|0);
  $$0$i8 = $19;
 }
 do {
  if ((label|0) == 8) {
   $20 = ($__c|0)==(-1);
   $21 = $__c << 1;
   $22 = $21;
   $23 = $20 ? (-1) : $22;
   $24 = HEAP8[$__ndflt>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   $27 = ((($__ndflt)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($__ndflt)) + 1|0);
   $30 = $26 ? $29 : $28;
   __THREW__ = 0;
   $31 = (invoke_iiiii(516,($23|0),($__set|0),($__msgid|0),($30|0))|0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $36 = ___cxa_find_matching_catch_2()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    label = 11;
    break;
   }
   $__i$0$i$i4 = 0;
   while(1) {
    $exitcond$i$i5 = ($__i$0$i$i4|0)==(3);
    if ($exitcond$i$i5) {
     break;
    }
    $38 = (($agg$result) + ($__i$0$i$i4<<2)|0);
    HEAP32[$38>>2] = 0;
    $39 = (($__i$0$i$i4) + 1)|0;
    $__i$0$i$i4 = $39;
   }
   $40 = (_strlen($31)|0);
   $41 = (($31) + ($40)|0);
   $$0$i = $31;
   while(1) {
    $42 = ($$0$i>>>0)<($41>>>0);
    if (!($42)) {
     label = 20;
     break;
    }
    $43 = HEAP8[$$0$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(501,($agg$result|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     label = 19;
     break;
    }
    $46 = ((($$0$i)) + 1|0);
    $$0$i = $46;
   }
   if ((label|0) == 19) {
    $47 = ___cxa_find_matching_catch_2()|0;
    $48 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
    $$02 = $47;$$03 = $48;
    break;
   }
   else if ((label|0) == 20) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
    STACKTOP = sp;return;
   }
  }
  else if ((label|0) == 9) {
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $lpad$phi$index = $34;$lpad$phi$index2 = $35;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $$02 = $lpad$phi$index;$$03 = $lpad$phi$index2;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($__nm)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($__nm)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i = 0, $$0$i14 = 0, $$1 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $__bn$i = 0, $__bn$i12 = 0, $__buf$i = 0, $__buf$i11 = 0, $__i$0$i$i = 0, $__i$0$i$i8 = 0, $__mb$i = 0, $__mb$i10 = 0, $__ndflt = 0, $__nn$i = 0, $__p$0$i = 0, $__p$0$i16 = 0, $__r$0$i = 0, $__r$0$i13 = 0, $__wn$i = 0, $exitcond$i$i = 0, $exitcond$i$i9 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index10 = 0, $lpad$phi30$index = 0, $lpad$phi30$index3 = 0, $or$cond$i = 0, $or$cond$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i10 = sp + 184|0;
 $__buf$i11 = sp + 192|0;
 $__bn$i12 = sp + 180|0;
 $__wn$i = sp + 176|0;
 $__mb$i = sp + 168|0;
 $__buf$i = sp + 40|0;
 $__bn$i = sp + 32|0;
 $__nn$i = sp + 28|0;
 $__ndflt = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $3;
 }
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = (8304);
 $5 = HEAP8[$__dflt>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 $8 = ((($__dflt)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($__dflt)) + 4|0);
 $11 = $7 ? $10 : $9;
 $12 = HEAP32[$10>>2]|0;
 $13 = $5&255;
 $14 = $13 >>> 1;
 $15 = $7 ? $14 : $12;
 $16 = (($11) + ($15<<2)|0);
 $17 = ((($__buf$i11)) + 32|0);
 $$0$i14 = $11;$__r$0$i13 = 0;
 L5: while(1) {
  $18 = ($$0$i14>>>0)<($16>>>0);
  $19 = ($__r$0$i13|0)!=(2);
  $20 = $19 & $18;
  if (!($20)) {
   label = 13;
   break;
  }
  HEAP32[$__wn$i>>2] = $$0$i14;
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  __THREW__ = 0;
  $24 = (invoke_iiiiiiiii($23|0,($0|0),($__mb$i10|0),($$0$i14|0),($16|0),($__wn$i|0),($__buf$i11|0),($17|0),($__bn$i12|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   label = 16;
   break;
  }
  $27 = ($24|0)==(2);
  $28 = HEAP32[$__wn$i>>2]|0;
  $29 = ($28|0)==($$0$i14|0);
  $or$cond$i15 = $27 | $29;
  if ($or$cond$i15) {
   label = 8;
   break;
  } else {
   $__p$0$i16 = $__buf$i11;
  }
  while(1) {
   $33 = HEAP32[$__bn$i12>>2]|0;
   $34 = ($__p$0$i16>>>0)<($33>>>0);
   if (!($34)) {
    break;
   }
   $36 = HEAP8[$__p$0$i16>>0]|0;
   __THREW__ = 0;
   invoke_vii(501,($__ndflt|0),($36|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    label = 15;
    break L5;
   }
   $39 = ((($__p$0$i16)) + 1|0);
   $__p$0$i16 = $39;
  }
  $35 = HEAP32[$__wn$i>>2]|0;
  $$0$i14 = $35;$__r$0$i13 = $24;
 }
 do {
  if ((label|0) == 8) {
   __THREW__ = 0;
   invoke_vi(499,(15586|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = ___cxa_find_matching_catch_2()|0;
   $32 = tempRet0;
   $lpad$phi30$index = $31;$lpad$phi30$index3 = $32;
   label = 17;
  }
  else if ((label|0) == 13) {
   $40 = ($__c|0)==(-1);
   $41 = $__c << 1;
   $42 = $41;
   $43 = $40 ? (-1) : $42;
   $44 = HEAP8[$__ndflt>>0]|0;
   $45 = $44 & 1;
   $46 = ($45<<24>>24)==(0);
   $47 = ((($__ndflt)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($__ndflt)) + 1|0);
   $50 = $46 ? $49 : $48;
   __THREW__ = 0;
   $51 = (invoke_iiiii(516,($43|0),($__set|0),($__msgid|0),($50|0))|0);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $54 = ___cxa_find_matching_catch_2()|0;
    $55 = tempRet0;
    $$1 = $54;$$14 = $55;
    break;
   }
   $__i$0$i$i8 = 0;
   while(1) {
    $exitcond$i$i9 = ($__i$0$i$i8|0)==(3);
    if ($exitcond$i$i9) {
     break;
    }
    $60 = (($agg$result) + ($__i$0$i$i8<<2)|0);
    HEAP32[$60>>2] = 0;
    $61 = (($__i$0$i$i8) + 1)|0;
    $__i$0$i$i8 = $61;
   }
   $62 = ((($1)) + 4|0);
   HEAP32[$62>>2] = 0;
   HEAP32[$1>>2] = (8352);
   $63 = (_strlen($51)|0);
   $64 = (($51) + ($63)|0);
   $65 = $64;
   $66 = ((($__buf$i)) + 128|0);
   $$0$i = $51;$__r$0$i = 0;
   L23: while(1) {
    $67 = ($$0$i>>>0)<($64>>>0);
    $68 = ($__r$0$i|0)!=(2);
    $69 = $68 & $67;
    if (!($69)) {
     label = 30;
     break;
    }
    HEAP32[$__nn$i>>2] = $$0$i;
    $70 = HEAP32[$1>>2]|0;
    $71 = ((($70)) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $$0$i;
    $74 = (($65) - ($73))|0;
    $75 = ($74|0)>(32);
    $76 = ((($$0$i)) + 32|0);
    $77 = $75 ? $76 : $64;
    __THREW__ = 0;
    $78 = (invoke_iiiiiiiii($72|0,($1|0),($__mb$i|0),($$0$i|0),($77|0),($__nn$i|0),($__buf$i|0),($66|0),($__bn$i|0))|0);
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     label = 32;
     break;
    }
    $81 = ($78|0)==(2);
    $82 = HEAP32[$__nn$i>>2]|0;
    $83 = ($82|0)==($$0$i|0);
    $or$cond$i = $81 | $83;
    if ($or$cond$i) {
     label = 25;
     break;
    } else {
     $__p$0$i = $__buf$i;
    }
    while(1) {
     $87 = HEAP32[$__bn$i>>2]|0;
     $88 = ($__p$0$i>>>0)<($87>>>0);
     if (!($88)) {
      break;
     }
     $90 = HEAP32[$__p$0$i>>2]|0;
     __THREW__ = 0;
     invoke_vii(508,($agg$result|0),($90|0));
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 31;
      break L23;
     }
     $93 = ((($__p$0$i)) + 4|0);
     $__p$0$i = $93;
    }
    $89 = HEAP32[$__nn$i>>2]|0;
    $$0$i = $89;$__r$0$i = $78;
   }
   if ((label|0) == 25) {
    __THREW__ = 0;
    invoke_vi(499,(15586|0));
    $84 = __THREW__; __THREW__ = 0;
    $85 = ___cxa_find_matching_catch_2()|0;
    $86 = tempRet0;
    $lpad$phi$index = $85;$lpad$phi$index10 = $86;
   }
   else if ((label|0) == 30) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 31) {
    $94 = ___cxa_find_matching_catch_2()|0;
    $95 = tempRet0;
    $lpad$phi$index = $94;$lpad$phi$index10 = $95;
   }
   else if ((label|0) == 32) {
    $96 = ___cxa_find_matching_catch_2()|0;
    $97 = tempRet0;
    $lpad$phi$index = $96;$lpad$phi$index10 = $97;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$result);
   $$1 = $lpad$phi$index;$$14 = $lpad$phi$index10;
  }
  else if ((label|0) == 15) {
   $56 = ___cxa_find_matching_catch_2()|0;
   $57 = tempRet0;
   $lpad$phi30$index = $56;$lpad$phi30$index3 = $57;
   label = 17;
  }
  else if ((label|0) == 16) {
   $58 = ___cxa_find_matching_catch_2()|0;
   $59 = tempRet0;
   $lpad$phi30$index = $58;$lpad$phi30$index3 = $59;
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $$1 = $lpad$phi30$index;$$14 = $lpad$phi30$index3;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$2 = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre2 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre2) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$2 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $10 = $$pre;
   while(1) {
    $11 = ($10>>>0)<($frm_end>>>0);
    if (!($11)) {
     $$2 = 0;
     break L4;
    }
    $12 = HEAP32[$10>>2]|0;
    $13 = $12 & -2048;
    $14 = ($13|0)==(55296);
    $15 = ($12>>>0)>($Maxcode>>>0);
    $or$cond = $15 | $14;
    if ($or$cond) {
     $$2 = 2;
     break L4;
    }
    $16 = ($12>>>0)<(128);
    do {
     if ($16) {
      $17 = HEAP32[$to_nxt>>2]|0;
      $18 = $17;
      $19 = (($$pre2) - ($18))|0;
      $20 = ($19|0)<(1);
      if ($20) {
       $$2 = 1;
       break L4;
      }
      $21 = $12&255;
      $22 = ((($17)) + 1|0);
      HEAP32[$to_nxt>>2] = $22;
      HEAP8[$17>>0] = $21;
     } else {
      $23 = ($12>>>0)<(2048);
      if ($23) {
       $24 = HEAP32[$to_nxt>>2]|0;
       $25 = $24;
       $26 = (($$pre2) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $$2 = 1;
        break L4;
       }
       $28 = $12 >>> 6;
       $29 = $28 | 192;
       $30 = $29&255;
       $31 = ((($24)) + 1|0);
       HEAP32[$to_nxt>>2] = $31;
       HEAP8[$24>>0] = $30;
       $32 = $12 & 63;
       $33 = $32 | 128;
       $34 = $33&255;
       $35 = HEAP32[$to_nxt>>2]|0;
       $36 = ((($35)) + 1|0);
       HEAP32[$to_nxt>>2] = $36;
       HEAP8[$35>>0] = $34;
       break;
      }
      $37 = ($12>>>0)<(65536);
      $38 = HEAP32[$to_nxt>>2]|0;
      $39 = $38;
      $40 = (($$pre2) - ($39))|0;
      if ($37) {
       $41 = ($40|0)<(3);
       if ($41) {
        $$2 = 1;
        break L4;
       }
       $42 = $12 >>> 12;
       $43 = $42 | 224;
       $44 = $43&255;
       $45 = ((($38)) + 1|0);
       HEAP32[$to_nxt>>2] = $45;
       HEAP8[$38>>0] = $44;
       $46 = $12 >>> 6;
       $47 = $46 & 63;
       $48 = $47 | 128;
       $49 = $48&255;
       $50 = HEAP32[$to_nxt>>2]|0;
       $51 = ((($50)) + 1|0);
       HEAP32[$to_nxt>>2] = $51;
       HEAP8[$50>>0] = $49;
       $52 = $12 & 63;
       $53 = $52 | 128;
       $54 = $53&255;
       $55 = HEAP32[$to_nxt>>2]|0;
       $56 = ((($55)) + 1|0);
       HEAP32[$to_nxt>>2] = $56;
       HEAP8[$55>>0] = $54;
       break;
      } else {
       $57 = ($40|0)<(4);
       if ($57) {
        $$2 = 1;
        break L4;
       }
       $58 = $12 >>> 18;
       $59 = $58 | 240;
       $60 = $59&255;
       $61 = ((($38)) + 1|0);
       HEAP32[$to_nxt>>2] = $61;
       HEAP8[$38>>0] = $60;
       $62 = $12 >>> 12;
       $63 = $62 & 63;
       $64 = $63 | 128;
       $65 = $64&255;
       $66 = HEAP32[$to_nxt>>2]|0;
       $67 = ((($66)) + 1|0);
       HEAP32[$to_nxt>>2] = $67;
       HEAP8[$66>>0] = $65;
       $68 = $12 >>> 6;
       $69 = $68 & 63;
       $70 = $69 | 128;
       $71 = $70&255;
       $72 = HEAP32[$to_nxt>>2]|0;
       $73 = ((($72)) + 1|0);
       HEAP32[$to_nxt>>2] = $73;
       HEAP8[$72>>0] = $71;
       $74 = $12 & 63;
       $75 = $74 | 128;
       $76 = $75&255;
       $77 = HEAP32[$to_nxt>>2]|0;
       $78 = ((($77)) + 1|0);
       HEAP32[$to_nxt>>2] = $78;
       HEAP8[$77>>0] = $76;
       break;
      }
     }
    } while(0);
    $79 = HEAP32[$frm_nxt>>2]|0;
    $80 = ((($79)) + 4|0);
    HEAP32[$frm_nxt>>2] = $80;
    $10 = $80;
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$9 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = $frm_end;
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$phiZ2D = $3;
     } else {
      $$pre$phiZ2D = $3;
     }
    } else {
     $$pre$phiZ2D = $3;
    }
   } else {
    $$pre$phiZ2D = $3;
   }
  } else {
   $$pre$phiZ2D = $3;
  }
 }
 L9: while(1) {
  $16 = HEAP32[$frm_nxt>>2]|0;
  $17 = ($16>>>0)<($frm_end>>>0);
  if (!($17)) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $18 = HEAP32[$to_nxt>>2]|0;
  $19 = ($18>>>0)<($to_end>>>0);
  if (!($19)) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $20 = HEAP8[$16>>0]|0;
  $21 = $20&255;
  $22 = ($20<<24>>24)>(-1);
  do {
   if ($22) {
    $23 = ($21>>>0)>($Maxcode>>>0);
    if ($23) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$18>>2] = $21;
    $24 = ((($16)) + 1|0);
    HEAP32[$frm_nxt>>2] = $24;
   } else {
    $25 = ($20&255)<(194);
    if ($25) {
     $$9 = 2;
     break L9;
    }
    $26 = ($20&255)<(224);
    if ($26) {
     $27 = $16;
     $28 = (($$pre$phiZ2D) - ($27))|0;
     $29 = ($28|0)<(2);
     if ($29) {
      $$9 = 1;
      break L9;
     }
     $30 = ((($16)) + 1|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $32 & 192;
     $34 = ($33|0)==(128);
     if (!($34)) {
      $$9 = 2;
      break L9;
     }
     $35 = $21 << 6;
     $36 = $35 & 1984;
     $37 = $32 & 63;
     $38 = $37 | $36;
     $39 = ($38>>>0)>($Maxcode>>>0);
     if ($39) {
      $$9 = 2;
      break L9;
     }
     HEAP32[$18>>2] = $38;
     $40 = ((($16)) + 2|0);
     HEAP32[$frm_nxt>>2] = $40;
     break;
    }
    $41 = ($20&255)<(240);
    if ($41) {
     $42 = $16;
     $43 = (($$pre$phiZ2D) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$9 = 1;
      break L9;
     }
     $45 = ((($16)) + 1|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = ((($16)) + 2|0);
     $48 = HEAP8[$47>>0]|0;
     switch ($21|0) {
     case 224:  {
      $49 = $46 & -32;
      $50 = ($49<<24>>24)==(-96);
      if (!($50)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     case 237:  {
      $51 = $46 & -32;
      $52 = ($51<<24>>24)==(-128);
      if (!($52)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     default: {
      $53 = $46 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$9 = 2;
       break L9;
      }
     }
     }
     $55 = $48&255;
     $56 = $55 & 192;
     $57 = ($56|0)==(128);
     if (!($57)) {
      $$9 = 2;
      break L9;
     }
     $58 = $21 << 12;
     $59 = $58 & 61440;
     $60 = $46&255;
     $61 = $60 << 6;
     $62 = $61 & 4032;
     $63 = $62 | $59;
     $64 = $55 & 63;
     $65 = $63 | $64;
     $66 = ($65>>>0)>($Maxcode>>>0);
     if ($66) {
      $$9 = 2;
      break L9;
     }
     HEAP32[$18>>2] = $65;
     $67 = ((($16)) + 3|0);
     HEAP32[$frm_nxt>>2] = $67;
     break;
    }
    $68 = ($20&255)<(245);
    if (!($68)) {
     $$9 = 2;
     break L9;
    }
    $69 = $16;
    $70 = (($$pre$phiZ2D) - ($69))|0;
    $71 = ($70|0)<(4);
    if ($71) {
     $$9 = 1;
     break L9;
    }
    $72 = ((($16)) + 1|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ((($16)) + 2|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = ((($16)) + 3|0);
    $77 = HEAP8[$76>>0]|0;
    switch ($21|0) {
    case 240:  {
     $$off = (($73) + 112)<<24>>24;
     $78 = ($$off&255)<(48);
     if (!($78)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    case 244:  {
     $79 = $73 & -16;
     $80 = ($79<<24>>24)==(-128);
     if (!($80)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    default: {
     $81 = $73 & -64;
     $82 = ($81<<24>>24)==(-128);
     if (!($82)) {
      $$9 = 2;
      break L9;
     }
    }
    }
    $83 = $75&255;
    $84 = $83 & 192;
    $85 = ($84|0)==(128);
    if (!($85)) {
     $$9 = 2;
     break L9;
    }
    $86 = $77&255;
    $87 = $86 & 192;
    $88 = ($87|0)==(128);
    if (!($88)) {
     $$9 = 2;
     break L9;
    }
    $89 = $21 << 18;
    $90 = $89 & 1835008;
    $91 = $73&255;
    $92 = $91 << 12;
    $93 = $92 & 258048;
    $94 = $93 | $90;
    $95 = $83 << 6;
    $96 = $95 & 4032;
    $97 = $94 | $96;
    $98 = $86 & 63;
    $99 = $97 | $98;
    $100 = ($99>>>0)>($Maxcode>>>0);
    if ($100) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$18>>2] = $99;
    $101 = ((($16)) + 4|0);
    HEAP32[$frm_nxt>>2] = $101;
   }
  } while(0);
  $102 = HEAP32[$to_nxt>>2]|0;
  $103 = ((($102)) + 4|0);
  HEAP32[$to_nxt>>2] = $103;
 }
 if ((label|0) == 40) {
  $104 = $$lcssa&1;
  $$9 = $104;
 }
 return ($$9|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$37 = 0, $$frm = 0, $$lcssa = 0, $$lcssa88 = 0, $$lcssa89 = 0, $$lcssa90 = 0, $$lcssa91 = 0, $$lcssa92 = 0, $$off = 0, $$pre = 0, $$pre43 = 0, $$pre45 = 0, $$pre47 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$5 = 0, $nchar32_t$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre47 = $frm_end;
 if ($1) {
  $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
 } else {
  $2 = $frm;
  $3 = (($$pre47) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1 = $$frm;$nchar32_t$0 = 0;
    } else {
     $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
    }
   } else {
    $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
   }
  } else {
   $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
  }
 }
 L6: while(1) {
  $14 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $15 = ($nchar32_t$0>>>0)<($mx>>>0);
  $or$cond = $15 & $14;
  if (!($or$cond)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $16 = HEAP8[$frm_nxt$1>>0]|0;
  $17 = $16&255;
  $18 = ($16<<24>>24)>(-1);
  do {
   if ($18) {
    $19 = ($17>>>0)>($Maxcode>>>0);
    if ($19) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $20 = ((($frm_nxt$1)) + 1|0);
    $frm_nxt$5 = $20;
   } else {
    $21 = ($16&255)<(194);
    if ($21) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $22 = ($16&255)<(224);
    if ($22) {
     $23 = $frm_nxt$1;
     $24 = (($$pre47) - ($23))|0;
     $25 = ($24|0)<(2);
     if ($25) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $26 = ((($frm_nxt$1)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $28 & 192;
     $30 = ($29|0)==(128);
     if (!($30)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $31 = $17 << 6;
     $32 = $31 & 1984;
     $33 = $28 & 63;
     $34 = $33 | $32;
     $35 = ($34>>>0)>($Maxcode>>>0);
     if ($35) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $36 = ((($frm_nxt$1)) + 2|0);
     $frm_nxt$5 = $36;
     break;
    }
    $37 = ($16&255)<(240);
    if ($37) {
     $38 = $frm_nxt$1;
     $39 = (($$pre47) - ($38))|0;
     $40 = ($39|0)<(3);
     if ($40) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $41 = ((($frm_nxt$1)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = ((($frm_nxt$1)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     switch ($17|0) {
     case 224:  {
      $45 = $42 & -32;
      $46 = ($45<<24>>24)==(-96);
      if (!($46)) {
       $$lcssa91 = $38;
       label = 20;
       break L6;
      }
      break;
     }
     case 237:  {
      $49 = $42 & -32;
      $50 = ($49<<24>>24)==(-128);
      if (!($50)) {
       $$lcssa90 = $38;
       label = 22;
       break L6;
      }
      break;
     }
     default: {
      $53 = $42 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$lcssa92 = $38;
       label = 24;
       break L6;
      }
     }
     }
     $57 = $44&255;
     $58 = $57 & 192;
     $59 = ($58|0)==(128);
     if (!($59)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $60 = $17 << 12;
     $61 = $60 & 61440;
     $62 = $42&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $57 & 63;
     $67 = $65 | $66;
     $68 = ($67>>>0)>($Maxcode>>>0);
     $69 = ((($frm_nxt$1)) + 3|0);
     if ($68) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     } else {
      $frm_nxt$5 = $69;
      break;
     }
    }
    $70 = ($16&255)<(245);
    if (!($70)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $71 = $frm_nxt$1;
    $72 = (($$pre47) - ($71))|0;
    $73 = ($72|0)<(4);
    if ($73) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $74 = ((($frm_nxt$1)) + 1|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = ((($frm_nxt$1)) + 2|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = ((($frm_nxt$1)) + 3|0);
    $79 = HEAP8[$78>>0]|0;
    switch ($17|0) {
    case 240:  {
     $$off = (($75) + 112)<<24>>24;
     $80 = ($$off&255)<(48);
     if (!($80)) {
      $$lcssa88 = $71;
      label = 31;
      break L6;
     }
     break;
    }
    case 244:  {
     $83 = $75 & -16;
     $84 = ($83<<24>>24)==(-128);
     if (!($84)) {
      $$lcssa = $71;
      label = 33;
      break L6;
     }
     break;
    }
    default: {
     $87 = $75 & -64;
     $88 = ($87<<24>>24)==(-128);
     if (!($88)) {
      $$lcssa89 = $71;
      label = 35;
      break L6;
     }
    }
    }
    $91 = $77&255;
    $92 = $91 & 192;
    $93 = ($92|0)==(128);
    if (!($93)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $94 = $79&255;
    $95 = $94 & 192;
    $96 = ($95|0)==(128);
    if (!($96)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $97 = $17 << 18;
    $98 = $97 & 1835008;
    $99 = $75&255;
    $100 = $99 << 12;
    $101 = $100 & 258048;
    $102 = $101 | $98;
    $103 = $91 << 6;
    $104 = $103 & 4032;
    $105 = $102 | $104;
    $106 = $94 & 63;
    $107 = $105 | $106;
    $108 = ($107>>>0)>($Maxcode>>>0);
    $109 = ((($frm_nxt$1)) + 4|0);
    if ($108) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    } else {
     $frm_nxt$5 = $109;
    }
   }
  } while(0);
  $110 = (($nchar32_t$0) + 1)|0;
  $frm_nxt$1 = $frm_nxt$5;$nchar32_t$0 = $110;
 }
 if ((label|0) == 20) {
  $47 = $frm;
  $48 = (($$lcssa91) - ($47))|0;
  $$37 = $48;
 }
 else if ((label|0) == 22) {
  $51 = $frm;
  $52 = (($$lcssa90) - ($51))|0;
  $$37 = $52;
 }
 else if ((label|0) == 24) {
  $55 = $frm;
  $56 = (($$lcssa92) - ($55))|0;
  $$37 = $56;
 }
 else if ((label|0) == 31) {
  $81 = $frm;
  $82 = (($$lcssa88) - ($81))|0;
  $$37 = $82;
 }
 else if ((label|0) == 33) {
  $85 = $frm;
  $86 = (($$lcssa) - ($85))|0;
  $$37 = $86;
 }
 else if ((label|0) == 35) {
  $89 = $frm;
  $90 = (($$lcssa89) - ($89))|0;
  $$37 = $90;
 }
 else if ((label|0) == 40) {
  $$pre = $frm_nxt$1$lcssa;
  $$pre43 = $frm;
  $$pre45 = (($$pre) - ($$pre43))|0;
  $$37 = $$pre45;
 }
 return ($$37|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8400);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(470)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ($1|0)==($2|0);
   if (!($5)) {
    $6 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi(495,($6|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch_3(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$03 = 0, $$03$lcssa201 = 0, $$05 = 0, $$05$lcssa193 = 0, $$12 = 0, $$14 = 0, $$14$lcssa = 0, $$3$ph = 0, $$4 = 0, $$lcssa = 0, $$lcssa207 = 0, $$lcssa215 = 0, $$pre = 0, $$pre96 = 0, $$pre97 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$5$ph13 = 0, $n$0 = 0, $not$ = 0, $or$cond = 0, $p$0 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $fend$0 = $frm;
 while(1) {
  $0 = ($fend$0|0)==($frm_end|0);
  if ($0) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $1 = HEAP32[$fend$0>>2]|0;
  $2 = ($1|0)==(0);
  if ($2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $3 = ((($fend$0)) + 4|0);
  $fend$0 = $3;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $4 = $to_end;
 $5 = ((($this)) + 8|0);
 $$03 = $frm;$$05 = $to;$fend$1 = $fend$0$lcssa;
 L6: while(1) {
  $6 = ($$03|0)==($frm_end|0);
  $7 = ($$05|0)==($to_end|0);
  $or$cond = $7 | $6;
  if ($or$cond) {
   $103 = $$03;
   label = 53;
   break;
  }
  $8 = $st;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $save_state;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $18 = $fend$1;
  $19 = $$03;
  $20 = (($18) - ($19))|0;
  $21 = $20 >> 2;
  $22 = $$05;
  $23 = (($4) - ($22))|0;
  $24 = HEAP32[$5>>2]|0;
  $25 = (_uselocale($24)|0);
  __THREW__ = 0;
  $26 = (invoke_iiiiii(517,($$05|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $$lcssa207 = $25;
   label = 11;
   break;
  }
  $29 = ($25|0)==(0|0);
  if (!($29)) {
   __THREW__ = 0;
   (invoke_ii(472,($25|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 10;
    break;
   }
  }
  switch ($26|0) {
  case -1:  {
   $$03$lcssa201 = $$03;$$05$lcssa193 = $$05;
   label = 16;
   break L6;
   break;
  }
  case 0:  {
   $$3$ph = 1;
   label = 50;
   break L6;
   break;
  }
  default: {
  }
  }
  $66 = HEAP32[$to_nxt>>2]|0;
  $67 = (($66) + ($26)|0);
  HEAP32[$to_nxt>>2] = $67;
  $68 = ($67|0)==($to_end|0);
  if ($68) {
   label = 51;
   break;
  }
  $69 = ($fend$1|0)==($frm_end|0);
  if ($69) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $105 = $67;$106 = $$pre;$fend$5$ph13 = $frm_end;
  } else {
   $70 = HEAP32[$5>>2]|0;
   $71 = (_uselocale($70)|0);
   __THREW__ = 0;
   $72 = (invoke_iiii(518,($tmp|0),0,($st|0))|0);
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    $$lcssa215 = $71;
    label = 36;
    break;
   }
   $75 = ($71|0)==(0|0);
   if (!($75)) {
    __THREW__ = 0;
    (invoke_ii(472,($71|0))|0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 35;
     break;
    }
   }
   $87 = ($72|0)==(-1);
   if ($87) {
    $$12 = 2;
    label = 49;
    break;
   }
   $88 = HEAP32[$to_nxt>>2]|0;
   $89 = (($4) - ($88))|0;
   $90 = ($72>>>0)>($89>>>0);
   if ($90) {
    $$12 = 1;
    label = 49;
    break;
   } else {
    $n$0 = $72;$p$0 = $tmp;
   }
   while(1) {
    $91 = ($n$0|0)==(0);
    if ($91) {
     break;
    }
    $94 = ((($p$0)) + 1|0);
    $95 = HEAP8[$p$0>>0]|0;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = ((($96)) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96>>0] = $95;
    $98 = (($n$0) + -1)|0;
    $n$0 = $98;$p$0 = $94;
   }
   $92 = HEAP32[$frm_nxt>>2]|0;
   $93 = ((($92)) + 4|0);
   HEAP32[$frm_nxt>>2] = $93;
   $fend$2 = $93;
   while(1) {
    $99 = ($fend$2|0)==($frm_end|0);
    if ($99) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    $100 = HEAP32[$fend$2>>2]|0;
    $101 = ($100|0)==(0);
    if ($101) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $102 = ((($fend$2)) + 4|0);
    $fend$2 = $102;
   }
   $$pre96 = HEAP32[$to_nxt>>2]|0;
   $105 = $$pre96;$106 = $93;$fend$5$ph13 = $fend$2$lcssa;
  }
  $$03 = $106;$$05 = $105;$fend$1 = $fend$5$ph13;
 }
 do {
  if ((label|0) == 10) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $36 = ($$lcssa207|0)==(0|0);
   if (!($36)) {
    __THREW__ = 0;
    (invoke_ii(472,($$lcssa207|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     $39 = ___cxa_find_matching_catch_3(0|0)|0;
     $40 = tempRet0;
     ___clang_call_terminate($39);
     // unreachable;
    }
   }
   ___resumeException($34|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   HEAP32[$to_nxt>>2] = $$05$lcssa193;
   $$14 = $$03$lcssa201;$46 = $$05$lcssa193;
   while(1) {
    $41 = HEAP32[$frm_nxt>>2]|0;
    $42 = ($$14|0)==($41|0);
    if ($42) {
     $$14$lcssa = $$14;
     label = 28;
     break;
    }
    $43 = HEAP32[$$14>>2]|0;
    $44 = HEAP32[$5>>2]|0;
    $45 = (_uselocale($44)|0);
    __THREW__ = 0;
    $47 = (invoke_iiii(518,($46|0),($43|0),($save_state|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $$lcssa = $45;
     label = 22;
     break;
    }
    $50 = ($45|0)==(0|0);
    if (!($50)) {
     __THREW__ = 0;
     (invoke_ii(472,($45|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 21;
      break;
     }
    }
    $62 = ($47|0)==(-1);
    if ($62) {
     $$14$lcssa = $$14;
     label = 28;
     break;
    }
    $63 = HEAP32[$to_nxt>>2]|0;
    $64 = (($63) + ($47)|0);
    HEAP32[$to_nxt>>2] = $64;
    $65 = ((($$14)) + 4|0);
    $$14 = $65;$46 = $64;
   }
   if ((label|0) == 21) {
    $53 = ___cxa_find_matching_catch_3(0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   }
   else if ((label|0) == 22) {
    $55 = ___cxa_find_matching_catch_2()|0;
    $56 = tempRet0;
    $57 = ($$lcssa|0)==(0|0);
    if (!($57)) {
     __THREW__ = 0;
     (invoke_ii(472,($$lcssa|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      $60 = ___cxa_find_matching_catch_3(0|0)|0;
      $61 = tempRet0;
      ___clang_call_terminate($60);
      // unreachable;
     }
    }
    ___resumeException($55|0);
    // unreachable;
   }
   else if ((label|0) == 28) {
    HEAP32[$frm_nxt>>2] = $$14$lcssa;
    $$3$ph = 2;
    label = 50;
    break;
   }
  }
  else if ((label|0) == 35) {
   $78 = ___cxa_find_matching_catch_3(0|0)|0;
   $79 = tempRet0;
   ___clang_call_terminate($78);
   // unreachable;
  }
  else if ((label|0) == 36) {
   $80 = ___cxa_find_matching_catch_2()|0;
   $81 = tempRet0;
   $82 = ($$lcssa215|0)==(0|0);
   if (!($82)) {
    __THREW__ = 0;
    (invoke_ii(472,($$lcssa215|0))|0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     $85 = ___cxa_find_matching_catch_3(0|0)|0;
     $86 = tempRet0;
     ___clang_call_terminate($85);
     // unreachable;
    }
   }
   ___resumeException($80|0);
   // unreachable;
  }
  else if ((label|0) == 49) {
   $$3$ph = $$12;
   label = 50;
  }
  else if ((label|0) == 51) {
   $$pre97 = HEAP32[$frm_nxt>>2]|0;
   $103 = $$pre97;
   label = 53;
  }
 } while(0);
 if ((label|0) == 50) {
  $$4 = $$3$ph;
 }
 else if ((label|0) == 53) {
  $not$ = ($103|0)!=($frm_end|0);
  $104 = $not$&1;
  $$4 = $104;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$02 = 0, $$02$lcssa231 = 0, $$05 = 0, $$05$lcssa224 = 0, $$1$ph = 0, $$13 = 0, $$13$lcssa = 0, $$13$lcssa217 = 0, $$13$lcssa218 = 0, $$2 = 0, $$24 = 0, $$lcssa = 0, $$lcssa238 = 0, $$lcssa243 = 0, $$lcssa250 = 0, $$pre = 0, $$pre102 = 0, $$pre103 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0 = 0;
 var $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$4$ph = 0, $not$ = 0, $not$6 = 0, $or$cond = 0, $save_state = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $fend$0 = $frm;
 while(1) {
  $0 = ($fend$0|0)==($frm_end|0);
  if ($0) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $1 = HEAP8[$fend$0>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $3 = ((($fend$0)) + 1|0);
  $fend$0 = $3;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $4 = $to_end;
 $5 = ((($this)) + 8|0);
 $$02 = $frm;$$05 = $to;$fend$1 = $fend$0$lcssa;
 L6: while(1) {
  $6 = ($$02|0)==($frm_end|0);
  $7 = ($$05|0)==($to_end|0);
  $or$cond = $7 | $6;
  if ($or$cond) {
   $97 = $$02;
   label = 52;
   break;
  }
  $8 = $st;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $save_state;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $18 = $fend$1;
  $19 = $$02;
  $20 = (($18) - ($19))|0;
  $21 = $$05;
  $22 = (($4) - ($21))|0;
  $23 = $22 >> 2;
  $24 = HEAP32[$5>>2]|0;
  $25 = (_uselocale($24)|0);
  __THREW__ = 0;
  $26 = (invoke_iiiiii(519,($$05|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $$lcssa243 = $25;
   label = 11;
   break;
  }
  $29 = ($25|0)==(0|0);
  if (!($29)) {
   __THREW__ = 0;
   (invoke_ii(472,($25|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 10;
    break;
   }
  }
  switch ($26|0) {
  case -1:  {
   $$02$lcssa231 = $$02;$$05$lcssa224 = $$05;$$lcssa238 = $18;
   label = 16;
   break L6;
   break;
  }
  case 0:  {
   $$1$ph = 2;
   label = 48;
   break L6;
   break;
  }
  default: {
  }
  }
  $67 = HEAP32[$to_nxt>>2]|0;
  $68 = (($67) + ($26<<2)|0);
  HEAP32[$to_nxt>>2] = $68;
  $69 = ($68|0)==($to_end|0);
  if ($69) {
   label = 49;
   break;
  }
  $70 = ($fend$1|0)==($frm_end|0);
  $$pre = HEAP32[$frm_nxt>>2]|0;
  if ($70) {
   $100 = $$pre;$99 = $68;$fend$4$ph = $frm_end;
  } else {
   $71 = HEAP32[$5>>2]|0;
   $72 = (_uselocale($71)|0);
   __THREW__ = 0;
   $73 = (invoke_iiiii(520,($68|0),($$pre|0),1,($st|0))|0);
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    $$lcssa250 = $72;
    label = 39;
    break;
   }
   $76 = ($72|0)==(0|0);
   if (!($76)) {
    __THREW__ = 0;
    (invoke_ii(472,($72|0))|0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 38;
     break;
    }
   }
   $88 = ($73|0)==(0);
   if (!($88)) {
    $$1$ph = 2;
    label = 48;
    break;
   }
   $89 = HEAP32[$to_nxt>>2]|0;
   $90 = ((($89)) + 4|0);
   HEAP32[$to_nxt>>2] = $90;
   $91 = HEAP32[$frm_nxt>>2]|0;
   $92 = ((($91)) + 1|0);
   HEAP32[$frm_nxt>>2] = $92;
   $fend$2 = $92;
   while(1) {
    $93 = ($fend$2|0)==($frm_end|0);
    if ($93) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    $94 = HEAP8[$fend$2>>0]|0;
    $95 = ($94<<24>>24)==(0);
    if ($95) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $96 = ((($fend$2)) + 1|0);
    $fend$2 = $96;
   }
   $$pre102 = HEAP32[$to_nxt>>2]|0;
   $100 = $92;$99 = $$pre102;$fend$4$ph = $fend$2$lcssa;
  }
  $$02 = $100;$$05 = $99;$fend$1 = $fend$4$ph;
 }
 do {
  if ((label|0) == 10) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $36 = ($$lcssa243|0)==(0|0);
   if (!($36)) {
    __THREW__ = 0;
    (invoke_ii(472,($$lcssa243|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     $39 = ___cxa_find_matching_catch_3(0|0)|0;
     $40 = tempRet0;
     ___clang_call_terminate($39);
     // unreachable;
    }
   }
   ___resumeException($34|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   $$13 = $$02$lcssa231;$storemerge = $$05$lcssa224;
   L31: while(1) {
    HEAP32[$to_nxt>>2] = $storemerge;
    $41 = HEAP32[$frm_nxt>>2]|0;
    $42 = ($$13|0)==($41|0);
    if ($42) {
     $$13$lcssa = $$13;
     label = 32;
     break;
    }
    $43 = $$13;
    $44 = (($$lcssa238) - ($43))|0;
    $45 = HEAP32[$5>>2]|0;
    $46 = (_uselocale($45)|0);
    __THREW__ = 0;
    $47 = (invoke_iiiii(520,($storemerge|0),($$13|0),($44|0),($save_state|0))|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $$lcssa = $46;
     label = 22;
     break;
    }
    $50 = ($46|0)==(0|0);
    if (!($50)) {
     __THREW__ = 0;
     (invoke_ii(472,($46|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 21;
      break;
     }
    }
    switch ($47|0) {
    case -1:  {
     $$13$lcssa217 = $$13;
     label = 28;
     break L31;
     break;
    }
    case -2:  {
     $$13$lcssa218 = $$13;
     label = 29;
     break L31;
     break;
    }
    case 0:  {
     $62 = ((($$13)) + 1|0);
     $$24 = $62;
     break;
    }
    default: {
     $63 = (($$13) + ($47)|0);
     $$24 = $63;
    }
    }
    $64 = HEAP32[$to_nxt>>2]|0;
    $65 = ((($64)) + 4|0);
    $$13 = $$24;$storemerge = $65;
   }
   if ((label|0) == 21) {
    $53 = ___cxa_find_matching_catch_3(0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   }
   else if ((label|0) == 22) {
    $55 = ___cxa_find_matching_catch_2()|0;
    $56 = tempRet0;
    $57 = ($$lcssa|0)==(0|0);
    if (!($57)) {
     __THREW__ = 0;
     (invoke_ii(472,($$lcssa|0))|0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      $60 = ___cxa_find_matching_catch_3(0|0)|0;
      $61 = tempRet0;
      ___clang_call_terminate($60);
      // unreachable;
     }
    }
    ___resumeException($55|0);
    // unreachable;
   }
   else if ((label|0) == 28) {
    HEAP32[$frm_nxt>>2] = $$13$lcssa217;
    $$1$ph = 2;
    label = 48;
    break;
   }
   else if ((label|0) == 29) {
    HEAP32[$frm_nxt>>2] = $$13$lcssa218;
    $$1$ph = 1;
    label = 48;
    break;
   }
   else if ((label|0) == 32) {
    HEAP32[$frm_nxt>>2] = $$13$lcssa;
    $not$6 = ($$13$lcssa|0)!=($frm_end|0);
    $66 = $not$6&1;
    $$1$ph = $66;
    label = 48;
    break;
   }
  }
  else if ((label|0) == 38) {
   $79 = ___cxa_find_matching_catch_3(0|0)|0;
   $80 = tempRet0;
   ___clang_call_terminate($79);
   // unreachable;
  }
  else if ((label|0) == 39) {
   $81 = ___cxa_find_matching_catch_2()|0;
   $82 = tempRet0;
   $83 = ($$lcssa250|0)==(0|0);
   if (!($83)) {
    __THREW__ = 0;
    (invoke_ii(472,($$lcssa250|0))|0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     $86 = ___cxa_find_matching_catch_3(0|0)|0;
     $87 = tempRet0;
     ___clang_call_terminate($86);
     // unreachable;
    }
   }
   ___resumeException($81|0);
   // unreachable;
  }
  else if ((label|0) == 49) {
   $$pre103 = HEAP32[$frm_nxt>>2]|0;
   $97 = $$pre103;
   label = 52;
  }
 } while(0);
 if ((label|0) == 48) {
  $$2 = $$1$ph;
 }
 else if ((label|0) == 52) {
  $not$ = ($97|0)!=($frm_end|0);
  $98 = $not$&1;
  $$2 = $98;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $p$0 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale($1)|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(518,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if (!($13)) {
   __THREW__ = 0;
   (invoke_ii(472,($2|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch_3(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
  }
  ___resumeException($11|0);
  // unreachable;
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(472,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch_3(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 L12: do {
  switch ($3|0) {
  case 0: case -1:  {
   $$0 = 2;
   break;
  }
  default: {
   $18 = (($3) + -1)|0;
   $19 = HEAP32[$to_nxt>>2]|0;
   $20 = $to_end;
   $21 = (($20) - ($19))|0;
   $22 = ($18>>>0)>($21>>>0);
   if ($22) {
    $$0 = 1;
   } else {
    $n$0 = $18;$p$0 = $tmp;
    while(1) {
     $23 = ($n$0|0)==(0);
     if ($23) {
      $$0 = 0;
      break L12;
     }
     $24 = ((($p$0)) + 1|0);
     $25 = HEAP8[$p$0>>0]|0;
     $26 = HEAP32[$to_nxt>>2]|0;
     $27 = ((($26)) + 1|0);
     HEAP32[$to_nxt>>2] = $27;
     HEAP8[$26>>0] = $25;
     $28 = (($n$0) + -1)|0;
     $n$0 = $28;$p$0 = $24;
    }
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(472,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 16;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iiii(521,(0|0),(0|0),4)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $13 = ___cxa_find_matching_catch_3(0|0)|0;
    $14 = tempRet0;
    $15 = ($2|0)==(0|0);
    if ($15) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(472,($2|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    $18 = ___cxa_find_matching_catch_3(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
   $8 = ($2|0)==(0|0);
   if (!($8)) {
    __THREW__ = 0;
    (invoke_ii(472,($2|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch_3(0|0)|0;
     $12 = tempRet0;
     ___clang_call_terminate($11);
     // unreachable;
    }
   }
   $20 = ($5|0)==(0);
   if ($20) {
    $21 = HEAP32[$0>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     $23 = (invoke_ii(472,($21|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 16;
      break;
     }
     $26 = ($23|0)==(0|0);
     if ($26) {
      $$0 = 0;
     } else {
      __THREW__ = 0;
      (invoke_ii(472,($23|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       $29 = ___cxa_find_matching_catch_3(0|0)|0;
       $30 = tempRet0;
       ___clang_call_terminate($29);
       // unreachable;
      } else {
       $$0 = 0;
      }
     }
    }
   } else {
    $$0 = -1;
   }
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 16) {
  $31 = ___cxa_find_matching_catch_3(0|0)|0;
  $32 = tempRet0;
  $eh$lpad$body$indexZ2D = $31;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$04 = 0, $$15 = 0, $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0 = 0, $nbytes$0$lcssa = 0, $nbytes$1 = 0, $nwchar_t$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $frm_end;
 $1 = ((($this)) + 8|0);
 $$04 = $frm;$nbytes$0 = 0;$nwchar_t$0 = 0;
 L1: while(1) {
  $2 = ($nwchar_t$0>>>0)>=($mx>>>0);
  $3 = ($$04|0)==($frm_end|0);
  $or$cond = $3 | $2;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$0;
   label = 15;
   break;
  }
  $4 = $$04;
  $5 = (($0) - ($4))|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = (_uselocale($6)|0);
  __THREW__ = 0;
  $8 = (invoke_iiii(522,($$04|0),($5|0),($st|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $$lcssa = $7;
   label = 7;
   break;
  }
  $11 = ($7|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(472,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 6;
    break;
   }
  }
  switch ($8|0) {
  case -2: case -1:  {
   $nbytes$0$lcssa = $nbytes$0;
   label = 15;
   break L1;
   break;
  }
  case 0:  {
   $23 = ((($$04)) + 1|0);
   $$15 = $23;$$pn = 1;
   break;
  }
  default: {
   $24 = (($$04) + ($8)|0);
   $$15 = $24;$$pn = $8;
  }
  }
  $nbytes$1 = (($$pn) + ($nbytes$0))|0;
  $25 = (($nwchar_t$0) + 1)|0;
  $$04 = $$15;$nbytes$0 = $nbytes$1;$nwchar_t$0 = $25;
 }
 if ((label|0) == 6) {
  $14 = ___cxa_find_matching_catch_3(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $18 = ($$lcssa|0)==(0|0);
  if (!($18)) {
   __THREW__ = 0;
   (invoke_ii(472,($$lcssa|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_3(0|0)|0;
    $22 = tempRet0;
    ___clang_call_terminate($21);
    // unreachable;
   }
  }
  ___resumeException($16|0);
  // unreachable;
 }
 else if ((label|0) == 15) {
  return ($nbytes$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
 } else {
  __THREW__ = 0;
  $3 = (invoke_ii(472,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $12 = ___cxa_find_matching_catch_3(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  }
  $6 = ($3|0)==(0|0);
  if ($6) {
   $11 = 4;
  } else {
   __THREW__ = 0;
   (invoke_ii(472,($3|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch_3(0|0)|0;
    $10 = tempRet0;
    ___clang_call_terminate($9);
    // unreachable;
   } else {
    $11 = 4;
   }
  }
 }
 return ($11|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$4 = 0, $$pre = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre7 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre7) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$4 = 1;
  } else {
   $5 = ((($to)) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = ((($6)) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = ((($8)) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $10 = $frm_end;
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $11 = $$pre;
   while(1) {
    $12 = ($11>>>0)<($frm_end>>>0);
    if (!($12)) {
     $$4 = 0;
     break L4;
    }
    $13 = HEAP16[$11>>1]|0;
    $14 = $13&65535;
    $15 = ($14>>>0)>($Maxcode>>>0);
    if ($15) {
     $$4 = 2;
     break L4;
    }
    $16 = ($13&65535)<(128);
    do {
     if ($16) {
      $17 = HEAP32[$to_nxt>>2]|0;
      $18 = $17;
      $19 = (($$pre7) - ($18))|0;
      $20 = ($19|0)<(1);
      if ($20) {
       $$4 = 1;
       break L4;
      }
      $21 = $13&255;
      $22 = ((($17)) + 1|0);
      HEAP32[$to_nxt>>2] = $22;
      HEAP8[$17>>0] = $21;
     } else {
      $23 = ($13&65535)<(2048);
      if ($23) {
       $24 = HEAP32[$to_nxt>>2]|0;
       $25 = $24;
       $26 = (($$pre7) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $$4 = 1;
        break L4;
       }
       $28 = $14 >>> 6;
       $29 = $28 | 192;
       $30 = $29&255;
       $31 = ((($24)) + 1|0);
       HEAP32[$to_nxt>>2] = $31;
       HEAP8[$24>>0] = $30;
       $32 = $14 & 63;
       $33 = $32 | 128;
       $34 = $33&255;
       $35 = HEAP32[$to_nxt>>2]|0;
       $36 = ((($35)) + 1|0);
       HEAP32[$to_nxt>>2] = $36;
       HEAP8[$35>>0] = $34;
       break;
      }
      $37 = ($13&65535)<(55296);
      if ($37) {
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = $38;
       $40 = (($$pre7) - ($39))|0;
       $41 = ($40|0)<(3);
       if ($41) {
        $$4 = 1;
        break L4;
       }
       $42 = $14 >>> 12;
       $43 = $42 | 224;
       $44 = $43&255;
       $45 = ((($38)) + 1|0);
       HEAP32[$to_nxt>>2] = $45;
       HEAP8[$38>>0] = $44;
       $46 = $14 >>> 6;
       $47 = $46 & 63;
       $48 = $47 | 128;
       $49 = $48&255;
       $50 = HEAP32[$to_nxt>>2]|0;
       $51 = ((($50)) + 1|0);
       HEAP32[$to_nxt>>2] = $51;
       HEAP8[$50>>0] = $49;
       $52 = $14 & 63;
       $53 = $52 | 128;
       $54 = $53&255;
       $55 = HEAP32[$to_nxt>>2]|0;
       $56 = ((($55)) + 1|0);
       HEAP32[$to_nxt>>2] = $56;
       HEAP8[$55>>0] = $54;
       break;
      }
      $57 = ($13&65535)<(56320);
      if (!($57)) {
       $108 = ($13&65535)<(57344);
       if ($108) {
        $$4 = 2;
        break L4;
       }
       $109 = HEAP32[$to_nxt>>2]|0;
       $110 = $109;
       $111 = (($$pre7) - ($110))|0;
       $112 = ($111|0)<(3);
       if ($112) {
        $$4 = 1;
        break L4;
       }
       $113 = $14 >>> 12;
       $114 = $113 | 224;
       $115 = $114&255;
       $116 = ((($109)) + 1|0);
       HEAP32[$to_nxt>>2] = $116;
       HEAP8[$109>>0] = $115;
       $117 = $14 >>> 6;
       $118 = $117 & 63;
       $119 = $118 | 128;
       $120 = $119&255;
       $121 = HEAP32[$to_nxt>>2]|0;
       $122 = ((($121)) + 1|0);
       HEAP32[$to_nxt>>2] = $122;
       HEAP8[$121>>0] = $120;
       $123 = $14 & 63;
       $124 = $123 | 128;
       $125 = $124&255;
       $126 = HEAP32[$to_nxt>>2]|0;
       $127 = ((($126)) + 1|0);
       HEAP32[$to_nxt>>2] = $127;
       HEAP8[$126>>0] = $125;
       break;
      }
      $58 = $11;
      $59 = (($10) - ($58))|0;
      $60 = ($59|0)<(4);
      if ($60) {
       $$4 = 1;
       break L4;
      }
      $61 = ((($11)) + 2|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = $62&65535;
      $64 = $63 & 64512;
      $65 = ($64|0)==(56320);
      if (!($65)) {
       $$4 = 2;
       break L4;
      }
      $66 = HEAP32[$to_nxt>>2]|0;
      $67 = (($$pre7) - ($66))|0;
      $68 = ($67|0)<(4);
      if ($68) {
       $$4 = 1;
       break L4;
      }
      $69 = $14 & 960;
      $70 = $69 << 10;
      $71 = (($70) + 65536)|0;
      $72 = $14 << 10;
      $73 = $72 & 64512;
      $74 = $71 | $73;
      $75 = $63 & 1023;
      $76 = $74 | $75;
      $77 = ($76>>>0)>($Maxcode>>>0);
      if ($77) {
       $$4 = 2;
       break L4;
      }
      HEAP32[$frm_nxt>>2] = $61;
      $78 = $69 >>> 6;
      $79 = (($78) + 1)|0;
      $80 = $79 >>> 2;
      $81 = $80 | 240;
      $82 = $81&255;
      $83 = HEAP32[$to_nxt>>2]|0;
      $84 = ((($83)) + 1|0);
      HEAP32[$to_nxt>>2] = $84;
      HEAP8[$83>>0] = $82;
      $85 = $79 << 4;
      $86 = $85 & 48;
      $87 = $14 >>> 2;
      $88 = $87 & 15;
      $89 = $88 | $86;
      $90 = $89 | 128;
      $91 = $90&255;
      $92 = HEAP32[$to_nxt>>2]|0;
      $93 = ((($92)) + 1|0);
      HEAP32[$to_nxt>>2] = $93;
      HEAP8[$92>>0] = $91;
      $94 = $14 << 4;
      $95 = $94 & 48;
      $96 = $63 >>> 6;
      $97 = $96 & 15;
      $98 = $95 | $97;
      $99 = $98 | 128;
      $100 = $99&255;
      $101 = HEAP32[$to_nxt>>2]|0;
      $102 = ((($101)) + 1|0);
      HEAP32[$to_nxt>>2] = $102;
      HEAP8[$101>>0] = $100;
      $103 = $63 & 63;
      $104 = $103 | 128;
      $105 = $104&255;
      $106 = HEAP32[$to_nxt>>2]|0;
      $107 = ((($106)) + 1|0);
      HEAP32[$to_nxt>>2] = $107;
      HEAP8[$106>>0] = $105;
     }
    } while(0);
    $128 = HEAP32[$frm_nxt>>2]|0;
    $129 = ((($128)) + 2|0);
    HEAP32[$frm_nxt>>2] = $129;
    $11 = $129;
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$8 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = $frm_end;
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = ((($2)) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = ((($2)) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$phiZ2D = $3;
     } else {
      $$pre$phiZ2D = $3;
     }
    } else {
     $$pre$phiZ2D = $3;
    }
   } else {
    $$pre$phiZ2D = $3;
   }
  } else {
   $$pre$phiZ2D = $3;
  }
 }
 $16 = $to_end;
 L9: while(1) {
  $17 = HEAP32[$frm_nxt>>2]|0;
  $18 = ($17>>>0)<($frm_end>>>0);
  if (!($18)) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $19 = HEAP32[$to_nxt>>2]|0;
  $20 = ($19>>>0)<($to_end>>>0);
  if (!($20)) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $21 = HEAP8[$17>>0]|0;
  $22 = $21&255;
  $23 = ($22>>>0)>($Maxcode>>>0);
  if ($23) {
   $$8 = 2;
   break;
  }
  $24 = ($21<<24>>24)>(-1);
  do {
   if ($24) {
    $25 = $21&255;
    HEAP16[$19>>1] = $25;
    $26 = ((($17)) + 1|0);
    HEAP32[$frm_nxt>>2] = $26;
   } else {
    $27 = ($21&255)<(194);
    if ($27) {
     $$8 = 2;
     break L9;
    }
    $28 = ($21&255)<(224);
    if ($28) {
     $29 = $17;
     $30 = (($$pre$phiZ2D) - ($29))|0;
     $31 = ($30|0)<(2);
     if ($31) {
      $$8 = 1;
      break L9;
     }
     $32 = ((($17)) + 1|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = $34 & 192;
     $36 = ($35|0)==(128);
     if (!($36)) {
      $$8 = 2;
      break L9;
     }
     $37 = $22 << 6;
     $38 = $37 & 1984;
     $39 = $34 & 63;
     $40 = $39 | $38;
     $41 = ($40>>>0)>($Maxcode>>>0);
     if ($41) {
      $$8 = 2;
      break L9;
     }
     $42 = $40&65535;
     HEAP16[$19>>1] = $42;
     $43 = ((($17)) + 2|0);
     HEAP32[$frm_nxt>>2] = $43;
     break;
    }
    $44 = ($21&255)<(240);
    if ($44) {
     $45 = $17;
     $46 = (($$pre$phiZ2D) - ($45))|0;
     $47 = ($46|0)<(3);
     if ($47) {
      $$8 = 1;
      break L9;
     }
     $48 = ((($17)) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ((($17)) + 2|0);
     $51 = HEAP8[$50>>0]|0;
     switch ($22|0) {
     case 224:  {
      $52 = $49 & -32;
      $53 = ($52<<24>>24)==(-96);
      if (!($53)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     case 237:  {
      $54 = $49 & -32;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     default: {
      $56 = $49 & -64;
      $57 = ($56<<24>>24)==(-128);
      if (!($57)) {
       $$8 = 2;
       break L9;
      }
     }
     }
     $58 = $51&255;
     $59 = $58 & 192;
     $60 = ($59|0)==(128);
     if (!($60)) {
      $$8 = 2;
      break L9;
     }
     $61 = $22 << 12;
     $62 = $49&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $58 & 63;
     $67 = $65 | $66;
     $68 = $67 & 65535;
     $69 = ($68>>>0)>($Maxcode>>>0);
     if ($69) {
      $$8 = 2;
      break L9;
     }
     $70 = $67&65535;
     HEAP16[$19>>1] = $70;
     $71 = ((($17)) + 3|0);
     HEAP32[$frm_nxt>>2] = $71;
     break;
    }
    $72 = ($21&255)<(245);
    if (!($72)) {
     $$8 = 2;
     break L9;
    }
    $73 = $17;
    $74 = (($$pre$phiZ2D) - ($73))|0;
    $75 = ($74|0)<(4);
    if ($75) {
     $$8 = 1;
     break L9;
    }
    $76 = ((($17)) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = ((($17)) + 2|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = ((($17)) + 3|0);
    $81 = HEAP8[$80>>0]|0;
    switch ($22|0) {
    case 240:  {
     $$off = (($77) + 112)<<24>>24;
     $82 = ($$off&255)<(48);
     if (!($82)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    case 244:  {
     $83 = $77 & -16;
     $84 = ($83<<24>>24)==(-128);
     if (!($84)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    default: {
     $85 = $77 & -64;
     $86 = ($85<<24>>24)==(-128);
     if (!($86)) {
      $$8 = 2;
      break L9;
     }
    }
    }
    $87 = $79&255;
    $88 = $87 & 192;
    $89 = ($88|0)==(128);
    if (!($89)) {
     $$8 = 2;
     break L9;
    }
    $90 = $81&255;
    $91 = $90 & 192;
    $92 = ($91|0)==(128);
    if (!($92)) {
     $$8 = 2;
     break L9;
    }
    $93 = $19;
    $94 = (($16) - ($93))|0;
    $95 = ($94|0)<(4);
    if ($95) {
     $$8 = 1;
     break L9;
    }
    $96 = $22 & 7;
    $97 = $96 << 18;
    $98 = $77&255;
    $99 = $98 << 12;
    $100 = $99 & 258048;
    $101 = $100 | $97;
    $102 = $87 << 6;
    $103 = $102 & 4032;
    $104 = $101 | $103;
    $105 = $90 & 63;
    $106 = $104 | $105;
    $107 = ($106>>>0)>($Maxcode>>>0);
    if ($107) {
     $$8 = 2;
     break L9;
    }
    $108 = $96 << 2;
    $109 = $98 >>> 4;
    $110 = $109 & 3;
    $111 = $110 | $108;
    $112 = $111 << 6;
    $113 = (($112) + 16320)|0;
    $114 = $98 << 2;
    $115 = $114 & 60;
    $116 = $87 >>> 4;
    $117 = $116 & 3;
    $118 = $115 | $117;
    $119 = $118 | $113;
    $120 = $119 | 55296;
    $121 = $120&65535;
    HEAP16[$19>>1] = $121;
    $122 = $102 & 960;
    $123 = $105 | $122;
    $124 = $123 | 56320;
    $125 = $124&65535;
    $126 = ((($19)) + 2|0);
    HEAP32[$to_nxt>>2] = $126;
    HEAP16[$126>>1] = $125;
    $127 = HEAP32[$frm_nxt>>2]|0;
    $128 = ((($127)) + 4|0);
    HEAP32[$frm_nxt>>2] = $128;
   }
  } while(0);
  $129 = HEAP32[$to_nxt>>2]|0;
  $130 = ((($129)) + 2|0);
  HEAP32[$to_nxt>>2] = $130;
 }
 if ((label|0) == 41) {
  $131 = $$lcssa&1;
  $$8 = $131;
 }
 return ($$8|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$frm = 0, $$lcssa = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$lcssa87 = 0, $$off = 0, $$pre = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$5 = 0, $nchar16_t$0 = 0, $nchar16_t$2 = 0, $or$cond = 0, $or$cond11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre42 = $frm_end;
 if ($1) {
  $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
 } else {
  $2 = $frm;
  $3 = (($$pre42) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = ((($frm)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = ((($frm)) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = ((($frm)) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1 = $$frm;$nchar16_t$0 = 0;
    } else {
     $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
    }
   } else {
    $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
   }
  } else {
   $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
  }
 }
 L6: while(1) {
  $14 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $15 = ($nchar16_t$0>>>0)<($mx>>>0);
  $or$cond = $15 & $14;
  if (!($or$cond)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $16 = HEAP8[$frm_nxt$1>>0]|0;
  $17 = $16&255;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $19 = ($16<<24>>24)>(-1);
  do {
   if ($19) {
    $20 = ((($frm_nxt$1)) + 1|0);
    $frm_nxt$5 = $20;$nchar16_t$2 = $nchar16_t$0;
   } else {
    $21 = ($16&255)<(194);
    if ($21) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $22 = ($16&255)<(224);
    if ($22) {
     $23 = $frm_nxt$1;
     $24 = (($$pre42) - ($23))|0;
     $25 = ($24|0)<(2);
     if ($25) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $26 = ((($frm_nxt$1)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $28 & 192;
     $30 = ($29|0)==(128);
     if (!($30)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $31 = $17 << 6;
     $32 = $31 & 1984;
     $33 = $28 & 63;
     $34 = $33 | $32;
     $35 = ($34>>>0)>($Maxcode>>>0);
     $36 = ((($frm_nxt$1)) + 2|0);
     if ($35) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     } else {
      $frm_nxt$5 = $36;$nchar16_t$2 = $nchar16_t$0;
      break;
     }
    }
    $37 = ($16&255)<(240);
    if ($37) {
     $38 = $frm_nxt$1;
     $39 = (($$pre42) - ($38))|0;
     $40 = ($39|0)<(3);
     if ($40) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $41 = ((($frm_nxt$1)) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = ((($frm_nxt$1)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     switch ($17|0) {
     case 224:  {
      $45 = $42 & -32;
      $46 = ($45<<24>>24)==(-96);
      if (!($46)) {
       $$lcssa86 = $38;
       label = 19;
       break L6;
      }
      break;
     }
     case 237:  {
      $49 = $42 & -32;
      $50 = ($49<<24>>24)==(-128);
      if (!($50)) {
       $$lcssa85 = $38;
       label = 21;
       break L6;
      }
      break;
     }
     default: {
      $53 = $42 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$lcssa87 = $38;
       label = 23;
       break L6;
      }
     }
     }
     $57 = $44&255;
     $58 = $57 & 192;
     $59 = ($58|0)==(128);
     if (!($59)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     }
     $60 = $17 << 12;
     $61 = $60 & 61440;
     $62 = $42&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $57 & 63;
     $67 = $65 | $66;
     $68 = ($67>>>0)>($Maxcode>>>0);
     $69 = ((($frm_nxt$1)) + 3|0);
     if ($68) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 40;
      break L6;
     } else {
      $frm_nxt$5 = $69;$nchar16_t$2 = $nchar16_t$0;
      break;
     }
    }
    $70 = ($16&255)<(245);
    if (!($70)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $71 = $frm_nxt$1;
    $72 = (($$pre42) - ($71))|0;
    $73 = ($72|0)<(4);
    $74 = (($mx) - ($nchar16_t$0))|0;
    $75 = ($74>>>0)<(2);
    $or$cond11 = $75 | $73;
    if ($or$cond11) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $76 = ((($frm_nxt$1)) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = ((($frm_nxt$1)) + 2|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = ((($frm_nxt$1)) + 3|0);
    $81 = HEAP8[$80>>0]|0;
    switch ($17|0) {
    case 240:  {
     $$off = (($77) + 112)<<24>>24;
     $82 = ($$off&255)<(48);
     if (!($82)) {
      $$lcssa83 = $71;
      label = 30;
      break L6;
     }
     break;
    }
    case 244:  {
     $85 = $77 & -16;
     $86 = ($85<<24>>24)==(-128);
     if (!($86)) {
      $$lcssa = $71;
      label = 32;
      break L6;
     }
     break;
    }
    default: {
     $89 = $77 & -64;
     $90 = ($89<<24>>24)==(-128);
     if (!($90)) {
      $$lcssa84 = $71;
      label = 34;
      break L6;
     }
    }
    }
    $93 = $79&255;
    $94 = $93 & 192;
    $95 = ($94|0)==(128);
    if (!($95)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $96 = $81&255;
    $97 = $96 & 192;
    $98 = ($97|0)==(128);
    if (!($98)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $99 = $17 << 18;
    $100 = $99 & 1835008;
    $101 = $77&255;
    $102 = $101 << 12;
    $103 = $102 & 258048;
    $104 = $103 | $100;
    $105 = $93 << 6;
    $106 = $105 & 4032;
    $107 = $104 | $106;
    $108 = $96 & 63;
    $109 = $107 | $108;
    $110 = ($109>>>0)>($Maxcode>>>0);
    if ($110) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $111 = (($nchar16_t$0) + 1)|0;
    $112 = ((($frm_nxt$1)) + 4|0);
    $frm_nxt$5 = $112;$nchar16_t$2 = $111;
   }
  } while(0);
  $113 = (($nchar16_t$2) + 1)|0;
  $frm_nxt$1 = $frm_nxt$5;$nchar16_t$0 = $113;
 }
 if ((label|0) == 19) {
  $47 = $frm;
  $48 = (($$lcssa86) - ($47))|0;
  $116 = $48;
 }
 else if ((label|0) == 21) {
  $51 = $frm;
  $52 = (($$lcssa85) - ($51))|0;
  $116 = $52;
 }
 else if ((label|0) == 23) {
  $55 = $frm;
  $56 = (($$lcssa87) - ($55))|0;
  $116 = $56;
 }
 else if ((label|0) == 30) {
  $83 = $frm;
  $84 = (($$lcssa83) - ($83))|0;
  $116 = $84;
 }
 else if ((label|0) == 32) {
  $87 = $frm;
  $88 = (($$lcssa) - ($87))|0;
  $116 = $88;
 }
 else if ((label|0) == 34) {
  $91 = $frm;
  $92 = (($$lcssa84) - ($91))|0;
  $116 = $92;
 }
 else if ((label|0) == 40) {
  $$pre = $frm;
  $114 = $frm_nxt$1$lcssa;
  $115 = (($114) - ($$pre))|0;
  $116 = $115;
 }
 return ($116|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8448);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $i$0 = 0;
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$0>>2]|0;
  $4 = (($2) - ($3))|0;
  $5 = $4 >> 2;
  $6 = ($i$0>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $8 = $3;
  $9 = (($8) + ($i$0<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   (__ZNSt3__114__shared_count16__release_sharedEv($10)|0);
  }
  $12 = (($i$0) + 1)|0;
  $i$0 = $12;
 }
 $7 = ((($this)) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = ((($this)) + 4|0);
   $$pre$i$i = HEAP32[$2>>2]|0;
   $3 = $$pre$i$i;
   while(1) {
    $4 = ($3|0)==($0|0);
    if ($4) {
     break;
    }
    $5 = ((($3)) + -4|0);
    HEAP32[$2>>2] = $5;
    $3 = $5;
   }
   $6 = ((($this)) + 16|0);
   $7 = ($6|0)==($0|0);
   if ($7) {
    $8 = ((($this)) + 128|0);
    HEAP8[$8>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8468);
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($this)) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c&255;
  $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(523)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$0>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$0>>0] = $7;
  $8 = ((($$0)) + 1|0);
  $$0 = $8;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c << 24 >> 24;
  $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(524)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$0>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$0>>0] = $7;
  $8 = ((($$0)) + 1|0);
  $$0 = $8;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  HEAP8[$$0>>0] = $1;
  $2 = ((($$01)) + 1|0);
  $3 = ((($$0)) + 1|0);
  $$0 = $3;$$01 = $2;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$0>>0] = $$dfault;
  $2 = ((($$01)) + 1|0);
  $3 = ((($$0)) + 1|0);
  $$0 = $3;$$01 = $2;
 }
 return ($high|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(525)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8520);
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,16564,4);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,16569,5);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8560);
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(8592)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,8592,$0);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(8612)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,8612,$0);
 return;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $1 = (($0) + ($c<<1)|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 & $m;
  $4 = ($3<<16>>16)!=(0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $$0 = $vec;$$01 = $low;
 while(1) {
  $3 = ($$01|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $6 = (($5) + ($4<<1)|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7&65535;
   $10 = $8;
  } else {
   $10 = 0;
  }
  $9 = $10&65535;
  HEAP16[$$0>>1] = $9;
  $11 = ((($$01)) + 4|0);
  $12 = ((($$0)) + 2|0);
  $$0 = $12;$$01 = $11;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $3 = (($2) + ($1<<1)|0);
   $4 = HEAP16[$3>>1]|0;
   $5 = $4 & $m;
   $6 = ($5<<16>>16)==(0);
   if (!($6)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $7 = ((($$0)) + 4|0);
  $$0 = $7;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0>>2]|0;
  $isascii = ($1>>>0)<(128);
  if (!($isascii)) {
   $$0$lcssa = $$0;
   break;
  }
  $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $3 = (($2) + ($1<<1)|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 & $m;
  $6 = ($5<<16>>16)==(0);
  if ($6) {
   $$0$lcssa = $$0;
   break;
  }
  $7 = ((($$0)) + 4|0);
  $$0 = $7;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $$0 = $low;
 while(1) {
  $3 = ($$0|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$0>>2] = $8;
  $9 = ((($$0)) + 4|0);
  $$0 = $9;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $$0 = $low;
 while(1) {
  $3 = ($$0|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $6 = (($5) + ($4<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = $4;
  }
  HEAP32[$$0>>2] = $8;
  $9 = ((($$0)) + 4|0);
  $$0 = $9;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$0>>2] = $2;
  $3 = ((($$01)) + 1|0);
  $4 = ((($$0)) + 4|0);
  $$0 = $4;$$01 = $3;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $3 = ($$01|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$0>>0] = $$dfault;
  $6 = ((($$01)) + 4|0);
  $7 = ((($$0)) + 1|0);
  $$0 = $7;$$01 = $6;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(449,($0|0),(16596|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (9044);
  ___cxa_throw(($0|0),(1448|0),(313|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8448);
 $2 = ((($this)) + 8|0);
 __THREW__ = 0;
 invoke_vii(526,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $82 = ___cxa_find_matching_catch_2()|0;
  $83 = tempRet0;
  $$1 = $83;$$12 = $82;
 } else {
  $5 = ((($this)) + 144|0);
  __THREW__ = 0;
  invoke_viii(380,($5|0),(14563|0),1);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $84 = ___cxa_find_matching_catch_2()|0;
   $85 = tempRet0;
   $$0 = $85;$$01 = $84;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ((($this)) + 12|0);
   $$pre$i$i$i = HEAP32[$9>>2]|0;
   $10 = $$pre$i$i$i;
   while(1) {
    $11 = ($10|0)==($8|0);
    if ($11) {
     break;
    }
    $12 = ((($10)) + -4|0);
    HEAP32[$9>>2] = $12;
    $10 = $12;
   }
   HEAP32[(17652)>>2] = 0;
   HEAP32[4412] = (6112);
   __THREW__ = 0;
   invoke_vii(527,($this|0),(17648|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   do {
    if ($14) {
     label = 42;
    } else {
     HEAP32[(17660)>>2] = 0;
     HEAP32[4414] = (6144);
     __THREW__ = 0;
     invoke_vii(528,($this|0),(17656|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      label = 42;
     } else {
      HEAP32[(17668)>>2] = 0;
      HEAP32[4416] = (8468);
      HEAP32[(17672)>>2] = 0;
      HEAP8[(17676)>>0] = 0;
      $17 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
      HEAP32[(17672)>>2] = $17;
      __THREW__ = 0;
      invoke_vii(529,($this|0),(17664|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       label = 42;
      } else {
       HEAP32[(17684)>>2] = 0;
       HEAP32[4420] = (8664);
       __THREW__ = 0;
       invoke_vii(530,($this|0),(17680|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        label = 42;
       } else {
        HEAP32[(17692)>>2] = 0;
        HEAP32[4422] = (8732);
        __THREW__ = 0;
        invoke_vii(531,($this|0),(17688|0));
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if ($23) {
         label = 42;
        } else {
         __THREW__ = 0;
         invoke_vii(532,(17696|0),1);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if ($25) {
          label = 42;
         } else {
          __THREW__ = 0;
          invoke_vii(533,($this|0),(17696|0));
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if ($27) {
           label = 42;
          } else {
           HEAP32[(17716)>>2] = 0;
           HEAP32[4428] = (8780);
           __THREW__ = 0;
           invoke_vii(534,($this|0),(17712|0));
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if ($29) {
            label = 42;
           } else {
            HEAP32[(17724)>>2] = 0;
            HEAP32[4430] = (8828);
            __THREW__ = 0;
            invoke_vii(535,($this|0),(17720|0));
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if ($31) {
             label = 42;
            } else {
             __ZNSt3__18numpunctIcEC2Ej(17728,1);
             __THREW__ = 0;
             invoke_vii(536,($this|0),(17728|0));
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if ($33) {
              label = 42;
             } else {
              __ZNSt3__18numpunctIwEC2Ej(17752,1);
              __THREW__ = 0;
              invoke_vii(537,($this|0),(17752|0));
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if ($35) {
               label = 42;
              } else {
               HEAP32[(17788)>>2] = 0;
               HEAP32[4446] = (6176);
               __THREW__ = 0;
               invoke_vii(538,($this|0),(17784|0));
               $36 = __THREW__; __THREW__ = 0;
               $37 = $36&1;
               if ($37) {
                label = 42;
               } else {
                HEAP32[(17796)>>2] = 0;
                HEAP32[4448] = (6240);
                __THREW__ = 0;
                invoke_vii(539,($this|0),(17792|0));
                $38 = __THREW__; __THREW__ = 0;
                $39 = $38&1;
                if ($39) {
                 label = 42;
                } else {
                 HEAP32[(17804)>>2] = 0;
                 HEAP32[4450] = (6304);
                 __THREW__ = 0;
                 invoke_vii(540,($this|0),(17800|0));
                 $40 = __THREW__; __THREW__ = 0;
                 $41 = $40&1;
                 if ($41) {
                  label = 42;
                 } else {
                  HEAP32[(17812)>>2] = 0;
                  HEAP32[4452] = (6356);
                  __THREW__ = 0;
                  invoke_vii(541,($this|0),(17808|0));
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   label = 42;
                  } else {
                   HEAP32[(17820)>>2] = 0;
                   HEAP32[4454] = (7904);
                   __THREW__ = 0;
                   invoke_vii(542,($this|0),(17816|0));
                   $44 = __THREW__; __THREW__ = 0;
                   $45 = $44&1;
                   if ($45) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17828)>>2] = 0;
                   HEAP32[4456] = (7960);
                   __THREW__ = 0;
                   invoke_vii(543,($this|0),(17824|0));
                   $46 = __THREW__; __THREW__ = 0;
                   $47 = $46&1;
                   if ($47) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17836)>>2] = 0;
                   HEAP32[4458] = (8016);
                   __THREW__ = 0;
                   invoke_vii(544,($this|0),(17832|0));
                   $48 = __THREW__; __THREW__ = 0;
                   $49 = $48&1;
                   if ($49) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17844)>>2] = 0;
                   HEAP32[4460] = (8072);
                   __THREW__ = 0;
                   invoke_vii(545,($this|0),(17840|0));
                   $50 = __THREW__; __THREW__ = 0;
                   $51 = $50&1;
                   if ($51) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17852)>>2] = 0;
                   HEAP32[4462] = (8128);
                   __THREW__ = 0;
                   invoke_vii(546,($this|0),(17848|0));
                   $52 = __THREW__; __THREW__ = 0;
                   $53 = $52&1;
                   if ($53) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17860)>>2] = 0;
                   HEAP32[4464] = (8156);
                   __THREW__ = 0;
                   invoke_vii(547,($this|0),(17856|0));
                   $54 = __THREW__; __THREW__ = 0;
                   $55 = $54&1;
                   if ($55) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17868)>>2] = 0;
                   HEAP32[4466] = (8184);
                   __THREW__ = 0;
                   invoke_vii(548,($this|0),(17864|0));
                   $56 = __THREW__; __THREW__ = 0;
                   $57 = $56&1;
                   if ($57) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17876)>>2] = 0;
                   HEAP32[4468] = (8212);
                   __THREW__ = 0;
                   invoke_vii(549,($this|0),(17872|0));
                   $58 = __THREW__; __THREW__ = 0;
                   $59 = $58&1;
                   if ($59) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17884)>>2] = 0;
                   HEAP32[4470] = (6408);
                   HEAP32[(17888)>>2] = (6456);
                   __THREW__ = 0;
                   invoke_vii(550,($this|0),(17880|0));
                   $60 = __THREW__; __THREW__ = 0;
                   $61 = $60&1;
                   if ($61) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17900)>>2] = 0;
                   HEAP32[4474] = (6492);
                   HEAP32[(17904)>>2] = (6540);
                   __THREW__ = 0;
                   invoke_vii(551,($this|0),(17896|0));
                   $62 = __THREW__; __THREW__ = 0;
                   $63 = $62&1;
                   if ($63) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17916)>>2] = 0;
                   HEAP32[4478] = (8644);
                   __THREW__ = 0;
                   $64 = (invoke_i(470)|0);
                   $65 = __THREW__; __THREW__ = 0;
                   $66 = $65&1;
                   if ($66) {
                    $67 = ___cxa_find_matching_catch_2()|0;
                    $68 = tempRet0;
                    $eh$lpad$body$index3Z2D = $68;$eh$lpad$body$indexZ2D = $67;
                    break;
                   }
                   HEAP32[(17920)>>2] = $64;
                   HEAP32[4478] = (7856);
                   __THREW__ = 0;
                   invoke_vii(552,($this|0),(17912|0));
                   $69 = __THREW__; __THREW__ = 0;
                   $70 = $69&1;
                   if ($70) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17932)>>2] = 0;
                   HEAP32[4482] = (8644);
                   __THREW__ = 0;
                   $71 = (invoke_i(470)|0);
                   $72 = __THREW__; __THREW__ = 0;
                   $73 = $72&1;
                   if ($73) {
                    $74 = ___cxa_find_matching_catch_2()|0;
                    $75 = tempRet0;
                    $eh$lpad$body$index3Z2D = $75;$eh$lpad$body$indexZ2D = $74;
                    break;
                   }
                   HEAP32[(17936)>>2] = $71;
                   HEAP32[4482] = (7880);
                   __THREW__ = 0;
                   invoke_vii(553,($this|0),(17928|0));
                   $76 = __THREW__; __THREW__ = 0;
                   $77 = $76&1;
                   if ($77) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17948)>>2] = 0;
                   HEAP32[4486] = (8240);
                   __THREW__ = 0;
                   invoke_vii(554,($this|0),(17944|0));
                   $78 = __THREW__; __THREW__ = 0;
                   $79 = $78&1;
                   if ($79) {
                    label = 42;
                    break;
                   }
                   HEAP32[(17956)>>2] = 0;
                   HEAP32[4488] = (8272);
                   __THREW__ = 0;
                   invoke_vii(555,($this|0),(17952|0));
                   $80 = __THREW__; __THREW__ = 0;
                   $81 = $80&1;
                   if ($81) {
                    label = 42;
                    break;
                   }
                   return;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 42) {
    $86 = ___cxa_find_matching_catch_2()|0;
    $87 = tempRet0;
    $eh$lpad$body$index3Z2D = $87;$eh$lpad$body$indexZ2D = $86;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
  }
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
  $$1 = $$0;$$12 = $$01;
 }
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vii(556,($this|0),($__n|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
   ___resumeException($11|0);
   // unreachable;
  }
  $$pre$i = HEAP32[$0>>2]|0;
  $$0$i = $__n;$6 = $$pre$i;
  while(1) {
   HEAP32[$6>>2] = 0;
   $7 = HEAP32[$0>>2]|0;
   $8 = ((($7)) + 4|0);
   HEAP32[$0>>2] = $8;
   $9 = (($$0$i) + -1)|0;
   $10 = ($9|0)==(0);
   if ($10) {
    break;
   } else {
    $$0$i = $9;$6 = $8;
   }
  }
 }
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ((($this)) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $3 & $$not$i$i;
 if ($or$cond$i$i) {
  $4 = ((($this)) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = ((($this)) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = ((($this)) + 8|0);
 HEAP32[$9>>2] = $8;
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18804)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = ((($this)) + 8|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)>($id>>>0);
 do {
  if ($6) {
   $7 = $3;
   $$pre$phiZ2D = $0;$15 = $7;
  } else {
   $8 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(557,($0|0),($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $$pre = HEAP32[$0>>2]|0;
    $$pre$phiZ2D = $0;$15 = $$pre;
    break;
   }
   $11 = ___cxa_find_matching_catch_2()|0;
   $12 = tempRet0;
   $13 = ($f|0)==(0|0);
   if (!($13)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   }
   ___resumeException($11|0);
   // unreachable;
  }
 } while(0);
 $14 = (($15) + ($id<<2)|0);
 $16 = HEAP32[$14>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $19 = $15;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
  $$pre2 = HEAP32[$$pre$phiZ2D>>2]|0;
  $19 = $$pre2;
 }
 $18 = (($19) + ($id<<2)|0);
 HEAP32[$18>>2] = $f;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = (($1) - ($2))|0;
 $4 = $3 >> 2;
 $5 = ($4>>>0)<($__sz>>>0);
 $6 = $2;
 $7 = $1;
 L1: do {
  if ($5) {
   $8 = (($__sz) - ($4))|0;
   __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
  } else {
   $9 = ($4>>>0)>($__sz>>>0);
   if ($9) {
    $10 = (($6) + ($__sz<<2)|0);
    $11 = $7;
    while(1) {
     $12 = ($11|0)==($10|0);
     if ($12) {
      break L1;
     }
     $13 = ((($11)) + -4|0);
     HEAP32[$0>>2] = $13;
     $11 = $13;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$0$i3 = 0, $$pre$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = $4 >> 2;
 $6 = ($5>>>0)<($__n>>>0);
 if ($6) {
  $13 = ((($this)) + 16|0);
  $14 = HEAP32[$this>>2]|0;
  $15 = (($3) - ($14))|0;
  $16 = $15 >> 2;
  $17 = (($16) + ($__n))|0;
  $18 = ($17>>>0)>(1073741823);
  if ($18) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $19 = (($1) - ($14))|0;
  $20 = $19 >> 2;
  $21 = ($20>>>0)<(536870911);
  if ($21) {
   $22 = $19 >> 1;
   $23 = ($22>>>0)<($17>>>0);
   $24 = $23 ? $17 : $22;
   $$0$i3 = $24;
  } else {
   $$0$i3 = 1073741823;
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i3,$16,$13);
  $25 = ((($__v)) + 8|0);
  $$pre$i1 = HEAP32[$25>>2]|0;
  $26 = $__n << 2;
  _memset(($$pre$i1|0),0,($26|0))|0;
  $scevgep = (($$pre$i1) + ($__n<<2)|0);
  HEAP32[$25>>2] = $scevgep;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else {
  $7 = $3;
  $$0$i = $__n;$8 = $7;
  while(1) {
   HEAP32[$8>>2] = 0;
   $9 = HEAP32[$2>>2]|0;
   $10 = ((($9)) + 4|0);
   HEAP32[$2>>2] = $10;
   $11 = (($$0$i) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    break;
   } else {
    $$0$i = $11;$8 = $10;
   }
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = ((($__a)) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $5 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = ((($this)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($this)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 $13 = ((($this)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $4 = $0;
 $5 = (($2) - ($4))|0;
 $6 = $5 >> 2;
 $7 = HEAP32[$3>>2]|0;
 $8 = (0 - ($6))|0;
 $9 = (($7) + ($8<<2)|0);
 HEAP32[$3>>2] = $9;
 _memcpy(($9|0),($0|0),($5|0))|0;
 $10 = HEAP32[$this>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $11;
 HEAP32[$3>>2] = $10;
 $12 = ((($__v)) + 8|0);
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$12>>2]|0;
 HEAP32[$1>>2] = $14;
 HEAP32[$12>>2] = $13;
 $15 = ((($this)) + 8|0);
 $16 = ((($__v)) + 12|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$15>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $19;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $$pre$i$i$i = HEAP32[$2>>2]|0;
 $3 = $$pre$i$i$i;
 while(1) {
  $4 = ($3|0)==($1|0);
  if ($4) {
   break;
  }
  $5 = ((($3)) + -4|0);
  HEAP32[$2>>2] = $5;
  $3 = $5;
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $8 = ((($this)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($6|0);
   if ($10) {
    $11 = ((($9)) + 112|0);
    HEAP8[$11>>0] = 0;
    break;
   } else {
    __ZdlPv($6);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18812)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18820)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18852)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20612)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8400);
 __THREW__ = 0;
 $2 = (invoke_i(470)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = ((($this)) + 8|0);
  HEAP32[$5>>2] = $2;
  return;
 }
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20620)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20628)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20636)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__18numpunctIcEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8520);
 $2 = ((($this)) + 8|0);
 HEAP8[$2>>0] = 46;
 $3 = ((($this)) + 9|0);
 HEAP8[$3>>0] = 44;
 $4 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($__i$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $6;
 }
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18832)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__18numpunctIwEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = ((($this)) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = (8560);
 $2 = ((($this)) + 8|0);
 HEAP32[$2>>2] = 46;
 $3 = ((($this)) + 12|0);
 HEAP32[$3>>2] = 44;
 $4 = ((($this)) + 16|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($__i$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $6;
 }
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18860)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18844)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18868)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18876)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(18884)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20532)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20540)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20548)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20556)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20564)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20572)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20580)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20588)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(19696)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20508)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20516)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20524)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20596)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(20604)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[17960]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((17960|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(558)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((17960|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[5162] = 20644;
     ___cxa_guard_release((17960|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[5162]|0;
 return ($6|0);
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(17968,1);
 HEAP32[5161] = 17968;
 return (20644|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[5163] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return (20652|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18128]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((18128|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(559)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((18128|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[5164] = 20652;
     ___cxa_guard_release((18128|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[5164]|0;
 return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(560)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9has_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 1023]($this);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($msg)|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9004);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(561,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9024);
 $0 = ((($this)) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($msg)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($msg)) + 1|0);
 $7 = $3 ? $6 : $5;
 __THREW__ = 0;
 invoke_vii(561,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9024);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(561,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = $this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($condition)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$condition>>2]|0;
  $11 = ($9|0)==($10|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($code)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $2 & $4;
 return ($5|0);
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror($ev)|0);
 $1 = (_strlen($0)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $10 = $9;
   } else {
    $6 = ((($what_arg)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $10 = $7;
   }
   $11 = ($10|0)==(0);
   if ($11) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,16699)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = ((($ec)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
   $18 = HEAP8[$0>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   $21 = ((($0)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($0)) + 1|0);
   $24 = $20 ? $23 : $22;
   $25 = ((($0)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $18&255;
   $28 = $27 >>> 1;
   $29 = $20 ? $28 : $26;
   __THREW__ = 0;
   (invoke_iiii(382,($what_arg|0),($24|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $32 = ___cxa_find_matching_catch_2()|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    ___resumeException($32|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    break;
   }
  }
 } while(0);
 ;HEAP32[$agg$result>>2]=HEAP32[$what_arg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $34 = (($what_arg) + ($__i$0$i$i<<2)|0);
  HEAP32[$34>>2] = 0;
  $35 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $35;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen($what_arg)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(562,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $$0 = $19;$$01 = $18;
  } else {
   __THREW__ = 0;
   invoke_vii(563,($this|0),($0|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    $$0 = $21;$$01 = $20;
    break;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
    HEAP32[$this>>2] = (8876);
    $7 = ((($this)) + 8|0);
    $8 = $ec;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = $7;
    $15 = $14;
    HEAP32[$15>>2] = $10;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP32[$17>>2] = $13;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((20660|0))|0);
 while(1) {
  $0 = HEAP32[$flag>>2]|0;
  $1 = ($0|0)==(1);
  if (!($1)) {
   break;
  }
  (_pthread_cond_wait((20688|0),(20660|0))|0);
 }
 $2 = HEAP32[$flag>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   HEAP32[$flag>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(564,(20660|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    invoke_vi($func|0,($arg|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     (invoke_ii(565,(20660|0))|0);
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      HEAP32[$flag>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(564,(20660|0))|0);
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if (!($11)) {
       __THREW__ = 0;
       (invoke_ii(566,(20688|0))|0);
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if (!($13)) {
        break;
       }
      }
     }
    }
   }
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   (___cxa_begin_catch(($14|0))|0);
   __THREW__ = 0;
   (invoke_ii(565,(20660|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    HEAP32[$flag>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(564,(20660|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     __THREW__ = 0;
     (invoke_ii(566,(20688|0))|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      __THREW__ = 0;
      invoke_v(567);
      $22 = __THREW__; __THREW__ = 0;
     }
    }
   }
   $23 = ___cxa_find_matching_catch_2()|0;
   $24 = tempRet0;
   __THREW__ = 0;
   invoke_v(441);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch_3(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   } else {
    ___resumeException($23|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((20660|0))|0);
  }
 } while(0);
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[2243]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(17079,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[334]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](1336,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[2243]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(16993,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[2243]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(17038,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(17117,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((20736|0),(568|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[5185]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(16805,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((20740|0),(569|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(16755,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[5185]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(16702,$vararg_buffer);
  // unreachable;
 }
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[475]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$2 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$2 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,1376,1344,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$2 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($static_ptr) + ($2)|0);
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $6 = ((($info)) + 4|0);
 HEAP32[$6>>2] = $static_ptr;
 $7 = ((($info)) + 8|0);
 HEAP32[$7>>2] = $static_type;
 $8 = ((($info)) + 12|0);
 HEAP32[$8>>2] = $src2dst_offset;
 $9 = ((($info)) + 16|0);
 $10 = ((($info)) + 20|0);
 $11 = ((($info)) + 24|0);
 $12 = ((($info)) + 28|0);
 $13 = ((($info)) + 32|0);
 $14 = ((($info)) + 40|0);
 $15 = ($5|0)==($dst_type|0);
 dest=$9; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+36>>1]=0|0;HEAP8[$9+38>>0]=0|0;
 L1: do {
  if ($15) {
   $16 = ((($info)) + 48|0);
   HEAP32[$16>>2] = 1;
   $17 = HEAP32[$dst_type>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_viiiiii[$19 & 511]($dst_type,$info,$3,$3,1,0);
   $20 = HEAP32[$11>>2]|0;
   $21 = ($20|0)==(1);
   $$ = $21 ? $3 : 0;
   $dst_ptr$0 = $$;
  } else {
   $22 = ((($info)) + 36|0);
   $23 = HEAP32[$5>>2]|0;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_viiiii[$25 & 511]($5,$info,$3,1,0);
   $26 = HEAP32[$22>>2]|0;
   switch ($26|0) {
   case 0:  {
    $27 = HEAP32[$14>>2]|0;
    $28 = ($27|0)==(1);
    $29 = HEAP32[$12>>2]|0;
    $30 = ($29|0)==(1);
    $or$cond = $28 & $30;
    $31 = HEAP32[$13>>2]|0;
    $32 = ($31|0)==(1);
    $or$cond3 = $or$cond & $32;
    $33 = HEAP32[$10>>2]|0;
    $$8 = $or$cond3 ? $33 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $34 = HEAP32[$11>>2]|0;
   $35 = ($34|0)==(1);
   if (!($35)) {
    $36 = HEAP32[$14>>2]|0;
    $37 = ($36|0)==(0);
    $38 = HEAP32[$12>>2]|0;
    $39 = ($38|0)==(1);
    $or$cond5 = $37 & $39;
    $40 = HEAP32[$13>>2]|0;
    $41 = ($40|0)==(1);
    $or$cond7 = $or$cond5 & $41;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $42 = HEAP32[$9>>2]|0;
   $dst_ptr$0 = $42;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $44 = ((($this)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 511]($45,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off02 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off02 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off02) {
          label = 17;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($is_dst_type_derived_from_static_type$0$off02) {
        label = 17;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $43 = 3;
     }
     HEAP32[$20>>2] = $43;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 $0 = (invoke_i(570)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $45 = ___cxa_find_matching_catch_3(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    invoke_v($18|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     __THREW__ = 0;
     invoke_vii(571,(17129|0),($vararg_buffer|0));
     $21 = __THREW__; __THREW__ = 0;
    }
    $22 = ___cxa_find_matching_catch_3(0|0)|0;
    $23 = tempRet0;
    (___cxa_begin_catch(($22|0))|0);
    __THREW__ = 0;
    invoke_vii(571,(17169|0),($vararg_buffer1|0));
    $24 = __THREW__; __THREW__ = 0;
    $25 = ___cxa_find_matching_catch_3(0|0)|0;
    $26 = tempRet0;
    __THREW__ = 0;
    invoke_v(441);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch_3(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ___clang_call_terminate($25);
     // unreachable;
    }
   }
  }
 }
 $31 = HEAP32[2222]|0;HEAP32[2222] = (($31+0)|0);
 $32 = $31;
 __THREW__ = 0;
 invoke_v($32|0);
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if (!($34)) {
  __THREW__ = 0;
  invoke_vii(571,(17129|0),($vararg_buffer3|0));
  $35 = __THREW__; __THREW__ = 0;
 }
 $36 = ___cxa_find_matching_catch_3(0|0)|0;
 $37 = tempRet0;
 (___cxa_begin_catch(($36|0))|0);
 __THREW__ = 0;
 invoke_vii(571,(17169|0),($vararg_buffer5|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = ___cxa_find_matching_catch_3(0|0)|0;
 $40 = tempRet0;
 __THREW__ = 0;
 invoke_v(441);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch_3(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  ___clang_call_terminate($39);
  // unreachable;
 }
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (17232|0);
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9004);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9024);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt14overflow_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (17346|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&255;
  $6 = ((($info)) + 53|0);
  $7 = ($4&65535) >>> 8;
  $8 = $7&255;
  $9 = ((($this)) + 16|0);
  $10 = ((($this)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (((($this)) + 16|0) + ($11<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$6>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($9,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $13 = ($11|0)>(1);
  L4: do {
   if ($13) {
    $14 = ((($this)) + 24|0);
    $15 = ((($info)) + 24|0);
    $16 = ((($this)) + 8|0);
    $17 = ((($info)) + 54|0);
    $p$0 = $14;
    while(1) {
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if (!($19)) {
      break L4;
     }
     $20 = HEAP16[$3>>1]|0;
     $21 = $20&255;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $28 = ($20&65535)<(256);
      if (!($28)) {
       $29 = HEAP32[$16>>2]|0;
       $30 = $29 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        break L4;
       }
      }
     } else {
      $23 = HEAP32[$15>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       break L4;
      }
      $25 = HEAP32[$16>>2]|0;
      $26 = $25 & 2;
      $27 = ($26|0)==(0);
      if ($27) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$6>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $32 = ((($p$0)) + 8|0);
     $33 = ($32>>>0)<($12>>>0);
     if ($33) {
      $p$0 = $32;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $5;
  HEAP8[$6>>0] = $8;
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off0 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$0 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 16|0);
     $24 = ((($this)) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (((($this)) + 16|0) + ($25<<3)|0);
     $27 = ((($info)) + 52|0);
     $28 = ((($info)) + 53|0);
     $29 = ((($info)) + 54|0);
     $30 = ((($this)) + 8|0);
     $31 = ((($info)) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off0 = 0;$is_dst_type_derived_from_static_type$0$off0 = 0;$p$0 = $23;
     L34: while(1) {
      $32 = ($p$0>>>0)<($26>>>0);
      if (!($32)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
       label = 20;
       break;
      }
      HEAP8[$27>>0] = 0;
      HEAP8[$28>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$29>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
       label = 20;
       break;
      }
      $35 = HEAP8[$28>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off0;
       } else {
        $37 = HEAP8[$27>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$30>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = 1;
          label = 20;
          break L34;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$31>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         label = 25;
         break L34;
        }
        $41 = HEAP32[$30>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         label = 25;
         break L34;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = ((($p$0)) + 8|0);
      $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off0 = $is_dst_type_derived_from_static_type$1$off0;$p$0 = $47;
     }
     do {
      if ((label|0) == 20) {
       if (!($does_dst_type_point_to_our_static_type$0$off0$lcssa)) {
        HEAP32[$14>>2] = $current_ptr;
        $48 = ((($info)) + 40|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = (($49) + 1)|0;
        HEAP32[$48>>2] = $50;
        $51 = ((($info)) + 36|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = ($52|0)==(1);
        if ($53) {
         $54 = HEAP32[$31>>2]|0;
         $55 = ($54|0)==(2);
         if ($55) {
          HEAP8[$29>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           label = 25;
           break;
          } else {
           $56 = 4;
           break;
          }
         }
        }
       }
       if ($is_dst_type_derived_from_static_type$2$off0) {
        label = 25;
       } else {
        $56 = 4;
       }
      }
     } while(0);
     if ((label|0) == 25) {
      $56 = 3;
     }
     HEAP32[$20>>2] = $56;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (9104);
 return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 1023]();
 }
 if ((label|0) == 5) {
  $5 = (___cxa_allocate_exception(4)|0);
  HEAP32[$5>>2] = (8984);
  ___cxa_throw(($5|0),(1400|0),(310|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($$lcssa|0);
 }
 return (0)|0;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5186]|0;HEAP32[5186] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8984);
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,1376,1528,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(1400|0),(310|0));
 // unreachable;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&127](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0;
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_lock(p0|0)|0;
}
function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0;
}
function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(7);return 0;
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(9);
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b11(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(11);
}
function b12(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(12);
}
function b13(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(13);return 0;
}
function b14(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(14);return 0;
}
function b15(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(15);return +0;
}
function b16() {
 ; nullFunc_i(16);return 0;
}
function b17(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(17);return 0;
}
function b18(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(18);
}
function b19() {
 ; nullFunc_v(19);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function ___cxa_rethrow__wrapper() {
 ; ___cxa_rethrow();
}
function b20(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(20);return 0;
}
function b21(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(21);return 0;
}
function b22(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(22);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b0,b0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b0,b0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,__ZN9ObjMaster3Obj26extendObjectMaterialGroupsERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS_26TextureDataHoldingMaterialEPNS_11FaceElementEi,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiiiiid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b2,b2,b2,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,b3,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b3,b3,b3,b3,b3,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b3,b3
,b3,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,b3,b3,b3,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3
,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b3,b3,b3,b3,b3,b3
,b3,b3,b3,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3
,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,b3,b3,b3,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,b3,b3,b3,__ZNSt3__16locale5facetD2Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16locale5__impD2Ev
,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b3,b3,b3,b3,b3,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev
,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt14overflow_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,__ZN9ObjMaster13ObjMeshObjectD2Ev
,b3,b3,b3,b3,b3,b3,b3,b3,__ZN9ObjMaster6MtlLibC2Ev,b3,b3,b3,b3,b3,b3,__ZN9ObjMaster26TextureDataHoldingMaterialC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZN9ObjMaster23ObjectMaterialFaceGroupC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,_cleanup_562,_cleanup_530,b3,b3,b3
,b3,b3,b3,b3,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,___cxx_global_array_dtor,b3,___cxx_global_array_dtor_69,___cxx_global_array_dtor_117,___cxx_global_array_dtor_54,b3,___cxx_global_array_dtor_93,___cxx_global_array_dtor_120,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,_freelocale,b3,__ZNSt3__112__do_nothingEPv,b3,__ZNSt3__121__throw_runtime_errorEPKc,b3,b3,b3,b3,_free,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv
,b4,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,__ZNKSt3__18messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__18messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,__ZL21handleViewportReshapeii,b4,b4,__ZN9ObjMaster13ObjMeshObjectC2ERKNS_3ObjE,b4,__ZNKSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj,b4,b4,b4,__ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE7reserveEj,__ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE7reserveEj,__ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE7reserveEj,__ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE7reserveEj,b4,b4,b4,b4,b4,__ZN9ObjMaster13VertexElementC2EPKc,__ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_,b4,__ZN9ObjMaster20VertexTextureElementC2EPKc,__ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_,b4,__ZN9ObjMaster19VertexNormalElementC2EPKc,__ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_,b4,__ZN9ObjMaster11FaceElementC2EPKc
,__ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_,b4,b4,b4,b4,__ZN9ObjMaster6UseMtl12fetchMtlNameEPKc,b4,b4,__ZN9ObjMaster18ObjectGroupElement18getObjectGroupNameEPKc,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b4,__ZNKSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIN9ObjMaster13VertexElementENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNKSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIN9ObjMaster20VertexTextureElementENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNKSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIN9ObjMaster19VertexNormalElementENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNKSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIN9ObjMaster11FaceElementENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEj,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,__ZN9ObjMaster26TextureDataHoldingMaterialC2ERKS0_,b4,b4,b4
,b4,b4,__ZNSt3__16vectorIhNS_9allocatorIhEEEC2ERKS3_,__ZNSt3__16vectorIfNS_9allocatorIfEEEC2ERKS3_,__ZNSt3__16vectorIfNS_9allocatorIfEEE8allocateEj,b4,__ZNSt3__16vectorIhNS_9allocatorIhEEE8allocateEj,b4,__ZNKSt3__16vectorIfNS_9allocatorIfEEE17__annotate_shrinkEj,__ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_shrinkEj,b4,__ZNSt3__16vectorIjNS_9allocatorIjEEE7reserveEj,__ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE7reserveEj,b4,b4,b4,__ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIRKjEEvOT_,__ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_,__ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE,__ZNSt3__16vectorI15VertexStructureNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,b4,b4,b4,b4,__ZN9ObjMaster8Material13fetchRGBParamERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b4,__ZN9ObjMaster8Material16fetchStringParamERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b4,b4,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_
,b4,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj,b4,b4,b4,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_,b4,b4,b4,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,b4,b4,b4,__ZNSt3__18ios_base4initEPv,b4,b4,__ZNSt3__18ios_base5clearEj,b4,__ZNSt3__18ios_base4moveERS0_,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2EOS3_,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt13runtime_errorC2EPKc
,__ZNSt11logic_errorC2EPKc,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,b4,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw
,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_
,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b4,b4,b4,__ZNSt3__118__libcpp_refstringC2EPKc,b4,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,b4,b4
,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b5,b5,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd
,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b5,b5,b5,b5,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b5,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b5,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b5,b5,b5,b5,b5,b5,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b5,b5,b5,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b5
,b5,b5,b5,b5,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b6,b6,b6,___stdio_close,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b6,b6,b6,b6,__ZNKSt13runtime_error4whatEv,b6,b6,__ZNKSt3__119__iostream_category4nameEv,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b6,b6,b6,b6,b6
,b6,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b6,b6,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b6,b6,b6,b6,b6,b6
,b6,b6,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b6,b6,b6,b6
,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b6,b6,b6,b6,b6,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,b6,b6,b6,b6,b6,__ZNKSt8bad_cast4whatEv,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18ios_base6getlocEv,b6,b6,__ZN9ObjMaster13VertexElement10isParsableEPKc,b6,b6,__ZN9ObjMaster20VertexTextureElement10isParsableEPKc,b6,b6,__ZN9ObjMaster19VertexNormalElement10isParsableEPKc,b6,b6,__ZN9ObjMaster11FaceElement10isParsableEPKc,b6
,b6,__ZN9ObjMaster6MtlLib10isParsableEPKc,b6,__ZN9ObjMaster6UseMtl10isParsableEPKc,b6,b6,b6,__ZN9ObjMaster18ObjectGroupElement10isParsableEPKc,b6,b6,__ZN9ObjMaster6MtlLib16getMaterialCountEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__111char_traitsIcE6lengthEPKc,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__Znwj,b6,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv,b6,_fclose,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_uselocale,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_wcslen,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiii = [b8,b8,__ZNK9ObjMaster16FileAssetLibrary14getAssetStreamEPKcS2_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,b8,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b8,b8,___stdio_write,___stdio_seek,___stdout_write
,_sn_write,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b8,b8,b8,b8,b8,b8
,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b8,b8,b8,b8,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b8,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b8,b8,__ZNKSt3__15ctypeIcE9do_narrowEcc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__15ctypeIwE5do_isEtw,b8,b8
,b8,b8,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b8,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b8,b8,__ZNKSt3__15ctypeIwE9do_narrowEwc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_fprintf,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b8,b8,b8,b8,b8,__ZNSt3__111char_traitsIcE7compareEPKcS3_j
,__ZNSt3__121__murmur2_or_cityhashIjLj32EEclEPKvj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,___stdio_read,_do_read_517,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_newlocale,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_vasprintf
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b8,b8,b8
,b8,b8,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b8,b8,b8,b8,b8,b8,_wcrtomb,b8,b8,_mbtowc,_mbrlen,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b9,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b10,b10,b10,b10,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN9ObjMaster3Obj18constructionHelperERK12AssetLibraryPKcS5_ii,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_viiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b11,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b11,b11
,b11,b11,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_viiiiiiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b12,b12,b12,b12,b12,b12,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b12
,b12,b12,b12,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b12,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_iii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,b13,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,__ZNKSt3__15ctypeIcE10do_toupperEc,b13,__ZNKSt3__15ctypeIcE10do_tolowerEc,b13,__ZNKSt3__15ctypeIcE8do_widenEc,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,__ZNKSt3__15ctypeIwE10do_toupperEw,b13,__ZNKSt3__15ctypeIwE10do_tolowerEw,b13,__ZNKSt3__15ctypeIwE8do_widenEc,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__16locale9use_facetERNS0_2idE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZL12isStartsWithRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_,b13,__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEEixEOS6_,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE4findIS2_EENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_,__ZNSt3__113unordered_mapI16IndexTargetSlicejNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorINS_4pairIKS1_jEEEEEixERS8_,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__111char_traitsIcE2eqEcc,b13,b13,b13,b13,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,b13
,b13,b13,b13,b13,__ZL12isStartsWithRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5__83,b13,__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSE_,b13,b13,b13,b13,b13,b13,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__16locale9has_facetERNS0_2idE,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,_isxdigit_l,_isdigit_l,b13,b13,b13,b13,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b13,b13,b13,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_iiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b14
,b14,b14,b14,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b14,b14,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b14,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b14,b14,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b14,b14,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b14,b14,b14,b14,b14,b14,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b14,b14,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b14,b14,b14,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b14,b14,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b14,b14,b14,b14,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b14,b14,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,_wcsnrtombs,b14,_mbsnrtowcs,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_diii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_i = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNSt3__16__clocEv,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,___ctype_toupper_loc,___ctype_tolower_loc,___ctype_b_loc,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNSt3__16locale5__imp12make_classicEv,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b16,b16,b16,b16,b16,b16,b16,b16
,b16,___cxa_get_globals_fast,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_iiiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_
,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b17,b17,b17,b17,b17,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcic,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,b17,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b17,b17,b17,b17,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b17,b17,b17,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_mbsrtowcs,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,_catgets,b17,b17,b17,_mbrtowc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_viii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__114error_category23default_error_conditionEi,b18,b18,__ZNKSt3__119__iostream_category7messageEi,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,__ZL23handleSpecialGlutEventsiii,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,__ZN9ObjMaster6MtlLib23getNonLoadedMaterialForENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b18,b18,b18,b18,b18,b18,__ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster23ObjectMaterialFaceGroupEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE20__node_insert_uniqueEPNS_11__hash_nodeISA_PvEE,b18
,b18,b18,b18,b18,b18,__ZNSt3__16vectorIfNS_9allocatorIfEEE18__construct_at_endIPfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_,b18,__ZNSt3__16vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112__hash_tableINS_17__hash_value_typeI16IndexTargetSlicejEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS3_PvEE,__ZNSt3__16vectorIfNS_9allocatorIfEEE18__construct_at_endIPKfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_,b18,b18,b18,b18,b18,__ZNSt3__16vectorIfNS_9allocatorIfEEE6assignIPfEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_,b18,b18
,__ZN9ObjMaster8MaterialC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6vectorIS7_NS5_IS7_EEEE,b18,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_,b18,b18,b18,b18,__ZN9ObjMaster26TextureDataHoldingMaterialC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6vectorIS7_NS5_IS7_EEEE,__ZN9ObjMaster6MtlLib25updateCurrentMaterialNameEPc,b18,b18,__ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN9ObjMaster26TextureDataHoldingMaterialEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE20__node_insert_uniqueEPNS_11__hash_nodeISA_PvEE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b18,b18,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b,b18,b18,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b18,b18,b18,b18,b18
,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_v = [b19,___cxa_pure_virtual__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZL25default_terminate_handlerv,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,__ZL4idlev,b19,__ZL8draw_triv,b19,b19,__ZL9setup_triv,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,___cxa_end_catch__wrapper,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZSt17__throw_bad_allocv,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,___cxa_rethrow__wrapper,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_iiiiiiiii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b20,b20,b20,b20,b20,b20,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20];
var FUNCTION_TABLE_iiiiid = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_viiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__17collateIcE12do_transformEPKcS3_
,b22,b22,b22,b22,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b22,b22,b22,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,__ZN9ObjMaster6MtlLibC2EPcPKcRK12AssetLibrary,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN9ObjMaster13ObjMeshObject14creationHelperERKNS_3ObjEPKNS_11FaceElementEi,b22,b22,__ZN16IndexTargetSliceC2EPKN9ObjMaster13VertexElementEPKNS0_20VertexTextureElementEPKNS0_19VertexNormalElementE,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN9ObjMaster6MtlLib18constructionHelperEPcPKcRK12AssetLibrary,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_showobj_cpp: __GLOBAL__sub_I_showobj_cpp, __GLOBAL__sub_I_MtlLib_cpp: __GLOBAL__sub_I_MtlLib_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real___GLOBAL__sub_I_showobj_cpp = asm["__GLOBAL__sub_I_showobj_cpp"]; asm["__GLOBAL__sub_I_showobj_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_showobj_cpp.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real___GLOBAL__sub_I_MtlLib_cpp = asm["__GLOBAL__sub_I_MtlLib_cpp"]; asm["__GLOBAL__sub_I_MtlLib_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_MtlLib_cpp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var __GLOBAL__sub_I_showobj_cpp = Module["__GLOBAL__sub_I_showobj_cpp"] = asm["__GLOBAL__sub_I_showobj_cpp"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var __GLOBAL__sub_I_MtlLib_cpp = Module["__GLOBAL__sub_I_MtlLib_cpp"] = asm["__GLOBAL__sub_I_MtlLib_cpp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===




function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



